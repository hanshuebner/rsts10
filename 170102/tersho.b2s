1	SUB TERSHO (FIRQB%(), FQBEXT%(), FIRQ2%(), C1$, FULL%)		      &
\	ON ERROR GOTO 19000						      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : TERSHO					      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : JJT,SEL					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1990, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL TERSHO (FIRQB%(), FQBEXT%(), FIRQ2%(), C1$)	      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!								      &
	!	FIRQB%()	I	Terminal Characteristics Part I	      &
	!	FQBEXT%()	I	Terminal Characteristics Part II      &
	!	FIRQ2%()	I	Device Configuration Characteristics  &
	!	C1$		I	Device Type			      &
	!	FULL%		I	Full or brief display flag	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.6-08	18-Feb-88	(JJT) Add Lat Server Port ID	      &
	! V9.7-03	06-Jan-89	(JJT) Add Answerback		      &
	! V10.0-01	25-Jul-89	(SEL) Add Line_editing, Insert and    &
	!					Overstrike		      &
	! V10.0-01	27-Jul-89	(SEL) Print to OUT.CHN% for /[NO]OUTPUT &
	! V10.0-0C	31-Aug-89	(SEL) Change syscall to lookup Insert, &
	!					Overstrike and Line_editing   &
	!				      Add Recall and Operator Services &
	! V10.0-F1	14-Nov-89	(SEL) Add info msg if Line Editing is &
	!					disabled due to NOANSI.	      &
	! V10.0-F2	20-Nov-89	(SEL) Change syscall to lookup Insert &
	!					and Overstrike		      &
	! V10.0-G	27-Nov-89	(SEL) Change display of [No]Operator  &
	!				      Set report width = 80 if output &
	!					is to a file.		      &
	! V10.0-I	01-Feb-90	(SEL) Use 28, not 30, when calculating &
	!					the buffer quota.	      &
	! V10.0-J	29-Mar-90	(SEL) Display LAT info if tty is a port &
	! V10.0-J	04-Apr-90	(SEL) Fix error handling in LAT lookup &
	! V10.0-K	13-Apr-90	(SEL) Display asynchronous protocol   &
	! V10.0-K+	14-May-90	(SEL) Trap error if LAT not installed &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name		description				      &
	!	====		===========				      &
	!	CALLBUF$	String variable for SYS calls		      &
	!								      &
	!******************************************************************** &


700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &
	%INCLUDE "SYSTEM:TERKEY.B2S"		!include CUI constants	      &

750	COMMON	(DSPCMN)	INDENT.COLUMN%	!DISPLY common data	      &


1000	!	m a i n    s u b p r o g r a m    l o g i c		      &
	!								      &
	!								      &

2100	IF OUT.CHN% THEN 			!If output is to a file then  &
	   TERM.WIDTH% = 80% 			! the report width is 80      &
\	ELSE					!Else			      &
	   TERM.WIDTH%=ASCII(SEG$(SYS(CHR$(6%)+	! get this KB's width	      &
		CHR$(16%)+CHR$(0%)+CHR$(255%)),5%,5%))-1%		      &
\	END IF								      &
\	KB.NO% = ASCII(SEG$(SYS(CHR$(6%)+CHR$(26%)),4%,4%)) !Get KB number    &
\	TRUE% = -1%				!Set up the constant for true &
\	FALSE% = NOT TRUE%			!Set up the constant for false &
\	COLUMN1% = 4%				!beginning of first column    &
\	COLUMNWIDTH% = 19%			!width of a column in SHOW TER &
\	DIM CALLBUF%(40%)			!Used to lookup other data    &

3000	GOSUB SHOWTERM				!Do the SHOW TERMINAL command &
\	SUBEXIT					! and exit		      &


8000	DATA	"*SPEEDS*",						      &
   0, 0, -1,-1, -1, -1,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
   2,-1,110,-1,150,300,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
   4, 0, -1,-1, -1, -1,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
   6, 0, -1,-1, -1, -1,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
   8, 0, -1,-1, -1, -1,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
  10, 0, -1,-1, -1, -1,-1, -1, -1, -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1,  -1, &
  12,-1,  0,50, 75,110,134.5,150,200,300, 600,1200,1800,2400,4800,9600,  -2,  -3, &
  14,-1,  0,50, 75,110,134.5,150,300,600,1200,1800,2000,2400,3600,4800,7200,9600, &
  16,-1,  0,75,110,134.5,150,300,600,1200,1800,2000,2400,4800,-1,9600,19200,-1 &


13000									      &
 SHOWTERM:								      &
	KB% = FIRQB%(4%)			!GET THE KB NUMBER	      &
\	KB% = KB.NO% IF KB% = 255%		!GET ACTUAL KB # IF OUR OWN   &
\	PERM% = (FQBEXT%(21%) <> 0%)		!SET PERMANENT FLAG IF TRUE   &
\	PRINT #out.chn%, IF CCPOS(out.chn%)	!BRING CURSOR TO LEFT MARGIN  &
\	PRINT #out.chn%, "Terminal: KB"; NUM1$(KB%); ":"; !PRINT KBn:	      &
\	JUNK% = FNPRINTCOLUMN% ("Device_Type: " + C1$) !PRINT THE DEVICE TYPE &

13100	GOSUB 13500 UNLESS PERM%		!SEE IF THIS IS A LAT LINE    &
\	PRINT #out.chn%, IF CCPOS(out.chn%)	!BRING CURSOR TO LEFT MARGIN  &
\	PRINT #out.chn%				!PRINT A BLANK LINE	      &
\	IF (FQBEXT%(25%) AND 4%) = 4% THEN	!132_COLUMNS		      &
		JUNK% = FNPRINTCOLUMN% ("132_Columns") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No 132_Columns") IF FULL%	      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 2%) = 2% THEN	!ADVANCED_VIDEO		      &
		JUNK% = FNPRINTCOLUMN% ("Advanced_Video") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Advanced_Video") IF FULL%	      &
\	END IF								      &
\	IF FIRQB%(24%) = 128% THEN		!ALT_MODE		      &
		JUNK% = FNPRINTCOLUMN% ("Alt_Mode") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Alt_Mode") IF FULL%		      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 1%) = 1% THEN	!ANSI			      &
		JUNK% = FNPRINTCOLUMN% ("ANSI") IF FULL%		      &
\		NOANSI% = 0%						      &
\	ELSE	JUNK% = FNPRINTCOLUMN% ("No ANSI") IF FULL%		      &
\		NOANSI% = -1%						      &
\	END IF								      &
\	IF (FQBEXT%(26%) AND 16%) = 16% THEN	!ANSWERBACK		      &
		JUNK% = FNPRINTCOLUMN% ("Answerback") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Answerback") IF FULL%	      &
\	END IF								      &
\	IF (FQBEXT%(23%) AND 16%) = 16% THEN	!AUTOBAUD		      &
		JUNK% = FNPRINTCOLUMN% ("Autobaud") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Autobaud") IF FULL%		      &
\	END IF								      &
\	IF FIRQB%(27%) = 128% THEN		!BREAK			      &
		JUNK% = FNPRINTCOLUMN% ("No Break")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Break")			      &
\	END IF								      &
\	IF FIRQB%(28%) = 128% THEN		!BROADCAST		      &
		JUNK% = FNPRINTCOLUMN% ("Broadcast")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Broadcast")			      &
\	END IF								      &
\	IF FULL% THEN				!IF DOING A FULL DISPLAY      &
		Z% = FQBEXT%(22%)		!GET THE BUFFER QUOTA	      &
\		Z% = 6% IF Z% = 0%		!DEFAULT IS 6		      &
\		Z% = Z% * 28%			!CALCULATE NUMBER OF CHARS    &
\		JUNK% = FNPRINTCOLUMN% ("Buffer_Quota="+NUM1$(Z%))	      &
\	END IF								      &
\	GOSUB 13470				!CONTROL		      &
\	GOSUB 13480				!NOCONTROL		      &
\	JUNK% = FNPRINTCOLUMN% ("CRFill="+NUM1$(FIRQB%(13%)-1%)) !CRFILL      &
\	GOSUB 13300				!DELIMITER		      &
\	IF (FIRQ2%(6%) AND 4%) = 4% THEN	!DIALUP			      &
		JUNK% = FNPRINTCOLUMN% ("Dialup") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Dialup") IF FULL%		      &
\	END IF								      &
\	GOSUB 13440				!EIGHT_BIT		      &
\	IF FIRQB%(22%) = 128% THEN		!ESCAPE SEQUENCE	      &
		JUNK% = FNPRINTCOLUMN% ("No Escape_Sequence") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Escape_Sequence") IF FULL%	      &
\	END IF								      &
\	IF FIRQB%(7%) = 128% THEN		!FORM			      &
		JUNK% = FNPRINTCOLUMN% ("No Form")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Form")				      &
\	END IF								      &
\	IF FIRQB%(11%) = 128% THEN		!HARDCOPY		      &
		JUNK% = FNPRINTCOLUMN% ("Hardcopy")			      &
\	END IF								      &
\	IF FIRQB%(9%) = 128% THEN		!HOSTSYNC		      &
		JUNK% = FNPRINTCOLUMN% ("No Hostsync")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Hostsync")			      &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 128%) = 128% THEN    !INSERT		      &
		JUNK% = FNPRINTCOLUMN% ("Insert") IF FULL%		      &
\	END IF								      &
\	IF (FQBEXT%(26%) AND 8%) = 8% THEN	!INTERACTIVE		      &
		JUNK% = FNPRINTCOLUMN% ("No Interactive")		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Interactive")			      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 64%) = 64% THEN	!KATAKANA		      &
		JUNK% = FNPRINTCOLUMN% ("Katakana") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Katakana") IF FULL%		      &
\	END IF								      &
\	IF FULL% THEN							      &
	   IF (FQBEXT%(19%) AND 4%) = 4% THEN 	!LINE_EDITING		      &
		JUNK% = FNPRINTCOLUMN% ("Line_editing")			      &
\		LINE_EDIT_ON% = -1% 		!LINE_EDIT INFO MSG NEEDED    &
	   ELSE	JUNK% = FNPRINTCOLUMN% ("No Line_editing")		      &
\		LINE_EDIT_ON% = 0% 		!LINE_EDIT MSG NOT NEEDED     &
\	   END IF							      &
\	END IF								      &
\	IF (FQBEXT%(26%) AND 1%) = 1% THEN	!LOADABLE_CHARACTERS	      &
		JUNK% = FNPRINTCOLUMN% ("Loadable_Characters") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Loadable_Characters") IF FULL%    &
\	END IF								      &
\	IF FIRQB%(10%) = 128% THEN		!LOCAL_ECHO		      &
		JUNK% = FNPRINTCOLUMN% ("No Local_Echo") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Local_Echo") IF FULL%		      &
\	END IF								      &
\	IF FIRQB%(8%) = 128% THEN		!LOWERCASE OUTPUT	      &
		IF FIRQB%(12%) = 255% THEN	!  IF ALSO LOWERCASE INPUT    &
			JUNK% = FNPRINTCOLUMN% ("Lowercase")		      &
		ELSE	JUNK% = FNPRINTCOLUMN% ("Lowercase=Output")	      &
\		END IF							      &
\	END IF								      &
\	IF FIRQB%(12%) = 255% THEN		!LOWERCASE INPUT	      &
		IF FIRQB%(8%) = 255% THEN	!  IF ALSO UPPERCASE OUTPUT   &
			JUNK% = FNPRINTCOLUMN% ("Lowercase=Input")	      &
\		END IF							      &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 3%) = 0% THEN	!NO OPERATOR		      &
	  JUNK% = FNPRINTCOLUMN% ("No Operator") IF FULL%		      &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 3%) = 1% THEN	!OPERATOR=MESSAGES	      &
	  JUNK% = FNPRINTCOLUMN% ("Operator=(Messages,No Requests)") IF FULL% &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 3%) = 2% THEN	!OPERATOR=REQUESTS	      &
	  JUNK% = FNPRINTCOLUMN% ("Operator=(No Messages,Requests)") IF FULL% &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 3%) = 3% THEN	!OPERATOR=ALL		      &
	  JUNK% = FNPRINTCOLUMN% ("Operator=(Messages,Requests)") IF FULL%    &
\	END IF								      &
\	IF (FQBEXT%(19%) AND 128%) = 0% THEN 	!OVERSTRIKE		      &
		JUNK% = FNPRINTCOLUMN% ("Overstrike") IF FULL%		      &
\	END IF								      &
\	GOSUB 13450 IF FULL%			!PARITY			      &
\	IF (FQBEXT%(25%) AND 8%) = 8% THEN	!PRINTER_PORT		      &
		JUNK% = FNPRINTCOLUMN% ("Printer_Port") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Printer_Port") IF FULL%	      &
\	END IF								      &
\	GOSUB 13460 IF FULL%			!PROTOCOL		      &
\	IF (FQBEXT%(19%) AND 8%) = 8% THEN	!RECALL			      &
		JUNK% = FNPRINTCOLUMN% ("Recall") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Recall") IF FULL%		      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 16%) = 16% THEN	!REGIS			      &
		JUNK% = FNPRINTCOLUMN% ("Regis") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Regis") IF FULL%		      &
\	END IF								      &
\	IF (FIRQ2%(6%) AND 2%) = 2% THEN	!RESTRICTED		      &
		JUNK% = FNPRINTCOLUMN% ("Restricted") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Restricted") IF FULL%	      &
\	END IF								      &
\	IF FIRQB%(26%) = 128% THEN		!RESUME			      &
		JUNK% = FNPRINTCOLUMN% ("Resume=Control_C")		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("Resume=Any")			      &
\	END IF								      &
\	IF FIRQB%(11%) = 255% THEN		!SCOPE			      &
		JUNK% = FNPRINTCOLUMN% ("Scope")			      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 128%) = 128% THEN	!SELECT_ERASE		      &
		JUNK% = FNPRINTCOLUMN% ("Select_Erase") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Select_Erase") IF FULL%	      &
\	END IF								      &
\	IF (FQBEXT%(25%) AND 32%) = 32% THEN	!SIXEL			      &
		JUNK% = FNPRINTCOLUMN% ("Sixel") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Sixel") IF FULL%		      &
\	END IF								      &
\	GOSUB 13400				!SPEED			      &
\	IF FIRQB%(6%) = 128% THEN		!TAB			      &
		JUNK% = FNPRINTCOLUMN% ("Tab")				      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Tab")			      &
\	END IF								      &
\	IF FIRQB%(17%) = 128% THEN		!TTSYNC			      &
		JUNK% = FNPRINTCOLUMN% ("No TTSync")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("TTSync")			      &
\	END IF								      &
\	IF FIRQB%(8%) = 255% THEN		!UPPERCASE OUTPUT	      &
		IF FIRQB%(12%) = 128% THEN	!  IF ALSO UPPERCASE INPUT    &
			JUNK% = FNPRINTCOLUMN% ("Uppercase")		      &
		ELSE	JUNK% = FNPRINTCOLUMN% ("Uppercase=Output")	      &
\		END IF							      &
\	END IF								      &
\	IF FIRQB%(12%) = 128% THEN		!UPPERCASE INPUT	      &
		IF FIRQB%(8%) = 128% THEN	!  IF ALSO LOWERCASE OUTPUT   &
			JUNK% = FNPRINTCOLUMN% ("Uppercase=Input")	      &
\		END IF							      &
\	END IF								      &
\	IF FIRQB%(18%) = 128% THEN		!UP_ARROW		      &
		JUNK% = FNPRINTCOLUMN% ("Up_Arrow") IF FULL%		      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No Up_Arrow") IF FULL%		      &
\	END IF								      &
\	IF (FQBEXT%(26%) AND 2%) = 2% THEN	!USER_DEFINED_KEYS	      &
		JUNK% = FNPRINTCOLUMN% ("User_Defined_Keys") IF FULL%	      &
	ELSE	JUNK% = FNPRINTCOLUMN% ("No User_Defined_Keys") IF FULL%      &
\	END IF								      &
\	JUNK% = FNPRINTCOLUMN% ("Width="+NUM1$(FIRQB%(5%)-1%))	 !WIDTH	      &
\	PRINT #out.chn%, IF CCPOS(out.chn%)	!BRING CURSOR TO LEFT MARGIN  &
\	RETURN UNLESS NOANSI% AND LINE_EDIT_ON% !LINE_EDIT INFO MSG NEEDED    &
\	PRINT #out.chn%						 !BLANK LINE  &
\	PRINT #out.chn%, TAB(COLUMN1%);					      &
		"Line Editing is not available (No ANSI)"		      &
\	RETURN						!THAT'S ALL, GO BACK  &
									      &

13300	!								      &
	!	D E L I M I T E R					      &
	!								      &
	M%=FIRQB%(23%) AND 127%						      &
	\ IF M%=0% THEN							      &
		JUNK% = FNPRINTCOLUMN% ("No Delimiter")			      &
	ELSE	JUNK% = FNPRINTCOLUMN% ('Delimiter="' + CHR$(M%) +	      &
					'",CHR$(' + NUM1$(M%) + ')')	      &
		! ANNOUNCE THE PRIVATE DELIMITER IF ANY			      &

13310	RETURN								      &

13400	!								      &
	!	S P E E D						      &
	!								      &
	IF FIRQB%(14%)=0% THEN						      &
		JUNK% = FNPRINTCOLUMN% ("Speed not settable")		      &
	\	RETURN							      &
		! SAY IF SPEED SETTINGS NOT POSSIBLE			      &

13410	IF (FIRQB%(14%) AND 255%) = 255% THEN				      &
		JUNK% = FNPRINTCOLUMN% ("Speed Unknown")		      &
	\	RETURN							      &
		! SAY IF SPEED SETTINGS NOT POSSIBLE			      &

13420	IF FIRQB%(16%)=0% THEN						      &
		JUNK% = FNPRINTCOLUMN%("Speed="+FNB$(FIRQB%(14%),FIRQB%(19%))) &
	\	RETURN							      &
		! NORMAL INPUT=OUTPUT SPEED SETTING			      &

13430	JUNK% = FNPRINTCOLUMN% ("Speed=("+FNB$(FIRQB%(16%),FIRQB%(19%))+","+  &
					  FNB$(FIRQB%(14%),FIRQB%(19%))+")")  &
	\ RETURN							      &
		! SPLIT SPEED SETTING					      &

13440	!								      &
	!	E I G H T   B I T					      &
	!								      &
	V%=24%								      &
	\ V1% = 29%							      &
	\ JUNK% = FNPRINTCOLUMN% ("Eight_Bit") IF (FIRQB%(V1%) AND V%)=24%    &
	\ JUNK% = FNPRINTCOLUMN% ("No Eight_Bit") IF (FIRQB%(V1%) AND V%)=16% &
	\ RETURN							      &
		! 8BIT ATTRIBUTE					      &
		! SET V% = MASK BITS TO READ				      &
		! SET V1% = INDEX OF WORD TO TEST			      &
		! PRINT THE APPROPRIATE ATTRIBUTE			      &

13450	!								      &
	!	P A R I T Y						      &
	!								      &
	V%=3%								      &
	\ V1%=15%							      &
	\ JUNK% = FNPRINTCOLUMN% ("Parity=Odd") IF (FIRQB%(V1%) AND V%)=3%    &
	\ JUNK% = FNPRINTCOLUMN% ("Parity=Even") IF (FIRQB%(V1%) AND V%)=2%   &
	\ JUNK% = FNPRINTCOLUMN% ("No Parity") IF (FIRQB%(V1%) AND V%)=1%     &
	\ RETURN							      &
		! PARITY ATTRIBUTE					      &
		! SET V% = MASK BITS TO READ				      &
		! SET V1% = INDEX OF WORD TO TEST			      &
		! PRINT THE APPROPRIATE ATTRIBUTE			      &

13460	!								      &
	!	P R O T O C O L						      &
	!								      &
\	CALLBUF%(J%)=0% FOR J% = 0% TO 40%				      &
\	CALLBUF%(0%)=26%			!30 BYTES		      &
\	CALLBUF%(1%)=6%				!FIP			      &
\	CALLBUF%(2%)=34%			!CFG - SET/SHOW DEVICE	      &
\	V$ = FSS$("_KB"+ NUM1$(KB%) +":",1%)	!FSS the KB number	      &
\	CALLBUF%(J%) = ASCII(RIGHT(V$,J%)) FOR J% = 23% TO 26%		      &
\	CHANGE CALLBUF% TO CALLBUF$		!CHANGE TO A STRING	      &
\	V$= SYS(CHR$(6%)+CHR$(-21%)+CHR$(0%))	!GAIN TEMP PRIVS	      &
\	CHANGE SYS(CALLBUF$) TO CALLBUF%	!BACK TO AN ARRAY	      &
\	V$= SYS(CHR$(6%)+CHR$(-21%)+CHR$(255%)) !DROP TEMP PRIVS	      &
\	IF CALLBUF%(7%) = 5% THEN		!Terminal is owned by TRN     &
	   JUNK% = FNPRINTCOLUMN% ("Protocol=DDCMP")			      &
\	ELSE								      &
	   JUNK% = FNPRINTCOLUMN% ("Protocol=None")			      &
\	END IF								      &
\	RETURN								      &
									      &

13470	!								      &
	!	C O N T R O L = ( R , T , C , X )			      &
	!								      &
	FLAGS.TO.PRINT$ = ""			!CLEAR THE FLAGS TO PRINT     &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "R" IF (FQBEXT%(23%) AND 4%)=4% !R &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "T" IF (FQBEXT%(23%) AND 2%)=2% !T &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "C" IF (FQBEXT%(23%) AND 1%)=1% !C &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "X" IF (FQBEXT%(23%) AND 8%)=8% !X &
\	RETURN IF LEN(FLAGS.TO.PRINT$) = 0%	!GET NEXT IF NOTHING TO PRINT &
\	IF LEN(FLAGS.TO.PRINT$) > 1% THEN	!IF MORE THAN ONE FLAG	      &
		FLAGS.TO.PRINT$=SEG$(FLAGS.TO.PRINT$,1%,((I%-1%)*2%)+1%)+","+ &
		 SEG$(FLAGS.TO.PRINT$,((I%-1%)*2%)+2%,LEN(FLAGS.TO.PRINT$))   &
		  FOR I% = 1% TO LEN(FLAGS.TO.PRINT$) - 1% !INSERT A ","      &
							   !BETWEEN FLAGS     &
\		FLAGS.TO.PRINT$ = "("+FLAGS.TO.PRINT$+")"  ! PUT ON ( )	      &
\	END IF								      &
\	STRING.TO.PRINT$ = "Control=" + FLAGS.TO.PRINT$!PUT IT ALL TOGETHER   &
\	JUNK% = FNPRINTCOLUMN%(STRING.TO.PRINT$)!PRINT IT		      &
\	RETURN					!GET NEXT		      &

13480	!								      &
	!	N O C O N T R O L = ( R , T , C , X )			      &
	!								      &
	FLAGS.TO.PRINT$ = ""			!CLEAR THE FLAGS TO PRINT     &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "R" IF (FQBEXT%(23%) AND 4%)=0% !R &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "T" IF (FQBEXT%(23%) AND 2%)=0% !T &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "C" IF (FQBEXT%(23%) AND 1%)=0% !C &
\	FLAGS.TO.PRINT$ = FLAGS.TO.PRINT$ + "X" IF (FQBEXT%(23%) AND 8%)=0% !X &
\	RETURN IF LEN(FLAGS.TO.PRINT$) = 0%	!GET NEXT IF NOTHING TO PRINT &
\	IF LEN(FLAGS.TO.PRINT$) > 1% THEN	!IF MORE THAN ONE FLAG	      &
		FLAGS.TO.PRINT$=SEG$(FLAGS.TO.PRINT$,1%,((I%-1%)*2%)+1%)+","+ &
		 SEG$(FLAGS.TO.PRINT$,((I%-1%)*2%)+2%,LEN(FLAGS.TO.PRINT$))   &
		  FOR I% = 1% TO LEN(FLAGS.TO.PRINT$) - 1% !INSERT A ","      &
							   !BETWEEN FLAGS     &
\		FLAGS.TO.PRINT$ = "("+FLAGS.TO.PRINT$+")"  ! PUT ON ( )	      &
\	END IF								      &
\	STRING.TO.PRINT$ = "No Control=" + FLAGS.TO.PRINT$!PUT IT ALL TOGETHER &
\	JUNK% = FNPRINTCOLUMN%(STRING.TO.PRINT$)!PRINT IT		      &
\	RETURN					!GET NEXT		      &

13500	!								      &
	!	L A T   S E R V E R   P O R T   N A M E / I D		      &
	!								      &
	ON ERROR GOTO 13550						      &
\	OPEN "_NL:" AS FILE #11%,RECORDSIZE 128% ! Open a data buffer	      &
\	FIELD #11%, 128% AS DATA.BUFF$					      &
\	SERVER$, SERVICE$, REMOTE_PORT$  = ""				      &
\	CONNECTED% = 0%							      &
\	CALLBUF%(I%) = 0% FOR I% = 0% TO 40%	! Clear the SYSCALL array     &
\	V$ = FSS$("_KB"+ NUM1$(KB%) +":",1%)	! FSS the KB number	      &
\	CALLBUF%(J%+10%) = ASCII(RIGHT(V$,J%)) FOR J% = 23% TO 26%  ! Copy it &
\	CALLBUF%(0%)  = 40%			! Num of elements (for CHANGE) &
\	CALLBUF%(1%)  = 6%			! SYS call to FIP	      &
\	CALLBUF%(2%)  = 22%			! SEND/RCV function code      &
\	CALLBUF%(3%)  = 12%			! SHOW function		      &
\	CALLBUF%(4%)  = 7%			! SHOW PORT function	      &
\	CALLBUF%(11%) = 11%			! Channel # for data buffer   &
\	CALLBUF%(13%) = 128%			! Length of data buffer	      &
\	CHANGE CALLBUF% TO CALLBUF$		! Form the SYS CALL String    &
\	CHANGE SYS(CALLBUF$) TO CALLBUF%	! Do the SYS CALL	      &
\	CONNECTED% = -1% IF CALLBUF%(6%) = 1% 		! Port is connected   &
\	BUF.LEN% = CALLBUF%(13%)+SWAP%(CALLBUF%(14%))	! Returned data	      &
\	RETURNED.DATA$ = LEFT(DATA.BUFF$,BUF.LEN%)			      &
\	UNTIL BUF.LEN% = 0%						      &
\		TYPE.CODE% = ASCII(RETURNED.DATA$)			      &
\	    	NAME.LEN%  = ASCII(MID(RETURNED.DATA$,2%,1%))		      &
\	    	NAME$ = MID(RETURNED.DATA$,3%,NAME.LEN%)		      &
\		IF NOT CONNECTED% THEN 		! Specified data	      &
			SERVER$ = NAME$ IF TYPE.CODE% = 1% !server(1)	      &
\			REMOTE_PORT$ = NAME$ IF TYPE.CODE% = 3% !remote port(3) &
\		END IF							      &
\		IF CONNECTED% THEN		! Actually connected to:      &
			SERVER$ = NAME$ IF TYPE.CODE% = 4% !server(4)	      &
\			REMOTE_PORT$ = NAME$ IF TYPE.CODE% = 5% !remote port(5) &
\		END IF							      &
\		SERVICE$ = NAME$ IF TYPE.CODE% = 2% !service (2)	      &
\		RETURNED.DATA$ = RIGHT(RETURNED.DATA$,NAME.LEN%+3%)	      &
\		BUF.LEN% = BUF.LEN% - (NAME.LEN% + 2%)			      &
\	NEXT								      &
\	IF (CALLBUF%(5%) AND 1%) THEN					      &
		PRINT #OUT.CHN%, "LAT Application Port"			      &
\	ELSE								      &
		PRINT #OUT.CHN%, "LAT Interactive Port"			      &
\	END IF								      &
\	IF REMOTE_PORT$ <> "" AND SERVICE$ <> "" THEN			      &
	      PRINT #out.chn%, "LAT Server/Port/Service: ";		      &
		SERVER$; "/"; REMOTE_PORT$; "/"; SERVICE$		      &
\   	ELSE								      &
\	IF REMOTE_PORT$ <> "" THEN					      &
	      PRINT #out.chn%, "LAT Server/Port: "; SERVER$; "/"; REMOTE_PORT$ &
\	ELSE								      &
\	IF SERVICE$ <> "" THEN						      &
	      PRINT #out.chn%, "LAT Server/Service: "; SERVER$; "/"; SERVICE$ &
\	END IF								      &

13510	CLOSE 11%				!CLOSE THE NULL DEVICE	      &
\	ON ERROR GOTO 19000			!RESET STANDARD ERROR TRAP    &
\	RETURN					!GO BACK		      &

13550	PRINT #OUT.CHN%							      &
\	RESUME 13510 IF ERR = 6%		!Terminal is not a LAT port   &
\	RESUME 13510 IF ERR = 66%		!LAT not installed	      &
\	CLOSE 11%				!Close the null device	      &
\	RESUME 19000				!Handle other errors	      &
									      &

17100	! FNPRINTCOLUMN% (TEXT$) -- PRINT text in next available column.      &
	! Inputs:							      &
	!	TEXT$ -- The text to print				      &
	!	TERM.WIDTH% -- Width of screen				      &
	!	CCPOS(out.chn%) -- Current cursor position		      &
	! Effect:							      &
	!	If there isn't room for another column, <CR><LF> is	      &
	!	printed and the cursor is advanced to the left margin.	      &
	!	Otherwise cursor is advanced to next column (i.e. position of &
	!	first column plus n * width of a column).		      &
	!	Text is printed.					      &
	! Value: Meaningless.						      &

17110	DEF FNPRINTCOLUMN% (TEXT$)					      &
	\ CURSOR% = CCPOS(out.chn%)	! Get current cursor position.	      &
	\ IF CURSOR% < COLUMN1% THEN	! If cursor is left of first column of &
					! text then			      &
		PRINT #out.chn%, SPACE$ (COLUMN1% - CURSOR%);		      &
					!   Move cursor to first column of    &
					!   text.			      &
		\ GOTO 17140		!   Go PRINT text.		      &

17120	NEXTCOLUMN% = ((CURSOR%-COLUMN1%)/COLUMNWIDTH%)*COLUMNWIDTH% +	      &
	COLUMNWIDTH% + COLUMN1%		! Compute position of next text column &
	\ PAD% = NEXTCOLUMN% - CURSOR%	! Compute spaces needed to pad cursor &
					! to next column.		      &
									      &
	\ IF ((NEXTCOLUMN% + COLUMNWIDTH%) > TERM.WIDTH%) OR		      &
	     ((NEXTCOLUMN% + LEN(TEXT$)) > TERM.WIDTH%)  THEN		      &
					! If there isn't room for another     &
					! column then			      &
		PRINT #out.chn% 	!   Go to next line of screen.	      &
		\ PRINT #out.chn%, SPACE$ (COLUMN1%);!  Move cursor to first  &
					!   column of text.		      &
		\ GOTO 17140		!   Go PRINT text.		      &

17130	PRINT #out.chn%, SPACE$ (PAD%);	! Pad cursor out to next column.      &

17140	PRINT #out.chn%, TEXT$;		! PRINT the text.		      &
	\ FNEND								      &


17800	!								      &
	!	FUNCTION TO RETURN BAUD RATE				      &
	!	GIVEN THE INTERNAL SPEED VALUE AND THE INTERFACE TYPE	      &
	!								      &
	DEF FNB$(Q%,Q0%)						      &
	\ RESTORE							      &

17810	READ C1$ UNTIL C1$="*SPEEDS*"			!FIND THE SPEED TABLE &

17820	READ Q1%					!READ THE INTERFACE   &
	\ IF Q0%<>Q1% THEN				!IF NOT THE ONE	      &
		READ C1$ FOR Q1%=1% TO 17%		!  READ THE SPEEDS    &
	\	GOTO 17820				!  GET NEXT INTERFACE &

17830	READ C1$ FOR Q1%=0% TO Q%			!FIND THE RIGHT SPEED &
	\ C1$ = "EXTA" IF C1$ = "-2"			!SET EXTERNAL CLOCK A &
	\ C1$ = "EXTB" IF C1$ = "-3"			!SET EXTERNAL CLOCK B &
	\ FNB$=C1$					!SET FUNC TO THE SPEED &
	\ FNEND								      &


19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	ON ERROR GO BACK			!Let the Root error	      &
						! handler handle it	      &


32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
