.IIF	NDF	L$$ETH,	.NLIST						;004
.IIF	NDF	L$$ETH,	.DSABL	LSB					;004
TITLE	XHDEF,<DEQNA Ethernet symbol definitions>,0A,10-MAY-91,KCG/DSD

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit history for XHDEF.MAC

;+
; EDIT	BY	DATE		REASON
;
;  000	KCG	18-Sep-85	Creation for v9.3
;  001	DBM	27-Aug-86	4 QNA's
;				[Rsts/E V9.4]
;  002  DSD	26-Feb-87	Changed EP$* bit values
;  003  DSD	18-Mar-87	Modified SETFUN macro
;  004	DSD	17-Feb-88	Disable listing of this header file
;-

.SBTTL	MAX.XH - Define maximum number of controllers

MAX.XH	= 4		;Rumor has it, that 2 QNA controllers running at full 
			;tilt will consume 70% of the Q-Bus.
			;However (comma) they decided they wanted to	;001
			; have up to 4 LQA's on the bus.		;001
MAX.TO	= 400.		;400 transmit timeouts may occur every 8-12 minutes.  If
			;over 400 occur, we disable the controller.

.SBTTL	XHDCTL - Define Offset of words in DCTL area

;
; The global symbol XHDATA points to the top of the data area outlined by
; the following offsets (i.e., to decrement the timer use, DEC XHDATA+XHTIME).
;
; The ring size word that is jammed by INIT is passed in the following format:
;
;	low byte  = receive rings
;	high byte = xmit rings
;

	.DSECT
XHCCNT:	.BLKW		;Count of controllers present               (jammed)
XHDPA6:	.BLKW		;Ethernet Region's DPAR6 value              (jammed)
XHDSIZ:	.BLKW		; Size of the Ethernet region (in slivers)  (jammed)
XHRING:	.BLKW	MAX.XH	;Num of RCV/XMT ring entries per controller (jammed)
XHVECT:	.BLKW	MAX.XH	;Interrupt vector address                   (jammed)
XHCDB:	.BLKW	MAX.XH	;Pointers to CDBs (1 per controller unit)
XHSEED:	.BLKW	2	;32 bit random number seed
XHTIME:	.BLKW		;Timer for sending SYSID message
XHIDBF:	.BLKW		;Pointer to SYSID buffer
XHINIT:	.BLKW		;Initialization status flag
XHACT:	.BLKW		;chain head of "Running" controllers
	.BLKW		;con queue of CDBs (global symbol in XHDCTL)
	.BLKW		;   L3Q Root Pointer
	.BLKW		;   L3Q byte offset and bit to set

XHD$LN	= <.-XHCCNT>

;
; Flags for XHINIT
	.BSECT
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
XH$SID:	.BLKB	.		;System ID in progress (don't use sysid buffer)
XH$DON:	.BLKB	.		;Initialization done

.SBTTL	REGISTERS - Define bit definitions and byte offsets of QNA's registers

;+
;
; The QNA device has 8 (word) I/O page registers.  They are in the following
; format:
;                                        Addr
;    Write               Read/Write    177744__    Read
;    =====               ==========    ========    ====
;                     +--------------+
;                     |              | 40/60       PROM address byte 1
;                     +--------------+
;                     |              | 42/62       PROM address byte 2
;                     +--------------+
;    Rcv BDL          |              | 44/64       PROM address byte 3
;                     +--------------+
;                     |              | 46/66       PROM address byte 4
;                     +--------------+
;    Xmit BDL         |              | 50/70       PROM address byte 5
;                     +--------------+
;                     |              | 52/72       PROM address byte 6
;                     +--------------+
;                     | Vector Addr  | 54/74
;                     +--------------+
;                     |     CSR      | 56/76
;                     +--------------+
;
;  All offsets defined are negative offsets from the CSR.
;
;-

;
; I/O Page Registers
;

	.DSECT	<<-8.*2>+2>

QNA.AD:	.BLKW		;QNA's PROM address (RO)  (Contained in low byte of the
	.BLKW		;                          first 6 words)
QNA.RB:	.BLKW		;QNA's Rcv Buffer List pointer (WO)
	.BLKW		;
QNA.XB:	.BLKW		;QNA's Xmit Buffer Descriptor List pointer (WO)
	.BLKW		;
QNA.VA:	.BLKW		;QNA's Vector Address (R/W)
QNA.CS:	.BLKW		;QNA's CSR (R/W)

;
; CSR flags
;

	.BSECT
QNA$RE:	.BLKB	.	; Receiver Enable - R/W
QNA$SR:	.BLKB	.	; Software Reset - R/W
QNA$NI:	.BLKB	.	; Nonexistent Memory Interrupt - RO
QNA$BD:	.BLKB	.	; Boot/Diagnostic ROM - R/W (Driver won't use this)
QNA$XL:	.BLKB	.	; Transmit List Invalid - RO
QNA$RL:	.BLKB	.	; Receive List Invalid - RO
QNA$IE:	.BLKB	.	; Interrupt Enable - R/W
QNA$XI:	.BLKB	.	; Transmit Interrupt Request - R/(W=1 to clear)
QNA$IL:	.BLKB	.	; Internl Loopback - R/W
QNA$EL:	.BLKB	.	; External Loopback - R/W
QNA$SE:	.BLKB	.	; Sanity Timer Enable - R/W (Driver won't use this)
	.BLKB	.	;  Reserved
QNA$OK:	.BLKB	.	; Fuse OK - RO
QNA$CA:	.BLKB	.	; Carrier - RO
	.BLKB	.	;  Reserved
QNA$RI:	.BLKB	.	; Receive Interrupt Request - R/(W=1 to clear)

;
; Length of Ethernet address
;

QADR$L	= 6.

.SBTTL	BDL - Buffer Descriptor List offsets, masks, and flags definitions

;
; These are the definitions of BDL data structures which the driver uses to 
; communicate buffer addresses and setup information to the QNA, and the QNA 
; uses to communicate status to the driver.  The BDL structures are the 
; integral structure of the device ring for the QNA.
;
; The general BDL format is as follows:
;
;        |                                          |
;        +------------------------------------------+
;        | Flag                                     |
;        +------------------------------------------+
;        | Address Descriptor Bits | H.O. Addr bits |
;        +------------------------------------------+
;        | Low Order Address Bits                   |
;        +------------------------------------------+
;        | Buffer Length                            |
;        +------------------------------------------+
;        | Status Word 1                            |
;        +------------------------------------------+
;        | Status Word 2                            |
;        +------------------------------------------+
;        |                                          |
;

;
; BDL offset definitions
;

	.DSECT

QBD.FL:	.BLKW		; Flag word
QBD.HO:			; High order address bits <05:00>
QBD.AD:	.BLKW		; Address descriptor bits <15:06>
QBD.LO:	.BLKW		; Low order address
QBD.LN:	.BLKW		; Buffer length
QBD.S1:	.BLKW		; Status word one
QBD.S2:	.BLKW		; Status word two

QBD$LN	= <.-QBD.FL>	; Size of BDL entry
.ASSUME	QBD$LN EQ <6*2>		; Just to make sure

;
; QBD.FL masks
;

QF$INI	= <100000>
QF$USE	= <40000>

;
; QBD.HO mask
;

QH$BIT	= <1!2!4!10!20!40>

;
; QBD.AD Flag and Mask definitions
;

	.BSECT
	.BLKB	.	;  Reserved  for QBD.HO
	.BLKB	.	;  Reserved  for QBD.HO
	.BLKB	.	;  Reserved  for QBD.HO
	.BLKB	.	;  Reserved  for QBD.HO
	.BLKB	.	;  Reserved  for QBD.HO
	.BLKB	.	;  Reserved  for QBD.HO
QA$H:	.BLKB	.	; Xmit only - When set, buffer starts on byte boundary
QA$L:	.BLKB	.	; Xmit only - When set, buffer ends on byte boundary
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
QA$S:	.BLKB	.	; Xmit only - Buffer is SET-UP information
QA$E:	.BLKB	.	; Xmit only - End of message is this buffer
QA$C:	.BLKB	.	; Chain address - given addr is a pointer to another BDL
QA$V:	.BLKB	.	; Valid - Set if given address is valid

QA$VAL	=	<100000>	;Valid buffer address
QA$VDA	=	<100000!40000>	;Valid descriptor address
QA$INV	=	0		;Address is invalid

;
; QBD.S1 Status word 1 masks (common to XMIT and RCV)
;

Q1$INI	=	<100000>	;Initial value - this buffer hasn't been used
Q1$USE	=	<100000!40000>	;Used but not the last segment of message
Q1$LAS	=	<100000!40000>	;Last segment in message with no errors (*BEQ*)
Q1$ERR	=	<40000>		;Last segment in message with errors

;
; QBD.S1 Xmit Status word 1 flags and masks
;

	.BSECT

	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved  for the COUNT Field
	.BLKB	.	;  Reserved  for the COUNT Field
  	.BLKB	.	;  Reserved  for the COUNT Field
	.BLKB	.	;  Reserved  for the COUNT Field
Q1X$FL:	.BLKB	.	; xmit failed - indicates heartbeat collision failure
Q1X$AB:	.BLKB	.	; the xmit was aborted due to excessive collisions
Q1X$16:	.BLKB	.	; saneity timeout was initialized to 4 mins (not used)
Q1X$NC:	.BLKB	.	; carrier was not present at start of xmit
Q1X$LO:	.BLKB	.	; carrier was lost during xmit
	.BLKB	.	;  Reserved
	.BLKB	.	;  part of common mask
	.BLKB	.	;  part of common mask

Q1X$CN	=	<20!40!100!200>	; Count of collisions during xmit

;
; QBD.S2 Xmit Status word 2 masks
;

Q2X$TD	=	^C<100000!40000> ;Time domain reflometer 100 ns resolution count

;
; QBD.S1 Rcv Status word 1 flags and masks
;

	.BSECT

Q1R$OV:	.BLKB	.	; EPP overflowed buffer, and 1 or 2 messages were lost
Q1R$CR:	.BLKB	.	; CRC error has been detected and the message truncated
Q1R$FR:	.BLKB	.	; Framing alignment error (only set when CRC is also)
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved  for Rcved byte length bits <10:08>
	.BLKB	.	;  Reserved  for Rcved byte length bits <10:08>
	.BLKB	.	;  Reserved  for Rcved byte length bits <10:08>
Q1R$RT:	.BLKB	.	; Received packet is a RUNT
Q1R$DS:	.BLKB	.	; Discard packet
Q1R$ES:	.BLKB	.	; Indicates a looped-back control set-up
	.BLKB	.	;  part of common mask
	.BLKB	.	;  part of common mask

Q1R$RB	=	<400!1000!2000>	; Received byte length bits <10:08>

;
; QBD.S2 Rcv Status word 2 masks
;

Q2R$RB	=	<1!2!4!10!20!40!100!200>
					; Received byte length bits <07:00>

.SBTTL	SETUP - Setup mode bits/commands

;
; The following bits and masks define the setup commands that go into the
; QBD.LN word of a BDL entry.
;

	.BSECT

QSU$AM:	.BLKB	.	; Enables receiption of all multicast packets
QSU$PR:	.BLKB	.	; Enables receiption of all packets (promiscuous)
	.BLKB	.	;  Reserved  for byte count of target buffer
	.BLKB	.	;  Reserved  for byte count of target buffer
	.BLKB	.	;  Reserved  for byte count of target buffer
	.BLKB	.	;  Reserved  for byte count of target buffer
	.BLKB	.	;  Reserved  for byte count of target buffer
QSU$ML:	.BLKB	.	; This bit must be set for previous commands to work
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved
	.BLKB	.	;  Reserved

QSU$BC	=	<1!2!4!10!20!40!100>	;Set-up buff count

MUL$LN	=	<16.*8.>		;length of target (multicast) address
					;buffer

.SBTTL	SYSID  - System ID buffer symbols

;
; The following symbols define the format of the SYSTEM ID message parameters.
; The buffer that holds these parameters lives in the Ethernet region.  This
; buffer is initialized during DEA$XH processing.
;

	.DSECT
SID.DA:	.BLKW	3	; Destination Address		--- Dynamic field
SID.SA:	.BLKW	3	; Source Address 		--- Dynamic field
SID.TY:	.BLKW		; Remote Console Type = 60-02
SID.CC:	.BLKW		; Character Count = SID$CC
SID.CO:	.BLKB		; Message function code = 7
	.BLKB		; Reserved = 0
SID.RN:	.BLKW		; Receipt number		--- Dynamic field
SID.MT:	.BLKW		; MOP version Type = 1
SID.ML:	.BLKB		; MOP version Length = 3
SID.MV:	.BLKB		;   MOP version  = 1
SID.ME:	.BLKB		;   MOP ECO      = 0
SID.MU:	.BLKB		;   MOP user ECO = 0
SID.FT:	.BLKW		; Function Type = 2
SID.FL:	.BLKB		; Function Length = 2
SID.F1:	.BLKB		;   Function value 1 = Bit0 (Loop) ! Bit6 (DL counters)
SID.F2:	.BLKB		;   Function value 2 = 0
SID.H1:	.BLKB		; Hardware Type (byte 1) = 7
SID.H2:	.BLKB		; Hardware Type (byte 2) = 0
SID.HL:	.BLKB		; Hardware Length = 6
SID.HA:	.BLKW	3	;   Hardware Address		--- Dynamic field
SID.CT:	.BLKW		; Communication Device Type = 100.
SID.CL:	.BLKB		; Communication Device Length = 1
SID.CD:	.BLKB		;   Communication Device = 5 (QNA)

SID$CC	= <.-SID.CC>	; valid bytes after the SID.CC field

	.BLKB	<64.-.>	; PAD space.  Minimum message size is 64 bytes.

SID$LN	= <.-SID.DA>	; Length of SYSID buffer

.SBTTL	FLAGS - CDB E.STS flags/PDB EP.STS flags

;+
; THESE BIT DEFINITIONS REFLECT CURRENT OPERATING STATUS.
;-

	.BSECT

EF$SMC:	.BLKB	.	;system is requesting mulcast setup for controller.
EF$RAM:	.BLKB	.	;controller is "receiving all multicasts."
EF$MUL:	.BLKB	.	;controller is processing multicast setup packet.
EF$SID:	.BLKB	.	;controller is xmiting individual system id message.
EF$SIS:	.BLKB	.	;controller is xmiting system wide system id message.
EF$DNT:	.BLKB	.	;controller has DECnet/E active (V4.0 or after).

	.BSECT
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002
	.BLKB	.	;reserved						;002

EP$TLD:	.BLKB	.	;portal's owner told about lost message(s) don't again	;002
EP$LST:	.BLKB	.	;portal lost messages (used entire quota)		;002
EP$DNT:	.BLKB	.	;portal is DECnet/E					;002
EP$MDL:	.BLKB	.	;portal is marked for deletion (already closed)		;002
EP$PHY:	.BLKB	.	;portal is going through physical address change	;002
	.BLKB	.	;reserved
	.BLKB	.	;reserved
	.BLKB	.	;reserved

.SBTTL	COMMANDS - Controller specific CCB commands.

;+
; These commands are unique to the interrupt processing services (except for
; the shared fields.
;-

	.DSECT

	.BLKW		;00
	.BLKW		;02 FC$RD
	.BLKW		;04 FC$WRT
	.BLKW		;06 FC$XMT
	.BLKW		;10 FC$BUF
QC$UMC:	.BLKW		;12  User multicast setup request
QC$SMC:	.BLKW		;14  System multicast setup request
QC$MOP:	.BLKW		;16  System mop function
QC$SID:	.BLKW		;20  Individual system ID message
QC$SIS:	.BLKW		;22  System wide system ID message

QC$MSK	= <2!4!10!20>		;bits in use for a valid command

.ASSUME	10 EQ <QC$UMC-2>		;10 is the value of FC$BUF
.ASSUME	QC$SIS EQ 22

.SBTTL	DISPATCH - Define dispatch macros.

;+
;
; These macros setup, and manage the L3 dispatching for the QNA driver.  Most
; everything happens automatically (and correctly).
;
; How they're used,
;
; The following (in order) are required before any SETFUN, CLRFUN.
;	STRFUN	- Sets starting symbols for the table.
;			Params; starting label for table.
;	DEFFUN	- Defines a function with associated symbol.
;			Params; symbol to give bit value to, address of
;			        action routine.
;	ENDFUN	- Ends the dispatch table/bits.  Sets queued flag bit.
;			Params; symbol to give number of functions to.
;
; The following are used to request/cancell functions for CDBs.
;	SETFUN	- Request function.
;			Params; symbol name of function (or address of it),
;			        register pointer to CDB, signal SPLC 5 (must
;			        be run at PR5), WAIT2T flag (used primarily
;			        for nobufs).
;	CLRFUN	- Cancell function.
;			Params; symbol name of function to cancell, pointer
;			        to CDB.
;
; * Dependencies, CDB defined in QUEL3Q format, CDB symbols defined, 
;   $$QUED not defined, max functions=15.  This is not intended to work for
;   any other driver (program).
;

.MACRO	STRFUN,SYM
$$$BIT	=	1			;initialize bit work variable
DSPCNT	=	0			;initialize count of functions
.IF B SYM
$DSP:					;initialize table pointer <DEFAULT>
.IFF
SYM:					;initialize table pointer
.ENDC
.ENDM

.MACRO	DEFFUN,SYM,ADDRESS
.IF B SYM 
 .ERROR; Blank symbol name not allowed
 .MEXIT
.ENDC
.IF B ADDRESS
 .ERROR; Blank function name not allowed
 .MEXIT
.ENDC
SYM	=	$$$BIT			;give SYM it's bit definition
$$$BIT	=	$$$BIT + $$$BIT		;shift out bit def for next one
.IIF EQ $$$BIT .ERROR			;Too many functions defined.
	 .WORD ADDRESS
DSPCNT	=	DSPCNT + 1		;count the functions
.ENDM	DEFFUN

.MACRO	ENDFUN,SYM
.IF NB SYM
SYM	=	DSPCNT
.ENDC
$$QUED	=	100000
.ENDM	ENDFUN

.MACRO	SETFUN,BITS,WAIT
.IF IDN <BITS>, <$$QUED>
 .ERROR; Cannot request the CDB queued flag.
 .MEXIT
.ENDC
.IF B <WAIT>
	 CALL	SETQUE,R5,BITS
.IFF
	 CALL	SETQ2T,R5,BITS
.ENDC
.ENDM	SETFUN

.MACRO	CLRFUN,BITS,PTR
.NTYPE $$$,PTR
.IF NE $$$&70
 .ERROR; CDB locator must be register.  "POINTER"
 .MEXIT
.ENDC
.IF DIF <BITS>,<ALL>
	 BIC	BITS,E.DSP(PTR)		;cancel function
.IFF
	 CLR	E.DSP(PTR)		;cancel all functions
.ENDC
.ENDM	CLRFUN


.IIF	NDF	L$$ETH,	.ENABL	CRF					;004
.IIF	NDF	L$$ETH,	.LIST						;004
