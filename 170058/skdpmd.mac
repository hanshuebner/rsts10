.INCLUDE	%CMN:COMMON%
TITLE	SKDPMD,<SKED POST-MORTEM DUMP WRITTER>,0A,10-MAY-91,SJM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR SKDPMD
;+
;
;  001  SJM  23-Sep-82	CREATION - And it was a good thing
;  002	PRL  26-May-84	Use .INCLUDEs and .LIBRARYs
;
;-

.SBTTL	INCLUDE MACRO LIBRARIES

.LIBRARY	%SYSTEM:PBSMAC%

.SBTTL	MACROS	- SUCK IN NEEDED MACROS

	.MCALL	PSECTS,BITDEF,SAVREG
	.MCALL	FQBERR,CR$LF
	.MCALL	SUBRIB,GETLUN,RETLUN,GETBUF,RETBUF
	.MCALL	GETDEV,RETDEV

	PSECTS
	BITDEF
	CR$LF



	.MACRO	MOVCLR	SOURCE,DESTINATION,SIZE
	 CALLX	..MCLR,R5
	  .WORD	SOURCE
	  .WORD	DESTINATION
	  .WORD	SIZE
	.ENDM	MOVCLR


	.MACRO	DOFIP	FUNCTION
	 MOVB	#FUNCTION'FQ,@#FIRQB+FQFUN
	 CALFIP
	.ENDM	DOFIP



.SBTTL	LOCORE	- MINI LOWCORE LAYOUT OF RSX EMULATION LOWCORE

.EQUATE	JOBNM, 0
.EQUATE	PMDSP, 660
.EQUATE	PMDXRB,662


.SBTTL	SKDPMD	- CREATE A PMD FILE AS A .TMP

;+
; THIS ROUTINE WRITE A V7.2 COMPATIBLE RSX .PMD FILE
; THE FILE IS WRITEN AS A .TMP FOR SAFETY.
; THE DUMP IS COMPLETLY VALID EXCEPT FOR THE FOLLOWING KNOW
; DIFFERENCES/PROBLEMS
;	2'ND WORD OF FIRQB (404) IS WRONG
;	ALL BITS OF PSW ARE WRONG EXCEPT FOR THE C BIT
;	SP IS 4 LOWER THAT IT SHOULD BE
; BUT ALL IN ALL, IT'S NOT A BAD DUMP
;-

	.PSECT	SKDPMD,RO,CON

PMD::	NOP				;FOR DEBUGING
	MOV	R0,@#PMDSP		;SAVE A REG
	MOV	SP,R0			;SAVE STACK POINTER
	PUSH	#^B1111000000000000	;DUMMY PSW
	BCC	10$			;PSW OK IF CC
	BIS	#1,(SP)			;CS SO SHOW CARRY SET
10$:	PUSH	2(R0)			;GET CALLERS CALLERS ADDR
	PUSH	R0			;AND STACK POINTER
	MOV	@#PMDSP,R0		;RESTORE R0
	PUSH	<R5,R4,R3,R2,R1,R0>	;SAVE ALL REGS
	MOV	SP,@#PMDSP		;SET POINTER TO STACK
	MOV	SJOB,R0			;GET SUB JOB NUMBER X2
	ASL	R0			;NOW TIMES 4
	MOV	NAME(R0),@#JOBNM	;AS OFFSET INTO NAME TBL
	MOV	NAME+2(R0),@#JOBNM+2	;COPY TO 'JOB' NAME
	GETLUN	R0			;GET A LUN X2
	BCS	20$			;NO LUN, NO PMD
	MOVCLR	FIRQB,PMDXRB,FQBSIZ/2	;SAVE FIRQB
	MOV	R0,@#FIRQB+FQFIL	;CHANNEL NUMBER X2
	MOV	#-1,@#FIRQB+FQCLUS	;MAKE FILE REALLY NEW
	DOFIP	CRT			;CREATE DUMP FILE AS A .TMP
	MOVCLR	PMDXRB,FIRQB,FQBSIZ/2	;RESTORE FIRQB
	MOVCLR	XRB,PMDXRB,XRBSIZ/2	;SAVE XRB
	PUSH	<@#FIRQB,@#FIRQB+2>	;.STAT CLOBERS THESE
	.STAT				;GET JOB STATS
	POP	<@#FIRQB+2,@#FIRQB>	;.STAT CLOBERS THESE
	MOV	@#XRB,R4		;GET JOB SIZE IN K WORDS
	ASH	#11.,R4			;MAKE INTO BYTE COUNT
	MOV	#XRB,R1			;NOW POINT TO XRB
	MOV	R4,(R1)+		;XRLEN - BUFFER SIZE
	MOV	R4,(R1)+		;XRBC - BYTES TO WRITE
	CLR	(R1)+			;XRLOC - START DUMP AT 0
	MOVB	R0,(R1)+		;XRCI - CHANNEL
	CLRB	(R1)+			;XRBLKM
	CLR	(R1)+			;XRBLK
	CLR	(R1)+			;
	CLR	(R1)+			;XRMOD
	.WRITE				;WRITE CONTENTS OF JOB AREA
	MOVB	R0,FIRQB+FQFIL		;CLOSE CHANNEL
	DOFIP	CLS
	RETLUN	R0			;RETURN A  LUN X2
20$:	ADD	#9.*2,SP		;FIX STACK POINTER
	RETURN

	GLOBAL	<SJOB,NAME>


.SBTTL	MOVCLR	- MOVE AND CLEAR DATA SUBROUTINE

;+
; CALLING SEQUENCE:
;	CALL	..MCLR,R5
;	 .WORD	ADDRESS OF SOURCE
;	 .WORD	ADDRESS OF DESTINATION
;	 .WORD	NUMBER OF WORDS TO MOVE AND CLEAR
;
; INPUTS:
;	MOVCLR	SOURCE,DESTINATION,SIZE 
; OUTPUTS:
;	R1 THROUGH R3 DESTROYED
;	SOURCE DATA CLEARED
;-

..MCLR:
	MOV	(R5)+,R1		;POINT TO SOURCE
	MOV	(R5)+,R2		;POINT TO DESTINATION
	MOV	(R5)+,R3		;GET NUMBER OF WORDS
10$:	MOV	(R1),(R2)+		;MOVE SOURCE
	CLR	(R1)+			; AND CLEAR IT
	SOB	R3,10$			;LOOP UNTIL DONE
	RETURN	R5


.END
