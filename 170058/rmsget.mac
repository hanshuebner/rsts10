.INCLUDE	%CMN:COMMON%
TITLE	RMSGET,<RMS-11 GET INTERFACE FOR SIMPLE CUSP>,0A,10-MAY-91,RTW/SJM/PRL/KCG

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR RMSGET
;+
;
;  001  SJM  23-Sep-82	CREATION - And it was a good thing
;  002	PRL  26-May-84	Use .INCLUDEs and .LIBRARYs
;
;	KCG  29-Aug-85	Creation of 9.1 from 9.0
;  003	KCG  29-Aug-85	Fix C1.STM (stream postfix) to tst recsiz correctly
;  004	KCG  15-Oct-85	Do not add preceding <LF> to CC:IMP record if first
;			character is a form feed.
;  005	KCG  16-Oct-85	Do not add trailing <CR> to CC:IMP record if last
;			character is a form feed.
;  006	TJK  11-DEC-85	Add check for null record in C0.IMP
;  007	DBM  01-Feb-88	Move CC:IMP <FF> check from PRTSER to Cn.IMP
;-

.SBTTL	INCLUDE MACRO LIBRARIES

.LIBRARY	%SYSTEM:PBSMAC%
.LIBRARY	%LB:RMSMAC%

.SBTTL	MACROS	- SUCK IN NEEDED MACROS

	.PSECT

	.MCALL	$INITIF		;DO THE RMS CALL TO DEFINE THE WORLD
	.MCALL	$STORE,$FETCH,$COMPARE,$TESTBITS
	.MCALL	$OPEN,$CONNECT,$GET,$READ,$DISCONECT,$CLOSE,$FREE
	.MCALL	FABOF$,RABOF$,FAB$BT,RAB$BT,$RMSTAT,RMS$L
	.MCALL	DFIN$L

	.MCALL	PSECTS,BITDEF,SAVREG
	.MCALL	FQBERR,RMSERR,CR$LF
	.MCALL	SUBRIB,GETLUN,RETLUN,GETBUF,RETBUF
	.MCALL	RMSBLK

	PSECTS
	BITDEF
	CR$LF
	RMSBLK




.SBTTL	OFFSETS	- DEFINE FAB/RAB OFFSETS
                                                                    
	FABOF$	RMS$L
	RABOF$	RMS$L
	FAB$BT	DFIN$L
	RAB$BT	DFIN$L
	$RMSTAT	DFIN$L

.SBTTL	RMSGET - GET RECORD FROM FILE AND CONVERT TO STREAM


;+
; RMSGET::
;
; THIS ROUTINE GETS AN RMS RECORD AND TURNS IT INTO A STREAM ASCII
; RECORD AND PUTS IT INTO THE USER BUFFER. RETURNING WITH C=1 IF
; IT WON'T FIT (AND TRUNCATING THE RECORD).
;
;
;
; INPUT FIELDS
;	ARGCNT	 = # OF BYTES LONG ARGUMENT BLOCK IS (SANITY CHECK)
;	BUF	-> BUFFER RETURNED FROM 'GETBUF'
;	BUFL	 = LEN OF BUFFER
;	REC	-> FIRST FREE BYTE FOR USER DATA RECORD TO BE RETURNED IN
;	RECL	 = COUNT OF CHARS IN RECORD
;	RECBL	 = SIZE OF RECORD BUFFER
;	FAB	-> FAB
;	RAB	-> RAB
;
;	NOTE THAT ALL OF THESE FIELD ARE ALREADY SET UP BY OPEN
;
; OUTPUT FIELDS
;	STS	 = CONTENTS OF RMS STS FIELD AFTER AN RMS OPERATION >=0 SUCCES
;	STV	 = CONTENTS OF RMS STV FIELD AFTER AN RMS OPERATION
;	BUF	-> BUFFER RETURNED FROM 'GETBUF'
;	BUFL	 = LEN OF BUFFER
;	REC	-> FIRST FREE BYTE FOR USER DATA RECORD TO BE RETURNED IN
;	RECL	 = COUNT OF CHARS IN DATA PORTION
;	FAB	-> FAB
;	RAB	-> RAB
;	INT1	   FOR INTERNAL USE ONLY
;	INT2	   FOR INTERNAL USE ONLY
;

;
;
;
;
;		-------------------------
;  	R5 ->	|   #OF ARGS |		 I	ARGCNT		0 
;		-------------------------
;		|    STATUS		| O	STS		2 
;		-------------------------
;		|    STATUS1		| O	STV		4 
;		-------------------------
;		| -> NAME		|	NAM		6 
;		-------------------------
;		|    LEN OF NAME	|	NAML		10 
;		-------------------------
;		| -> BUFFER		| *I	BUF		12
;		-------------------------
;		|    LENGTH OF BUFFER	| *I	BUFL		14
;		-------------------------
;		| -> DATA		| *IO	REC		16
;		-------------------------
;		|    LEN OF RECORD	| *IO	RECL		20
;		-------------------------
;		|    LEN OF RECORD BUFF	| *IO	RECBL		22
;		-------------------------
;		| -> FAB		| *I	FAB		24
;		-------------------------
;		| -> RAB		| *I	RAB		26
;		-------------------------
;		|    OPTIONS		|	OPT		30
;		-------------------------
;		|    INTERNAL		|	INT1		32
;		-------------------------
;		|    INTERNAL		| *IO	INT2		34
;		-------------------------
;
;
;	NOTE THAT "I" FIELDS ARE REQUIRED ON INPUT
;		AND "O" FIELDS ARE SET ON OUTPUT
;		"*" FIELDS ARE SET BY PREVIOUS RMSOPN OR RMSGET ROUTINE
;
;CALL
;	JSR	PC,RMSGET
;
;
;BACK:
;		C = 0 -> OK
;		C = 1 AND STS(R5) <0  -> RMS ERROR  CODE IN STS FIELD 
;		C = 1 AND STS(R5) >=0 -> RECORD TOO BIG BUFFER FULL REST GONE
;	REC(R5)  -> RECORD
;	RECL(R5) =  COUNT OF REAL DATA BYTES IN RECORD
;
;	CCTYP	FILE CC TYPE 
;			0 -> NONE
;			2 -> STREAM
;			4 -> FORTRAN
;			6 -> IMPLIED CC
;			8 -> PRINT FILE FORMAT
;-


LF	=	12
VT	=	13
FF	=	14
CR	=	15
ESC	=	33
CTRL.Z	=	32



	.PSECT	RMSGET,RO,CON

	.ENABL	LSB

RMSGET::NOP				;FOR DEBUGING
	SAVREG
	CMP	ARGCNT(R5),#ARGSIZ	;ENOUGH ARGS?
	BLO	50$			;NO SO ERROR
	MOV	RAB(R5),R0		;GET PTR TO RAB
	MOV	REC(R5),R1		;GET POINTER TO BUFFER
	MOV	RECBL(R5),R2		;LENGTH OF FREE ROOM IN TARGET BUFFER

;
; REGISTER USAGE FOR REST OF GET ROUTINES
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;

	MOV	FAB(R5),R3		;GET PTR TO FAB
	$TESTBITS #FB$BIO,FAC,R3	;SHOULD WE USE BLOCK IO?
	BEQ	20$			;NO
	$COMPARE #RB$RFA,RAC,R0		;BUT, IS THIS A RANDOM GET?
	BNE	10$			;NO
	MOV	O$RFA(R0),O$BKT(R0)	;YES, SO LOAD UP THE BLOCK NUMBER
	MOV	O$RFA+2(R0),O$BKT+2(R0)	;... BOTH WORDS
10$:	$STORE	#RB$SEQ,RAC,R0		;SET TO SEQ MODE
	$READ	R0			;AND READ IT
	MOV	O$BKT(R0),O$RFA(R0)	;AND SET TO RETURN THE BKT AS THE RFA
	MOV	O$BKT+2(R0),O$RFA+2(R0)	; ...
	CLR	O$RFA+4(R0)		;.
	$FETCH	R3,RSZ,R0		;GET SIZE OF RECORD READ
	ADD	#512.-1,R3		;ROUND UP TO NEXT BLOCK
	BIC	#512.-1,R3		;AND TRUNCATE BACK TO NUMBER OF BLOCKS
	ASH	#-9.,R3			;AND SHIFT AROUND TO NUMBER OF BLOCKS
	ADD	R3,O$BKT(R0)		;ADD AMOUNT READ TO BLOCK NUMBER
	ADC	O$BKT+2(R0)		;HANDLE OVER FLOW
	BR	30$			;AND JOIN BACK UP

20$:	$GET	R0			;GET THE RECORD
30$:	$FETCH	STV(R5),STV,R0		;GET SECONDARY STATUS
	$FETCH	STS(R5),STS,R0		;CHECK/STORE STATUS
	BMI	40$			;EXIT IF ERROR
	CALL	PREFIX			;DO PREFIX CC
	BCS	50$			;ERROR SO THATS ALL
	CALL	MOVREC			;MOVE THE RECORD
	BCS	50$			;ERROR SO THATS ALL
	CALL	POSTFX			;DO POSTFIX CC
	BCS	50$			;ERROR SO THATS ALL
	BR	60$			;ALL IS OK, SO JOIN COMMON EXIT

40$:	MOV	FAB(R5),R4		;PICK UP THE FAB POINTER
	$TESTBITS #FB$WRI,SHR,R4	;ARE WE SHARING FILE
	BEQ	50$			;NO, SO DON'T NEED TO UNLOCK THE BLOCK
	$FREE	R0			;UNLOCK ANY POSSIBLE LOCKED BLOCK
50$:	SEC				;SET CARRY AND
	.BR	60$			;JOIN COMMON EXIT CODE

60$:	ROL	R3			;SAVE CARRY
	$STORE	#RB$SEQ,RAC,R0		;SET TO SEQ MODE FOR NEXT TIME ROUND
	SUB	REC(R5),R1		;GET NUMBER OF CHARACTERS TRANSFERED
	MOV	R1,RECL(R5)		; AND STORE IT
	CLR	INT1(R5)		;CLEAR FIRST INTERNAL SPACE
	ROR	R3			;RESTORE CARRY
	RETURN				; EXIT

	.DSABL	LSB

.SBTTL	MOVREC - DATA RECORD MOVE ROUTINE

;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;

	.ENABL	LSB

MOVREC:	$FETCH	R3,RBF,R0		;GET POINTER TO DATA
	$FETCH	R4,RSZ,R0		;GET LENGTH OF RECORD
	CALLR	PUTUSR			;PUT THE DATA AND RETURN

	.DSABL	LSB

.SBTTL	PREPST - PREFIX AND POST FIX RECORD HANDLERS

	.ENABL	LSB

PREFIX:	MOV	#PRETBL,R3		;GET ADDR OF PREFIX TABLE
	BR	10$			;GO TO COMMON CODE

POSTFX:	MOV	#PSTTBL,R3		;GET ADDR OF POST FIX TABLE
10$:	ADD	O$CTX(R0),R3		;ADD CCTYP OFFSET INTO TABLE
	JMP	@(R3)			;GO TO RIGHT ROUTINE

	.DSABL	LSB




.SBTTL	CCTBLS - PREFIX AND POST FIX RECORD HANDLERS JUMP TABLES

	;PREFIX ROUTINE TABLE

PRETBL:	.WORD	CC.RTS ;C0.NON		;NOTHING FOR NOCC
	.WORD	CC.RTS ;C0.STM		;NOTHING FOR PREFIX STREAM
	.WORD	C0.FTN			;GO DO FORTRAN PREFIX
	.WORD	C0.IMP			;GO DO RSX STYLE PREFIX
	.WORD	C0.PRN			;GO DO PRINT FILE FORMAT PREFIX




	;POSTFIX ROUTINE TABLE

PSTTBL:	.WORD	CC.RTS ;C1.NON		;NOTHING FOR NONE
	.WORD	C1.STM			;GO DO STREAM POSTFIX
	.WORD	C1.FTN			;GO DO FORTRAN POSTFIX
	.WORD	C1.IMP			;GO DO RSX STYLE POSTFIX
	.WORD	C1.PRN			;GO DO PRINT FILE FORMAT POSTFIX



.SBTTL	CC.IMP - IMPLIED FORMAT RECORD HANDLER


;
; IMPLIED CC HANDLER
; PUT A <LF> ON FRONT OF RECORD AND A <CR> ON THE END
;
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;

	.ENABL	LSB

C0.IMP:	TST	INT2(R5)		;Was last char output a <FF>?	;007
	BNE	8$			;Yep.  Don't send an <LF>	;007
	TST	O$RSZ(R0)		;IS THERE ANY DATA AT ALL?	;006
	BEQ	9$			;No - don't check		;006
	CMPB	#CR$FF,@O$RBF(R0)	;first character read a <FF>?	;004
	BNE	9$			;no, must precede with <LF>	;004
8$:	JMP	CC.RTS			;Clear carry and return		;004

9$:	MOV	#CHR.LF,R3		;SET UP CHAR TO OUTPUT
	BR	10$			;PUT IT IN THE USER BUFFER

C1.IMP:	TST	O$RSZ(R0)		;IS THERE ANY DATA AT ALL?	;006
	BEQ	11$			;No - don't check		;006
	CMPB	#CR$FF,-1(R1)		;was last character a <FF>?	;005
	BNE	11$			;No.  Send <CR> and clear TOF	;007
	MOV	#-1,INT2(R5)		;Yes. Set flag to eat next <LF>	;007
	BR	8$			; and don't send <CR>		;007

11$:	MOV	#CHR.CR,R3		;SET UP CHAR TO STORE		;006
	CLR	INT2(R5)		;Ensure correct TOF state	;007
10$:	MOV	#1,R4			;AND ONLY ONE CHARACTER LONG
	CALLR	PUTUSR			;STORE IT AND RETURN

	.DSABL	LSB

.SBTTL	CC.FTN - FORTRAM FORMAT RECORD HANDLER

;
; THIS ROUTINE TRANSLATES THE CC:FTN INTO THE COMPARABLE CC:PRN
; FORMAT AND JUMPS TO THE PRINT FORMAT HANDLER
; NOTE THAT THE CC:FTN CC CHARACTER GETS CLOBERED WHEN THE RECORD
; IS MOVED BY MOVREC, SO WE HAVE TO STORE THE CHARATER SOME WHERE SO
; WE CAN READ IT DURING POSTFIX PROCESSING, IT IS STASHED IN INT1(R5)
;
; THE FORTRAN SYSBOLS TRANLATE AS FOLLOWS
;
;     SYMBOL  PREFIX  POSTFIX	   USAGE
;	" "	LF	CR	SINGLE SPACE
;	"0"	LFLF	CR	DOUBLE SPACE		
;	"1"	FF	CR	PAGE EJECT
;	"+"		CR	OVER-PRINT
;	"$"	LF		PROMPT
;
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;

	.ENABL	LSB

C0.FTN:	MOV	#F.PRE,-(SP)		;POINT TO PREFIX TABLE
	TST	O$RSZ(R0)		;IS THERE ANY DATA AT ALL?
	BNE	10$			;YES
	MOV	#SPACE,R3		;NO, DAMN ODD, WHAT SHALL WE DO?
	MOVB	R3,INT1(R5)		;FOR LACK OF SOMETHING BETTER,
	BR	20$			;SINGLE SPACE

10$:	MOVB	@O$RBF(R0),R3		;GET FIRST DATA CHR (FTN PREFIX CHR)
	MOVB	R3,INT1(R5)		;AND SAVE IT FOR LATER
	INC	O$RBF(R0)		;UP RECORD PTR
	DEC	O$RSZ(R0)		;REMOVE PREFIX CHR FROM COUNT
	BR	20$			;GO TO COMMON CODE

C1.FTN:	MOV	#F.POST,-(SP)		;POINT TO POSTFIX TABLE
	MOVB	INT1(R5),R3		;GET THE CC BYTE BACK FROM SAVED
20$:	MOV	#F.CCBL,R4		;SET UP LENGTH OF TABLE
30$:	CMPB	R3,F.CCB(R4)		;IS THIS THE FORTAN CC CHAR
	BEQ	40$			;YES GO TO IT
	DEC	R4			;NO UPDATE POINTER
	BNE	30$			;IF NOT AT START OF TABLE THEN AGAIN
40$:	ADD	(SP)+,R4		;MAKE ADDRESS TO PRINT FORMAT CHAR
	MOVB	(R4),R3			;MAP FORTRAN TO PRINT FILE
	CALLR	PRN			;GO TO THE CC

F.CCB:	.ASCII	/ 01+$/
F.CCBL	=.-<F.CCB>-1
F.PRE:	.BYTE	1,2,<FF+BIT7>,0,1
F.POST:	.BYTE	<CR+BIT7>,<CR+BIT7>,<CR+BIT7>,<CR+BIT7>,0
	.EVEN

	.DSABL	LSB

.SBTTL	CC.PRN - PRINT FORMAT RECORD HANDLER

;
; THIS ROUTINE HANDLE VFC CC:PRN RECORDS (CC:FTN ALSO FALLS THROUGH TO PRN:)
; PRN PREFIX IS THE LOW BYTE OF THE 2 BYTE HEADER AND THE HIGH
; BYTE IS THE POSTFIX (THUS THE MAGICAL SWAB AT C1.PRN)
;
; THE BYTES ARE INTERPRETED AS FOLLOWS
; IF BYTE=0 THEN DO NOTHING
; IF BYTE>0 THEN USE BYTE AS NUMBER OF <LF>'S TO PRINT
; ELSE OUTPUT CHARACTER IN BITTS 0-4 WITH OR WITHOUT PARITY BIT 7 ON DEPENDING
; ON BIT 5.
;
;	SUMMARY
;
;	BIT 7	BITS 6-0	MEANING
;
;	0	0		NO CARRIAGE CONTROL (DO NOTHING)
;	0	COUNT		USE BITS 6-0 AS COUNT OF NEW LINES (1-127)
;
;	BIT 7	BIT 6	BIT 5	BITS 4-0	MEANING
;
;	1	0	0	ASCII CHR	7 BIT ASCII CHAR TO PRINT
;	1	1	0	ASCII CHR	8 BIT ASCII CHAR TO PRINT
;						  ASCII 128-159
;
;
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;


C1.PRN:	SWAB	@O$RHB(R0)		;SWAP PREFIX AND POSTFIX BYTES
C0.PRN:	MOVB	@O$RHB(R0),R3		;GET FORMAT CONTROL CHAR
PRN:	TSTB	R3			;IS THERE SOMETHING TO DO?
	BEQ	CC.RTS			;0 IS NOTHING
	BPL	20$			;>0 IS MULTY LF'S
	BITB	#BIT6,R3		;CHECK FOR 7 VS 8 BIT CHAR
	BNE	10$			;BR IF 8 BIT CHAR
	BICB	#BIT7,R3		;GET RID OF PARITY BIT
10$:	BICB	#BIT5!BIT6,R3		;CLEAN BITS 5+6
	MOVB	R3,INT2(R5)		;PUT THE BYTE SOME WHERE TO BE FOUND
	MOV	R5,R3			;GET BASE ADDR OF COMM BLOCK
	ADD	#INT2,R3		;AND FIX UP A POINTER TO THE SAVED CHR
	MOV	#1,R4			;SET A COUNT OF 1 CHAR
	CALLR	PUTUSR			;AND STORE THE CHAR

20$:	PUSH	R3			;SAVE NUMBER OF TIMES TO DO THIS
	MOV	#CR.LF,R3		;INIT CHAR TO STORE
	MOV	#2,R4			;AND COUNT OF 1
	CALL	PUTUSR			;STORE IT
	POP	R3			;GET BACK ITERATION COUNT
	BCS	SC.RTS			;LEAVE IF NO MORE ROOM
	SOB	R3,20$			;UNTIL NO MORE
	BR	CC.RTS			;DONE SO LEAVE C=0
	


.SBTTL	CC.STM - STREAM ASCII RECORD HANDLER


;
; CHECK TO SEE IF THERE IS ALREADY A STREAM DELIMITER AT THE END
; OF THE RECORD AND IF NOT PUT A CRLF THERE
;
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3    FREE (-> TO DATA RECORD TO TRANSFER)
;	R4    FREE ( = LEN OF DATA RECORD TO TRANSFER)
;	R5 -> ARG BLOCK
;


C1.STM:	TST	O$RSZ(R0)		;Is this a null length record?  ;003
	BEQ	20$			; YES SO PRINT A <CRLF>
	MOV	#STMTBL,R3		;GET POINTER TO DELIMITER TABLE
	MOVB	-1(R1),R4		;GET THE LAST CHAR OF RECORD
10$:	CMPB	R4,(R3)+		;IS IT A DELIMITER?
	BEQ	CC.RTS			; YES ALL DONE
	TSTB	(R3)			;AT END OF TABLE?
	BNE	10$			;NOPE MORE TO GO
20$:	MOV	#CR.LF,R3		;SET UP TO OUTPUT CRLF
	MOV	#2,R4			;AND COUNT OF 2
	CALLR	PUTUSR			;STORE IT


;
; STMTBL IS USED BOTH AS A TABLE OF DELIMITERS FOR STREAM RECORDS
; AND AS A HANDY PLACE TO GRAB A RANDOM CHARACTER FROM
; NOTE THAT THERE IS AN EXTRA 'CR -LF' HANGING ON THE END
; IT IS NOT PART OF THE STREAM TABLE.

STMTBL:	
CHR.LF:	.BYTE	LF
CHR.FF:	.BYTE	FF
CHR.VT:	.BYTE	VT
CHR.ES:	.BYTE	ESC
CHR.Z:	.BYTE	CTRL.Z
CHR.NL:	.BYTE	0

CHR.CR:
CR.LF:	.BYTE	CR
	.BYTE	LF
	.EVEN



.SBTTL	PUTUSR - ACTUALL DATA MOVER/COPY ROUTINE

;
; PUTUSR
; MOVE DATA TO FRONT OF BUFFER AVOIDING THE RECORD WHICH MAY ALREADY
; BE THERE.
;
;
;	R0 -> RAB
;	R1 -> USER BUFFER
;	R2  = COUNT OF FREE SPACE IN BUFFER
;	R3 -> TO DATA RECORD TO TRANSFER
;	R4  = LEN OF DATA RECORD TO TRANSFER
;	R5 -> ARG BLOCK
;

PUTUSR:	TST	R4			;ANY DATA TO MOVE
	BEQ	CC.RTS			;NO


;
; FIRST TRY FOR THE SIMPLE CASE, DATA IS ALREADY IN BUFFER
;	(DATA=RECORD AND WAS MOVED)
;

	CMP	R3,R1			;IS THE CHAR ALREADY IN THE BUFFER
	BNE	10$			;NO BRANCH ON
	SUB	R4,R2			;YES,SO LOWER THE COUNT OF FREE SPACE
	ADD	R4,R1			;AND SLIDE UP THE POINTER
	BR	CC.RTS			;AND WE ARE DONE	



;
; NOW TRY FOR THE HARD CASE, DATA AND RECORD CONFLICT
;	(DATA<>RECORD AND RECORD IS IN BUFFER)
;

10$:	PUSH	R4			;SAVE R4
	CMP	R3,O$RBF(R0)		;IS THE DATA ALSO THE RECORD
	BEQ	20$			;YES SO NO CONFLICT

	TST	O$RSZ(R0)		;IS THERE ANY DATA IN THE RECORD
	BEQ	20$			;NO SO NO CONFLICT

	ADD	R1,R4			;GET POINTER TO WHERE END OF DATA
					;WILL GO
	CMP	R4,O$RBF(R0)		;WILL DATA END TOTALLY BEFORE RECORD?
	BLO	20$			;DATA WILL FIT NO CONFLICT

	MOV	O$RBF(R0),R4		;GET RECORD POINTER INTO R4
	ADD	O$RSZ(R0),R4		;NOW IS POINTER TO END OF RECORD
	CMP	R4,R1			;COMPARE EOR PTR TO BUFFER PTR
	BHI	30$			;RECORD TOTALLY ENDS BEFORE BUFFER
20$:	POP	R4			;RESTORE R4 HERE
	BR	70$			;NO CONFLICT SO DO TRANSFER

30$:	POP	R4			;RESTORE R4 HERE - CONFLICT
	

;
; NUTS
; DATA AND RECORD ARE IN CONFLICT - MUST MOVE THE RECORD DOWN THE BUFFER
;

	PUSH	R1
	ADD	R4,R1			;POINTER TO WHERE RECORD GOES
	ADD	O$RSZ(R0),R1		;POINTER TO WHERE EOR GOES

	PUSH	R3
	MOV	O$RBF(R0),R3
	ADD	O$RSZ(R0),R3		;PONTER TO WHERE RECORD NOW ENDS

	PUSH	R2			;SAVE R2
	SUB	O$RSZ(R0),R2		;SUBTRACT LEN OF RECORD FROM ROOM LEFT
	CMP	R4,R2			;WILL IT ALL FIT?
	BLE	40$			;BR IF IT WILL

	MOV	#ER$RTB,STS(R5)		;WON'T ALL FIT
	MOV	R2,R4			; WILL ANY FIT?
	BEQ	60$			;NONE NO NEED TO MOVE ANYTHING
					;PART OF HEADER WILL SO USE IT.
					;PREFERENCE
					;GIVEN TO DATA SO CUT BACK ON HEADER
					;AS NECESSARY

40$:	MOV	O$RSZ(R0),R2		;GET LENGTH OF RECORD
50$:	MOVB	-(R3),-(R1)		;MOVE RECORD DOWN BUFFER
	SOB	R2,50$			;UNTIL DONE
	$STORE	R1,RBF,R0		;UPDATE RECORD POINTER
60$:	POP	R2
	POP	R3
	POP	R1

;
; NOW ALL CONFLICTS ARE RESOLVED SO DO THE SIMPLE TRANSFER
;



70$:	TST	R2			;ANY ROOM LEFT?
	BEQ	100$			;NOPE, SET UP ERROR AND EXIT
	TST	R4			;ANY DATA TO MOVE?
	BEQ	100$			;NOPE, SOME THING WENT WRONG
	CLR	-(SP)			;CLEAR A CELL ON STACK
	CMP	R2,R4			;ENOUGH ROOM LEFT?
	ROL	(SP)			;SAVE CARRY ON STACK IN THAT CELL
	BEQ	80$			; YES, ENOUGH ROOM
					; CELL =0 IF CARRY WAS CLEAR
					; THUS THIS IS EQV TO BHIS 80$
					; EXCEPT THAT WE MOVED C BIT TO
					; LOW BIT OF WORD ON STACK
	MOV	R2,R4			;NO, SO ONLY COPY AS MUCH AS WE CAN
80$:	SUB	R4,R2			;FIX UP FREE COUNT
90$:	MOVB	(R3)+,(R1)+		;STORE THE CHAR
	SOB	R4,90$			;DO UNTIL DONE
	ROR	(SP)+			;RESTORE CARRY
	BHIS	CC.RTS$			;BR IF IT ALL FIT
100$:	MOV	#ER$RTB,STS(R5)		;NUTTS, RECORD DID NOT FIT, SET ERROR
	BR	SC.RTS			;AND RETURN THE ERROR

CC.RTS:	TST	(PC)+			;CLEAR CARRY AND RETURN
SC.RTS:	SEC				;SET CARRY AND RETURN
	RETURN				;AND A GENERAL PURPOSE RTS PC



	.END
