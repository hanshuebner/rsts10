TITLE	QMDEF,<QMAN PREFIX FILE>,0A,10-MAY-91,SJM/PRL/KCG/TJK/DBM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR QMDEF
;+
; Edit	Who  Date	Reason
;  
;  001	KCG  23-Apr-84	Creation for V9.0
;  002	PRL  02-May-84	Added FC$BFL field for URPs
;			Defined MSGEND in IMPURE
;  003	PRL  05-May-84	Add ALLOC parameter to DEFFLD
;			Add LOGBLK field to impure area
;			Define new FC$xxx logfile fields
;  004	PRL  09-May-84	Rename DEFFLD and DEFERR macros
;			Move DEFFLDs/DEFERRs into QURP.MAC
;			Add .MCALL for MOVBYT macro
;			Remove US.xxx offsets for UU.SPL
;  005	PRL  10-May-84	Change DFLREQ table to QTYTBL
;			Define offsets for QTYTBL entries
;  006	PRL  12-May-84	Add .MCALL for RECV, DCLR, RECV macros
;			Move FIXSTG macro to PBSMAC.MAC
;			Add .MCALL for FIXSTG and ASCIC macros
;			Use LOT macro to define QMAN's LOTs
;			Move EVEN macro to PBSMAC.MAC
;  007	PRL  14-May-84	Add .MCALL for SETPRV, CHKPRV
;			Declare PRIVS macro
;  008	PRL  18-May-84	Remove UF$LDF flag bit
;  009	PRL  22-May-84  Invoke PBSCON macro to define constants
;  010	PRL  24-May-84	Update URPDEF macro to include pass 1 dispatch
;  011	PRL  26-May-84	Add OWNPPN, OWNPRV fields to impure area
;  012	PRL  14-Jun-84	Remove STSREQ dispatch from user msg state table
;  013	PRL  10-Sep-84	Add bit mask, table for MODIFY QUEUE (MQ) command
;  014	KCG  11-Sep-84	Add dispatch table for SU command (SERSTS)
;  015	PRL  27-Sep-84	Renamed "QMDEF" as prefix to all QMAN modules
;  016	PRL  16-Oct-84	Add SP$TEN and SP$DIS server status bits
;  017	PRL  30-Oct-84	Change QT$MNM -> QT$BAD
;  018	KCG  13-Jan-85	Add cell for pointer to monitor's JOBCNT word.
;  019	KCG  29-Jan-85	Add cells for margins in SDB
;  020	KCG  14-Mar-85	Create symbols for building test/base level versions
;  021  TJK  24-Mar-86  Fix GETREC macro - don't stomp on R1
;
;			[RSTS/E V9.6]
;  022	DBM  29-Feb-88	Change order of functions.  Death before scheduler
;
;			[RSTS/E V10.0]
;  023	DBM  26-Jun-89	OMS support work
;  024	DBM  13-Oct-89	Send FORMS_WAIT messages at sliding intervals
;  025	DBM  27-Jan-90	Outbound LAT support
;-

.SBTTL	MACROS	- CALL/INVOKE NEEDED COMMON MACROS

	.PSECT
	.ENABL	LC

	.MCALL	SPLCMD
	.MCALL	PBSCON
	.MCALL	QUEDEF
	.MCALL	PSECTS,BITDEF,SAVREG
	.MCALL	RMSERR,CR$LF
	.MCALL	SUBRIB,GETLUN,RETLUN
	.MCALL	GETBUF,RETBUF
	.MCALL	CMPSTR,MOVSTR,MUTEXC
	.MCALL	MOVBYT
	.MCALL	REMV,DCLR,RECV
	.MCALL	FIXSTG,.ASCIC,EVEN
	.MCALL	SETPRV,CHKPRV
	.MCALL	STALL,CRASH,SHUTUP
	.MCALL	XMIT,XMITM,XMTBLK
	.MCALL	SPLSTA,SPLFUN,SPLEND
	.MCALL	SETFUN,CLRFUN
	.MCALL	REJECT,SYNERR
	.MCALL	CHKFRE,DEBUG
	.MCALL	LOT

	PBSCON				;define package constants	;009
	SPLCMD				;define command/package offsets
	PSECTS				;define PSECTS for QMAN
	BITDEF				;define BITn symbols
	CR$LF				;define useful chars
	QUEDEF				;define queue types
	XMTBLK				;define XMIT block
	LOT				;define local object types	;006

.SBTTL	DEFINE ASSEMBLY TYPE

	$$PKLO	=	'S		;Normal package location is PBS$:
	$$RCNM	=	'M		;Normal receiver names are QM$???

	.IF	DF	$$TEST

		$$PKLO	=	'T	;Test package location is PBT$:
		$$RCNM	=	'T	;Test package receivers are QT$???

		LO.QMN	=	LO.QMN+4 ;set local object types to test version
		LO.SRV	=	LO.SRV+4
		LO.URP	=	LO.URP+4

	.ENDC

.SBTTL	CALL/INVOKE NEEDED RMS MACROS

	.MCALL	$RMSTAT,$INITIF
	.MCALL	RMS$G,RMS$L,DFIN$G,DFIN$L
	.MCALL	RABOF$,RAB$B,RAB$BT
	.MCALL	FABOF$,FAB$B,FAB$BT
	.MCALL	XABOF$,XAB$B,XAB$BT
	.MCALL	$CREATE,$OPEN,$CLOSE,$CONNECT,$DISCONNECT
	.MCALL	$GET,$FIND,$PUT,$UPDATE,$FREE,$FLUSH,$REWIND,$DELETE
	.MCALL	$STORE,$FETCH,$COMPARE,$TESTBITS,$OFF,$SET

	$RMSTAT	DFIN$L		;declare ER$xxx and SU$xxxx local symbols

	FABOF$	RMS$L		;declare FAB offset (local) symbols
	RABOF$	RMS$L		;declare RAB offset (local) symbols
	XABOF$	RMS$L		;declare XAB offset (local) symbols

	FAB$BT	DFIN$L		;declare FAB code/mask (local) symbols
	RAB$BT	DFIN$L		;declare RAB code/mask (local) symbols
	XAB$BT	DFIN$L		;declare XAB code/mask (local) symbols

.SBTTL	FNDQUE	- MACRO TO LOCATE QDB BY QUEUE NAME AND TYPE

	.MACRO	FNDQUE,QNAME,QTYPE
	.MCALL	NOTREG
	NOTREG	1,QNAME
	NOTREG	0,QTYPE
	.IF	DIF R0,QNAME
	  PUSH  R0
	  MOV   QNAME,R0
	.ENDC
	.IF	DIF R1,QTYPE
	  MOVB  QTYPE,R1
	.ENDC
	CALLX	FNDQUE
	.IF	DIF R0,QNAME
	  POP	R0
	.ENDC
	.ENDM	FNDQUE

.SBTTL	FNDQSQ	- MACRO TO FIND QUEUE (QDB) BY SEQUENCE NUMBER

	.MACRO	FNDQSQ,SEQNUM
	.IF	DIF,R0,SEQNUM
	  PUSH	R0
	  MOV	SEQNUM,R0
	.ENDC
	CALLX	FNDQSQ
	.IF	DIF,R0,SEQNUM
	  POP	R0
	.ENDC
	.ENDM

.SBTTL	FNDSPL	- MACRO TO LOCATE SDB BY DEVICE NAME

	.MACRO	FNDSPL,DEVNAM
	.IF	DIF R0,DEVNAM
	  PUSH  R0
	  MOV   DEVNAM,R0
	.ENDC
	CALLX	FNDSPL
	.IF	DIF R0,DEVNAM
	  POP	R0
	.ENDC
	.ENDM	FNDSPL

.SBTTL	FNDSSQ	- MACRO TO FIND SERVER (SDB) BY SEQUENCE NUMBER

	.MACRO	FNDSSQ,SEQNUM
	.IF	DIF,R0,SEQNUM
	  PUSH	R0
	  MOV	SEQNUM,R0
	.ENDC
	CALLX	FNDSSQ
	.IF	DIF,R0,SEQNUM
	  POP	R0
	.ENDC
	.ENDM

.SBTTL	ASNSEQ	- MACRO TO ASSIGN JOB/INTERNAL SEQUENCE NO.

	.MACRO	ASNSEQ	SEQTYP,SEQLOC
	.MCALL	NOTREG
	NOTREG	1,SEQTYP
	NOTREG	0,SEQLOC
	.IF	DIF R0,SEQTYP
	  PUSH	R0
	  MOV	SEQTYP,R0
	.ENDC
	.IF	DIF R1,SEQLOC
	  NOTREG 1,SEQLOC
	  PUSH	R1
	.ENDC
	CALLX	ASNSEQ
	.IF	DIF R1,SEQLOC
	  MOV	R1,SEQLOC
	  POP	R1
	.ENDC
	.IF	DIF R0,SEQTYP
	  POP	R0
	.ENDC
	.ENDM	ASNSEQ

.SBTTL	CLRTMP	- MACRO TO CLEAR TEMP WORK BLOCK

	.MACRO	CLRTMP
	CALLX	CLRTMP
	.ENDM	CLRTMP

.SBTTL	SETDAT	- MACRO TO SET CURRENT DATE/TIME IN DATE/TIME FIELD

	.MACRO	SETDAT,MSGPTR,DATOFF,INVERT
	.NLIST	MEB
	  PUSH	<R1,R2>
	.IIF	DIF R1,MSGPTR	  MOV	MSGPTR,R1
	  MOV	#1440.,R2
	  .DATE
	  SUB	@#XRB+2,R2
	  MOV	R2,@#XRB+2
	  ADD	#DATOFF,R1
	.IF	NB INVERT
	  MOVB	@#XRB+1,(R1)+
	  MOVB	@#XRB+0,(R1)+
	  MOVB	@#XRB+3,(R1)+
	  MOVB	@#XRB+2,(R1)
	.IFF
	  MOV	@#XRB,(R1)+
	  MOV	@#XRB+2,(R1)
	.ENDC
	  POP	<R2,R1>
	.LIST	MEB
	.ENDM	SETDAT

.SBTTL	GETREC	- MACRO TO GET/FIND RECORD IN QUE FILE

	.MACRO	GETREC,MODE,KEYNUM,KEYBUF,RETRY
	.MCALL	NOTREG
	NOTREG	2,MODE			;R2 WILL POSSIBLY CONTAIN THE ONLY ADDR
	NOTREG	2,KEYNUM		; MODE, KEYNUM, AND RETRY ARE ALL IMMED
	NOTREG	2,RETRY
	.IF	DIF,R2,KEYBUF
	  PUSH	R2
	  MOV	KEYBUF,R2
	.ENDC
;	  PUSH	<R0,R1,R3>		; *21* R1 returns error status, so don't
	  PUSH	<R0,R3>			; *21* bother to save or restore it
	  MOV	MODE,R0
	  MOV	KEYNUM,R1
	  MOV	RETRY,R3
	CALLX	GETREC
;	  POP	<R3,R1,R0>		; *21* R1 returns error status, so don't
	  POP	<R3,R0>			; *21* bother to save or restore it
	.IF	DIF,R2,KEYBUF
	  POP	R2
	.ENDC
	.ENDM	GETREC

.SBTTL	GETxxx	- DEFINE MODE SYMBOLS FOR GETREC MACRO

;
; DEFINE SYMBOLS FOR PASSING MODE TO GETREC
;

	.DSECT	,NOCREF

GETNXT:	.BLKB		;GET NEXT
GETEQ:	.BLKB		;GET EQ
GETGT:	.BLKB		;GET GT
GETGE:	.BLKB		;GET GE
FNDNXT:	.BLKB		;FIND NEXT
FNDEQ:	.BLKB		;FIND EQ
FNDGT:	.BLKB		;FIND GT
FNDGE:	.BLKB		;FIND GE

.SBTTL	DEFINE QUEUE FILE KEYS SYMBOL NAMES AND LENGTHS

; Key #0 (seq no.-order key)

	SEQKEY=0			;symbol name for key
	SEQKLN=2				;key length

; Key #1 (job-order key)

	JOBKEY=1			;symbol name for key
	QUEKLN=6				;key length

; Key #1 (after-order key)

	AFTKEY=2			;synbol name for key
	AFTKLN=4				;key length

.SBTTL	OFFSETS	- DEFINE OFFSETS FOR IMPURE AREA

;
; DEFINE OFFSETS FOR QMAN'S IMPURE DATA BLOCK
;
	.DSECT	,NOCREF
BLKSIZ:	.BLKW			; SIZE OF IMPURE AREA ALLOCATED

L3QJOB:	.BLKW			; SUBFUN NUMBER OF LAST FUN TO RUN
INITSP:	.BLKW			; INITIAL VALUE OF QMAN'S SP REG
DSPBIT:	.BLKW	4		; SERVER DISPATCH FUNCTION BITS

JOBCNT:	.BLKW			; Pointer to JOBCNT word in the monitor

USRRIB:	.BLKW			; USER'S CHANNEL RIB NUMBER
SRVRIB:	.BLKW			; SERVER'S CHANNEL RIB NUMBER
URPRIB:	.BLKW			; USER REQUEST CHANNEL RIB NUMBER

MSGPTR:	.BLKW			; POINTER TO MESSAGE BLOCK
MSGLEN:	.BLKW			; LENGTH OF MESSAGE BLOCK
MSGEND:	.BLKW			; end address of message		;002

QUELST:	.BLKW			; POINTER TO START OF QDB LINKED LIST
SKDLST:	.BLKW			; POINTER TO START OF SKDB LINKED LIST
SPLLST:	.BLKW			; POINTER TO START OF SDB LINKED LIST

JOBSEQ:	.BLKW			; NEXT AVAILABLE JOB SEQ NUMBER
INTSEQ:	.BLKW			; NEXT AVAILABLE INTERNAL SEQ NUMBER

QFAB:	.BLKW			; POINTER TO QUEUE FAB
QRAB:	.BLKW			; POINTER TO QUEUE RAB

TMPBLK:	.BLKW	5		; temporary work block (for GETREC)
TMPSIZ	== <.-TMPBLK>/2		; length of temp block in words

SAVSTA:	.BLKW			; SAVED STATE OF MESSAGE DURING 'REDO'
KILCNT:	.BLKW			; COUNT OF QUEUE RECORDS DELETED
SPLSED:	.BLKW			; SEED OF PSEUDO RAN SERVER ID GENERATOR

SPAWN:	.BLKW			; JOB SPAWNING FLAG
RESFLG:	.BLKW			; WAITING ON RESOURCE FLAG
SKDTIM:	.BLKW			; TIMING SKDBS FLAG
FRMCHK:	.BLKW			; Forms_wait check in progress flag	;023
CNT.FW:	.BLKW			; Count of entries in FORMS_WAIT state	;023
FRMDAT:	.BLKW			; Date of last form change message	;023
FRMTIM:	.BLKW			; Time of last form change message	;023
FRMINT:	.BLKW			; Index pointer for FORMS_WAIT interval	;024

SAVQUE:	.BLKW			; QDB POINTER FOR MOVASB
SAVASB:	.BLKW			; ASB POINTER FOR MOVASB

LASTDA:	.BLKW			; LAST DATE QMAN RAN
LASTTI:	.BLKW			; LAST TIME QMAN RAN

PPN:	.BLKW			; sender's PPN		** keep     **	;024
JBNO:	.BLKB			; sender's job no. * 2	** these    **	;024
KBNO:	.BLKB			; sender's KB no.	** fields   **	;024
PRIV:	.BLKW	PRVSIZ		; sender's priv mask	** in order **	;024

OWNPPN:	.BLKW			; owner's PPN				;013
OWNPRV:	.BLKW	PRVSIZ		; owner's priv mask			;013

URPPTR:	.BLKW			; URP pointer to start of user buffer
URPEND:	.BLKW			; URP pointer to end of user buffer
URPLEN:	.BLKW			; URP length of user buffer
URPRCV:	.BLKB	6		; URP receiver ID for confirmation
URPCTX:	.BLKW			; URP context word for confirmation
URPTYP:	.BLKB			; URP request type
	.BLKB			; URP (reserved)
URPFLD:	.BLKW			; URP current field code
URPFLN:	.BLKW			; URP current field length
URPERR:	.BLKW			; URP error code
URPFLG:	.BLKW			; URP flag word
URPJCP:	.BLKB			; URP default no. job copies
URPFCP:	.BLKB			; URP default no. file copies
URPFLB:	.BLKW			; URP pointer to current filespec block
URPFFG:	.BLKW			; URP default filespec flag word
URPFTY:	.BLKW			; URP default filetype in RAD50

LOGBLK:	.BLKW			; saved offset to logfile block		;003

	.EVEN
SARGSIZ	= .			; TOTAL SIZE OF DATA BLOCK

;
; DEFINE MAXIMUM SEQUENCE NUMBER TO ASSIGN JOBS
; (INTERNAL SEQUENCE NUMBERS START AT MAX + 1)
;
MAXSEQ	=	<9999.>		;ROOM FOR MANY INTERNAL RECS IN QUEUE FILE

.ASSUME	4 GT $DSBYT/2 		;CHECK SIZE OF DSPBIT TABLE

.SBTTL	QDB	- DEFINE QUEUE DEFINITION BLOCK (QDB) FORMAT

;+
; FORMAT OF QUEUE DEFINITION BLOCK (QDB)
; QUEUE TYPES ARE DEFINED IN PBSMAC'S QUEDEF MACRO
;-

	.DSECT	,NOCREF
QU.NXT:	.BLKW			;LINK TO NEXT QDB
QU.ILN:	.BLKW			;LENGTH OF THIS BLOCK
				; ** START OF DATA FROM IQ COMMAND PACKET **
QU.SEQ:	.BLKW			;SEQ NO IN FILE
QU.QUE:	.BLKB			;QUEUE TYPE
	.BLKB			;RESERVED
QU.UID:	.BLKW			;UNIQUE IDENTIFIER
	.BLKW			;RESERVED
	.BLKW			;RESERVED
	.BLKW			;RESERVED
QU.STS:	.BLKW			;QUEUE STATUS WORD
QU.FLG:	.BLKW			;QUEUE FLAG WORD
QU.NML:	.BLKB			;QUEUE NAME LENGTH
QU.NAM:	.BLKB	NAM.LEN		;QUEUE NAME 
QU.FML:	.BLKB			;DEFAULT FORM NAME LENGTH
QU.FRM:	.BLKB	NAM.LEN		;DEFAULT FORM NAME
QU.DPR:	.BLKB			;DEFAULT PRIORITY
	.BLKB			;RESERVED
QU.DP0:				;DEFAULT PRINT PAGE LIMIT
QU.DCP:	.BLKW			;DEFAULT BATCH CPU  LIMIT
QU.DP1:				;DEFAULT PRINT PAGE LIMIT
QU.DTI:	.BLKW			;DEFAULT BATCH TIME LIMIT
QU.MPR:	.BLKB			;MAXIMUM PRIORITY
	.BLKB			;RESERVED
QU.MP0:				;MAXIMUM PRINT PAGE LIMIT
QU.MCP:	.BLKW			;MAXIMUM BATCH CPU  LIMIT
QU.MP1:				;MAXIMUM PRINT PAGE LIMIT
QU.MTI:	.BLKW			;MAXIMUM BATCH TIME LIMIT
QU.PRV:	.BLKW	PRVSIZ		;PRIVS REQUIRED FOR QUEUE ENTRY

.ASSUME	.-QU.SEQ EQ IQ.LEN	; ** END OF INFO FROM IQ COMMAND PACKET
QU.JOB:	.BLKW			;NUMBER OF ACTIVE JOBS
QU.ASB:	.BLKW			;LINK TO ASSIGNED SERVER BLOCK (ASB) LIST

QU.LEN	=.			;QDB LENGTH

.ASSUME	QU.NXT EQ 0		;ENSURE LINK WORD AT OFFSET 0

.SBTTL	QDB	- DEFINE STATUS BITS FOR QDB

;+
;	DEFINE QU.STS STATUS BITS
;-

	.BSECT	,NOCREF
QU$DFL:	.BLKB	.		;DEFAULT QUEUE INDICATOR
QU$PIN:	.BLKB	.		;QUEUE PAUSED INCOMING
QU$POU:	.BLKB	.		;QUEUE PAUSED OUTGOING
QU$MDL:	.BLKB	.		;QUEUE MARKED FOR DELETION

.SBTTL	DEFINE ASSIGNED SERVER BLOCK (ASB) FORMAT

;+
; FORMAT OF ASSIGNED SERVER BLOCK (ASB)
;-

	.DSECT	,NOCREF
AQ.NXT:	.BLKW			;LINK TO NEXT ASB 
AQ.ILN:	.BLKW			;LENGTH OF THIS ASB
				; ** START OF DATA FROM AS COMMAND PACKET **
AQ.SEQ:	.BLKW			;SEQUENCE NUMBER
AQ.QUE:	.BLKB			;QUEUE TYPE
	.BLKB			;RESERVED
AQ.UID:	.BLKW			;ENTRY DATE
	.BLKW			;RESERVED
	.BLKW			;RESERVED
	.BLKW			;RESERVED
AQ.STS:	.BLKW			;STATUS
AQ.FLG:	.BLKW			;FLAGS
AQ.SPL:	.BLKW			;SDB ADDR
AQ.QSQ:	.BLKW			;QDB SEQ NO.
AQ.SSQ:	.BLKW			;SDB SEQ NO.

AQ.LEN = .			;length of ASB entry

.ASSUME	AQ.NXT EQ 0		;ENSURE LINK WORD AT OFFSET 0

.SBTTL	DEFINE SCHEDULER DATA BLOCK (SKDB)

;+
; FORMAT OF FIXED SCHEDULER DATA BLOCK (SKDB)
;-

	.DSECT	,NOCREF
SK.NXT:	.BLKW			;LINK TO NEXT SKDB
SK.ILN:	.BLKW			;LENGTH OF THIS ENTRY
SK.TMR:	.BLKW			;TIME OUT TIMER (..IDLE CONTROLS IDLE TIME)
SK.ETB:	.BLKW	<QT$BAD>	;QUEUE TYPE ENTRY TABLE (PTS TO VAR AREA) ;023
SK.JOB:	.BLKB			;RSTS JOB NUMBER OF THE SKDB
SK.STS:	.BLKB			;STATUS BYTE
SK.CTB:	.BLKW	<QT$BAD>	;TYPE COUNT TABLE (NUM OF SERVERS/TYPE) ;023
	SK.ENT=.		;START OF ARRAY ENTRY

;+
; FORMAT OF VARIABLE SCHEDULER DATA BLOCK (SKDB)
;-

	.DSECT	,NOCREF
SK.QUE:	.BLKB			;QUE TYPE OF THIS ENTRY
SK.USE:	.BLKB			;IN USE FLAG
SK.SDB:	.BLKW			;POINTER TO SDB THAT IS USING THIS RCVRID
SK.RNL:	.BLKB			;RECEIVER NAME LENGTH
SK.RNM:	.BLKB	NAM.LEN		;RECEIVER NAME
SK.SID:	.BLKW			;THEIR (SENDERS) CID
SK.RID:	.BLKW			;OUR (RECIEVERS) CID

SK.ELN	= .			;LENGTH OF ARRAY ENTRY

;
; SK.USE FLAG VALUES
;

	.BSECT	,NOCREF
SK$INU:	.BLKB	.		;ENTRY IS IN USE
SK$NIU:	.BLKB	.		;ENTRY IS NOT IN USE

;
; SK.STS BIT DEFINITION
;

	.BSECT	,NOCREF
SK$RUN:	.BLKB	.		;SKDB IS ACTIVE
SK$SPN:	.BLKB	.		;SKDB IS BEING SPAWNED
SK$MDL:	.BLKB	.		;SKDB IS MARKED FOR DELETION
SK$PRI:	.BLKB	.		;SKDB IS PRIMARY
SK$TIK:	.BLKB	.		;SKDB IS TIMEING (CURRENTLY INACTIVE)

.SBTTL	DEFINE SERVER DEFINITION BLOCK FORMAT (SDB)

;+
;
; FORMAT OF SERVER DEFINITION BLOCK (SDB)
;
; Information from SP.DVL up to (but not including) SP.RCV is copied to the 
; job packet upon starting of a job (See SNDSPL in QMUTIL).
;
;-

	.DSECT	,NOCREF
SP.NXT:	.BLKW			;LINK TO NEXT SDB
SP.ILN:	.BLKW			;LENGTH OF THIS ENTRY
				; ** START OF DATA FROM ID COMMAND PACKET **
SP.SEQ:	.BLKW			;SERVER SEQ NO ON DISK
SP.QUE:	.BLKB			;SERVER TYPE
	.BLKB			;RESERVED (IPR)
SP.UID:	.BLKW			;UNIQUE IDENTIFIER
	.BLKW			;RESERVED
	.BLKW			;RESERVED (IAFD)
	.BLKW			;RESERVED (IAFT)
SP.STS:	.BLKW			;STATUS OF SERVER
SP.FLG:	.BLKW			;FLAGS FOR SERVER.
SP.DVL:	.BLKB			;DEFINED DEVICE NAME LENGTH
SP.DEV:	.BLKB	NAM.LEN		;DEFINED DEVICE NAME
SP.FML:	.BLKB			;FORM NAME LENGTH
SP.FRM:	.BLKB	NAM.LEN		;ACTIVE FORM NAME
SP.CHR:	.BLKW			;DEVICE CHARACTERISTICS
SP.PKN:				;PK NUMBER (BATCH)
SP.JHD:	.BLKB			;NO. JOB HEADERS
SP.JTR:	.BLKB			;NO. JOB TRAILERS
SP.RPR:				;  - RUN PRIORITY 
SP.FHD:	.BLKB			;NO. FILE HEADERS
SP.RBR:				;  - RUN BURST
SP.FTR:	.BLKB			;NO. FILE TRAILERS
SP.LNG:	.BLKB			;FORM LENGTH
SP.WID:	.BLKB			;FORM WIDTH
SP.BOM:	.BLKB			;Form bottom margin			;019
SP.TOM:	.BLKB			;Form top margin			;019
SP.LEM:	.BLKB			;Form left margin			;019
SP.RIM:	.BLKB			;Form right margin			;019
	.EVEN
SP.DRI	=	.-SP.SEQ	;END OF DEVICE RELATED INFO (SAME AS ID PKT)
SP.RCV:	.BLKW			;RCVR NAME PTR (PTS TO REC IN SKDB)
SP.FTL:	.BLKB			;FONT NAME LENGTH
SP.FNT:	.BLKB	NAM.LEN		;ACTIVE FONT NAME
SP.CTX:	.BLKW			;SAVED COPY OF CTX FIELD LAST PASSED
SP.FDL:	.BLKW			;LINK TO FONT DEFINITION LIST
SP.JBS:	.BLKW			;SEQ NUM OF CURRENT JOB
SP.FTS:	.BLKW			;SEQ NUM OF CURRENT FONT
SP.JOB:	.BLKW			;SERVER'S RSTS JOB NUMBER
SP.STA:	.BLKW			;CURRENT MESSAGE PROCESSOR STATE
SP.OST:	.BLKW			;PREVIOUS MESSAGE PROCESSOR STATE
	.EVEN

SP.LEN	= .			;SDB LENGTH

.ASSUME	SP.NXT	EQ 0		;ENSURE LINK WORD AT OFFSET 0

.SBTTL	DEFINE SERVER STATUS BITS

;
;STATUS BITS IN SP.STS
;

	.BSECT	,NOCREF
SP$ONL:	.BLKB	.	;     1 = server online to QMAN
SP$NRD:	.BLKB	.	;     2 = server not ready e.g. no logins 
SP$PDV:	.BLKB	.	;     4 = server paused
SP$OFL:	.BLKB	.	;    10 = server sent OFF-LINE cmd
SP$ALC:	.BLKB	.	;    20 = server device allocated
SP$HNG:	.BLKB	.	;    40 = server device hung
SP$JOB:	.BLKB	.	;   100 = job started (and ACK recieved)
SP$SYN:	.BLKB	.	;   200 = SYNC error detected
SP$NIU:	.BLKB	.	;   400 = server not in use (ready, but no jobs)
SP$MDL:	.BLKB	.	;  1000 = server is marked for deletion
SP$SPN:	.BLKB	.	;  2000 = server is waiting for spawn
SP$RES:	.BLKB	.	;  4000 = server is waiting for resource
SP$CAR: .BLKB	.	; 10000 = server experienced carrier loss
SP$TEN: .BLKB	.	; 20000 = server is "tentative"
SP$DIS: .BLKB	.	; 40000 = server is disabled
SP$LAT:	.BLKB	.	;100000 = server is an outbound LAT port

.SBTTL	DEFINE OFFSETS FOR QUEUE TYPE TABLE (QTYTBL)

	.DSECT	,NOCREF
QT.JCP:	.BLKB			;default no. job copies
QT.FCP:	.BLKB			;default no. file copies
QT.FFG:	.BLKW			;default file flag word
QT.FTY:	.BLKW			;default filetype in RAD50
QT.NML:	.BLKB			;default entry name length
QT.NAM:	.BLKB	NAM.LEN		;default entry name
	.EVEN			;ensure next offset on word boundary
QT.VAL:	.BLKW			;address of validation routine
QTYSIZ:				;size of entry in QTYTBL table

.SBTTL	SUBFUN	- DECLARE QMAN'S FUNCTIONS

	SPLSTART

	SPLFUN	S.FAST,SETSRP,SET	;SET SPECIAL RUN PRIORITY
	SPLFUN	S.SRVD,SRVDCL,SET	;DECLARE SERVER MSG RCVR
	SPLFUN	S.USRD,USRDCL,SET	;DECLARE USER MSG RCVR
	SPLFUN	S.URPD,URPDCL,SET	;DECLARE USER REQUEST PACKET RCVR
	SPLFUN	S.INIT,QCMPRS,SET	;INIT/COMPRESS QUEUE FILE
	SPLFUN	S.SLOW,CLRSRP,SET	;DROP SPECIAL RUN PRIORITY
	SPLFUN	S.WAKE,WAKEUP,SET	;WAKE UP ANY "AFTER" JOBS

	SPLFUN	S.MRDO,MREDO		;GETMSG REDO FUNCTION
	SPLFUN	S.SRVM,SRVMSG,SET	;GET SERVER MSG
	SPLFUN	S.USRM,USRMSG,SET	;GET USER MSG
	SPLFUN	S.URPM,URPMSG,SET	;get URP msg			;021
	SPLFUN	S.UPDT,UPDTMR		;UPDATE SKDB'S TIMERS

;022
;+
;  If we're trying to shutdown, don't bother scheduling any new
;  jobs, or spawning another copy of PBS
;-
;022

	SPLFUN	S.DIE,DEATH		;SHUTDOWN QMAN
	SPLFUN	S.SCHJ,SCHJOB,SET	;Job scheduler			;023
	SPLFUN	S.SPN,SPNWAI		;SPAWN SECONDARY JOB
	SPLFUN	S.STAL,NLJOB,SET	;RUN NULL JOB = ALWAYS SET

	SPLEND

