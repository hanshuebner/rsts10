.INCLUDE	%CMN:COMMON%
.LIBRARY	%SYSTEM:PBSMAC%
.LIBRARY	%LB:RMSMAC%
.INCLUDE	%SYSTEM:QMDEF%
TITLE	QMAN,<QMAN THE MAIN SEGMENT>,0A,10-MAY-91,SJM/PRL/KCG

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit history for QMAN

;+
;Edit	By	Date		Reason
;
; 000	KCG	23-Apr-84	Creation for Version 9.0
;
;-

.SBTTL	QMAN	- INITIALIZE QMAN PSECT

	.PSECT	QMAN,RO,CON		;init QMAN psect

.SBTTL	QMAN	- START OF QMAN

	DEBUG	OFF			;enable/disable debuging

	.ENABL	LSB

QMAN::	NOP
	MOV	@UCNTXT,R5		;get user context word (0=first time)
	BNE	10$			;skip init if not first time
	CALLX	QMINIT			;first time - do initialization
	MOV	SP,INITSP(R5)		;save initial state of stack pointer
10$:	CLR	R1			;clear index counter
	MOV	@UCNTXT,R5		;make sure R5 is always set correctly
	MOV	INITSP(R5),SP		;ensure clean stack
	MOV	R5,R2			;get base of impure area
	ADD	#DSPBIT,R2		;add offset to dispatch bits table
	MOV	R2,R0			;save copy of pointer to table
20$:	TSTB	(R2)			;any bits set in this byte?
	BNE	30$			;yes, skip to dispatcher
	ADD	#8.,R1			;no, incr index counter by 8 bits
25$:	INC	R2			;and point to next byte
	BR	20$			;and on to next byte

30$:	MOV	#1,R3			;init to check first bit
40$:	BITB	R3,(R2)			;is this bit set?
	BNE	50$			;yes, so go process function
	INC	R1			;no, incr index counter
	ASLB	R3			;slide the test bit over
	BCC	40$			;try next bit if any more
	BR	25$			;no more, so on to next byte

50$:	CMP	#$DSMAX,R1		;is the function code in range?
	BHIS	60$			;yes, so continue
	CRASH				;no, so crash (table is corrupted)

60$:	BICB	R3,(R2)			;clear the function bit prior to call
	ASL	R1			;make index counter * 2

;+
; R0 points to function bits at time of following call
; R5 points to the impure area
;-

	MOV	R1,L3QJOB(R5)		;save subfun number in case of trouble
	CALL	@$DSPAT(R1)		;call routine in dispatch table
	BR	10$			;and start the scan all over again

	.DSABL	LSB

GLOBAL	<UCNTXT>

	.END
