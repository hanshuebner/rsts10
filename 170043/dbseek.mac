	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /DSK:DBDEF/
	.INCLUDE /DSK:MIDDEF/
TITLE	DBSEEK,<OVERLAPPED SEEK RH11/RP04/05/06/07 DRIVER>,0A,10-MAY-91,RH/MHB/RL/GW/WRM/RVR/FEK/TWH/VAM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR DBSEEK
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-08
;  001	FEK  23-DEC-82	ADD DYNAMIC READ-ONLY DUAL PORT CODE
;  002	FEK  03-MAR-83	DO RETRIES PROPERLY
;  003	FEK  26-Jul-83	Don't count errors on retries
;  004	TWH  28-OCT-83	ADD SUPPORT FOR IFUN
;  005	FEK  15-MAY-84	FIX IFUN support
;  006  VAM  23-Feb-85	Add non-existant device support for IFUN.
;  007  VAM  02-Apr-85	Don't log Write Check miscompares as hard errors
;  008  VAM  30-May-85	Add RELFUN.
;  009	DBM  02-Sep-85	Handle seek interrupts during I/O requests.
;
;			[RSTS V9.3]
;  010  VAM  19-Nov-86	Count uncorrectable ECC errors in UNTERR.
;
;			[RSTS V9.6]
;  011	KCG  29-Feb-88	Add FMTFUN.
;
;-

	DEFORG	DBSEEK

	DEFORG	DBDSK

	INCLUDE	<RHDDSK,OPTDSK,ECCDSK,ERLDSK>

	DSKDEF	DB

.SBTTL	ERROR LOGGING

	ERRENT	LOG$DB

	CALLX	ERLDSK,R5	;;;USE COMMON ROUTINE
	  .BYTE	ERC$DB		;;;ERROR CODE
	  .BYTE	-1		;;;OVERLAPPED SEEK
	  .BYTE	RHCS1,9.	;;;OFFSET, 9. REGISTERS
	  .BYTE	RHMR,10.	;;;OFFSET, 10. REGISTERS
	  .BYTE	0,0		;;;THAT'S ALL
	MOVB	@DSQPTO(R4),(R0) ;;;SET OFFSET INFORMATION
	TSTB	DSQFUN(R4)	;;;REALLY AN RP04/5/6?
	BPL	10$		;;;YES
	DECB	(R5)		;;;NO, REALLY AN RM02/3/5/80/RP07
.ASSUME	ERC$DR	EQ ERC$DB-1	;;;MAKE SURE THIS IS LEGAL
10$:	RETURN			;;;BACK TO ERROR LOGGER

;	ORDER FOR THE FOLLOWING IS IMPORTANT -- DO NOT CHANGE!

.SBTTL	CYLINDER & TRACK SIZES FOR DISKS HANDLED BY THIS DRIVER

MSZTBL:	MASSIZ	<RP04,RP05,RP06,RM02,RM03,RM80,RM05,RP07>

.SBTTL	MASSBUS ID TABLE FOR DISKS HANDLED BY THIS DRIVER

MIDTBL:	MASSID	<RP04,RP05,RP06,RM02,RM03,RM80,RM05,RP07>

.SBTTL	DISK SIZES IN DCN'S FOR DISKS HANDLED BY THIS DRIVER		;004

DBDCN:	.WORD	42949.,	42949.,	42583.,	0	;RP04,RP05,RP06,?	;004
	.WORD	32912.,	32912.,	60643.,	62544.	;RM02,RM03,RM80,RM05	;004

.SBTTL	DISK DCS'S FOR DISKS HANDLED BY THIS DRIVER			;004

DBDCS:	.WORD	4.,	4.,	8.,	0	;RP04,RP05,RP06,?	;004
	.WORD	4.,	4.,	4.,	8.	;RM02,RM03,RM80,RM05	;004


.SBTTL	FORM THE PHYSICAL ADDRESS AND SET UP DSQ

;+
; QDS$DB - CALCULATE DISK DEPENDENT PHYSICAL ADDRESS
;	   FROM LBN AND SET UP DSQ FOR TRANSFER.
;
;	CALL:	R0 =  LSB OF STARTING LBN OF TRANSFER
;		R1 =  MSB OF STARTING LBN OF TRANSFER
;		R2 =  DEVICE DRIVER INDEX
;		R3 =  PHYSICAL UNIT # * 2
;		R4 => DSQ TO SET UP
;		R5 =  FIP UNIT # * 2
;		CALL	QDS$DB
;		
;	RETURN:	R0,R1,R3 RANDOM
;		DSQ SET UP WITH CORRECT DISK ADDRESSES FOR TRANSFER.
;		OPTIMIZATION WORD (CYLINDER ADDRESS) WILL BE 177776
;		(-2) IF DISK TYPE WASN'T FOUND IN DISK SIZE TABLE.
;		THIS SHOULD CAUSE A FATAL ERROR WHEN THE TRANSFER IS
;		INITIATED.
;
;		ORDER IS NORMALLY: RP04=2,  RP05=1,  RP06=0,  RM02=-1,
;				   RM03=-2, RM80=-3, RM05=-4, RP07=-5
;-
QDS$DB::NOP			;OPTIONALLY PATCHED TO BPT FOR DEBUGGING
	MOV	R3,(R4)		;SET QUEUE ROOT OFFSET
	CMPB	DSQSAV(R4),#IFUN;IS THIS A DRIVE INITIALIZE?		;004
	BEQ	30$		;YEP					;004
	CMPB	DSQSAV(R4),#RELFUN	;How about a Release?		;008
	BEQ	30$			;Yup.				;008
	CMPB	DSQSAV(R4),#FMTFUN	;Maybe a FORMAT?		;011
	BEQ	30$			;Yo				;011
	MOV	R1,-(SP)	;FREE UP R1
	MOV	R2,-(SP)	; AND R2
	MOVB	MID$XX(R5),R1	;GET A WORKING COPY OF THE DISK'S MASSBUS ID
	MOV	#MIDTBL,R2	;POINT TO THE TABLE OF MASSBUS ID'S
10$:	MOVB	(R2)+,R3	;GET ANOTHER MASSBUS ID FROM THE TABLE
	BEQ	20$		;END OF TABLE AND NO MATCH, SO EXIT
	CMPB	R3,R1		;DOES THE DISK MATCH THIS ENTRY?
	BNE	10$		;NOPE, SO TRY ANOTHER ID
	MOV	#MIDTBL+3,R3	;ID'S MATCHED, SO OFFSET TO FIRST NON-RP04 DSK
	SUB	R2,R3		;MAKE VALUE POSITIVE IF RP04 TYPE DSK (RP06=0)
	SUB	#MIDTBL+1,R2	;AND FIND OFFSET INTO TABLE FOR THIS DISK
	MOVB	R3,DSQFUN(R4)	;MAKE THE DISK CODE
	ASL	R2		;BUMP UP R2
	ASL	R2		; TO MAKE OFFSET INTO DISK SIZE TABLE
	MOV	#MSZTBL,R3	;POINT TO DISK SIZE TABLE
	ADD	R2,R3		;NOW INDEX INTO IT
	MOV	(SP)+,R2	;GET BACK OLD R2
	MOV	(SP)+,R1	; AND R1 AS WELL
	DIV	(R3)+,R0	;DIVIDE FOR THE CYLINDER NUMBER
	MOV	R0,DSQOPT(R4)	;STORE THE ANSWER (CYL NUM)
	CLR	R0		;CLEAR HIGH ORDER FOR TRACK DIVIDE
	DIV	(R3),R0		;GET ANSWER=TRACK, REMAINDER=SECTOR
	SWAB	R0		;PUT TRACK INTO HIGH BYTE
	BIS	R1,R0		; AND PUT SECTOR INTO LOW BYTE
	MOV	R0,DSQPDA(R4)	;NOW STORE TRACK/SECTOR
	MOV	#ECOFTB-1,DSQPTO(R4) ;RESET TO NO OFFSETS INITIALLY
	BR	30$		;JUMP AROUND UNKNOWN-DISK HANDLING CODE

20$:	CLRB	DSQERR(R4)	;CLEAR THE RETRY COUNT
	MOV	#-2,DSQOPT(R4)	;FORCE AN IMPOSSIBLE CYLINDER,
	MOV	(SP)+,R2	;RESTORE THE REGS WE
	MOV	(SP)+,R1	; SAVED EARLIER

30$:	CALL	@(SP)+		;NOW CO-ROUTINE RETURN			

.SBTTL	COMES HERE IF FIRST IN DRIVER'S QUEUE

	BR	DBATTN		;;CHECK FOR SEEKS TO START

GLOBAL	<MID$XX,ECOFTB>

.SBTTL	PROCESS ATTN LINES

.ENABL	LSB

10$:	MOV	#BITBYT,R0	;;GET BIT-TO-BYTE TABLE POINTER
20$:	BITB	R4,(R0)+	;;DOES ATTN LINE MATCH THIS BIT?
	BEQ	20$		;;NOPE, LOOP UNTIL A MATCH...
	MOVB	-(R0),R4	;;YEP, GET THE SINGLE BIT MATCHING ATTN LINE
	SUB	#BITBYT,R0	;; AND FIND THE UNIT NUMBER OF ATTN LINE
	MOV	R4,RHAS(R3)	;;TURN OFF THE FOUND ATTN LINE
	CMP	R0,#CNT.DB	;;OUT OF RANGE?
	BHIS	DBATTN		;;YES, IGNORE
	MOVB	R0,RHCS2(R3)	;;WITHIN RANGE, SELECT THE OFFENDING UNIT
	ASL	R0		;;FIND THE
	ADD	#DSS$DB,R0	;; STATUS TABLE POINTER
	TST	(R0)		;;IS DRIVE IDLE NOW?
	BEQ	30$		;;YES
	TSTB	(R0)+		;;NOT IDLE, DOING I/O??
	BEQ	DBATTN		;;DON'T TOUCH IF DOING I/O
30$:	CLRB	(R0)		;;ELSE SET DRIVE TO I/O WAIT
	MOVB	#IE,(R3)	;;ENSURE CONTROL IS INTERRUPT ENABLED
	MOV	R4,RHAS(R3)	;; AND ENSURE ATTN LINE IS STILL OFF
DBATTN:	MOV	CSR.DB,R3	;;GET THE CSR POINTER
	MOVB	RHAS(R3),R4	;;ANY LINE ON?
	BNE	10$		;;YES, SO PROCESS IT
	.BR	CKSEEK		;;NO, CHECK FOR SEEKS TO START

.DSABL	LSB

GLOBAL	<BITBYT,CNT.DB,DSS$DB,IE,CSR.DB>

.SBTTL	CHECK FOR STARTING SEEKS AND/OR I/O

.ENABL	LSB

UMR$DB::
CKSEEK:	MOV	#CNT.DB,R5	;;GET COUNT OF NUMBER OF DRIVES TO CHECK
	MOV	DBDPT1,R0	;;GET THE ROUND-ROBIN POINTER
10$:	CMP	R0,#DQS$DB	;;OUT OF RANGE?
	BHI	20$		;;NO
	MOV	#DQE$DB,R0	;;YES, SO RESET POINTER
20$:	MOV	-(R0),R4	;;GET REQUEST IN THIS DRIVE'S QUEUE
	BEQ	30$		;;NO REQUEST, SO GO TO NEXT DRIVE
	TST	DSO$XX(R0)	;;REQUEST, GET DRIVE'S STATUS
	BEQ	40$		;;DRIVE IS IDLE, GO OPTIMIZE QUEUE
	BPL	60$		;;DRIVE IS WAITING FOR SOMETHING
30$:	SOB	R5,10$		;;LOOP FOR ALL DRIVES
	RETURN			;; THEN EXIT

35$:	BIT	#RBPGM,RHDS(R3)	;;IS THIS ONE DP-ED			;001
	BEQ	30$		;;NO, SO SKIP THE RELEASE		;001
	MOVB	#IE+RELDP,(R3)	;;AND RELEASE A DP DRIVE IF DONE WITH IT;001
	BR	30$		;;NOW, JUST CONTINUE			;001

40$:	CMPB	DSQSAV(R4),#IFUN;;IS THIS A DRIVE INITIALIZE?		;004
	BEQ	110$		;;YEP					;004
	CMPB	DSQSAV(R4),#RELFUN	;;How about a Release?		;008
	BEQ	105$			;;Yup.				;008
	CMPB	DSQSAV(R4),#FMTFUN	;;FORMAT command?		;011
	BEQ	104$			;;Yes, send back an error	;011
	BIT	#RBPGM,RHDS(R3)	;;IS THIS ONE DP-ED			;001
	BNE	45$		;;YES, SO SKIP THE OPTIMIZE		;001
	CALLX	OPTDSK,R5,OPT$DB ;;DRIVE IS IDLE, OPTIMIZE ITS QUEUE
45$:	CLRB	DSQFAR(R4)	;;USE FAIRNESS CNT AS SKIP SECTOR RETRY FLAG
	CALL	SETUP		;;SET UP DRIVE AND ADDRESSES
	BCS	50$		;;SKIP ON CYLINDER CHECK FOR RM02/3/5/80/RP07
	CMP	DSQOPT(R4),RBCC(R3) ;;IS RP04/5/6 ON CYLINDER NOW?
	BEQ	60$		;;YES, SO NO SEEK NEEDED
50$:	MOV	#-5*400+1,DSO$XX(R0) ;;NO, SET SEEK IN PROGRESS TIMEOUT VALUE
	MOV	#ECOFTB-1,DSQPTO(R4) ;; AND RESET ANY OFFSET SEQUENCE
	MOVB	#IE+SEEK,(R3)	;;NOW START THAT DRIVE SEEKING
	BR	30$		;; THEN CONTINUE CHECKING DRIVES

60$:	TST	DSQCNT(R4)	;;IS THERE A REMAINING WORD COUNT?
	BPL	100$		;;NO, ALL DONE
	CMP	DSQPTO(R4),#ECOFTE ;;YES, EXHAUSTED ALL OFFSETS?
	BLO	70$		;;NOT YET
	CLRB	DSQERR(R4)	;;YES, FAKE A DATA ERROR
	BR	100$		;; AND CALL IT ALL DONE

SSEGDB::			;;** KLUDGE ** RETRY TRANSFER FOR SKP SEC ERR
70$:	CALL	SETUP		;;SET UP THE DRIVE AND ADDRESSES
	INC	DSO$XX(R0)	;;INDICATE DRIVE WAITING FOR I/O
	BIT	DBDCTL,DBDCTL	;;CAN WE USE CONTROL FOR I/O? (SAVE C-BIT)
	BNE	35$		;;NO, WAIT SOME MORE...
	BCC	80$		;;SKIP THE OFFSET LOADING IF RP04/5/6
	CMP	DSQPTO(R4),#ECOFTB ;;NEED TO SET OFFSET FOR RM02/3?
	BLOS	80$		;;NO, NOT INTO OFFSETS
	MOVB	#IE+OFFSET,(R3)	;;YES, (PRE-)SET OFFSET MODE
80$:	CALLX	RHDADR		;;TRY TO MAP THIS TRANSFER
	BCS	35$		;;FAILED -- CONTINUE TO ISSUE SEEKS
	MOV	R0,DBDCTL	;;GRAB USAGE OF CONTROL
	MOV	R0,DBDPT1	;; AND REMEMBER WE DID THIS DRIVE
	CLR	DSO$XX(R0)	;;SET DRIVE STATUS FOR DOING I/O

	TSTB	DSQFAR(R4)	;;ARE WE HANDLING A SKIP SECTOR ERROR?
	BEQ	90$		;;NOPE, SO JUST START THE OPERATION AS USUAL
	BIS	#RMSSEI,RBOF(R3) ;;SSE, SO SET SKIP SECTOR ERROR INHIBIT
90$:	CALLX	RHDSRT		;;NOW STARTUP AN RH11 TYPE DISK
BRDRAT:	BR	DBATTN		;; AND CHECK ATTN LINES AGAIN...	;004

100$:	JMP	DBDONE		;;ALL DONE WITH THIS UNIT

104$:	SETERR	ERRERR,DSQERR(R4) ;;FORMAT unsupported here		;011
105$:	BR	140$		;;Fix out-of-range branch.		;008

	.PAGE
	.SBTTL	IFUN Handler
;+
;
;	I F U N   R E Q U E S T   H A N D L E R				;003
;
; The IFUN (Initialize FUNction) is used to check for the presence of a
; given RM/RP drive, and to determine the drive type and fill in the
; UNTSIZ and DEVCLU table entries if it's there.
;
; Here are the steps taken for an IFUN request;
;
; 1)	Clear out the UNTSIZ entry for that drive
; 2)	Wait for the controller to become ready, and then do a subsystem reset.
; 3)	Select the drive in question.
; 4)	Check to see if it's there.  If not, we return '?Device not available'
;	in the DSQ, but we don't log a hard error.
; 5)	If the drive is there, but it's ported away from us, or it's not spun
;	up, we return with '?Device hung or write locked' in the DSQ, but again
;	it's not a hard error.
; 6)	If all goes well, we check for other errors.  If any are found, we log
;	a hard error and return '?Device hung or write locked'.
; 7)	If no errors, we set the UNTSIZ and DEVCLU entries for the drive,
;	based on the Massbus ID.
;
;-

110$:	MOVB	DSQUNT(R4),R1		;;Get FIP unit number.		;006
	ASL	R1			;;Make it an index.		;006
	CLR	UNTSIZ(R1)		;;Flag the unit size as unknown	;006
	MOV	#10,R1			;;Now, R1 is MCPE retry flag.	;006
115$:	TSTB	(R3)			;;Controller ready yet??	;006
	BPL	115$			;;Nope, wait for it.		;006
	MOV	#RHCLR,RHCS2(R3)	;;Do a subsystem reset.		;006
	MOVB	DSQPUN(R4),R2		;;Get the physical unit number.	;006
	MOV	R2,RHCS2(R3)		;;Select a drive.		;006
	MOVB	#RHESET,(R3)		;;Reset and sieze the drive.	;006
	BIT	#RHNED,RHCS2(R3)	;;Is it there at all??		;006
	BNE	180$			;;Nope.				;006
	BIT	#RHDPR,RHDS(R3)		;;Can we get to it??		;006
	BEQ	190$			;;Nope.				;006
	BIT	#RHMOL,RHDS(R3)		;;Medium online??		;006
	BEQ	190$			;;Nope, but not a hard error.	;006
	BIT	#RHMCPE,(R3)		;;Massbus parity error?		;006
	BEQ	120$			;;No, everything is cool.	;006
	SOB	R1,115$			;;Otherwise, try it again...	;006
	BR	160$			;;Sorry, hard error time!!	;006

120$:	BIT	#40000,RHDS(R3)		;;Any errors set??		;006
	BNE	160$			;;Yup, hard error time.		;006
	MOV	RHDT(R3),R2		;;Get massbus ID.		;006
	MOV	R2,R1			;;COPY MASSBUS ID		;004
	BIC	#004000,R2		;;IGNORE DUAL PORT BIT		;004
	CMP	R2,#RP07ID		;;IS IT A RP07?			;004
	BNE	130$			;;NOPE				;004
	MOVB	DSQUNT(R4),R2		;;GET FUN			;005
	ASL	R2			;; TIMES TWO			;004
	MOV	R1,MID$XX(R2)		;;SET MID			;004
	MOV	#62996.,UNTSIZ(R2)	;;SET SIZE			;004
	MOVB	#16.,DEVCLU(R2)		;;AND DCS			;005
	BR	140$			;;DONE				;004

130$:	CMP	R2,#RM05ID	;;IS THIS ONE WE KNOW ABOUT?		;004
	BHI	160$		;;NOPE					;004
	SUB	#RP04ID,R2	;;GET IN RANGE				;004
	ASL	R2		;;MAKE IT A WORD INDEX			;004
	MOV	R1,-(SP)	;;SAVE R1				;004
	MOVB	DSQUNT(R4),R1	;;GET FUN				;005
	ASL	R1		;;TIMES TWO				;004
	MOV	(SP)+,MID$XX(R1)	;;SAVE THE MASSBUS ID		;004
	MOV	#DBDCN,-(SP)	;;POINT TO TABLE OF DCN			;004
	ADD	R2,(SP)		;;INDEX INTO IT				;004
	MOV	@(SP)+,UNTSIZ(R1)	;;SET THE SIZE IN DC'S		;004
	BEQ	160$		;;ILLEGAL IF 0				;004
	MOV	#DBDCS,-(SP)	;;POINT TO TABLE OF DCS			;004
	ADD	R2,(SP)		;;INDEX INTO IT				;004
	MOVB	@(SP)+,DEVCLU(R1)	;;SET THE DCS			;005
140$:	CALLX	DFINT9		;;Dequeue request.			;006
	JMP	30$		;;Join mainline code.			;006

160$:	CLZ			;;SAY HARD ERROR			;004
	LOG$DB			;;LOG AN ERROR				;004
	CALLX	DFINT1		;;CHECK CC'S AND COUNT ERROR		;004
	BR	140$		;;DONE					;004

180$:	MOVB	#NOTAVL,DSQERR(R4)	;;Tell 'em it's not there.	;006
	BR	140$			;;And go back.			;006

190$:	MOVB	#HNGDEV,DSQERR(R4)	;;Tell 'em it's hung		;006
	BR	140$			;; and join the crowd.		;006

GLOBAL	<MID$XX,ECOFTB,CSR.DB,DQS$DB,OPT$DB,DSO$XX,UNTSIZ,DEVCLU>	;001
GLOBAL	<CNT.DB,DBDPT1,DBDCTL,DQE$DB,IE,ECOFTE>
GLOBAL	<NOTAVL,HNGDEV,ERRERR>						;006

.DSABL	LSB

.SBTTL	INTERRUPTS (PR5)

INT$DB::MOV	CSR.DB,R3	;;GET A HARDWARE POINTER
	MOV	DBDCTL,R0	;;GET IN-PROGRESS INDICATOR
	BEQ	BRDRAT		;;NOTHING, SO PROCESS ATTN LINES
	MOV	(R0),R4		;;Get top of queue request		;009
	MOVB	DSQPUN(R4),RHCS2(R3) ;;Re-select that drive		;009
	BITB	#RHDRY!RHERR,RHDS(R3) ;;Drive ready or have an error?	;009
	BEQ	BRDRAT		;;No, so another drive must have ATTN	;009
	CLR	DBDCTL		;;Yes, clear in-progress indicator	;009

	CALL	@RELUMR		;;RELEASE ANY WINDOWS WE'RE HOLDING
	CLR	DSO$XX(R0)	;;SAY DRIVE IS NOW IDLE

	BIT	#RBHCE!RBHCRC,RHER(R3) ;IS HEADER OK ENOUGH TO TELL US SSE?
	BNE	40$		;HARDLY...

; RM80 SPECIFIC CODE. FOR SKIP SECTORS, WE MODIFY THE DSQ TO RESUME TRANSFER
; FROM SECTOR THAT CAUSED ERROR. ALL PARAMETERS ARE CHANGED EXCEPT FOR THE
; STARTING FBN -- THIS IS KEPT INTACT FOR ERROR LOGGING REASONS...


	BIT	#RMSSE,RMER2(R3) ;DID WE GET A SKIP-SECTOR ERROR?
	BEQ	40$		;NO, SO CHECK EVERYTHING ELSE

.SBTTL	REDO TRANSFER IF SKIP SECTOR ERROR (WITHOUT CHECKING OTHER DRIVES!)

	DECB	DSQFAR(R4)	;SSE FLAG -- HAVE WE HANDLED 127 SSE'S YET?
	BMI	10$		;NOPE, NO SWEAT.
	MOVB	#-1,DSQFAR(R4)	;YES, SO RESET SSE HANDLER COUNT (SORRY!)
10$:	MOV	R0,-(SP)	;WE'LL NEED R0 AND
	MOV	R1,-(SP)	; R1 FOR SCRATCH

; ONE COMPLETE CYL ON RM80 HOLDS MORE THAN 65535 WORDS, SO IF TRK-SEC VALUE
;  IS LESS THAN AT START OF XFER, WE HAVE CROSSED A CYLINDER BOUNDARY...

	MOV	RBDA(R3),R0	;GET WORKING COPY OF TRK-SEC VALUE, AND SET IT
	DEC	R0		; TO PRE-SSE VALUE (SECTR ALWAYS INC'D ON SSE)
	CMP	R0,DSQPDA(R4)	;DID CYL CHANGE SINCE THE XFER STARTED?
	BMI	20$		;YEP, RESET OFFSETS
	DEC	DSQOPT(R4)	;NO, BUT WE'LL INCR IT LATER, SO DECR IT NOW
	CMPB	RBDA+1(R3),DSQPDA+1(R4) ;SAME CYL, BUT DIFFERENT TRACK?
	BEQ	30$		;NOPE, OFFSET STILL OK
20$:	MOV	#ECOFTB-1,DSQPTO(R4)	;TRK OR CYL IS NEW, SO NO OFFSET YET
	CLRB	DSQCTO(R4)	;AND NO OFFSET RETRY COUNT, EITHER
30$:	MOV	R0,DSQPDA(R4)	;XFER RE-STARTS AT BAD TRACK AND SECTOR
				; (DSQ SHOWS LOGICAL, NOT PHYSICAL, SECTOR)
	INC	DSQOPT(R4)	;CORRECT FOR POSSIBLE CYLINDER CHANGE
	MOV	RHWC(R3),R1	;GET COPY OF (-)REMAINING WORDS TO XFER
	SUB	DSQCNT(R4),R1	;ESTIMATE (-)# WORDS XFER'D
	BIC	#377,R1		;ROUND DOWN TO LOWEST BLOCK MULTIPLE
	ADD	R1,DSQCNT(R4)	;AND MAKE THE NEW (-)WORD COUNT
	ASL	R1		;CHANGE WORD COUNT TO BYTE ADDRESSES, AND
	ADD	R1,DSQMAL(R4)	; UPDATE MEMORY ADDRESS FOR NEW XFER
	ADCB	DSQMAM(R4)	;  SO THAT XFER STARTS FROM RIGHT PLACE
	MOV	(SP)+,R1	;GET R1 BACK
	MOV	(SP)+,R0	;GET R0 BACK
	JMP	SSEGDB		;GO SET UP DISK DRIVE AND RESUME XFER
; ...TO HERE.

40$:	BIT	RHDS(R3),#RHERR	;;AN ERROR?
	BNE	50$		;;FOR SURE
	BIT	(R3),#RHTRE!RHMCPE ;;XFER OR CONTROL PARITY ERROR?
	BEQ	DBDONE		;;NO, SO ALL DONE
50$:	BIT	RHCS2(R3),#RHNED!RHNEM ;;CONTROLLER HARD ERROR?
	BNE	HARDER		;;YES, HARD ERROR
	MOV	RHER(R3),R2	;;NO, GET ERROR REGISTER
	TSTB	DSQFUN(R4)	;;RM02/3/5/80/RP07?
	BPL	70$		;;NOPE
	TST	RMER2(R3)	;;YEP, BAD SECTOR ERROR?
	BPL	60$		;;NOT A BAD SECTOR
.ASSUME	RMBSE	EQ	100000	;;MAKE SURE WE'RE TESTING THE RIGHT BIT
	MOVB	#-1,DSQERR(R4)	;;A BAD SECTOR, FORCE NO MORE RETRIES
	BIS	#RHUNS,R2	;; AND FORCE A RETRY BELOW...
60$:	BIT	#RMIVC!RMLSC!RMLBC,RMER2(R3) ;;HARD ERROR?
	BNE	HARDER		;;YES, LOG IT AND QUIT
70$:	BIT	R2,#RBWLE!RBIAE!RBAO!RHRMR!RHILR!RHILF ;;HARD ERROR?
	BNE	HARDER		;;YES, HARD
	BIT	#RHWCK,RHCS2(R3)	;;Write check error??		;007
	BEQ	75$			;;Nope, so go on.		;007
	MOVB	#DATERR,DSQERR(R4)	;;Otherwise, put the error away	;007
	BR	DBDONE			;; and go back.			;007

75$:	TSTB	RHCS2+1(R3)	;;RETRYABLE CONTROL ERROR?
	BNE	RETRY		;;YES, SO RETRY
	TSTB	DSQFUN(R4)	;;RM02/3/5/80/RP07?
	BPL	80$		;;NOPE
	BIT	#RMSKI,RMER2(R3) ;;YEP, SEE IF SEEK INCOMPLETE ERROR
	BEQ	90$		;;CONTINUE IF NOT SEEK INCOMPLETE
	BR	HOMSEK		;;A SEEK INCOMPLETE, GO DO A RECALIBRATE

80$:	MOV	RBER2(R3),-(SP)	;;GET ERROR REGISTER #2 AND
	BIS	RBER3(R3),(SP)+	;; ERROR REGISTER #3 .OR.ED TOGETHER
	BNE	RETRY		;;JUST RETRY IF ANY BIT(S) ON
90$:	BIT	R2,#^C<RBDCK!RBDTE!RBHCRC!RBHCE!RBECH> ;;OTHER ERROR BIT(S)?
	BNE	RETRY		;;YES, JUST RETRY
	TST	R2		;;ELSE FANCY RETRY?
	BNE	DOECC		;;YES, SO DO THE FANCY ECC STUFF
RETRY:	SEZ			;;INDICATE RETRYABLE (Z=1)
HARDER:	LOG$DB			;;NOW LOG THAT ERROR
DBERRC:	CALLX	DFINT4		;;CHECK CC'S AND COUNT THE ERROR
	BMI	DBATT0		;;YES, SO CONTINUE
DBDONE:	MOVB	#IE+RHESET,(R3)	;;NO, RESET THE DRIVE AND IE CONTROL
	BIT	#RBPGM,RHDS(R3)	;;IS THIS ONE DP-ED			;001
	BEQ	95$		;;NO, SO SKIP THE RELEASE		;001
	MOVB	#IE+RELDP,(R3)	;;AND RELEASE A DP DRIVE IF DONE WITH IT;001
95$:	CALLX	DFINT9		;;IDLE, DE-QUEUE AND HOUSEKEEP REQUEST	;001
DBATT0:	JMP	DBATTN		;;THEN CONTINUE

GLOBAL	<CSR.DB,DBDCTL,DSO$XX,IE,RELUMR,DATERR>				;007

.SBTTL	TIMEOUTS (PR5)

TMO$DB::MOVB	DSQPUN(R4),RHCS2(R3) ;;SELECT THE FAILING DRIVE
	MOV	#DBATTN,-(SP)	;;GUESS AT "JUST WAITING"
	TSTB	DSO$XX(R0)	;;REALLY FROM "JUST WAITING"?
	BMI	10$		;;YES, NO ERROR LOG
	MOV	#DBERRC,(SP)	;;NO, CHANGE DISPATCH ADDRESS
	LOG$DB			;; AND LOG AN ERROR
10$:	CMP	R0,DBDCTL	;;IS CONTROL BUSY WITH THIS REQUEST?
	BNE	20$		;;NO
	CLR	DBDCTL		;;YES, CLEAR THE IN-PROGRESS INDICATION
20$:	CLR	DSO$XX(R0)	;;FORCE DRIVE'S STATUS TO IDLE
	;SEZ			;;(FOR THE "DFINT4" CALL)
	RETURN			;;NOW DISPATCH

.SBTTL	RM02/3 RECALIBRATE ROUTINE

HOMSEK:	LOG$DB			;;LOG THE ERROR
	CALLX	DFINT3		;;CHECK FOR MORE RETRIES
	BPL	DBDONE		;;NO MORE RETRIES LEFT, QUIT WITH ERROR
	MOV	SP,R1		;;RETRY, ENSURE R1 <> 0
	BR	TRYOFF		;; AND GO DO IT

.SBTTL	SOFT ECC CORRECTION / HARD ECC DETECTION

DOECC:	MOV	RBEC1(R3),R1	;;GET THE ECC CORRECTION POSITION
	MOV	RBEC2(R3),R5	;;GET THE ECC CORRECTION PATTERN
	LOG$DB			;;LOG THIS TYPE OF ERROR
	;CMPB	DSQFUN(R4),#-5	;;OUT OF RANGE?
	;BPL	30$		;;YES
	;CMPB	DSQFUN(R4),#2	;;OUT OF RANGE?
	;BMI	30$		;;YES
	MOV	R5,-(SP)	;;SAVE R5 (FROM OLD "CALLX ECCDSK,R5")
	MOVB	DSQFUN(R4),R5	;;GET DRIVE CODE BYTE IN R5 (RP06 SHOULD=0)
	ASL	R5		;;TIMES TWO FOR WORD ADDRESSING
	MOV	ECCPRM(R5),R5	;;R5 POINTS TO ECC VALUES FOR SELECTED DRIVE
	JMPX	ECCDSK		;;DO ECC HANDLING

	;ECC PARAMETER BLOCK POINTERS -- ORDER EXACTLY OPPOSITE OF "MIDTBL"!

	.WORD	RP07ECC		;POINTER TO ECC PARAMETERS FOR RP07
	.WORD	RM05ECC		;POINTER TO ECC PARAMETERS FOR RM05
	.WORD	RM80ECC		;POINTER TO ECC PARAMETERS FOR RM80
	.WORD	RM03ECC		;POINTER TO ECC PARAMETERS FOR RM03
	.WORD	RM02ECC		;POINTER TO ECC PARAMETERS FOR RM02
ECCPRM:	.WORD	RP06ECC		;POINTER TO ECC PARAMETERS FOR RP06 (RP06=0)
	.WORD	RP05ECC		;POINTER TO ECC PARAMETERS FOR RP05
	.WORD	RP04ECC		;POINTER TO ECC PARAMETERS FOR RP04

RP04ECC:
RP05ECC:
RP06ECC:			; ERROR CORRECTION PARAMETERS FOR RP04/05/06
	  .WORD	RBDTE!RBECH	; BACK UP 1 SECTOR ON THESE
	  .WORD	22.-400		; # SECTORS -400
	  .WORD	19.*400		; # TRACKS *400
	  .WORD	^C<RBDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	DBATTN		; CHECK ATTN LINES IF ECC DONE
	BR	ECCOFF		;;Decrement retry count and do		;010
				;; offsetting if ECC not done.		;010

RM02ECC:
RM03ECC:			; ERROR CORRECTION PARAMETERS FOR RM02/03
	  .WORD	RBDTE!RBECH	; BACK UP 1 SECTOR ON THESE
	  .WORD	32.-400		; # SECTORS -400
	  .WORD	5.*400		; # TRACKS *400
	  .WORD	^C<RBDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	DBATTN		; CHECK ATTN LINES IF ECC DONE
	BR	ECCOFF		;;Decrement retry count and do		;010
				;; offsetting if ECC not done.		;010

RM80ECC:			; ERROR CORRECTION PARAMETERS FOR RM80
	  .WORD	RBDTE!RBECH	; BACK UP ONE SECTOR ON THESE
	  .WORD	31.-400		; # SECTORS -400
	  .WORD	14.*400		; #TRACKS *400
	  .WORD	^C<RBDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	DBATTN		; CHECK ATTN LINES IF ECC DONE
	BR	ECCOFF		;;Decrement retry count and do		;010
				;; offsetting if ECC not done.		;010

RM05ECC:			; ERROR CORRECTION PARAMETERS FOR RM05
	  .WORD	RBDTE!RBECH	; BACK UP ONE SECTOR ON THESE
	  .WORD	32.-400		; # SECTORS -400
	  .WORD	19.*400		; #TRACKS *400
	  .WORD	^C<RBDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	DBATTN		; CHECK ATTN LINES IF ECC DONE
	BR	ECCOFF		;;Decrement retry count and do		;010
				;; offsetting if ECC not done.		;010

RP07ECC:			; ERROR CORRECTION PARAMETERS FOR RP07
	  .WORD	RBDTE!RBECH	; BACK UP ONE SECTOR ON THESE
	  .WORD	50.-400		; # SECTORS -400
	  .WORD	32.*400		; #TRACKS *400
	  .WORD	^C<RBDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	DBATTN		; CHECK ATTN LINES IF ECC DONE
	.BR	ECCOFF		;;Decrement retry count and do		;010
				;; offsetting if ECC not done.		;010

GLOBAL	<DSO$XX,DBDCTL>

.SBTTL	DO OFFSETTING

ECCOFF:	PUSH	<R1>		;;Save R1 'cause DFINT3 creams it.	;010
	CALLX	DFINT3		;;Update UNTERR and dec retry count.	;010
	POP	<R1>		;;Restore original R1.			;010
TRYOFF:	MOV	R4,R5		;;COPY THE DSQ POINTER
	ADD	#DSQPTO,R5	;; AND POINT TO OFFSET INFORMATION
	CLRB	DSQFAR(R4)	;;SKIP SECTOR ERRORS HAVE TO START ALL OVER...
	TST	R1		;;IF R1 = 0 WE READ 0 GOOD SECTORS
	BEQ	10$		;;SO CONTINUE AT THE CURRENT OFFSET (IF ANY)
	MOV	#ECOFTB-1,(R5)	;;IF WE READ SOME GOOD DATA, THEN THIS IS
				;; THE FIRST TIME THROUGH - RESET OFFSETS.
10$:	CMP	(R5)+,#ECOFTB	;;HAVE WE RETRIED THIS OP ALREADY?
	BLO	20$		;;NOPE - FIRST TIME, GO TO A NEW OFFSET (OF 0)
	INC	DSO$XX(R0)	;;INDICATE WE ARE WAITING FOR A RETRY
	DECB	(R5)		;;ALL DONE AT THIS OFFSET?
	BGT	DBATT0		;;NO - REDO THE READ OPERATION AT THIS OFFSET
20$:	MOVB	#16.,(R5)	;;ASSUME THE NEW OFFSET WILL BE 0 WITH 16 RETRIES
	INC	-(R5)		;; AND BUMP POINTER TO NEW OFFSET BYTE
	CALL	SETUP		;;NOW SET UP THE DRIVE, ADDRESSES, AND OFFSET
	MOV	(PC)+,R1	;;SET POSSIBLE FUNCTIONS (L=RECAL, H=OFFSET)
	 .BYTE	IE+RECAL,IE+OFFSET
	MOVB	@(R5)+,R2	;;WHAT OFFSET VALUE DO WE HAVE? (KEEP C-BIT)
	BEQ	60$		;;0 IS ILLEGAL OFFSET - DO RECAL INSTEAD.
	MOVB	#2,(R5)		;;REAL OFFSET, SET RETRY COUNT TO 2
	BCC	50$		;;SKIP OFFSET ADVANCE FOR RP04/5/6
	CMP	-(R5),#ECOFTB+1	;;RM02/3/5/80/RP07, INTO REAL OFFSETTING NOW??
	BNE	40$		;;NOPE, NOT YET
	ADD	#4,(R5)		;;YES, ONLY + OR - ONCE FOR RM02/3/5
	CMPB	#-5,DSQFUN(R4)	;;RP07?
	BEQ	30$		;;YES, SO NO OFFSETS
	CMPB	#-3,DSQFUN(R4)	;;RM80?
	BNE	40$		;;NO, JOIN OFFSETTING CODE
30$:	MOV	#ECOFTE,(R5)	;;YES, NO OFFSETS AT ALL FOR RP07 OR RM80
40$:	MOV	#DBATTN,-(SP)	;;RM02/3/5 COMPLETES "OFFSET" INSTANTLY...
50$:	SWAB	R1		;;SWITCH TO THE OFFSET FUNCTION
60$:	MOV	#-5*400+1,DSO$XX(R0) ;;SET TIMEOUT AND DOING OFFSET
	MOVB	R1,(R3)		;;SET FUNCTION BYTE IN RBCSR
	RETURN			;;RETURN FROM INTERRUPT

GLOBAL	<ECOFTB,DSO$XX,IE>

.SBTTL	SET UP DRIVE, ADDRESSES, AND OFFSET

;+
; SETUP - SET UP DRIVE, ADDRESSES, AND OFFSET.
;
;	R0 -> QUEUE ROOT
;	R3 -> RHCS1 (CSR)
;	R4 -> DSQ
;
;	CALL	SETUP
;
;	R1 =  RANDOM
;	R2 =  FIP UNIT NUMBER TIMES 2
;
;	IF C=0 THEN RP04/5/6
;	IF C=1 THEN RM02/3/5/80/RP07
;
;	DOESN'T RETURN TO CALLER IF ANY ERROR DURING THE SET UP.
;-

SETUP:	CLR	DSO$XX(R0)	;;ENSURE DRIVE IS MARKED IDLE IN CASE OF ERROR
	MOV	R3,R1		;;COPY CSR ADDRESS AND
	ADD	#RHCS2,R1	;; INDEX TO CONTROL STATUS #2
	MOVB	DSQPUN(R4),(R1)	;;SELECT THE DESIRED DRIVE
	MOV	(PC),RHDT(R3)	;;REQUEST A DP DRIVE BY WRITING A REG.	;001
	BIT	#RHDVA,(R3)	;;DID WE GET THE DRIVE (IN CASE DP-ED)	;001
	BEQ	65$		;; NO, SO RETURN SKIPPING THIS ONE	;001
	TSTB	DSQFUN(R4)	;;RP04/05/06?
	BPL	10$		;;YES, SO HANDLE DIFFERENTLY
	BIT	#RMSKI,RMER2(R3) ;;NO, RM02/3/5/80/RP07
				;; A PREVIOUS SEEK INCOMPLETE??
	BEQ	10$		;;NO, PROCEED
	MOV	#HOMSEK,(SP)	;;YES, CHANGE RETURN ADDRESS FOR RECALIBRATE
10$:	TST	DBDCTL		;;IS CONTROL BUSY WITH I/O NOW?
	BNE	20$		;;YES
	MOV	#RHTRE+IE+RHESET,(R3) ;;NO, RESET CONTROL AND DRIVE
20$:	MOVB	#IE+RHESET,(R3)	;;RESET THE SELECTED DRIVE
	MOVB	DSQUNT(R4),R2	;;GET THE FIP UNIT NUMBER
	ASL	R2		;; TIMES 2 FOR WORD ADDRESSING
	CMP	RHDT(R3),MID$XX(R2) ;;CORRECT MASSBUS ID??
	BNE	60$		;;NO, FATAL
	BIT	#UC.MNT!UC.NFS,UNTCNT(R2) ;;UNMOUNTED OR NFS?
	BEQ	30$		;;NO
;ACKPAK	== .-2			;; ** PATCH ** NOP TO ALWAYS DO PACK ACK
	MOVB	#IE+PAKACK,(R3)	;;YES, SO PACK ACKNOWLEGE THE DRIVE
	BICB	#UO.DP,UNTOPT(R2) ;; CLEAR THE DUAL PORT FLAG		;001
	BIT	RHDS(R3),#RBPGM	;;IS THIS DRIVE DUAL PORTED???		;001
	BEQ	30$		;; THEN DON'T FLAG IT AS SUCH		;001
	BISB	#UO.DP,UNTOPT(R2) ;;SET DUAL PORT FOR SYSTAT REPORT	;001
30$:	MOV	DSQOPT(R4),RBDC(R3) ;;SET THE DESIRED CYLINDER
	MOV	#FMT22,-(SP)	;;SET PDP-11 MODE AND ECC ENABLE
.ASSUME	FMT16	EQ	FMT22	;;PDP-11 MODE MUST BE SAME FOR RM03/RP04
	BISB	@DSQPTO(R4),(SP) ;;.OR. IN THE CURRENT OFFSET VALUE
	BICB	#^C<260>,(SP)	;; TRIMMING IT TO ONLY LEGAL BITS
	CMPB	MID$XX(R2),#RP06ID ;;IS THIS AN RP06??
	BNE	40$		;;NOPE, ALL SET
	ASRB	(SP)		;;YEP, OFFSET=(OFFSET/2) FOR RP06'S
	BICB	#^C<230>,(SP)	;; AND RE-TRIM TO ONLY LEGAL BITS
40$:	MOV	(SP)+,RBOF(R3)	;;SET THE MODE AND OFFSET VALUE
	TSTB	DSQFAR(R4)	;;ARE WE DOING A SKIP SECTOR ERROR RETRY?
	BMI	50$		;;YEP, SO TRACK/SECTOR ARE ALREADY SET UP
	MOV	DSQPDA(R4),RBDA(R3) ;;NO, SO SET THE DESIRED TRACK/SECTOR

GLOBAL	<DSO$XX,DBDCTL,IE,MID$XX,UNTCNT,UNTOPT>

50$:	BIT	(R1)+,#RHNED	;;IS DRIVE THERE AT ALL?
	BNE	70$		;;NO, RETRY LATER
	MOV	(R1),-(SP)	;;GET DRIVE'S STATUS
	COM	(SP)		;; AND COMPLEMENT THE BIT VALUES
	BIT	(SP)+,#RHMOL!RHDPR!RBVV ;;CHECK STATUS
	BNE	60$		;;ERROR IS HARD ERROR
;	CALLX	SYSDKC,R5	;;CHECK FOR HARD ERROR ON SYSTEM DISK
;	 .WORD	SETUP		;; AND ALLOW POSSIBLE RETRY
	BIT	(R1),#RHATA!RHERR!RHPIP ;;CHECK FOR FUNNY CONDITIONS
	BNE	70$		;;WHOOPS!
	BIT	(R1),#RBPGM	;;IS THIS A DUAL-PORTED DRIVE??		;001
	BEQ	55$		;; NO, SO SKIP THE READ ONLY CHECK	;001
	BIT	(R1),#RHWRL	;; YES, SO IT MUST BE READ ONLY		;001
	BEQ	60$		;;DUAL PORT R/W, SO FATAL THE USER	;001
55$:	BIT	#RHTRE!RHMCPE,(R3) ;;IS "TRANSFER ERROR" ALREADY SET?	;001
	BNE	70$		;;YES!
	TSTB	(R1)		;;IS THE DRIVE READY?
	BMI	80$		;;YES, O.K. TO PROCEED
.ASSUME	RHDRY	EQ	200	;;MAKE SURE WE'RE TESTING THE RIGHT BIT
60$:	MOV	#HARDER,(SP)	;;HARD TYPE ERROR, NEW RETURN ADDRESS
	;CLZ			;;Z-BIT=0 FOR HARD TYPE ERROR
	RETURN			;;SO EXIT

65$:	MOVB	DSQUNT(R4),R2	;;GET THE FIP UNIT #			;002
	ASL	R2		;; FUN * 2				;002
	BITB	#UO.DP,UNTOPT(R2) ;;IS THIS DRIVE DUAL PORTED???	;002
	BEQ	60$		;;IF NOT, THEN IT'S NOT THERE SO ERROR	;001
	MOV	#DBATT0,(SP)	;;RETURN HERE INCASE RE-TRIES STILL LEFT;003
	INCB	DSQERR(R4)	;; INC THE RETRY COUNT			;003
	BMI	75$		;; STILL RETRIES LEFT, SO TRY LATER	;003
	BR	60$		;; RETURNING THE PROPER C-CODES		;003

70$:	MOV	#RETRY,(SP)	;; AND CHANGE THE RETURN ADDRESS	;001
	MOVB	DSQOUN(R4),R1	;;GET UNIT NUMBER TIMES 2
	MOV	BITWRD(R1),RHAS(R3) ;; TO ENSURE UNIT'S ATTN LINE IS OFF
75$:	MOV	#-3*400+377,DSO$XX(R0) ;;FUNNY CONDITION, SET "WAITING"	;001
80$:	TST	DSQFUN(R4)	;;RP04/5/6?
	;CLC
	BPL	90$		;;YES, RETURN C=0 FOR RP04/5/6
	SEC			;;NO, RETURN C=1 FOR RM02/3/5/80/RP07
90$:	RETURN			;;NOW EXIT

GLOBAL	<BITWRD,DSO$XX,UNTOPT>

.END
