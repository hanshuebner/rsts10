	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
TITLE	UNIDSK,<COMMON UNIBUS DISK DRIVER ROUTINES>,0A,10-MAY-91,MHB/GW/WBN

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR UNIDSK
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;
;-

	DEFORG	UNIDSK

.SBTTL	COMMON UNIBUS DISK UMR HANDLING

;+
; DSKUMR - ALLOCATE UMR'S FOR ADDRESSING A UNIBUS DISK TRANSFER.
;
;	R0 -> QUEUE ROOT
;	R4 -> DSQ
;		DSQMAM = HIGH PHYSICAL ADDRESS
;		DSQMAL = LOW PHYSICAL ADDRESS
;		DSQCNT = -(WORD COUNT)
;	PRIORITY IS PR5
;
;	CALL	DSKUMR
;
;	IF SUCCESS:
;		DSO$XX(R0) [BYTE] =  0
;		R1 =  HIGH UNIBUS ADDRESS
;		R2 =  LOW UNIBUS ADDRESS
;
;	IF FAILURE:
;		DSO$XX(R0) [BYTE] =  1
;		R1 =  RANDOM
;		R2 =  RANDOM
;		RETURNS TO CALLER'S CALLER
;		WILL BE RE-CALLED AT THE UMR$ ENTRY SOON...
;-

DSKUMR::CLRB	DSO$XX(R0)	;;ASSUME SUCCESS
	MOV	R0,-(SP)	;;SAVE THIS REGISTER
	MOV	DSQCNT(R4),R0	;;PICK UP PARAMETERS FOR GETUMR: -WORDCOUNT,
	MOVB	DSQMAM(R4),R1	;; HIGH ADDR,
	MOV	DSQMAL(R4),R2	;;  LOW ADDR.
	CALL	@GETUMR		;;GET THE WINDOW
	MOV	(SP)+,R0	;;RESTORE REGISTER
	BCC	10$		;;SKIP IF SUCCESSFUL
	INCB	DSO$XX(R0)	;;MARK DRIVE WAITING FOR I/O (FAILURE)
	TST	(SP)+		;;DISCARD RETURN
10$:	RETURN			;;RETURN TO CALLER OR CALLER'S CALLER

GLOBAL	<DSO$XX,GETUMR>

.SBTTL	COMMON UNIBUS DISK I/O INITIATION

;+
; DSKSRU - START A UNIBUS DISK TRANSFER.
;
;	R0 -> QUEUE ROOT
;	R1 =  HIGH UNIBUS ADDRESS [FOR (R3) AFTER 4 PLACE LEFT SHIFT]
;	R2 =  LOW UNIBUS ADDRESS [FOR 4(R3)]
;	R3 -> CSR
;	R4 -> DSQ
;		DSQCNT = -(WORD COUNT) [FOR 2(R3)]
;		DSQFUN = FUNCTION [FOR (R3)]
;	SP -> PARAMETERS [FOR (R3)], RETURN ADDRESS, ...
;
;	JMP	DSKSRU
;
;	R0 =  RANDOM
;	R1 =  RANDOM
;	R2 =  RANDOM
;	R4 =  RANDOM
;	R5 =  RANDOM
;-

DSKSRU::MOVB	#-5,DSO$XX+1(R0) ;;SET FIVE SECOND TIMEOUT
	ASH	#4,R1		;;MEMORY ADDRESS <17-16> INTO <5-4>
	BIS	(SP)+,R1	;;.OR. PARAMETERS INTO FUNCTION WORD
	MOV	R2,4(R3)	;;SET MEMORY ADDRESS <15-0> INTO CONTROL
	MOV	DSQCNT(R4),2(R3) ;;LOAD -(COUNT) INTO CONTROL
	BISB	DSQFUN(R4),R1	;;.OR. FUNCTION INTO FUNCTION WORD
	BIS	#IE+1,R1	;;TURN ON THE "IE" AND "GO" BITS
	MOV	R1,(R3)		;; AND GO...
	RETURN			;;NOW EXIT

GLOBAL	<DSO$XX,IE>

.END

