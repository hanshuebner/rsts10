	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /DSK:DMDEF/
TITLE	DMDSK,<RK611/RK06/RK07 DISK DRIVER>,0A,10-MAY-91,MHB/TWH/VAM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR DMDSK
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	TWH  28-OCT-83	ADD SUPPORT FOR IFUN
;  002  FEK  18-May-84	Fix IFUN support
;  003  VAM  09-Feb-85	Add non-existant device support to IFUN
;  004  VAM  29-Mar-85	Don't try controller reset if no controller present
;  005  VAM  01-Apr-85	Don't log Write Check miscompares as hard errors
;  006  VAM  30-May-85	Add RELFUN.
;  007	FEK  27-Oct-86	Remove 004 - no longer needed
;
;			[RSTS V9.6]
;  008	KCG  29-Feb-88	Add FMTFUN.
;
;-

	DEFORG	DMDSK

	INCLUDE	<CMNDSK,UNIDSK,OPTDSK,ECCDSK,ERLDSK>

	DSKDEF	DM

;   RK611 FUNCTION CODES

RKFUN:	.WORD	WRITE		;WRITE WITH WRITE CHECK
	.WORD	WRITE		;WRITE
	.WORD	READ		;READ
	.WORD	WRITEC		;WRITE CHECK
	.WORD	0		;IFUN					;001
	.WORD	WRITE		;Write Erase				;006
	.WORD	0		;RELFUN					;006
	.WORD	0		;Unload					;006
	.WORD	0		;Format					;008

.SBTTL	ERROR LOGGING

;+
; ERROR LOGGING.
;
;	R0-R5 =  VALUE AT TIME ERROR CALL WAS ISSUED
;
;	...
;
;	RETURN
;
;	R5 -> ERROR LOGGING CONTROL TABLE
;-

.ENABL	LSB

	ERRENT	LOG$DM

	CALLX	ERLDSK,R5	;;;CALL THE DISK ERROR LOGGING ROUTINE
	  .BYTE	ERC$DM,0	;;;ERROR CODE, NOT OVERLAPPED SEEK
	  .BYTE	0,9.		;;;NO OFFSET, 9. REGISTERS
	  .BYTE	RMMR1,3		;;;OFFSET, 3 REGISTERS
	  .BYTE	0,0		;;;THAT'S ALL FOR THE ROUTINE
	MOVB	@DSQPTO(R4),(R0) ;;;SET THE CURRENT OFFSET VALUE
	MOV	#20$,(R2)	;;;USE THIS ROUTINE
	MOV	#-4*400+8.,-(R2) ;;; TO ADD 8. WORDS TO FIELD 4
10$:	RETURN			;;;RETURN TO THE ERROR LOGGER

20$:	CLR	R0		;;;START WITH MESSAGE #0
	CALL	DRVSEL,R5,SELECT+1 ;;;ENSURE THAT THE DRIVE IS SELECTED
30$:	;BNE	?		;;;WE MUST IGNORE ERROR(S)...
	MOV	RMMR2(R3),(R5)+	;;;STORE THE FIRST PART OF THE MESSAGE
	MOV	RMMR3(R3),(R5)+	;;; AND THE SECOND PART
	MOV	#RMCCLR,(R3)	;;;CLEAR ANY CONTROLLER ERROR(S)
	CLR	RMMR1(R3)	;;; AND BACK TO MESSAGE #0 AGAIN
	CMP	R0,#3		;;;ARE WE DONE?
	BHIS	10$		;;;YES
	INC	R0		;;;NO, INCREMENT TO THE NEXT MESSAGE
	MOV	R0,RMMR1(R3)	;;; AND SET THE MESSAGE NUMBER
	CALL	DRVTMS,R5,SELECT+1 ;;;GET THAT MESSAGE
	BR	30$		;;; AND LOOP

.DSABL	LSB

.SBTTL	PUT ALL DEVICE-SPECIFIC DATA INTO REQUEST (DSQ)

;+
; QDS$DM - QUEUE DISK I/O REQUEST.
;
;	R0 =  STARTING LBN (MSB)
;	R1 =  STARTING LBN (LSB)
;	R3 =  PHYSICAL UNIT NUMBER * 2
;	R4 -> DSQ
;	R5 =  FIP UNIT NUMBER * 2
;-

QDS$DM::MOVB	DSQSAV(R4),R3	;GET FUNCTION CODE
	MOVB	RKFUN-WFUN.C(R3),DSQFUN(R4) ;SET UP RK611 FUNCTION CODE
	CMPB	R3,#IFUN	;IS THIS A DRIVE INITIALIZE?		;001
	BEQ	5$		;YEP					;001
	CMPB	R3,#RELFUN	;How about a Release?			;006
	BEQ	5$		;Yup.					;006
	CMPB	R3,#FMTFUN	;Maybe a FORMAT?			;008
	BEQ	5$		;Yo.					;008
	DIV	#3.*22.,R0	;DIVIDE FOR THE CYLINDER NUMBER
	MOV	R0,DSQOPT(R4)	;STORE THE ANSWER (CYL NUM)
	CLR	R0		;CLEAR HIGH ORDER FOR TRACK DIVIDE
	DIV	#22.,R0		;GET ANSWER=TRACK, REMAINDER=SECTOR
	SWAB	R0		;PUT TRACK INTO HIGH BYTE
	BIS	R1,R0		; AND PUT SECTOR INTO LOW BYTE
	MOV	R0,DSQPDA(R4)	;NOW STORE TRACK/SECTOR
	MOV	#ECOFTB-1,DSQPTO(R4) ;INITIALIZE TO NO OFFSETS YET
5$:	CALL	@(SP)+		;NOW CO-ROUTINE RETURN			;001
	BR	REDOIO		;;WAS 1ST IN QUEUE, GO DO IT

DSKGDM:	CALLX	OPTDSK,R5,OPT$DM ;;OPTIMIZE THE REQUEST QUEUE
REDOIO:	CLR	DSO$XX(R0)	;;SAY DRIVE IS IDLE
	CMPB	DSQSAV(R4),#IFUN;;IS THIS A DRIVE INITIALIZE?		;001
	BEQ	80$		;;YEP					;001
	CMPB	DSQSAV(R4),#RELFUN	;;How about a Release?		;006
	BEQ	120$			;;Yup.				;006
	CMPB	DSQSAV(R4),#FMTFUN	;;FORMAT command?		;008
	BEQ	25$			;;Yo				;008
	CALL	DRVCLR,R5,DRESET+1 ;;SELECT & RESET CORRECT DRIVE
	BNE	DMEROR		;;WHOOPS! AN ERROR
	BIT	#UC.MNT!UC.NFS,UNTCNT(R1) ;;DO WE NEED TO ACK IT?
	BEQ	10$		;;NO
	CALL	DRVCMD,R5,PAKACK+1 ;;YES, PACK ACKNOWLEDGE DRIVE
	BNE	DMEROR		;;WHOOPS! AN ERROR
10$:	MOV	RMDS(R3),R5	;;GET THE DRIVE STATUS
	COM	R5		;;COMPLEMENT THE BITS
	BIT	R5,#RMSVAL!RMDRDY!RMVV!RMDRA ;;IS THE DEVICE READY?
	BNE	20$		;;NO, HARD ERROR
	CALLX	DSKUMR		;;GET A WINDOW FOR THIS REQUEST
	ASH	#8.-4,R1	;;WE WANT <17-16> IN <9-8> FINALLY
	MOVB	DSQUNT(R4),R5	;;GET FIP UNIT NUMBER
	ASL	R5		;;* 2
	MOV	MID$XX(R5),-(SP) ;;STACK THE RK06/7 DETERMINATION
	JMPX	DSKSRU		;; AND GO START THE I/O

20$:	JMP	HARDER		;;Out-of-range branch kludge.		;005

25$:	SETERR	ERRERR,DSQERR(R4)	;;FMTFUN Unsupp here		;008
	BR	120$			;;Join common exit		;008

	.PAGE
	.SBTTL	IFUN Handler
;+
;
;	I F U N   R E Q U E S T   H A N D L E R				;003
;
; The IFUN (Initialize FUNction) is used to check for the presence of a
; given RK06/RK07 drive, and to determine the drive type and fill in the
; UNTSIZ and DEVCLU table entries if it's there.
;
; Here are the steps taken for an IFUN request;
;
; 1)	Clear out the UNTSIZ and MID$XX entries for the drive.
; 2)	Wait for the controller to become ready.
; 3)	Clear out any old error bits.
; 4)	Select and reset the drive, assuming that it's an RK06.
; 5)	Check the NED (Non-Existant Drive) bit to see if the drive in question
;	exists at all.  If not, return with '?Not a valid device' in the DSQ,
;	but do not log a hard error.
; 6)	If it does exist, check the RMDTY (Drive Type) bit to see if a mismatch
;	occurred.  If set, it means that the drive was really an RK07, so
;	set up for an RK07 and go back to Step 2.
; 7)	When we've finally got a match, check the RMDRA (Drive Available) bit
;	to see if the drive has been siezed by another system.  If so, we
;	return '?Device hung or write locked' in the DSQ, but do not log a
;	hard error.
; 8)	If the drive is available, test RMDRY (Drive Ready) to see if it's
;	spun up.  If not, once again we return '?Device hung or write locked'
;	in the DSQ without logging a hard error.
; 9)	We then check for any other errors.  If any occurred, we log a hard
;	error.
; 10)	Finally, we set the DEVCLU and UNTSIZ table entries for the drive,
;	based on the drive type we found.
;
;-

80$:	MOVB	DSQUNT(R4),R5		;;Get FUN			;003
	ASL	R5			;; TIMES TWO			;001
	CLR	UNTSIZ(R5)		;;Set UNTSIZ for unknown	;003
	CLR	MID$XX(R5)		;;SAY WE'RE LOOKING FOR A RK06	;001
85$:	TSTB	(R3)			;;Controller ready??		;003
	BPL	85$			;;No, wait for it.		;003
	MOV	#RMCCLR,(R3)		;;Get rid of leftover errors.	;003
	MOVB	DSQPUN(R4),R2		;;GET UNIT NUMBER		;001
	MOV	R2,RMCS2(R3)		;;DO A UNIT SELECT		;001
	CALL	DRVATS,R5,DRESET+1	;;SELECT AND RESET THE DRIVE	;001
	BIT	#RMNED,RMCS2(R3)	;;Does the drive exist??	;003
	BNE	150$			;;Nope, go tell 'em.		;003
	BIT	#RMDTY,RMER(R3)		;;Is it really what we said?	;003
	BEQ	90$			;;Yup, it appears to be.	;003
	TST	MID$XX(R5)		;;Have we tried both types??	;003
	BNE	100$			;;Yup, go log an error!		;003
	BIS	#RMCDT,MID$XX(R5)	;;Otherwise, call it an RK07...	;003
	BR	85$			;; ...and try again.		;003
90$:	BIT	#RMDRA,RMDS(R3)		;;Is it available??		;003
	BEQ	160$			;;No, tell 'em.			;003
	TSTB	RMDS(R3)		;;Is it spun up??		;003
	BPL	160$			;;No, tell 'em that too.	;003
	TST	(R3)			;;Any random errors??		;003
	BPL	110$			;;Nope.				;003
100$:	CLZ				;;SAY IT'S A HARD ERROR		;001
	LOG$DM				;;LOG AN ERROR HERE		;001
	CALLX	DFINT1			;;CHECK CC'S AND COUNT ERROR	;001
	BR	120$			;;LET'S GET OUT OF HERE		;001
	
110$:	MOVB	#1,DEVCLU(R5)	     ;;SET DCS=1			;002
	MOV	#27104.,UNTSIZ(R5)   ;;SET UNTSIZ	(ASSUME RK06)	;001
	BIC	#^C<002000>,MID$XX(R5)		;;GET DRIVE TYPE	;001
	BEQ	120$		     ;;IT'S AN RK06			;001
	MOV	#53768.,UNTSIZ(R5)   ;;CORRECT UNTSIZ FOR A RK07	;001
120$:	MOV	#DQS$DM,R0	;;GET QUEUE ROOT POINTER		;001
	JMP	DMDONE		;;JOIN COMMON CODE			;001
	
150$:	MOVB	#NOTAVL,DSQERR(R4)	;;Stick the error away		;003
	BR	120$			;;Go back for more.		;003

160$:	MOVB	#HNGDEV,DSQERR(R4)	;;Tell 'em it's hung.		;003
	BR	120$			;;Go join the mainstream.	;003

GLOBAL	<UNTSIZ,DEVCLU,ECOFTB,OPT$DM,DSO$XX,UNTCNT,MID$XX>		;001
GLOBAL	<NOTAVL,HNGDEV,ERRERR>						;003

.DSABL	LSB

.SBTTL	INTERRUPTS (PR5)

.ENABL	LSB

INT$DM::MOV	CSR.DM,R3	;;GET THE CSR ADDRESS
	TSTB	(R3)		;;IS CONTROLLER REALLY READY??
	BPL	DMRET		;;NOPE, JUST EXIT FROM THIS INTERRUPT
	MOV	#DQS$DM,R0	;;GET THE QUEUE ROOT POINTER
	MOV	(R0),R4		;;GET REQUEST FROM THE TOP OF QUEUE
	BEQ	40$		;;NONE, SO EXIT CLEARING CONTROL
	TSTB	DSO$XX(R0)	;;IN AN OFFSET OR RECAL SEQ?
	BNE	20$		;;YES, HANDLE SPECIALLY
	CALL	@RELUMR		;;NO, RELEASE THE WINDOW
	TST	(R3)		;;ANY ERRORS FOR NORMAL PROCESSING?
	BPL	DMDONE		;;NO - WE'RE ALL FINISHED WITH THIS REQUEST
	MOV	RMER(R3),R2	;;GET THE CONTENTS OF THE ERROR REGISTER
DMEROR:	BIT	R2,#RMUNS!RMWLE!RMIDAE!RMCOE!RMDTY!RMFMT!RMNXF!RMILF ;;HARD?
	BNE	HARDER		;;YES
	BIT	RMCS2(R3),#RMNED!RMNEM!RMMDS ;;CONTROLLER STATUS A HARD ERROR?
	BNE	HARDER		;;YES
	BIT	RMCS2(R3),#RMWCK	;;Write check error?		;005
	BEQ	5$			;;Nope, skip the rest.		;005
	MOVB	#DATERR,DSQERR(R4)	;;Stick the error away...	;005
	BR	DMDONE			;; ...and call it quits.	;005

5$:	TSTB	R2		;;BAD SECTOR ERROR?
	BPL	10$		;;NO
.ASSUME	RMBSE	EQ	200	;;BE SURE WE'RE TESTING IT RIGHT
	MOVB	#-1,DSQERR(R4)	;;YES, FORCE NO MORE RETRIES
10$:	BIT	(R3),#RMSPAR!RMCTO ;;MESSAGE PARITY OR CONTROLLER TIMEOUT?
	BNE	RETRY		;;YES, SO RETRY
	TSTB	RMCS2+1(R3)	;;CONTROLLER ERROR?
	BNE	RETRY		;;YES
	BIT	R2,#^C<RMDCK!RMDTE!RMHVRC!RMECH> ;;PARTIAL TRANSFER?
	BNE	RETRY		;;NO
	TST	R2		;;CORRECTABLE?
	BNE	DOECC		;;YES, GO DO CORRECTION
RETRY:	SEZ			;;INDICATE SOFT ERROR
HARDER:	LOG$DM			;;LOG AN ERROR HERE
	CALLX	DFINT1		;;CHECK CC'S AND COUNT ERROR
	BPL	DMDONE		;;BRANCH IF NO RETRIES LEFT
	MOV	SP,R1		;;ENSURE R1<>0 FOR RESETTING OFFSETS
	TSTB	DSO$XX(R0)	;;DID OFFSET OR RECAL FAIL?
	BNE	TRYOFF		;;YES, SO GO RECAL THE DRIVE
	BIT	R2,#RMOPI!RMSKI	;;SHOULD WE RECAL?
	BNE	TRYOFF		;;YES, SO RECAL ALREADY
CKREDO:	MOV	#ECOFTB-1,DSQPTO(R4) ;;RESET THE OFFSET SEQUENCE
GOREDO:	TST	DSQCNT(R4)	;;MORE TO DO IN THIS REQUEST?
	BPL	DMDONE		;;NO, ALL DONE
	JMP	REDOIO		;;YES, SO DO MORE I/O

GLOBAL	<CSR.DM,DQS$DM,DSO$XX,RELUMR,ECOFTB,DATERR>			;005

20$:	BIT	#RMCCLR!RMDI,(R3) ;;CONTROLLER ERROR AND/OR DRIVE INTERRUPT?
	BEQ	DMRET		;;NO, WAIT FOR NEXT INTERRUPT...
	BMI	RETRY		;;YES, ERROR, TRY AGAIN
	MOVB	DSQPUN(R4),R1	;;MIGHT BE, GET UNIT NUMBER
	BITB	RMASOF+1(R3),BITBYT(R1) ;;DOES CORRECT UNIT HAVE ATTN ON?
	BEQ	20$		;;NOPE, LOOP WAITING FOR IT !!!!!
	CMP	DSQPTO(R4),#ECOFTE ;;ARE WE AT THE END OF OFFSETTING?
	BLO	GOREDO		;;NOT YET, CHECK FOR MORE I/O
	CLRB	DSQERR(R4)	;;YES, FAKE A DATA TYPE ERROR
DMDONE:	CALLX	DFINT9		;;SAY IDLE, DE-QUEUE, AND HOUSEKEEP REQUEST
30$:	TST	(R0)		;;MORE IN QUEUE?
	BEQ	40$		;;NO
	JMP	DSKGDM		;;YES, SO GO AND DO MORE
40$:	MOV	#RMSCLR,RMCS2(R3) ;;NO, CLEAR OUT THE RK611 SUBSYSTEM
DMRET:	RETURN			;;EXIT FROM INTERRUPT

UMR$DM::TST	DSO$XX(R0)	;;ARE WE IDLE?
	BGE	30$		;;YES, CONTINUE OPERATIONS
	RETURN			;;NO, WE'RE NOT INTERESTED

.DSABL	LSB

.SBTTL	TIMEOUTS

TMO$DM::CALL	DRVTMS,R5,SELECT+1 ;;DO TIMEOUT TYPE DRIVE SELECTION
	BR	RETRY		;; THEN CALL IT A RETRYABLE ERROR

GLOBAL	<BITBYT,ECOFTE,DSO$XX>

.SBTTL	SOFT ECC CORRECTION / HARD ECC DETECTION

DOECC:	MOV	RMECPS(R3),R1	;;GET ECC POSITION
	MOV	RMECPT(R3),R5	;;GET ECC PATTERN
	LOG$DM			;;LOG THIS TYPE OF ERROR
	CALLX	ECCDSK,R5	;;DO COMMON ECC HANDLING
	  .WORD	RMDTE!RMECH	; BACK UP 1 SECTOR ON THERE
	  .WORD	22.-400		; # SECTORS -400
	  .WORD	3.*400		; # TRACKS *400
	  .WORD	^C<RMDCK>	; NO ECC IF ANY BUT THIS
	  .WORD	CKREDO		; CHECK FOR MORE I/O TO DO IF ECC DONE
TRYOFF:	MOV	R4,R5		;;BUILD A POINTER TO
	ADD	#DSQPTO,R5	;; OFFSET INFORMATION
	TST	R1		;;IF R1 = 0 WE READ 0 GOOD SECTORS
	BEQ	10$		;;SO CONTINUE AT THE CURRENT OFFSET (IF ANY)
	MOV	#ECOFTB-1,(R5)	;;IF WE READ SOME GOOD DATA THEN THIS
				;; IS THE FIRST TIME, SO RESET OFFSETS
10$:	CMP	(R5)+,#ECOFTB	;;HAVE WE RETRIED THIS OP ALREADY?
	BLO	20$		;;NOPE - FIRST TIME, GO TO A NEW OFFSET (OF 0)
	DECB	(R5)		;;ANOTHER RETRY AT THIS OFFSET?
	BGT	GOREDO		;;NO - REDO THE READ OPERATION AT THIS OFFSET
20$:	MOV	#1,DSO$XX(R0)	;;SAY DRIVE IS INTO OFFSET/RECAL SEQUENCE
	MOVB	#16.,(R5)	;;ASSUME NEW OFFSET WILL BE 0 WITH 16 RETRIES
	INC	-(R5)		;;BUMP POINTER TO NEW OFFSET VALUE
	CALL	DRVCLR,R5,DRESET+1 ;;ENSURE THE DRIVE IS SELECTED & RESET
	BNE	DMEROR		;;WHOOPS! AN ERROR
	TSTB	@(R5)+		;;WHAT OFFSET VALUE ARE WE AT?
	BEQ	40$		;;IT IS OFFSET 0, DO A RECAL
	MOVB	#2.,(R5)	;;REAL OFFSET, RESET RETRIES TO 2
	CALL	DRVCMD,R5,IE+OFFSET+1 ;;START AN OFFSET FUNCTION
30$:	BNE	50$		;;WHOOPS! AN ERROR
	MOV	#-5*400+1,DSO$XX(R0) ;;ELSE SET THE STATUS AND TIMEOUT
	RETURN			;;EXIT FROM INTERRUPT

40$:	CALL	DRVCMD,R5,IE+RECAL+1 ;;START A RECALIBRATE FUNCTION
	BR	30$		;; AND GO ERROR CHECK

50$:	JMP	DMEROR		;;Out-of-range branch kludge.		;005

GLOBAL	<ECOFTB,DSO$XX,IE>

.SBTTL	ISSUE A COMMAND

;+
; DRVCLR - CLEAR SUBSYSTEM, CLEAR CONTROL, UNIT SELECT, AND ISSUE COMMAND.
; DRVSEL - CLEAR CONTROL, UNIT SELECT, AND ISSUE COMMAND.
; DRVTMS - UNIT SELECT, AND ISSUE COMMAND.
; DRVCMD - ISSUE A COMMAND.
;
;	R3 -> CSR
;	R4 -> DSQ
;
;	CALL	DRVCLR,R5,<FUNCTION>
;	CALL	DRVSEL,R5,<FUNCTION>
;	CALL	DRVTMS,R5,<FUNCTION>
;	CALL	DRVCMD,R5,<FUNCTION>
;
;	R1 =  FIP UNIT NUMBER *2
;	R2 =  ERROR BITS
;
;	IF Z=1 THEN NO ERROR
;	IF Z=0 THEN ERROR
;-

DRVCLR:	MOV	#RMSCLR,RMCS2(R3) ;;DO A SUBSYSTEM CLEAR
DRVSEL:	MOV	#RMCCLR,(R3)	;;DO A CONTROLLER CLEAR
DRVTMS:	MOVB	DSQPUN(R4),R2	;;GET THE UNIT NUMBER
	MOV	R2,RMCS2(R3)	;; AND DO A UNIT SELECT
DRVCMD:	MOV	DSQOPT(R4),RMDCY(R3) ;;SET THE DESIRED CYLINDER
	MOVB	@DSQPTO(R4),R2	;;GET THE OFFSET VALUE
	BIC	#^C<260>,R2	;; TRIMMING IT TO LEGAL BITS
	MOV	R2,RMASOF(R3)	;;NOW SET THE OFFSET VALUE
	MOV	DSQPDA(R4),RMDA(R3) ;;SET DESIRED TRACK/SECTOR
DRVATS:	MOV	(R5)+,R2	;;GET THE FUNCTION TO ISSUE		;001
	MOVB	DSQUNT(R4),R1	;;GET THE FIP UNIT NUMBER
	ASL	R1		;; TIMES 2 FOR WORD ADDRESSING
	BIS	MID$XX(R1),R2	;;.OR. RK06/7 DETERMINATION INTO FUNCTION
	BMI	40$		;;UNIT DISABLED??
	MOV	R2,(R3)		;;ISSUE THE FUNCTION
	MOVB	TIMCLK,R2	;;GET CURRENT CLOCK TICK VALUE
10$:	TSTB	(R3)		;;CONTROL READY YET?
	BPL	20$		;;NOPE
	MOV	RMER(R3),R2	;;YEP, GET ERROR BITS
	BIT	(R3),#RMCCLR!RMSPAR!RMCTO ;;SET Z-BIT=1 IF NO ERROR
	RETURN	R5		;; AND EXIT

GLOBAL	<MID$XX>

20$:	CLR	-(SP)		;;GET CURRENT CLOCK TICK
	MOVB	TIMCLK,(SP)	;; VALUE AS A WORD
	SUB	R2,(SP)		;;FIND THE CHANGE SO FAR
	BLE	30$		;;<=0 IS A VALID CHANGE
	SUB	#50.,(SP)	;;ELSE CORRECT FOR 50 HERTZ
	BLE	30$		;;ALL CORRECTED
	SUB	#60.-50.,(SP)	;;ELSE CORRECT FOR 60 HERTZ
30$:	INC	(SP)+		;;HAS IT BEEN 2 TICKS YET???
	BPL	10$		;;NO, CONTINUE TO WAIT
40$:	MOV	#RMUNS,R2	;;YES, SET FATAL TYPE ERROR BIT
	;CLZ			;;Z-BIT=0 FOR ERROR
	RETURN	R5		;; AND EXIT

.END

