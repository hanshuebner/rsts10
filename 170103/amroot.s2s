1!.pn AMROOT - Account Management, Root Code &
!.pg ID	&
!.t Standard Documentation Header &
!			========================================================================== &
!			||									|| &
!			||		  RSTS/E Account Management Package			|| &
!			||									|| &
!			||======================================================================|| &
!			||									|| &
!			||		   C o m p o n e n t     T i t l e			|| &
!			||		   -------------------------------			|| &
!			||									|| &
!			||			  Component : AMROOT.B2S			|| &
!						    Version : V10.1 &
!						       Edit : A &
!					          Edit Date : 10-MAY-91 &
!			||		          Author(s) : WJS,JJT				|| &
!			||									|| &
!			||======================================================================|| &
!			||									|| &
!			||			   C O P Y R I G H T				|| &
!			||			   -----------------				|| &
!			||									|| &
!			||									|| &
!		      Copyright (C) 1984, 1991 by &
!			||	      Digital Equipment Corporation, Maynard, Mass.		|| &
!			||									|| &
!			||									|| &
!			||    This software is furnished under a license and may be used and	|| &
!			||    copied  only  in accordance with the terms of such license and	|| &
!			||    with the  inclusion  of  the  above  copyright  notice.   This	|| &
!			||    software  or  any  other copies thereof may not be provided or	|| &
!			||    otherwise made available to any other person.   No title to or	|| &
!			||    ownership of the software is hereby transferred.			|| &
!			||									|| &
!			||    The information in this software is subject to change  without	|| &
!			||    notice  and should not be construed as a commitment by Digital	|| &
!			||    Equipment Corporation.						|| &
!			||									|| &
!			||    DIGITAL assumes no responsibility for the use  or  reliability	|| &
!			||    of its software on equipment that is not supplied by DIGITAL.	|| &
!			||									|| &
!			========================================================================== &
!	&
!				    M o d i f i c a t i o n   H i s t o r y   L o g &
!	&
!	&
	! VER/ED	EDIT DATE	REASON &
!	&

	&

70!.t Component Documentation &
!.pg	&
!			========================================================================== &
!			||									|| &
!			||	        C o m p o n e n t    D e s c r i p t i o n		|| &
!			||									|| &
!			||   AMROOT.B2S is the Account Management command server's root.        || &
!			||									|| &
!			========================================================================== &

	&

80!+Variable naming conventions &
!Non-EXTEND mode names (local variables) &
!		Names which would be acceptable to non-EXTEND mode &
!		(e.g., A$ or C0%) indicate local variables.  No such &
!		variable is guaranteed to survive any subroutine or &
!		function call, nor is such a variable expected to &
!		have any particular value after any GOTO other than &
!		a local one. &
!EXTEND-mode names (global variables) &
!		Variables which are expected to communicate information &
!		from one part of the program to another are given fully- &
!		mnemonic, EXTEND mode, names.  These variables are &
!		capitalized according to pseudo-English usage:  e.g., &
!		Probe.String$, Parameter.Something.Wild%, Returned.Error%. &
!Xxxxxxx.Low%, Xxxxxxx.High% names (integers) &
!		Names ending in .Low% or .High% are integers "gotten" from &
!		CUI.  The .Low% variable is sufficient for integers of up &
!		to 16 bits;  the .High% variable helps out for integers &
!		which require additional bits. &
!KKK.k% names (CUI .GBL's) &
!		Variables of the form SEA.k% (multiple capital letters, &
!		six characters maximum) are .GBL's used for communication &
!		with CUI. &
!Xxxxxxx.cvt$ &
!		String variables which are passed in a COMMON must be of &
!		fixed size;  they come back padded with spaces.  Generally, &
!		we want to do without the padding.  "Xxxxxx.cvt$" is &
!		the trimmed version of "Xxxxxx$". &
!+COMMON's &
!ACTCMN.B2S &
!		ACTCMN.B2S defines the COMMON area which the Account Manager &
!		uses to communicate across overlays. &
!	&
!			Primitive code.  Used as input to PARMS.TEC, &
!			which creates hybrid "parameter write" and &
!			"parameter read" modules. &
!CUICMN.B2S &
!		CUICMN.B2S defines the COMMON area for control of, &
!		and communication with, CUI. &
!	&
!			Primitive code.  Provided by the CUI package. &
!ACTKEY.B2S &
!		ACTKEY.B2S defines the COMMON area by which CUI's keyword &
!		values are made available to this BP2 code. &
!	&
!			Derived code.  Built from ACTKEY.MAC by KEYKEY.TEC. &
!	&
!.doc
700!.pg DD &
!.t Data Description &
!.hl1 MAPs and COMMONs &
	external word CCFLAG !CCTRAP's pollable control-C flag word &

710	%include "CUI:CUICMN.B2S" !Include CUI data section
720	%include "SYSTEM:ACTKEY.B2S" !Include our key codes
730	%include "SYSTEM:ACTPRM.B2S" !Include our parameter common
740	%include "SYSTEM:ACTCMN.B2S" !Include our general common
1000!.pg 1T &
!.t One-Time Thread &
!.hl1 Program Entry &
!+RUN entry &
	Entry.type% = 0% !Indicate a RUN entry &
\	Heading.Wanted% = -1% !Enable program heading
2000!Command-Level Entry &
	V$ = sys(chr$(6%) + chr$(-21%) + CHR$(255%)) !Drop temporary privileges, for good &
\	I$="V10.1-A" &
\	act.ver$ = "9.0" !ACTMGR program version &
\	act.edt$ = "" !ACTMGR program edit level &
	&
\	Indent.Column% = 2% !Indent commands to 2 &
\	open 'KB:' as file 1% !Create channel for possible dialogue &
\	if Heading.Wanted% then !If heading enabled, &
	  print "ACTMGR "; I$; "   "; ert$(0%) !##print program heading, &
\	  Heading.Wanted% = 0% !##clear heading flag, &
\	  Indent.column% = 8% !##and indent commands to 8
2010	if Entry.Type% <> 16% then !If we weren't entered by DCL, &
	  print '?Please use DCL commands' !##complain &
\	  goto 32767 !##and exit quickly
2500!.pg &
!.hl1 Main Control Routine &
	call 'AM1TIM' !Do one-time code &
\	if Pre.V9.0% then !Die if we can't run here &
	  print '?Missing special feature - this system is pre V9.0' &
\	  goto 32767
3000!.hl2 Major Loop &
	call 'AMCUI' !Do CUI calls and parsing &
\	goto 32767 if Parse.Error% !Quit if parse error &
\	if not Command.Recognized% then !Error between us and CUI, somehow &
	  print '?Internal error - dispatch failure' &
\	  goto 32767 !Die
3010	LINES.PER.ACCOUNT.BLOCK% = 8% IF ACCOUNTING% !RE-ADJUST ACCOUNT BLOCK SIZE &
\	goto 3025 unless Debug% !Write ACTPRM.TMP only if /DEBUG
3020!.pg &
!.hl2 Hybrid debugger - write parameter file &
	open 'ACTPRM.TMP' for output as file 11% &
!Begin writing parameters &
\	print #11%, U.Cmdc%; ','; tab(40%); 'U.Cmdc%' &
\	print #11%, CRD.k%; ','; tab(40%); 'CRD.k%' &
\	print #11%, CRA.k%; ','; tab(40%); 'CRA.k%' &
\	print #11%, CR.D.k%; ','; tab(40%); 'CR.D.k%' &
\	print #11%, CR.A.k%; ','; tab(40%); 'CR.A.k%' &
\	print #11%, SED.k%; ','; tab(40%); 'SED.k%' &
\	print #11%, SEA.k%; ','; tab(40%); 'SEA.k%' &
\	print #11%, SEP.k%; ','; tab(40%); 'SEP.k%' &
\	print #11%, SHD.k%; ','; tab(40%); 'SHD.k%' &
\	print #11%, SHA.k%; ','; tab(40%); 'SHA.k%' &
\	print #11%, SHP.k%; ','; tab(40%); 'SHP.k%' &
\	print #11%, DED.k%; ','; tab(40%); 'DED.k%' &
\	print #11%, DEA.k%; ','; tab(40%); 'DEA.k%' &
\	print #11%, DE.D.k%; ','; tab(40%); 'DE.D.k%' &
\	print #11%, DE.A.k%; ','; tab(40%); 'DE.A.k%' &
\	print #11%, Account%; ','; tab(40%); 'Account%' &
\	print #11%, All%; ','; tab(40%); 'All%' &
\	print #11%, Brief%; ','; tab(40%); 'Brief%' &
\	print #11%, Clustersize.Qualifier%; ','; tab(40%); 'Clustersize.Qualifier%' &
\	print #11%, Clustersize.Low%; ','; tab(40%); 'Clustersize.Low%' &
\	print #11%, Command.Recognized%; ','; tab(40%); 'Command.Recognized%' &
\	print #11%, Debug%; ','; tab(40%); 'Debug%' &
\	print #11%, '"'; Device.PPN$; '"'; ','; tab(40%); 'Device.PPN$' &
\	print #11%, Dialogue%; ','; tab(40%); 'Dialogue%' &
\	print #11%, Directory%; ','; tab(40%); 'Directory%' &
\	print #11%, Entry.Type%; ','; tab(40%); 'Entry.Type%' &
\	print #11%, Existing.Device.PPN.Wanted%; ','; tab(40%); 'Existing.Device.PPN.Wanted%' &
\	print #11%, Expire.Qualifier%; ','; tab(40%); 'Expire.Qualifier%' &
\	print #11%, Expire%; ','; tab(40%); 'Expire%' &
\	print #11%, First.Qualifier%; ','; tab(40%); 'First.Qualifier%' &
\	print #11%, '"'; First.PPN$; '"'; ','; tab(40%); 'First.PPN$' &
\	print #11%, Form.Qualifier%; ','; tab(40%); 'Form.Qualifier%' &
\	print #11%, Form.Low%; ','; tab(40%); 'Form.Low%' &
\	print #11%, Full%; ','; tab(40%); 'Full%' &
\	print #11%, In.Quota.Qualifier%; ','; tab(40%); 'In.Quota.Qualifier%' &
\	print #11%, In.Quota.Low%; ','; tab(40%); 'In.Quota.Low%' &
\	print #11%, In.Quota.High%; ','; tab(40%); 'In.Quota.High%' &
\	print #11%, Last.Qualifier%; ','; tab(40%); 'Last.Qualifier%' &
\	print #11%, '"'; Last.PPN$; '"'; ','; tab(40%); 'Last.PPN$' &
\	print #11%, Log.%; ','; tab(40%); 'Log.%' &
\	print #11%, Login.Qualifier%; ','; tab(40%); 'Login.Qualifier%' &
\	print #11%, Login%; ','; tab(40%); 'Login%' &
\	print #11%, Lookup.Qualifier%; ','; tab(40%); 'Lookup.Qualifier%' &
\	print #11%, Lookup%; ','; tab(40%); 'Lookup%' &
\	print #11%, Name.Qualifier%; ','; tab(40%); 'Name.Qualifier%' &
\	print #11%, '"'; Name.$; '"'; ','; tab(40%); 'Name.$' &
\	print #11%, Network.Qualifier%; ','; tab(40%); 'Network.Qualifier%' &
\	print #11%, Network%; ','; tab(40%); 'Network%' &
\	print #11%, Noexpire.Qualifier%; ','; tab(40%); 'Noexpire.Qualifier%' &
\	print #11%, Nopassword.Prompt.Qualifier%; ','; tab(40%); 'Nopassword.Prompt.Qualifier%' &
\	print #11%, Output.Qualifier%; ','; tab(40%); 'Output.Qualifier%' &
\	print #11%, '"'; Output$; '"'; ','; tab(40%); 'Output$' &
\	print #11%, Out.Quota.Qualifier%; ','; tab(40%); 'Out.Quota.Qualifier%' &
\	print #11%, Out.Quota.Low%; ','; tab(40%); 'Out.Quota.Low%' &
\	print #11%, Out.Quota.High%; ','; tab(40%); 'Out.Quota.High%' &
\	print #11%, Page.Capacity%; ','; tab(40%); 'Page.Capacity%' &
\	print #11%, '"'; Parameter.Device.PPN$; '"'; ','; tab(40%); 'Parameter.Device.PPN$' &
\	print #11%, '"'; Parameter.Device$; '"'; ','; tab(40%); 'Parameter.Device$' &
\	print #11%, Parameter.Device.23%; ','; tab(40%); 'Parameter.Device.23%' &
\	print #11%, Parameter.Device.24%; ','; tab(40%); 'Parameter.Device.24%' &
\	print #11%, Parameter.Device.25%; ','; tab(40%); 'Parameter.Device.25%' &
\	print #11%, Parameter.Device.26%; ','; tab(40%); 'Parameter.Device.26%' &
\	print #11%, Parameter.First.Project%; ','; tab(40%); 'Parameter.First.Project%' &
\	print #11%, Parameter.First.Programmer%; ','; tab(40%); 'Parameter.First.Programmer%' &
\	print #11%, Parameter.Last.Project%; ','; tab(40%); 'Parameter.Last.Project%' &
\	print #11%, Parameter.Last.Programmer%; ','; tab(40%); 'Parameter.Last.Programmer%' &
\	print #11%, Parameter.Maskdown.Done%; ','; tab(40%); 'Parameter.Maskdown.Done%' &
\	print #11%, '"'; Parameter.PPN$; '"'; ','; tab(40%); 'Parameter.PPN$' &
\	print #11%, Parameter.Project.Wild%; ','; tab(40%); 'Parameter.Project.Wild%' &
\	print #11%, Parameter.Programmer.Wild%; ','; tab(40%); 'Parameter.Programmer.Wild%' &
\	print #11%, Parameter.Something.Wild%; ','; tab(40%); 'Parameter.Something.Wild%' &
\	print #11%, Parse.Error%; ','; tab(40%); 'Parse.Error%' &
\	print #11%, Position.Qualifier%; ','; tab(40%); 'Position.Qualifier%' &
\	print #11%, Position.Low%; ','; tab(40%); 'Position.Low%' &
\	print #11%, Position.High%; ','; tab(40%); 'Position.High%' &
\	print #11%, Pre.V9.0%; ','; tab(40%); 'Pre.V9.0%' &
\	print #11%, Privileges.Qualifier%; ','; tab(40%); 'Privileges.Qualifier%' &
\	print #11%, '"'; Privileges$; '"'; ','; tab(40%); 'Privileges$' &
\	print #11%, Purge.Qualifier%; ','; tab(40%); 'Purge.Qualifier%' &
\	print #11%, Purge%; ','; tab(40%); 'Purge%' &
\	print #11%, Remote.Qualifier%; ','; tab(40%); 'Remote.Qualifier%' &
\	print #11%, Remote%; ','; tab(40%); 'Remote%' &
\	print #11%, Reserve.Quota.Qualifier%; ','; tab(40%); 'Reserve.Quota.Qualifier%' &
\	print #11%, Reserve.Quota.Low%; ','; tab(40%); 'Reserve.Quota.Low%' &
\	print #11%, Reserve.Quota.High%; ','; tab(40%); 'Reserve.Quota.High%' &
\	print #11%, Reset.Qualifier%; ','; tab(40%); 'Reset.Qualifier%' &
\	print #11%, Reset%; ','; tab(40%); 'Reset%' &
\	print #11%, Size.Qualifier%; ','; tab(40%); 'Size.Qualifier%' &
\	print #11%, Size.Low%; ','; tab(40%); 'Size.Low%' &
\	print #11%, System.Pack.Status.Call.Error%; ','; tab(40%); 'System.Pack.Status.Call.Error%' &
\	print #11%, System.Qualifier%; ','; tab(40%); 'System.Qualifier%' &
\	print #11%, Target.Disk.RDS.Level%; ','; tab(40%); 'Target.Disk.RDS.Level%' &
\	print #11%, Target.Disk.Pack.Clustersize%; ','; tab(40%); 'Target.Disk.Pack.Clustersize%' &
\	print #11%, Template.Qualifier%; ','; tab(40%); 'Template.Qualifier%' &
\	print #11%, '"'; Template.Device$; '"'; ','; tab(40%); 'Template.Device$' &
\	print #11%, Template.Disk.RDS.Level%; ','; tab(40%); 'Template.Disk.RDS.Level%' &
\	print #11%, Template.Disk.Pack.Clustersize%; ','; tab(40%); 'Template.Disk.Pack.Clustersize%' &
\	print #11%, '"'; Template$; '"'; ','; tab(40%); 'Template$' &
\	print #11%, There%; ','; tab(40%); 'There%' &
\	print #11%, We.Have.WACNT%; ','; tab(40%); 'We.Have.WACNT%' &
\	print #11%, We.Have.GACNT%; ','; tab(40%); 'We.Have.GACNT%' &
!End writing parameters &
\	close #11% &

3025!.pg &
!+Dispatch to processing overlay &
	select U.Cmdc% !Dispatch based upon CUI's returned command code &
\	  case CR.A.k%   			  \ gosub CREATE_SET_Command &
\	  case SHA.k%                             \ gosub SHOW_ACCOUNT_Command &
\	  case SEA.k%, SEP.k%             	  \ gosub CREATE_SET_Command &
\	  case DE.A.k%   			  \ gosub DELETE_Command &
\	  case else                               \ print '?Internal dispatch error' &
\	end select &
\	goto 32000 &
	&
!Dispatch control &
\ CREATE_SET_Command: &
\	call 'AMCRST' !CREATE/SET processor &
\	return &
\ SHOW_ACCOUNT_Command: &
\	call 'AMSHOB' unless Full% !One-liner-display processor &
\	call 'AMSHOF' if Full% !Block-display processor &
\	return &
\ DELETE_Command: &
\	call 'AMDELE' !DELETE processor &
\	return &

30000!.pg EE &
!.t Entry/Exit Routines &
	goto 1000 !CHAIN entry point (not wanted;  call it RUN)
30490!+Debugging entry &
	V$ = cvt$$(sys(chr$(7%)), 24%) !Have a look at core common &
\	if left(V$, 2%) = '# ' then !If it's "#foo" entry, then &
	  V$ = sys(chr$(8%) + right(V$, 3%)) !##fake core common, fall into..
30500!+DCL Entry Point &
	Entry.Type% = 16% !Set DCL entry type &
\	Heading.Wanted% = 0% !No program heading &
\	goto 2000 !Enter main thread &

31000!+CHAIN Entry Point &
	Entry.Type% = 2% !Set CHAIN entry type &
\	Heading.Wanted% = 0% !No program heading &
\	goto 2000 !Enter main thread &

32000!.sb1 End-of-Program Processing &
	close #I% for I% = 1% to 12% !Close all channels &
\	V$ = sys(chr$(9%)) !Exit to user's KBM &

32767	end
