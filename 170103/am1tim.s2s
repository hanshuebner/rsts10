1!.pn AM1TIM - Account Management, One-Time Code &
!.pg ID	&
!.t Standard Documentation Header &
	sub	AM1TIM () &
!			========================================================================== &
!			||									|| &
!			||		  RSTS/E Account Management Package			|| &
!			||									|| &
!			||======================================================================|| &
!			||									|| &
!			||		   C o m p o n e n t     T i t l e			|| &
!			||		   -------------------------------			|| &
!			||									|| &
!			||			  Component : AM1TIM.B2S			|| &
!						    Version : V10.1 &
!						       Edit : A &
!					          Edit Date : 10-MAY-91 &
!			||		          Author(s) : WJS,JJT				|| &
!			||									|| &
!			||======================================================================|| &
!			||									|| &
!			||			   C O P Y R I G H T				|| &
!			||			   -----------------				|| &
!			||									|| &
!			||									|| &
!		      Copyright (C) 1984, 1991 by &
!			||	      Digital Equipment Corporation, Maynard, Mass.		|| &
!			||									|| &
!			||									|| &
!			||    This software is furnished under a license and may be used and	|| &
!			||    copied  only  in accordance with the terms of such license and	|| &
!			||    with the  inclusion  of  the  above  copyright  notice.   This	|| &
!			||    software  or  any  other copies thereof may not be provided or	|| &
!			||    otherwise made available to any other person.   No title to or	|| &
!			||    ownership of the software is hereby transferred.			|| &
!			||									|| &
!			||    The information in this software is subject to change  without	|| &
!			||    notice  and should not be construed as a commitment by Digital	|| &
!			||    Equipment Corporation.						|| &
!			||									|| &
!			||    DIGITAL assumes no responsibility for the use  or  reliability	|| &
!			||    of its software on equipment that is not supplied by DIGITAL.	|| &
!			||									|| &
!			========================================================================== &
!	&
!				    M o d i f i c a t i o n   H i s t o r y   L o g &
!	&
!	&
	! VER/ED	EDIT DATE	REASON &
!	&

	&

70!.t Component Documentation &
!.pg	&
!			========================================================================== &
!			||									|| &
!			||	        C o m p o n e n t    D e s c r i p t i o n		|| &
!			||									|| &
!			||  AM1TIM.B2S is the Account Manager's one-time code.			|| &
!			||									|| &
!			==========================================================================
80!+Variable naming conventions &
!Non-EXTEND mode names (local variables) &
!		Names which would be acceptable to non-EXTEND mode &
!		(e.g., A$ or C0%) indicate local variables.  No such &
!		variable is guaranteed to survive any subroutine or &
!		function call, nor is such a variable expected to &
!		have any particular value after any GOTO other than &
!		a local one. &
!EXTEND-mode names (global variables) &
!		Variables which are expected to communicate information &
!		from one part of the program to another are given fully- &
!		mnemonic, EXTEND mode, names.  These variables are &
!		capitalized according to pseudo-English usage:  e.g., &
!		Probe.String$, Parameter.Something.Wild%, Returned.Error%. &
!Xxxxxxx.Low%, Xxxxxxx.High% names (integers) &
!		Names ending in .Low% or .High% are integers "gotten" from &
!		CUI.  The .Low% variable is sufficient for integers of up &
!		to 16 bits;  the .High% variable helps out for integers &
!		which require additional bits. &
!KKK.k% names (CUI .GBL's) &
!		Variables of the form SEA.k% (multiple capital letters, &
!		six characters maximum) are .GBL's used for communication &
!		with CUI. &
!Xxxxxxx.cvt$ &
!		String variables which are passed in a COMMON must be of &
!		fixed size;  they come back padded with spaces.  Generally, &
!		we want to do without the padding.  "Xxxxxx.cvt$" is &
!		the trimmed version of "Xxxxxx$". &
!+COMMON's &
!ACTCMN.B2S &
!		ACTCMN.B2S defines the COMMON area which the Account Manager &
!		uses to communicate across overlays. &
!	&
!			Primitive code.  Used as input to PARMS.TEC, &
!			which creates hybrid "parameter write" and &
!			"parameter read" modules. &
!CUICMN.B2S &
!		CUICMN.B2S defines the COMMON area for control of, &
!		and communication with, CUI. &
!	&
!			Primitive code.  Provided by the CUI package. &
!ACTKEY.B2S &
!		ACTKEY.B2S defines the COMMON area by which CUI's keyword &
!		values are made available to this BP2 code. &
!	&
!			Derived code.  Built from ACTKEY.MAC by KEYKEY.TEC. &
!	&
!.doc
700!.pg DD &
!.t Data Description &
!.hl1 MAPs and COMMONs &
	external word CCFLAG !CCTRAP's pollable control-C flag word &

710	%include "CUI:CUICMN.B2S" !Include CUI data section
720	%include "SYSTEM:ACTKEY.B2S" !Include our key codes
730	%include "SYSTEM:ACTPRM.B2S" !Include our parameter common
740	%include "SYSTEM:ACTCMN.B2S" !Include our general common &

2100!.pg &
	Privilege$ = 'WACNT' !Set up to check for WACNT privilege &
\	gosub 12625 &
\	We.Have.WACNT% = -1% unless Firqb%(3%) unless Returned.Error% !Record whether we have it &
\	Pre.V9.0% = (Returned.Error% = 18%) !** Temporary ** &
\	Privilege$ = 'GACNT' !Set up to check for GACNT privilege &
\	gosub 12625 &
\	We.Have.GACNT% = -1% unless Firqb%(3%) unless Returned.Error% !Record whether we have it &
				! We've dropped any temporary privileges above; &
				!   privileges at this point belong to the account &

2110!.pg &
!Get context information &
	change FNsys$(chr$(6%)+chr$(26%)) to Firqb% !Return job info &
\	Our.Job.Number% = Firqb%(1%)/2% !Save our job number &
\	Our.KB.Number% = Firqb%(4%) and 127% !Save our KB number &
\	Our.PPN% = Firqb%(21%) + swap%(Firqb%(22%)) !Save our PPN &
\	Our.Project% = Firqb%(22%) !##(individually, &
\	Our.Programmer% = Firqb%(21%) !##too) &
	&
\	This.System$ = cvt$$(right(sys(chr$(6%) + chr$(9%) + chr$(0%)), 3%), 140%) &
\	Today% = swap%(cvt$%(mid(sys(chr$(6%) + chr$(-3%)), 27%, 2%))) &
\	Today$ = cvt$$(date$(0%), 140%) &
\	Now$ = cvt$$(time$(0%), 140%) &
\	Today.Now$ = cvt$$(Now$ + ' on ' + Today$, 156%) !Date/time stamp string &
!Set program's static variables &
\	Null.30$ = string$(30%, 0%) &
!Set function-control booleans &
\	Dont.Allow.Wildcards%, Dont.Mask.Down.Wildcards%, Dont.Flag.Exceeded.Quota%, Dont.Allow.unlim%  = 0% &
\	  Do.Allow.Wildcards%,   Do.Mask.Down.Wildcards%,   Do.Flag.Exceeded.Quota%,   Do.Allow.unlim%  = -1% &
!Set up report-format parameters &
\	Width% =  ASCII(SEG$(SYS(CHR$(6%)+ !SHOW page width &
			CHR$(16%)+CHR$(0%)+CHR$(255%)),5%,5%))-1% &
\	Nominal.Length% = 66% !Standard paper (overridden by /LENGTH) &
\	Caption.Column% = 1% &
\	Prompt.Column% = 58% &
	&
\	One.Liner.Overhead% = 15% &
		! Three for page header lines, three for column headers, &
		! three for summary lines, six for widow margin &
	&
\	Lines.Per.Account.Block% = 20% !Set figures for printing &
\	Lines.Between.Account.Blocks% = 1% !##of /FULL account blocks &
\	Account.Block.Overhead% = 8% &
		! Three for page header lines, three for summary lines, two for &
		! widow margin  (the last "between" makes widow margin effectively six) &
\	goto 32767 !Return to caller
12600!.pg &
!.hl1 Privilege Mask Translations &
!	    The following group of four subroutines are responsible for &
!	handling translations between privilege names and privilege internal &
!	representations.  Privilege names are stored in a "cache", Privilege$(). &
!	Once a given name correspondence has been fetched from the Monitor, it &
!	remains available from the cache without repeated use of UU.CHK. &
!	&
!	    Schematically, &
!	&
!	&
!              "cache"                                  "index"                                "mask" &
!	&
!            Privilege$()                              Privilege%                          Privilege.Mask%() &
!	&
!               ------     - - -> - 12620 - - -> -               - - -> - 12660 - - -> -                    string form &
!               ------   /                          \          /                         \       _+           Xxx.xxx$ &
!               WACNT   /                            \   nn%  /                           \      _+ &
!               ------  \                            /   ---  \                           /      _+   <- - CHANGE - &
!               ------   \                          /          \                         /       _+                | &
!               WREAD      - <- - - 12640 - <- - -               - <- - - 12680 - <- - -         _+                | &
!               ------                                                                           _+                v &
!                 .                                                                              _+             ++++++++ &
!                 .                                                                              _+ &
!                 . &
!                 . &
!                                                      integer,                                eight             8-byte &
!           [64% entries]                              1% - 64%                               integers           string &
!	&
!	&
!	    For each of the possible bits in a privilege mask (64 of them), our cache &
!	has an allocated slot.  We invent an "index" (Privilege%), which takes a value &
!	between 1. and 64. for each corresponding mask bit/name slot. &
!	&
!	    Privilege masks themselves can exist in string form (as they appear while being passed or &
!	returned in the directives) or in array form.  Translation between string and array forms of &
!	a privilege mask is via the CHANGE statement. &
!	&
!	    There are four subroutines: &
!	&
!			12620 takes Privilege$ (a single ASCII name), and maps it to Privilege% (the index). &
!	&
!			12640 does the reverse, mapping Privilege% to Privilege$. &
!	&
!			12660 takes Privilege% (the index), and turns on the corresponding bit in Privilege.Mask%(). &
!	&
!			12680 does the reverse, extracting one ("the next") bit from Privilege.Mask%(), &
!				clearing it there, and returning Privilege% (the index).
12620!.pg &
!.sb2 Translate a privilege name to mask bit index &
	&
			!Passed:	Privilege$		- the privilege name, upper case and trimmed &
			! &
			!Returned:	Privilege%		- 0% if no such privilege, or null string &
			!					- 1%-64% for the associated mask bit, if priv exists &
			! &
			!		Returned.Error%		- as returned by UU.CHK, if cache miss &
			!		Firqb%			- as returned by UU.CHK, if cache miss &
			! &
			!Maintained:	Privilege$()		- Privilege-name cache &
	&
!+See if privilege name is already in cache &
	return if Privilege$ = Privilege$(Privilege%) for Privilege% = 64% to 0% step -1%
12625!.sb3 Do UU.CHK on Privilege$ (real, no cache) &
	Privilege% = 0% !Presumption (failure) &
\	change fnsys$(chr$(6%) + chr$(32%) + chr$(1%) !Change name to mask bit &
		+ string$(3%, 0%) &
		+ Privilege$ &
		+ string$(30% - 6% - len(Privilege$), 0%) ) &
			to Firqb% &
\	Firqb%(3%) = 0% if Returned.Error% !** Temporary ** &
\	Firqb%(3%) = -1% !** Temporary ** &
		if 3072% and swap%(cvt$%(mid(sys(chr$(6%) + chr$(26%) + chr$(0%) + chr$(1%)), 5%, 2%))) &
		if Returned.Error% = 18% !Get privs from JBFLAG if pre V9.0 &
\	return if Returned.Error% !Exit with presumption (Privilege% = 0%) if an error &
!Success.  We have a bit in Firqb%(7% + ...) &
\	Privilege.Mask%(I%) = Firqb%(I% + 6%) for I% = 1% to 8% !Retrieve the returned mask &
\	gosub 12680 &
\	Privilege$(Privilege%) = Privilege$ !Cache this privilege's name &
\	return &

12640!.pg &
!.sb2 Translate mask bit index to a privilege name &
	&
			!Passed:	Privilege%		- mask bit index, 0% to 64% &
			! &
			!Returned:	Privilege$		- the associated privilege name &
			! &
			!Maintained:	Privilege$()		- Privilege-name cache &
			! &
			!Mashed:	Firqb%, Firqb$, Privilege.Mask$ &
	&
!+See if privilege name is already in cache &
	Privilege$ = cvt$$(Privilege$(Privilege%), 6%) !Have a look at our cache &
\	return if len(Privilege$) !Exit with a cache hit &
\	return unless Privilege% !##or with null string for null index &
!This privilege not in cache.  Get it from Monitor &
\	change Privilege.Mask% to D$ !Save any existing array &
\	Privilege.Mask%(I%) = 0% for I% = 1% to 8% !Pre-clear our working mask area &
\	gosub 12660 &
\	Privilege.Mask%(0%) = 8% !Set byte count for "change" &
\	change Privilege.Mask% to Privilege.Mask$ !Put it into string form &
\	change D$ to Privilege.Mask% !Restore any (pre)existing array &
\	Privilege$ = cvt$$(mid(fnsys$(chr$(6%) + chr$(32%) + chr$(2%) !Change mask bit to name &
		+ string$(3%, 0%) &
		+ Privilege.Mask$ &
		+ string$(16%, 0%) ), 15%, 8%), 4%) &
\	Privilege$ = '' if Returned.Error% !Null string if call failed &
\	Privilege$(Privilege%) = Privilege$ !Cache this privilege's name &
\	return
12660!.pg &
!.sb2 Bit index `Privilege%' ==> Privilege.Mask%() &
	&
			!Passed:	Privilege%		- mask bit index, 0% to 64% &
			!		Privilege.Mask()% &
			! &
			!Returned:	Privilege.Mask%()	- with the indicated bit now set &
			! &
			!Preserved:	D$ &
	&
	return unless Privilege% !Do nothing for null index &
\	J% = Privilege% - 1% !Make our index zero-based:  0% to 63% &
\	I% = J% / 8% !Get byte offset:  0% to 7% &
\	J% = J% - I% * 8% !##and bit within byte:  0% to 7% &
\	P% = 1% !Create a "bit 0" &
\	P% = P% * 2% for K% = 1% to J% !Shift it to appropriate bit in byte &
\	I% = I% + 1% !Change byte offset into byte number &
\	Privilege.Mask%(I%) = Privilege.Mask%(I%) or P% !Set the requested bit &
\	return &

12680!.pg &
!.sb2 Privilege.Mask%() ==> bit index `Privilege%' &
			!Passed:	Privilege.Mask%() &
			! &
			!Returned:	Privilege%		- 0% if no bit set &
			!					- 1% to 64% for least significant bit found set &
			!		Privilege.Mask%()	- that least significant bit now cleared &
	&
	Privilege% = 1% !Presumption for our 1-based index &
\	for I% = 1% to 8% !Scan through bytes in mask &
\	  goto 12684 if Privilege.Mask%(I%) !Go process first byte with a bit set &
\	  Privilege% = Privilege% + 8% !Otherwise, increment our index one byte's worth &
\	next I% !##and go try again &
!Scan found no bits set &
\	Privilege% = 0% !Return the null index &
\	return &

12684!Non-zero mask byte found, at byte I% &
	P% = 1% !Generate a "bit 0" as a probe bit &
\	for J% = 0% to 7% !Scan through the byte's bits &
\	  goto 12688 if Privilege.Mask%(I%) and P% !Go process the bit when we find it &
\	  Privilege% = Privilege% + 1% !Otherwise, increment our index &
\	  P% = P% * 2% !##shift our probe one bit left &
\	next J% !##and go inspect next bit &
\	stop !There has to be a bit
12688!Got the proper bit &
	Privilege.Mask%(I%) = Privilege.Mask%(I%) and not(P%) !Clear the extracted bit &
\	return &

15000!.pg Fn &
!.t Function Definitions &
!.hl1 General Functions &
!.fn2 fnsys$ - do a sys() call &
	&
			!Argument:	a sys() call argument string &
			! &
			!Value:		Firqb (string) returned by sys() call &
			! &
			!Returned:	Returned.Error% &
			!		Returned.Status% &
			!		..other data valid only if Returned.Error% = 0% &
	&
	def* fnsys$(S$) &
\	  Returned.Error%, Returned.Status% = 0% !Presume no error;  clear status cell &
	&
\	   if Debug% then &
		print 'fnsys$(S$):  len(S$) ='; len(S$) &
\		print &
\		print	Q%;	   ascii(right(S$, Q%)), &
			Q% + 10%;  ascii(right(S$, Q% + 10%)), &
			Q% + 20%;  ascii(right(S$, Q% + 20%))    for Q%=1% to 10% &
\		print &

15005	  on error goto 15007 !Set up local error trap &
\	  Work$ = sys(S$) !Issue the sys() call &
\	  Returned.Status% = status !Retrieve "status" information &
\	  goto 15008 !##and exit, without error
15007!Error on a sys() call &
	  Returned.Error% = err !Pass back the error code &
\	  Work$ = '' !Nothing to return if sys() errored &
\	  resume 15008 !##and continue
15008	  fnsys$ = Work$ !Pass back our returned value &
\	  on error goto 19000 !Restore default error trap &
\	  if Debug% then &
		print 'Returned.Error% ='; Returned.Error%,, 'Returned.Status% ='; Returned.Status% &
\		print &
\		print	Q%;	   ascii(right(Work$, Q%)), &
			Q% + 10%;  ascii(right(Work$, Q% + 10%)), &
			Q% + 20%;  ascii(right(Work$, Q% + 20%))    for Q%=1% to 10% &
\		print
15009	fnend
19000	PRINT ERT$(ERR),ERN$ &
\	RESUME 32767
32767	subend
