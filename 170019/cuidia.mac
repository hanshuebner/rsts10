.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.INCLUDE	/CUI:CUIPFX.MAC/
.INCLUDE	/CMN:KERNEL.MAC/					;019
.INCLUDE	/CMN:KBDEF.MAC/						;019
TITLE	CUIDIA,<CUI Dialog Mainline>,0B,21-JUN-91,CEK/JFM/KPH

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR CUI DIALOG MAINLINE
;+
;
;  001	CEK  20-MAY-82	Creation
;  002	CEK  06-OCT-82	Changed name from CUIROT to CUIDIA
;  003	CEK  06-OCT-82	Added flags for DEFQUAL and DEFARG
;  004	CEK  06-OCT-82	Eliminated THRBLK variable
;  005	CEK  07-OCT-82	Added PSECTS subfunction of $CUI macro
;  006	CEK  14-OCT-82	Added .MCALL for $FETCS
;  007	CEK  22-NOV-82	Added $CUI MSG subfunction
;  008	JFM  04-MAY-83	Added QF.MULT
;  009	JFM  10-MAY-83	Changed comments.
;  010	JFM  12-MAY-83	Added $FETNQ (Fetch next qual) to .MCALL in $CUI macro.
;  011  JFM  23-SEP-83	Added third (optional) argument to U.INI, indent length
;  012	KPH  09-NOV-83	Changed UNORGs to .SAVE and .RESTORE
;  013	JFM  23-NOV-83	Added QF.NARG, accept neg args on neg quals.
;  014	JFM  11-DEC-83	Removed $PARPFX MCALL
;  015	JFM  18-JAN-84	Added PF.INT, PF.SEP, AF.INT and CUIASC.
;  016	JFM  16-MAR-84	Changed order of bit flags, removed CUIASC, added 
;			CUIA2B and CUIB2A
;  017	JFM  20-APR-84	Cleaned up .MCALL's
;
;			[RSTS/E V9.7]
;  018	JFM  16-Sep-88	Added AF.MULT bit to allow arguments to be specified
;			more than once in an argument list.  Removed CUIA2B
;			and CUIB2A.
;
;			[RSTS/E V10.1]
;  019	JFM  21-Jun-91	Initialize RDMOD, include KERNEL and KBDEF, change
;			CALBX U$IPOL to CALLX (saves 26 instructions per cmd)
;-

;+
; CUIDIA -- CUI Dialog Mainline
;
; Common User Interface (CUI) is a package of routines that a program
; can call to handle the program's user interface.  CUI can prompt the
; user, validate and parse the user's responses, inform
; the user of errors, and provide informational messages to the user.
;
; CUI can be called by programs compiled under BASIC-PLUS-2, CSPCOM,
; or the RT11- or RSX-based MACRO assembler.
;
;-

	.PSECT	CUIDIA,RO,REL,LCL,CON
	DEFORG	CUIDIA

	.MCALL	$CUI

	$CUI	MSG

.SBTTL	$CUI macro
;+
; $CUI macro -- include CUI in an assembly
;
; Defines mnemonic offsets into CUI common, and
; defines mnemonics for calling CUI routines.
;
; $CUI TABLE -- also includes symbols and macros needed in command tables,
;		keyword tables, and message tables.
;
; $CUI ALLOC -- also allocates CUI common.
;
; $CUI PSECTS -- also names all the CUI PSECTs.  Useful for forcing
;		the CUI code to a particular location in the program.
; 
; This macro gets pulled into the CUI macro library.
;-

.MACRO	$CUI	FUN
	.IF	IDN <FUN>,<ALLOC>

U.CMN::	 .BLKB	U.SIZ

	.ENDC
	.SAVE								

; $CUI common area
;
; ****************************************************************
; ***  WHEN THIS IS CHANGED, CUICMN.B2S MUST ALSO BE CHANGED.  ***
; ****************************************************************

U.MAXL	=:	255.		;Maximum length of parameter or argument 
				;string, in bytes
	.ASECT
	.	=	0
	.BLKW			;(pad word named "U.CMN" in BP2)
U.STAT:	.BLKW			;Status code returned by CUI
U.PRES:	.BLKW			;-1 => fetched item was present
				; 0 => fetched item was not present
U.LOW:				;Low order bits for 32 and 16 bit integers
U.DATE:	.BLKW			;Date specified by user, in RSTS/E format
U.HIGH:				;High order bits for 32 bit integers
U.TIME:	.BLKW			;Time specified by user, in RSTS/E format
	.BLKW			;Unused
U.KEY:	.BLKW			;Code for keyword specified by user
U.LEN:	.BLKW			;Length of substring 
U.STR:	.BLKB	U.MAXL		;Substring 
	.EVEN
U.POS:	.BLKW			;Position of substring (1-based)
U.ENT:	.BLKW			;Entry type code.  For internal CUI use 
				; 0 => Entered via a RUN command (Line 0)
				; 1 => Entered via a CCL command (Line 30000)
				; 2 => Entered via a CHAIN (Line 31000)
				;16 => Entered via a DCL command (Line 30500)
U.NO:	.BLKW			;-1 => qualifier included /NO prefix
				; 0 => it didn't
U.CMDC:	.BLKW			;Code for command name
U.SIZ:				;Size of $CUI common area, in bytes

; Fields of a tag word

U.TGKY	=:	^O 000001	;An even tag is a keyword code. An odd
				;tag is a parameter tag, class tag,
				;or the like.
U.TGTG	=:	^O 007777	;These bits designate the tag proper.
				;(This field includes the U.TGKY field.)
U.TGNO	=:	^O 100000	;The sign bit indicates that the "NO"
				;prefix appeared with this keyword.
				;(This only occurs with keyword tags.)
				;//Not in use yet.//

; Call support

	.MCALL	CALBX

	.IF	IDN <FUN>,<TABLE>
; PSECTs

	.PSECT	U$TEXT,RO,REL,LCL,CON

; Data structures for CUIPAR.
; Bits of QFLAGS word.

	.ASECT
.	=	1
QF.AOPT:.BLKB	.		;Qualifier accepts optional argument. 
QF.AREQ:.BLKB	.		;Qualifier requires an argument.
QF.NEG:	.BLKB	.		;Qualifier is negatable (accepted with /NO 
				;prefix and no argument).
	.BLKB	.		;Reserved
	.BLKB	.		;Reserved
QF.PARM:.BLKB	.		;This is a parameter qualifier rather than
				;a command qualifier.
QF.ALIS:.BLKB	.		;List of qualifier arguments, of form
				;(argument,...), is accepted.
QF.LOC:	.BLKB	.		;This qualifier implies a local (non-network)
				;operation.
QF.MULT:.BLKB	.		;Qualifier is allowed to be multiply specified
				;on comand line.
QF.NARG:.BLKB	.		;Negation of qualifier accepts arguments

; Bits of P.FLG word.

	.ASECT
.	=	1	
PF.OPT:	.BLKB	.		;Parameter is optional.
PF.COL:	.BLKB	.		;Colon can be used as separator before param.
PF.SEP:	.BLKB	.		;Parameter separator before param is optional.
PF.INT:	.BLKB	.		;Parameter is of integer persuasion
PF.NLS:	.BLKB	.		;Don't look for parameter list separators
				;... after param

; Bits of A.FLAGS word

	.ASECT
.	=	1
AF.AOPT:.BLKB	.		;Argument accepts optional argument. 
AF.AREQ:.BLKB	.		;Argument requires an argument.
AF.NEG:	.BLKB	.		;Argument is negatable-accepted with NO prefix
AF.KEY:	.BLKB	.		;Argument is a keyword.
AF.INT:	.BLKB	.		;Argument is an integer type
AF.MULT:.BLKB	.		;Argument is allowed multiple times 	;018

	.MCALL	SYMMAC,.ASCIC,CUITHR,DEFQUAL,ENDQUAL,DEFARG,ENDARG
	.MCALL	$DEFCMD,$PARM,$ENDCMD,DFLTCQ,PUTCQ,DFLTKA
	.MCALL	$PARKEY,$ONKEY,$ENDKEY
	.MCALL	$FETP,$FETNP,$FETPQ,$FETCQ,$FETNQ,$FETA,$FETKA,$FETCS
	.MCALL	$RDCMD,DEFKEY,LOOKUP,$DISALLOW,CRETNT,$QUIT
	.MCALL	DEFPKG,DEFMSG

	SYMMAC			;Include symbol-definition macros.
	CUITHR			;Include macros for CUITHR tables.

	.ENDC

	.IF	IDN <FUN>,<PSECTS>
	.PSECT	CUICHK,RO,I,LCL,REL,CON
	.PSECT	CUIDIA,RO,I,LCL,REL,CON
	.PSECT	CUIFET,RO,I,LCL,REL,CON
	.PSECT	CUIFSS,RO,I,LCL,REL,CON
	.PSECT	CUIKEY,RO,D,GBL,REL,CON
	.PSECT	CUILEX,RO,I,LCL,REL,CON
	.PSECT	CUILOK,RO,I,LCL,REL,CON
	.PSECT	CUIMSG,RO,I,GBL,REL,CON
	.PSECT	CUIPAR,RO,I,LCL,REL,CON
	.PSECT	CUIPAT,RO,I,LCL,REL,CON
	.PSECT	CUIPOL,RO,I,LCL,REL,CON
	.PSECT	CUIPRT,RO,I,LCL,REL,CON
	.PSECT	CUIRD ,RO,I,LCL,REL,CON
	.PSECT	CUIREJ,RO,I,LCL,REL,CON
	.PSECT	CUITHR,RO,I,LCL,REL,CON
	.PSECT	CUITRE,RO,I,LCL,REL,CON
	.PSECT	IMPURE,RW,D,GBL,REL,CON
	.PSECT	M.CUI, RO,D,LCL,REL,OVR
	.PSECT	RSTSLB,RO,I,LCL,REL,CON
	.PSECT	U$KEY ,RO,I,LCL,REL,CON
	.PSECT	U$TBL ,RO,I,LCL,REL,CON
	.PSECT	U$TEXT,RO,I,LCL,REL,CON
				; //Shouldn't this be D?//
	.ENDC

	.IF	IDN <FUN>,<MSG>
	.MCALL	CMESSAGE,REPAINT
	.ENDC
	.RESTORE							
	.ENDM	$CUI

	$CUI	COMMON		;Lay out CUI common.

.SBTTL	Variables
	TMPORG	IMPURE
CMNADR::.BLKW			;Address of U.CMN common area
	UNORG

.SBTTL	U.INI -- Initialize CUI
;+
; U.INI -- Initialize CUI
;
; Call this routine once, before calling any other CUI routine.
;
; INPUTS:
;	#U.CMN	->	U.CMN common area
;	entry	->	flag word indicating how the program was invoked.
;			0	=	RUN entry for program
;			1	=	CCL entry
;			2	=	chain entry
;			16.	=	DCL entry
;
; //PMTLEN is a declining feature which is ignored now, but will
; soon go away completely. //
;
; CALB	U.INI <#U.CMN,entry,PMTLEN>
;
; OUTPUTS:
;	R0	=	0
;	C=0
;-

.ENABL	LSB

U.INI::	SUBR	<.CMNADR,ENTRY,PMTLEN> 
	CALLX	U$RSTP		;Initialize print buffer.
	MOV	.CMNADR(R5),R4	;Get address of CUI common.
	MOV	R4,CMNADR	;Save address of CUI common.
	MOV	@ENTRY(R5),U.ENT(R4)
				;Save entry type.
	CLR	U.STAT(R4)	;Give success back to caller.
	RETURN

.DSABL	LSB
GLOBAL	<CMNADR>

.SBTTL	U.DIA -- Do the command dialog 
;+
; U.DIA -- Do the command dialog
;
; INPUTS:
;	//should pass address of command table here//
;
; CALB	U.DIA
;
; OUTPUTS:
; C=1 if failure.
;	R0	=	EOF => no more commands available
;			Other value => error in command
;			(R0<>0 is guaranteed)
; C=0 if success.
;	R0	=	0
;	U.CMDC	=	command code that uniquely identifies the command
;
; DESCRIPTION:
;	On an EOF return, caller should exit.  
;	On a success return, caller should process the command and then
;	call U.DIA again.
;	On other return status, caller should call U.DIA again.
;	(U.DIA will already have printed the error message.) 
;
; SIDE EFFECTS:
;	If CUI gets command string from core common, it clears core common.
;-

.ENABL	LSB

U.DIA::	SUBR	,CHECK
	CLR	PRTMOD		;Write (print) default mode is 0	;019
	MOV	#TI.CUI,RDMOD	;Read default mode is CUI mode		;019
	MOV	CMNADR,R4	;Point at CUI common.
	CALLX	U$IPOL		;Initialize storage pool.		;019
20$:	CALBX	CUIPAR		;Read command, translate it into a parse tree.
	BCC	60$		;No error occurred 
50$:	CMP	R0,#U.QUIT	;Error occurred, is this a silent error?
	BEQ	60$		;Yes, so just return.
	CMP	R0,#EOF		;No, is it EOF?
	BEQ	60$		;Yes, so return.
	MOV	R0,R1		;Save error message
	REPAINT	LX.ERP,CONFPOS	;Repaint command
	CMESSAGE R1		;Print error message
	MOV	#U.QUIT,R0	;Quit
60$:	MOV	R0,U.STAT(R4)	;Give status back to caller.
	RETURN

.DSABL	LSB
GLOBAL	<EOF,CMNADR,U.QUIT,CONFPOS,LX.ERP,PRTMOD,RDMOD>

.SBTTL	U$USYS - Get user's system information
;+
; U$USYS - Get user's system information
;
; INPUTS:
;	NONE
; OUTPUS:
;	FIRQB set up with user's system information
;
; SIDE EFFECTS:
;	FIRQB clobbered
;-

U$USYS::CALLX	CLRFQB			;Clear the FIRQB
	MOVB	#UU.SYS,FIRQB+FQFUN	;Do UU.SYS
	.UUO				;Get information
	RETURN				;Finished here ...

.END
