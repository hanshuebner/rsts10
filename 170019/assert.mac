TITLE	.ASSERT,<Run-Time Assertion Macro>,0A,10-MAY-91,CEK

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR ASSERT
;+
;
;  001	CEK  16-APR-82	Added edit history
;  002	CEK  11-NOV-82	Changed comments, symbol names.
;
;-

;+
; .ASSERT	EXP1 COND EXP2 [,KIND]
;
;	This macro is a debugging aid.
;	It tests a condition at run time to ensure that it is true.  
;	If the condition is false, .ASSERT issues a BPT instruction.
;	The test only occurs if the symbol $DEBUG is defined.
;
;	For example, to verify that the value of R1 is greater than zero,
;	you would use
;		.ASSERT R1 GE #0 
;	
; EXP1
;	An address expression, such as R1 or (R3).
;
;	Autoincrement and autodecrement modes are invalid.  They are 
;	invalid because the increment or decrement would only occur 
;	if the symbol $DEBUG was defined;  thus the program would 
;	likely cease to work once the debugging flag was deactivated.
;
; COND
;	The condition to test.  COND is a 
;	two- or three-letter condition mnemonic of the kind used in branch 
;	instructions:  one of the following.
;
;	NE	EXP1 not equal to EXP2		<>	Z = 0
;	EQ	EXP1 equal to EXP2		=	Z = 1
;	VC	overflow is clear			V = 0
;	VS	overflow is set				V = 1
;	CC	carry is clear				C = 0
;	CS	carry is set				C = 1
;	 
;	(SIGNED CONDITION)
;	GE	EXP1 greater or eq to EXP2	>=	(N XOR V) = 0
;	LT	EXP1 less than EXP2		<	(N XOR V) = 1
;	GT	EXP1 greater than EXP2		>	Z OR (N XOR V) = 0
;	LE	EXP1 less or equal to EXP2	<=	Z OR (N XOR V) = 1
;	 
;	(UNSIGNED CONDITION)
;	HI	EXP1 higher then EXP2		>	C OR Z = 0
;	LOS	EXP1 lower or same as EXP2	<=	C OR Z = 1
;	HIS	EXP1 higher or same as EXP2	>=	C = 0
;	LO	EXP1 lower than EXP2		<	C = 1
;
;	.ASSERT tests the condition after comparing EXP1 and EXP2 
;	by a CMP or CMPB instruction.  If the condition is false,
;	.ASSERT issues a BPT instruction.  This typically invokes
;	ODT if ODT is present, and otherwise aborts the program with
;	a register dump.
;
; EXP2
;	Another address expression, of the same format as EXP1.
;
; KIND 
;	BYTE or WORD.  KIND is optional, and WORD is the default.
;	If BYTE is specified, then EXP1 and EXP2 are compared using a CMPB
;	instruction rather than a CMP instruction.
;
; EXPANSION:
;		.ASSERT	A EQ B 
;	expands to:
;		CMP	A,B
;		BEQ	label
;		BPT
;	label:
;+

.MACRO	.ASSERT	EXP1,COND,EXP2,KIND=WORD
	.IF	B	EXP1
	.ERROR	;Missing argument.
	.IFF
	.IF	B	EXP2
	.ERROR	;Missing argument.
	.IFF
	.IF	B	COND
	.ERROR	;Missing argument.
	.IFF
	.NTYPE	TMP$TYP,EXP1
	.IF	GE	<<TMP$TYP & ^O70> - ^O20>
				;If addressing mode is 2 through 5
	.IF	LE	<<TMP$TYP & ^O70> - ^O50>
				;  If address is not PC-relative 
	.IF	NE	<<TMP$TYP & ^O7> - ^O7>
	.ERROR	;EXP1: autoincrement or autodecrement illegal.
	.ENDC	;NE	<<TMP$TYP & ^O7> - ^O7>
	.ENDC	;LE	<<TMP$TYP & ^O70> - ^O50>
	.ENDC	;GE	<<TMP$TYP & ^O70> - ^O20>
	.NTYPE	TMP$TYP,EXP2
	.IF	GE	<<TMP$TYP & ^O70> - ^O20>
				;If addressing mode is 2 through 5
	.IF	LE	<<TMP$TYP & ^O70> - ^O50>
				;  If address is not PC-relative 
	.IF	NE	<<TMP$TYP & ^O7> - ^O7>
	.ERROR	;EXP2: autoincrement or autodecrement illegal.
	.ENDC	;NE	<<TMP$TYP & ^O7> - ^O7>
	.ENDC	;LE	<<TMP$TYP & ^O70> - ^O50>
	.ENDC	;GE	<<TMP$TYP & ^O70> - ^O20>
	.IF	DF	$DEBUG
	.IF	IDN	<KIND>,WORD	;If WORD was specified (or defaulted)
	 CMP	EXP1,EXP2
	.IFF	;IDN	<KIND>,WORD
	.IF	IDN	<KIND>,BYTE	;If BYTE was specified
	 CMPB	EXP1,EXP2
	.IFF	;IDN	<KIND>,BYTE
	.ERROR	;KIND -- must be BYTE or WORD.
	.ENDC	;IDN	<KIND>,BYTE
	.ENDC	;IDN	<KIND>,WORD
	 B'COND	.+^O4
	 BPT
	.ENDC	;DF	$DEBUG
	.ENDC	;B	COND
	.ENDC	;B	EXP2
	.ENDC	;B	EXP1
	.ENDM	.ASSERT
