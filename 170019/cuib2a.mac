.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.INCLUDE	/CUI:CUIPFX.MAC/
TITLE	CUIB2A,<CUI Binary to Ascii Conversion>,0A,10-MAY-91,GPK/JFM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR CUIB2A
;+
;
;  001	JFM  10-JAN-84	Created from ASCBIN.MAC and CDBL.MAC
;  002	JFM  08-MAR-84	Separated routines into two separate PSECTS
;  003	JFM  12-MAR-84	Separated CUIASC into CUIA2B and CUIB2A for overlay 
;			purposes.  They are coalled from different overlays.
;
;			[RSTS/E V9.7]
;  004	JFM  19-Sep-88	Removed references to the Psect CUIB2A, since it's
;			not used.  Changed typos.
;-

	.PSECT	CUIPRT,RO,REL,LCL,CON

;+
; The BINARY to ASCII routines ($CDBL and $CDBLS) are used by the message
; facility routines to convert integers into ASCII in order to print the 
; characters on the users keyboard.  These I put into the CUIPRT PSECT.  That
; is the only CUI PSECT which references these routines.  
;-

.SBTTL	$CDBL -- Convert BINARY to ASCII (unsigned)
.SBTTL	$CDBLS -- Convert BINARY to ASCII (signed)
;+
;
; DOUBLE PRECISSION SIGNED/UNSIGNED BINARY TO ASCII CONVERSION ROUTINES
;
; INPUTS:
;
;	R0 = ADDRESS OF OUTPUT BUFFER
;	R1 = ADDRESS OF DOUBLE PRECISSION INTEGER
;		(R1) = MOST SIGNIFICANT 16 BITS
;		(R1+2) = LEAST SIGNIFICANT 16 BITS
;	R2 = ZERO SUPPRESSION INDICATOR, OR FIELD SIZE
;		.LT.0 = NO ZERO SUPPRESSION
;		.EQ.0 = ZERO SUPPRESS
;		.GT.0 = ZERO SUPPRESS, FILL TO GIVEN SIZE
;
; OUTPUTS:
;
;	R0 = ADDRESS OF FIRST FREE BYTE IN OUTPUT BUFFER
;	R3 - R5 ARE PRESERVED
;
;-
.ENABL	LSB

$CDBL::	MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)		;SAVE R3 - R5
	MOV	(R1)+,R4		;GET INTEGER
	MOV	(R1),R5
	BR	1$

$CDBLS::MOV	R3,-(SP)
	MOV	R4,-(SP)
	MOV	R5,-(SP)		;SAVE R3-R5
	MOV	2(R1),R5		;GET INTEGER
	MOV	(R1),R4
	BGE	1$			;BRANCH IF POSITIVE
	MOVB	#'-,(R0)+
	NEG	R5			;NEGATE VALUE
	ADC	R4
	NEG	R4
	TST	R2			;FIELD SIZE IN EFFECT?
	BLE	1$			;BRANCH IF NOT
	DEC	R2			;COUNT "-"

1$:	SUB	#10.,SP			;ALLOCATE LOCAL STORE
	MOV	SP,R1
10$:	CALL	DIV10			;DIVIDE R4,R5 BY 10.
	ADD	#'0,R3			;CONVERT REMAINDER TO ASCII
	MOVB	R3,(R1)+
	TST	R5			;ZERO REMAINDER?
	BNE	10$
	TST	R4
	BNE	10$

	MOVB	#' ,R5			;ASSUME SPACE FILL
	TST	R2			;SPECIFIED FIELD SIZE?
	BGE	15$			;BRANCH IF SO
	MOVB	#'0,R5			;FILL WITH ZEROS
	MOV	#10.,R2			;TO 10 PLACES
15$:	MOV	R1,R4
	SUB	SP,R4			;COMPUTE SPACES FILLED
	SUB	R4,R2			;COMPUTE SPACES TO FILL
	BLE	30$			;BRANCH IF NOTHING
20$:	MOVB	R5,(R0)+		;FILL FIELD
	SOB	R2,20$

30$:	MOVB	-(R1),(R0)+		;OUTPUT STRING
	CMP	R1,SP
	BNE	30$			;CONTINUE UNTIL DONE

	ADD	#10.,SP			;RESTORE STACK
	MOV	(SP)+,R5		;
	MOV	(SP)+,R4		;
	MOV	(SP)+,R3		;RESTORE REGISTERS
	RETURN

	.DSABL	LSB

.SBTTL	DIV10 -- Divide R4, R5 by 10
;+
;
; DIVIDE CONTENTS OF R4, R5 BY 10.
;
; INPUTS:
;
;	R4 = HIGH ORDER DIVIDEND
;	R5 = LOW ORDER DIVIDEND
;
; OUTPUTS:
;
;	R0, R1, AND R2 ARE PRESERVED
;	R3 = REMAINDER
;	R4 = HIGH ORDER QUOTIENT
;	R5 = LOW ORDER QUOTIENT
;-

DIV10:	MOV	R2,-(SP)
	MOV	R5,R3
	MOV	R4,R5
	CLR	R4
	DIV	#10.,R4			;DIVIDE HIGH BY 10.
	MOV	R5,R2			;USE REMAINDER
	DIV	#20.,R2			;DIVIDE LOW BY 20.
	ASL	R2			;TO OBTAIN 15 BIT RESULT
	CMP	#10.,R3			;AND THEN CORRECT
	BGT	1$			;TO OBTAIN DIVISION BY 10.
	SUB	#10.,R3
	INC	R2
1$:	MOV	R2,R5
	MOV	(SP)+,R2
	RETURN

	.END
