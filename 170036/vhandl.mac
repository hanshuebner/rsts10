	.TITLE	VHANDL.006 OVERLAY HANDLER
	.IDENT	/V01.000 /
; RT-11 VIRTUAL OVERLAY HANDLER
;
; COPYRIGHT (C) 1979
; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS. 01754
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
; SINGLE COMPUTER SYSTEM AND MAY BE COPIED ONLY WITH THE INCLUSION
; OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE, OR ANY OTHER
; COPIES THEREOF, MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE
; TO ANY OTHER PERSON EXCEPT FOR USE ON SUCH SYSTEM AND TO ONE WHO
; AGREES TO THESE LICENSE TERMS. TITLE TO AND OWNERSHIP OF THE 
; SOFTWARE SHALL AT ALL TIMES REMAIN IN DEC.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;
; MAS

; EDIT LOG
; ADD GLOBAL NAMES SO HANDLER CAN BE RELOCATED				;MAS01

.SBTTL	THE RUN-TIME OVERLAY HANDLER

;+
; THE FOLLOWING CODE IS INCLUDED IN THE USER'S PROGRAM BY THE
; LINKER WHENEVER OVERLAYS ARE REQUESTED BY THE USER.
; THE RUN-TIME OVERLAY HANDLER IS CALLED BY A DUMMY
; SUBROUTINE OF THE FOLLOWING FORM:
;
;	JSR	R5,$OVRH	;CALL TO COMMON CODE
;	.WORD	<OVERLAY #*6>	;# OF DESIRED SEGMENT
;	.WORD	<ENTRY ADDR>	;ACTUAL CORE ADDR (VIRTUAL ADDR)
;
; ONE DUMMY ROUTINE OF THE ABOVE FORM IS STORED IN THE RESIDENT PORTION
; OF THE USER'S PROGRAM FOR EACH ENTRY POINT TO AN OVERLAY SEGMENT.
; ALL REFERENCES TO THE ENTRY POINT ARE MODIFIED BY THE LINKER TO INSTEAD
; BE REFERENCES TO THE APPROPRIATE DUMMY ROUTINE.  EACH OVERLAY SEGMENT
; IS CALLED INTO CORE AS A UNIT AND MUST BE CONTIGUOUS IN CORE.  AN
; OVERLAY SEGMENT MAY HAVE ANY NUMBER OF ENTRY POINTS, TO THE LIMITS
; OF CORE MEMORY.  ONLY ONE SEGMENT AT A TIME MAY OCCUPY AN OVERLAY REGION.
;
; IF OVERLAYS IN EXTENDED MEMORY ARE SPECIFIED, THE FOLLOWING DUMMY
; SUBROUTINE IS USED AS THE ENTRY POINT TO THE OVERLAY HANDLER.
; ADDITIONAL DATA STRUCTURES ARE INCLUDED WITH THE OVERLAY HANDLER AND ITS
; TABLE TO PERMIT USE OF EXTENDED MEMORY.THESE ARE ONE REGION DEFFINITION 
; BLOCK, A WINDOW DEFINITION BLOCK, AND THE XM EMT'S.
;
;	JSR	PC,$OVRHV	;ENTRY FOR /V OVERLAYS
;	.WORD	<OVERLAY #*6>
;	.WORD	<VIRTUAL ENTRY ADDRESS>
;-

.SBTTL DEFINITIONS, ETC

;+
; UNDEFINED GLOBALS IN THE OVERLAY HANDLER MUST BE NAMED "$OVDF1" TO
; "$OVDFn" SUCH THAT A RANGE CHECK MAY BE DONE BY LINK TO DETERMINE IF 
; THE UNDEFINED GLOBAL NAME IS FROM THE OVERLAY HANDLER. A CHECK IS 
; DONE ON THE .RAD50 CHARACTERS "$OV", AND THEN A RANGE CHECK IS DONE ON
; THE .RAD50 CHARATERS "DF1" TO "DFn". THESE GLOBAL SYMBOLS DO NOT APPEAR
; ON LINK MAPS, SINCE THEIR VALUE IS NOT KNOWN UNTILL AFTER THE MAP HAS BEEN
; PRINTED. CURRENTLY $OVDF1 TO $OVDF5 ARE IN USE.
;
;
; GLOBAL SYMBOLS V$READ, AND V$DONE ARE USEFULL WHEN DEBUGGING
; OVERLAID PROGRAMS.
;
; V$READ:: WILL APPEAR IN THE LINK MAP, AND LOCATES THE .READ STATEMENT
; IN THE OVERLAY HANDLER.
; 
; V$DONE:: WILL APPEAR IN THE LINK MAP, AND LOCATES THE FIRST INSTRUCTION 
; AFTER THE .READ IS COMPLEATED IN THE OVERLAY HANDLER.
;-

.MCALL 	.CRRG	;***** NOT REQUIRED IF KMON DOES THIS ******

.MCALL	.WDBDF,.RDBDF,.PRINT,.CRAW,.EXIT
.MCALL	.READW,..V1..
	..V1..

	.WDBDF			;DEFINE WDB OFFSETS
	.RDBDF			;DEFINE RDB OFFSETS			

.PSECT	$OHAND,GBL

.ENABL	GBL
.ENABL	LSB

.SBTTL	OVERLAY HANDLER CODE

;+
; THERE ARE TWO ENTRY POINTS TO THE OVERLAY HANDLER: $OVRHV FOR /V XM
; OVERLAYS, AND $OVRH FOR /O OVERLAYS.
;-

$OVRHV::INC	(PC)+		;SET /V OVERLAY ENTERY SWITCH		
1$:	.WORD	0		;=0 IF /O ; =1 IF /V OVERLAY ENTRY
$OVRH::	MOV	R0,-(SP)	;/O OVERLAY ENTRY POINT
	MOV	R1,-(SP)	
	MOV	R2,-(SP)

2$:
;	MOV	@R5,R1		;PICK UP OVERLAY NUMBER			
	BR	7$		;FIRST CALL ONLY * * *
	ADD	#$OVTAB-6,R1	;CALC TABLE ADDR			
	MOV	(R1)+,R2	;GET FIRST ARG. OF OVERLAY SEG. ENTRY
	TST	1$		;IS THIS /V ENTRY?
	BNE	6$		;IF NOT EQUAL 0 THEN YES
3$:	CMP	(R5)+,@R2	;IS OVERLAY ALREADY RESIDENT?
	BEQ	4$		;YES, BRANCH TO IT			

;+
; THE .READW ARGUMENTS ARE AS FOLLOWS:
; CHANNEL NUMBER, CORE ADDRESS, LENGTH TO READ, RELATIVE BLOCK ON DISK.
; THESE ARE USED IN REVERSE ORDER FROM THAT SPECIFIED IN THE CALL.
;-

V$READ::.READW	17,R2,@R1,(R1)+ ;READ FROM OVERLAY FILE		
V$DONE::BCS	5$
4$:	MOV	(SP)+,R2	;RESTORE USERS REGS
	MOV	(SP)+,R1
	MOV	(SP)+,R0
	MOV	@R5,R5		;GET ENTRY ADDRESS
	CLR	1$		;CLEAR /V FLAG		
	RTS	R5		;ENTER OVERLAY ROUTINE AND RESTORE USER'S R5

5$:	EMT	376		;SYSTEM ERROR 10 (OVERLAY I/O)
	.BYTE	0,373

6$:	MOV	R1,-(SP)	;SAVE R1 ON STACK 
	MOV	2(R1),R1	;GET WORD LENGTH
	ASR	R1		;AND CONVERT TO THE NUMBER
	ASR	R1		;OF 32. WORD 
	ASR	R1		;(40 OCTAL)
	ASR	R1		;BLOCKS FOR THE LENGTH
	ASR	R1		;TO MAP 
	MOV	R1,W.NLEN(R2)	;SET LENGTH TO MAP

;+
; IN A REGION, RESIDENT PARTITIONS WITH THE SAME BASE ADDRESS USE DIFFERENT 
; WDB'S. ONLY ONE OF THESE WINDOWS IS PRESENT AT ANY TIME. A CRAW MUST BE DONE
; TO MAKE SURE THE WINDOW BEING MAPPED IS THERE NOW. THE MAP IS DONE
; BECAUSE THE WS.MAP BIT IS SET IN THE WDB.
;-

	.CRAW	#AREA,R2	;CREATE WINDOW AND MAP IT (WS.MAP BIT SET)
	MOV	(SP)+,R1	;RESTORE R1
	MOV	W.NBAS(R2),R2	;GET CORE ADDR OF OVERLAY
	BCC	3$		;C=0 THE CRAW AND MAP ARE OK
	BR 	13$		;C=1 PRINT ERROR MESSAGE

7$:	MOV	#11501,2$	;RESTORE SWITCH INSTR (MOV @R5,R1)	
	MOV	(PC)+,R1	;START ADDR FOR CLEAR OPERATION
$VDF1::	 .WORD	$OVDF1		;HIGH ADDR OF ROOT SEGMENT		;MAS01
8$:	CLR	(R1)+		;CLEAR ALL OVERLAY REGIONS
	CMP	R1,$VDF2	;ARE WE DONE?
	BLO	8$		;LO -> NO, REPEAT

; ******* THIS WILL GO AWAY IF KMON CREATES REGION AND ZERO'S SEG #  *******
; GET REGION SIZE AND CREATE REGION IF POSSIBLE

	TST	RGSIZ		;TEST REGION SIZE
	BEQ	2$		;RGSIZ=0 THEN NOT /V IN PROGRAM
	.CRRG	#AREA,#RGADR	;CREATE THE REGION
	BCC	9$		;C=0 THEN REGION CREATED
	MOV	#MSG1,R0	;OTHERWISE ERROR
	BR	11$		;GO AND PRINT IT

;+
; NOW CREATE WINDOW AND MAP TO IT FOR ZEROING OF SEGMENT NUMBER
; $OVDF4=START ADDR OF WINDOW DEF. BLOCKS ->POINTS TO 1ST WORD, 1ST BLOCK
; $OVDF5=POINTS TO 1ST LOC AFTER WDB'S
; BOTH OF THESE ARE SET BY LINK
;-

9$:	MOV	(PC)+,R1	;GET START OF WDB'S
$VDF4::	 .WORD	$OVDF4		;ADR OF WDB'S  START			;MAS01
10$:	MOV	RGADR,W.NRID(R1) ;LINK REGION ID TO WINDOW

;+
; THE WS.MAP BIT IS SET IN ALL WDB STATUS WORDS BY LINK. THIS CAUSES 
; A MAP TO BE DONE AUTOMATICALLY AFTER THE WINDOW IS CREATED.
;-

	.CRAW	#AREA,R1	;CREATE WINDOW AND DO INPLICIT MAP TO IT
	BCC	12$		;C=0 THEN WINDOW CREATED AND MAPPED

; ****** WILL STILL NEED THIS ERROR MESSAGE FOR OTHER CRAW ********

13$:	MOV	#MSG2,R0	;OTHERWISE ERROR
11$:	.PRINT			;AND PRINT MESSAGE
	.EXIT			;AND EXIT

; ******* END MESSAGE PROCESSING *******

12$:	MOV	W.NBAS(R1),R2	;GET BASE VIRTUAL ADDR
	CLR	(R2)		;AND CLEAR IT (SEG # IN CORE)
	ADD	#W.NLGH,R1	;GET NEXT WDB
	CMP	(PC)+,R1	;HAVE WE DONE THEM ALL?	
$VDF5::	 .WORD	$OVDF5		;POINTER TO WORD AFTER ALL WDB'S	;MAS01
	BNE	10$		;NOT EQUAL->HAVE MORE TO DO

; *******  END OF POSSIBLE KMON CODE       ********

	BR	2$		;AND RETURN TO CALL IN PROGRESS

.DSABL	LSB

.SBTTL IMPURE AREA

AREA:	.WORD	0,0		;EMT AREA
MSG2:	.ASCIZ	/?VHANDL-F-Window error/

; ********  MSG1 NOT HERE IF KMON CAN DO IT ********

MSG1:	.ASCIZ	/?VHANDL-F-Region error/
RGADR:	.WORD	0		;REGION DEFINITION BLOCK
RGSIZ:	.WORD	$OVDF3,0	;$OVDF3->SET BY LINK = SIZE OF REGION
$VDF2::	.WORD 	$OVDF2		;HIGH ADDR OF /O OVERLAYS		;MAS01

.EVEN

.SBTTL	$OVTAB	OVERLAY TABLE

;+
; OVERLAY SEGMENT TABLE FOLLOWS:
; $OVTAB:	.WORD	<CORE ADDR>,<RELATIVE BLK>,<WORD COUNT>   /O OVERLAYS
;		.WORD	<WDB ADDR>,<RELATIVE BLK>,<WORD COUNT>    /V OVERLAYS
; THREE WORDS PER ENTRY, ONE ENTRY PER OVERLAY SEGMENT.
;
; ALSO, THERE IS ONE WORD PREFIXED TO EACH OVERLAY REGION
; THAT IDENTIFIES THE SEGMENT CURRENTLY RESIDENT IN THAT REGION.
; THIS WORD IS AN INDEX INTO THE $OVTAB TABLE.
;-

.PSECT	$OTABL,D,GBL,OVR

$OVTAB:

.END
