	.NLIST
;
;	COPYRIGHT (C) 1974,1975 BY DIGITAL EQUIPMENT CORPORATION
;	MAYNARD, MASSACHUSSETTS  01754
;
;
;
;	THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE
;	WITHOUT NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT
;	BY DIGITAL EQUIPMENT CORPORATION.  DIGITAL EQUIPMENT
;	CORPORATION ASSUMES NO RESPONSIBILITY FOR ANY ERRORS
;	THAT MAY APPEAR IN THIS DOCUMENT.
;
;	THE SOFTWARE DESCRIBED IN THIS DOCUMENT IS FURNISHED TO
;	THE PURCHASER UNDER A LICENSE FOR USE ON A SINGLE COMPUTER
;	SYSTEM AND CAN BE COPIED (WITH INCLUSION OF DIGITAL'S
;	COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT AS
;	MAY OTHERWISE BE PROVIDED IN WRITING BY DIGITAL.
;
;	DIGITAL EQUIPMENT CORPORATION ASSUMES NO RESPONSIBILITY
;	FOR THE USE OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
;	THAT IS NOT SUPPLIED BY DIGITAL.
;

;	.TITLE	$F4
;	.IDENT	/17/
;	PARAMETER FILE FOR FORTRAN IV UNDER RSX11M
;
; H. JACOBS, B. LEAVITT, R. BRENDER, D. KNIGHT
; MODIFIED:  	B. LEAVITT  	25-SEP-74
;		B. LEAVITT	1-MAR-75
;
;+
; FUNCTION:
;	DEFINE COMMON SYMBOLS AND DATA STRUCTURES
;	USED THROUGHT THE OTS.
;	THE FOLLOWING MACROS ARE CONTAINED HEREIN:
;		OTS$I		DEFINE CODE SECTION
;		OTS$D		DEFINE DATA SECTION
;		OTSWA		DEFINE OTS WORK AREA OFFSETS
;		FBLOCK		DEFINE FILE DESCRIPTOR BLOCKS
;				INCLUDING FCS SYMBOLS
;		ERRDEF		DEFINE ERROR SYMBOLS USED IN TRAPS
;		PDFENT		PROCESSOR DEFINED FUNCTION ENTRY POINT EXPANSION
;
;-
 
F4	=1	;SELECT FORTRAN IV CODE
RSXM	=1	;SELECT RSX11M CODE
 
; THIS CONDITIONAL IS USED TO DEFINE THE SYMBOL '$PASS2'
; ONLY ON PASS TWO OF THE ASSEMBLY. THIS IS USED BY THE FOLLOWING
; LARGE MACROS TO AVOID REDEFINITION ON THE SECOND PASS AND HENCE
; TO SPEED UP THE ASSEMBLY.
 
.IF NDF $PASS1
$PASS1 = 0
.IFF
$PASS2 = 0
.ENDC

 
 
	.MACRO	IDENT	VERSN
	.IF DF F4
	.IDENT	/F400'VERSN/
	.ENDC	;DF,F4
 
	.IF DF F4P
	.IDENT	/P'VERSN/
	.ENDC	;DF,F4P
	.ENDM
 
 
 
	.IF DF FPP!FIS!EIS
	.IFF
	.MACRO	SOB	R,A
	DEC	R
	BNE	A
	.ENDM	;SOB
	.ENDC	;DF FPP!FIS!EIS
 
 
	.MACRO	OTS$I
	.ENDM	;OTS$I
 
	.MACRO	OTS$D
	.ENDM	;OTS$D
 
 
	.IF DF F4P
	.MACRO	$NEXT$
	RTS	PC
	.ENDM
	.ENDC
	.IF DF F4
	.MACRO	$NEXT$
	JMP	@(R4)+
	.ENDM
	.ENDC
 
 
	.MACRO PDFENT A,B
	.IF DF PDFI
A::
	.ENDC		;DF PDFI
 
	.IF DF PDFH
B::
	.ENDC		;DF PDFH
	.ENDM		;PDFENT
 

 
;
;   MACRO TO DEFINE THE OTS WORK AREA
;
 
.IF NDF $PASS2
 
	.MACRO	OTSWA
	.IF	NDF,$ALOC$
	.MACRO	DW	N,V,G,C
N	=$$$OFF
$$$OFF	=$$$OFF+2
	.ENDM
	.IFF
	.MACRO	DW	N,V,G,C
N	=$$$OFF
.	=$OTSVA+$$$OFF
	.IF	NB,G
G	==.
	.ENDC	;NB,G
	.IF	B,V
	+0	;N'	'C
	.IFF
	+V	;N'	'C
	.ENDC	;B,V
$$$OFF	=$$$OFF+2
	.ENDM
	.ENDC	;NDF,$ALOC$
 
$$$OFF	=0
$TKB$	=0	;INDICATES LOCATIONS INITIALIZED BY TASK BUILDER
 
;   HERE FOLLOW THE WORK AREA DESCRIPTIONS
;	NOTE: EQUATED SYMBOLS SHOULD NOT BE USED WITHIN
;		THE SAME FUNTION.
 
DW	W.SEQC	,	,$SEQC	,<SEQUENCE NUMBER>
DW	W.NAMC	,0	,$NAMC	,<NAME CHAIN POINTER>
ENMLNK	=W.NAMC
DW	W.LUNS	,$TKB$	,.NLUNS	,<# OF LOGICAL UNITS>
DW	W.MO	,$TKB$	,.MOLUN	,<ERR MSG LUNNUMBER>
DW	W.BFAD	,IOBFAD	,	,<I/O BUFFER ADDR>
DW	W.BLEN	,DFRECL	,	,<I/O BUFFER LENGTH>
DW	W.BEND	,IOBFND	,	,<I/O BUFFER END+1>
DW	LNBUF	,	,	,<ADDR LINE BUFFER>
DW	W.IOST	,IOSTAT	,	,<ADDR QIO STATUS>
DW	W.DEV	,DEVTAB	,	,<DEV TABLE ADDR>
DW	RECIO	,	,	,<ADDR CURRENT I/O ROUNTINE>
DW	FMTAD	,	,	,<CURRENT POINTER INTO FORMAT>
DW	FILPTR	,0	,	,<ADDR OF UNIT DESCRIPTOR BLOCK>
;DW	RECAD	,	,	,<ADDR DATA IN CURRENT RECORD>
DW	EOLBUF	,	,	,<ADDR OF END OF DATA IN CURRENT REC>
DW	FMTCLN	,	,	,<CONTENTS OF SP ON I/O ENTRY>
DW	BLBUF	,	,	,<CURRENT ADDR DATA IN LINE BUF>
DW	PSCALE	,	,	,<P SCALE FACTOR>
DW	FSTKP	,	,	,<POINTER TO FORMAT PUSHDOWN>
DW	FSTK	,	,	,<FORMAT PUSHDOWN LIST>
NOARG=FSTK			;NO. OF ARGS THE LAST FORMAT ITEM EXPECTS
PARLVL=FSTK+2			;PARENTHESIS LEVEL
NUMFLG=FSTK+4			;FLAG INDICATES A NUMBER IS AVAILABLE TO THE
				;FORMAT PROCESSOR AND IF IT IS NEGATIVE
DELIM=FSTK+6			;INDICATES THAT A DELIMITER IS REQUIRED
				; IF NON-ZERO. USED IN OBJFMT.
$$$OFF	=$$$OFF+32.
DW	FMTRET	,	,	,<ADDR TOP LEVEL PAREN>
DW	VARAD	,	,	,<ADDR OF VARIABLES FOR TRANSFER OPS>
DW	TSPECP	,	,	,<HIGHEST POINTER INTO LINE BUF>
DW	TYPE	,	,	,<TYPE FLAG FOR ALOIEFGD FORMAT>
DW	REPCNT	,	,	,<REPEAT COUNT FOR ALOIEFGD FORMAT>
UNFLGS=REPCNT			;FLAG WORD FOR UNFORMATTED I/O
DW	LENGTH	,	,	,<FORMAT WIDTH (W OF W.D)>
DW	D	,	,	,<FORMAT (D OF W.D)>
DW	ITEMSZ	,	,	,<SIZE OF LIST VAR TO TRANSFER>
DW	DOLFLG	,	,	,<DOLLAR FORMAT SEEN FLAG>
DW	COUNT	,	,	,<# ITEMS TO TRANSFER, ARRAYS>
DW	RACNT	,	,	,<BYTES LEFT IN RANDOM RECORD>
FMTLP	=RACNT			;INFINTE FORMAT LOOP FLAG
UNCNT=RACNT			;COUNT OF BYTES IN UNFORMATTED READ
DW	DENCWD	,	,	,<RECORD COUNTER FOR ENCODE/DECODE>
DW	W.PC	,	,	,<SAVED PC ON FATAL TRAPS>
DW	EXADDR	,	,	,<USER EXIT ROUTINE ADDR>
DW	ENDEX	,0	,	,<ADDR OF END= RETURN>
DW	ERREX	,0	,	,<ADDR OF ERR= RETURN>
DW	W.ECNT	,	,	,<ERROR COUNT>
DW	W.ERNM	,	,	,<ERROR NUMBER>
DW	W.ERFL	,	,	,<ADDR ERROR FILE NAME STRING>
DW	W.OPFL	,	,	,<OPEN STMT FLAG WORD>
DW	W.ERLN	,ERRLIN	,	,<ADDR ERROR LINE TEXT BUFFER>
DW	W.ERLE	,ERREND	,	,<ADDR END OF ERROR LINE TEXT>
DW	W.TKNP	,TSKNAM	,	,<ADDR OF TASK NAME>
DW	W.ERTB	,ERRTAB	,	,<ADDR OF ERROR CONTROL TABLES>
DW	W.FERR	,	,	,<F.ERR FROM FCS FDB>
DW	W.FER1	,	,	,<F.ERR+1 FROM FCS FDB>
DW	W.SST	,$SST	,	,<ADDR SYNCHRONOUS TRAP TABLE>
DW	W.OBFL	,OBFL	,	,<OBJFMT BUFFER ADDR>
DW	W.OBFH	,OBFH	,	,<OBJFMT BUFFER END+1>
DW	W.ERUN	,	,	,<UNIT NUMBER SAVED FOR SNSERR>
 
.IF DF F4P
 
DW	W.FPST	,	,	,<FPP STATUS SAVED BY I/O STMTS>
DW	W.EXJ	,	,	,<EXCHANGE JUMP LOCATION>
DW	W.PNTY	,0	,	,<VAR FMT EXP FLAGS - 1 BYTE>
W.IOEF	=W.PNTY+1		;INTERNAL OTS ERROR HANDLING FLAG BYTE
DW	W.R5	,	,	,<R5 CONTEXT NEEDED FOR VAR FMT EXPS>
DW	W.VTYP	,	,	,<VARIABLE TYPE CODE FOR I/O>
DW	W.RECL	,	,	,<LOW ORDER DIRECT ACCESS RECORD NUMBER>
DW	W.RECH	,	,	,<HIGH ORDER DIRECT ACCESS RECORD NUMBER>
DW	W.FPPF,	0	,	,<FPP PRESENT FLAG BYTE: 0 = YES, 1 = NO>
W.DFLT	=W.FPPF+1		;DEFAULT FORMAT CODE BYTE
; LUN MAPPING FOR IMPLIED UNIT I/O STATEMENTS
; THE FOLLOWING MUST BE CONTIGUOUS AND IN ORDER
DW	W.LNMP	,4	,	,<NUMBER OF MAPPABLE NEGATIVE LUNS>
DW	W.PRNT	,6	,$PRINT	,<PRINT:  MAP LUN -1 TO 6>
DW	W.TYPE	,7	,$TYPE	,<TYPE:   MAP LUN -2 TO 7>
DW	W.ACPT	,5	,$ACCPT	,<ACCEPT: MAP LUN -3 TO 5>
DW	W.READ	,1	,$READ	,<READ:   MAP LUN -4 TO 1>
; END OF CONTIGUOUS GROUP
 
.ENDC	;DF F4P
 
$$$OFF	=$$$OFF+40.		;EXPANSION AREA
 
 
;   END OF WORK AREA
 
DW	W.END	,	,	,<END OF OTS WORK AREA>
 
 
	.MACRO	$AOTS	REG
	.IF B	REG
	MOV	@#$OTSV,R3
	.IFF
	MOV	@#$OTSV,REG
	.ENDC	;B REG
	.ENDM	;$AOTS
 
 
.IF DF F4P
 
; SYMBOLS USED IN THE I/O INITIALIZATION ROUTINES IN
; CALLING $INITIO
 
FL.ERR	=100000	;END=/ERR= PRESENT
FL.ENC	= 44000	;ENCODE/DECODE STATEMENT
FL.FMT	= 21000	;FORMAT PRESENT
FL.REC	= 12000	;DIRECT ACCESS RECORD NUMBER PRESENT
FL.WRT	=   600	;WRITE OPERATION (WITH IMPLIED OPEN)
FL.RD	=   200	;READ  OPERATION (WITH IMPLIED OPEN)
 
.ENDC	;DF F4P
 
;IF NO ALLOCATION THEN DEFINE OTSWA NULL
;FOR FASTER ASSEMBLY
 
.IF NDF $ALOC$
.MACRO	OTSWA
.ENDM
.ENDC
 
	.ENDM	;OTSWA
 
.ENDC	;NDF $PASS2

;
;   DESCRIPTOR MACRO FOR FILE DESCRIPTION BLOCKS
;
 
.IF NDF $PASS2
 
	.MACRO	FBLOCK	NOFCS
;A FILE DESCRIPTOR BLOCK IS INITIALLY ALLOCATED ZEROED
;CLOSE SHOULD RE-ZERO BLOCK
	D.STAT=0.	;STATUS WORD 1, BITS DEFINED BELOW
	D.STA2=2.	;STATUS WORD 2	 "	"	"
	D.RCNM=4.	;NUMBER OF RECORDS (DEFINE FILE)	RAN..
	D.RCCT=D.RCNM	;RECORD COUNT (FOR BACKSPACE)		SEQ..
	D.RCN2=6.	;  NO. OF RECS, 2ND WORD		RAN..
	D.RCC2=D.RCN2	;  REC CNT, 2ND WORD			SEQ..
	D.AVAD=8.	;ADDR OF ASSOC VAR (DEFINE FILE)
	D.SPAR=10.	;SPARE WORD
	D.FDB=12.	;START OF RSX 11 M/D FDB
 
;STATUS BITS
;WORD ONE - D.STAT
 
	DV.DFD	=10	;DEFINE FILE DONE	DIRECT ACCESS UNIT
	DV.WRT	=20	;WRITE ALLOWED
	DV.FACC	=40	;FILE ATTRIBUTES:	0 - DEFAULT
			;			1 - CALL FDBSET
	DV.OPN	=200	;UNIT OPEN		MUST BE 200'S BIT
	DV.ENCD	=1000	;FDB IS REALLY ENCODE CROCK.
	DV.FMP	=2000	;FORMATTED ACCESSED UNIT
	DV.UFP	=4000	;UNFORMATTED ACCESSED UNIT
	DV.ASGN	=10000	;FILESPEC:		0 - USE DEFAULT
			;			1 - FROM CALL ASSIGN
	DV.CLO	=20000	;CLOSE IN PROGRESS
	DV.FRE	=40000	;FREE FORMAT ALLOWED
	DV.RW	=100000	;CURRENT OPERATION:	0 - READ
			;			1 - WRITE
;WORD TWO - D.STA2
 
	DV.AI4	=2	;DEFINEFILE ASSOC VAR:	0 - I*2
			;			1 - I*4
	DV.CC	=10	;EXPLICIT CARRIAGE CONTROL SPECIFIED
	DV.SPL	=20	;SPOOL TO LP: AFTER CLOSING
	DV.DEL	=40	;DELETE AFTER CLOSING
	DV.UNK	=1000	;TYPE = 'UNKNOWN'
	DV.OLD	=2000	;TYPE = 'OLD'
	DV.NEW	=4000	;TYPE = 'NEW'
	DV.SCR	=10000	;TYPE = 'SCRATCH'
	DV.APD	=20000	;ACCESS='APPEND'
	DV.SAV	=40000	;DISPOSE='SAVE'
 
;
;MAPPING OF RSX 11 FDB
;
 
	.MCALL	FDOF$L
	FDOF$L
 
F.FDB	=S.FDB+D.FDB	;SIZE OF FORTRAN DEVICE BLOCK
 
.IF B NOFCS
;
;FCS BIT ASSIGNMENTS
;
	.MCALL	FCSBT$
	FCSBT$	DEF$L
	
;
;I/O ERROR CODES DEFINITIONS
;
	.MCALL	QIOSY$
	QIOSY$
 
.ENDC	;B NOFCS
 
;
	.MACRO	FBLOCK	NOFCS
	.ENDM	;FBLOCK
;
	.ENDM	;FBLOCK
 
.ENDC	;NDF $PASS2

 
;
;MACRO FOR ERROR CONTROL BYTE DEFINITIONS
;
 
.IF NDF $PASS2
 
	.MACRO	ERRDEF	OPT
 
	.IF B OPT
 
	.MACRO	DE NAME,NUM,VALUE,TEXT
NAME	=NUM
	.ENDM
	
	.ENDC	;B OPT
 
;BIT NAMES
 
EC.CON	=1		;CONTINUE
EC.CNT	=2		;COUNT THIS ERROR
EC.UER	=4		;USE ERR=EXIT
EC.LOG	=8.		;LOG THIS ERROR
EC.INU	=16.		;THIS ERROR NUMBER IN USE
EC.RTS	=32.		;RTS CONTINUE OKAY
EC.ERE	=64.		;ERR=CONTINUE OKAY
;
;COMMON COMBINATIONS
;
EC.IO	=EC.CON!EC.CNT!EC.UER!EC.LOG!EC.ERE!EC.INU
EC.NRM	=EC.CON!EC.CNT!EC.LOG!EC.RTS!EC.INU
EC.FAT	=EC.LOG!EC.INU
;
;THE DEFINITIONS FOLLOW:
;
ERCLS0	=128.		;USER NUMBER 0
 
DE	ERINVE	,ERCLS0+1	,EC.FAT	,<INVALID ERROR CALL>
DE	ERINIT	,ERCLS0+2	,EC.FAT	,<TASK INITIALIZATION FAILURE>
DE	ERSST0	,ERCLS0+3	,EC.FAT	,<ODD ADDRESS TRAP (SST0)>
DE	ERSST1	,ERCLS0+4	,EC.FAT	,<SEGMENT FAULT (SST1)>
DE	ERSST2	,ERCLS0+5	,EC.FAT	,<T-BIT OR BPT TRAP (SST2)>
DE	ERSST3	,ERCLS0+6	,EC.FAT	,<IOT TRAP (SST3)>
DE	ERSST4	,ERCLS0+7	,EC.FAT	,<RESERVED INSTRUCTION TRAP (SST4)>
DE	ERSST5	,ERCLS0+8.	,EC.FAT	,<NON-RSX EMT TRAP (SST5)>
DE	ERSST6	,ERCLS0+9.	,EC.FAT	,<TRAP INSTRUCTION TRAP (SST6)>
DE	ERSST7	,ERCLS0+10.	,EC.FAT	,<PDP-11/40 FIS TRAP (SST7)>
 
.IF DF FPP
DE	ERFP00	,ERCLS0+11.	,EC.FAT	,<FPP HARDWARE FAULT>
DE	ERFP02	,ERCLS0+12.	,EC.FAT	,<FPP ILLEGAL OPCODE TRAP>
DE	ERFP12	,ERCLS0+13.	,EC.FAT	,<FPP UNDEFINED VARIABLE TRAP>
DE	ERFP14	,ERCLS0+14.	,EC.FAT	,<FPP MAINTENANCE TRAP>
.ENDC ;DF FPP
 
 
ERCLS1	=ERCLS0+20.	;20
 
DE	REWIND	,ERCLS1+0	,EC.IO	,<REWIND ERROR>
DE	DEFDEF	,ERCLS1+1	,EC.IO	,<DEFINEFILE ALREADY DONE>
DE	RECLNG	,ERCLS1+2	,EC.IO	,<RECORD TOO LONG>
DE	BACKSP	,ERCLS1+3	,EC.IO	,<BACKSPACE ERROR>
DE	ENDERR	,ERCLS1+4	,EC.IO	,<END-OF-FILE DURING READ>
DE	BADRCN	,ERCLS1+5	,EC.IO	,<INVALID RECORD NUMBER>
DE 	NODEFL	,ERCLS1+6	,EC.IO	,<DEFINEFILE NOT DONE>
DE	ERMLTR	,ERCLS1+7	,EC.IO	,<MORE THAN ONE RECORD>
DE	NCLOSE	,ERCLS1+8.	,EC.IO	,<CLOSE ERROR>
DE	NOSUCH	,ERCLS1+9.	,EC.IO	,<NO SUCH FILE>
DE	NOOPEN	,ERCLS1+10.	,EC.IO	,<OPEN FAILURE>
DE	MIXFUF	,ERCLS1+11.	,EC.IO	,<MIXED ACCESS MODES>
DE	BADCHN	,ERCLS1+12.	,EC.IO	,<INVALID LOGICAL UNIT NUMBER>
DE	EREOFR	,ERCLS1+13.	,EC.NRM-EC.CNT	,<ENDFILE TO DIRECT ACCESS FILE>
DE	FILOPN	,ERCLS1+14.	,EC.IO	,<UNIT ALREADY OPEN>
DEFOPN	=FILOPN
DFLOPN	=FILOPN
 
DE	ERLNAT	,ERCLS1+17.	,EC.IO	,<INCONSISTENT RECORD LENGTH>
DE	BADPUT	,ERCLS1+18.	,EC.IO	,<ERROR DURING WRITE>
DE	BADGET	,ERCLS1+19.	,EC.IO	,<ERROR DURING READ>
DE	IOINIO	,ERCLS1+20.	,EC.FAT	,<RECURSIVE I/O ATTEMPT>
DE	NBUFRM	,ERCLS1+21.	,EC.IO	,<NO FCS BUFFER ROOM>
DE	NDEVLD	,ERCLS1+22.	,EC.IO	,<DEVICE HANDLER NOT RESIDENT>
DE	BADSPC	,ERCLS1+23.	,EC.NRM	,<FILE NAME SPECIFICATION ERROR>
DE	DEFBIG	,ERCLS1+24.	,EC.IO	,<DIRECT ACCESS RECORD SIZE ERROR>
 
.IF DF F4P
 
BDOPRC	=DEFBIG
DE	BDOPFS	,ERCLS1+25.	,EC.IO	,<INITIALSIZE OR EXTENDSIZE SPECIFICATION ERROR>
BDOPES	=BDOPFS
DE	BDOPRO	,ERCLS1+26.	,EC.IO	,<INCONSISTENT OPEN STATEMENT SPECIFICATIONS>
BDOPAP	=BDOPRO
BDOPSC	=BDOPRO
BDOPDE	=BDOPRO
 
.ENDC ;DF F4P
 
 
ERCLS2	=ERCLS1+40.	;60
 
DE	INFRMT	,ERCLS2+0	,EC.IO	,<INFINITE FORMAT LOOP>
DE	FCERR	,ERCLS2+1	,EC.IO!EC.RTS	,<FORMAT/VARIABLE-TYPE MISMATCH>
DE	OBJBAD	,ERCLS2+2	,EC.IO	,<SYNTAX ERROR IN FORMAT>
DE	OCERR	,ERCLS2+3	,EC.CON!EC.ERE!EC.INU!EC.RTS	,<OUTPUT CONVERSION ERROR>
DE	ICERR	,ERCLS2+4	,EC.IO!EC.RTS	,<INPUT CONVERSION ERROR>
DE	OBJBIG	,ERCLS2+5	,EC.IO	,<FORMAT TOO BIG FOR 'FMTBUF'>
DE	RECBIG	,ERCLS2+6	,EC.IO	,<RECORD TOO BIG>
DE	RECSML	,ERCLS2+7	,EC.IO	,<RECORD TOO SMALL FOR I/O LIST>
 
.IF DF F4P
DE	ERVFEV	,ERCLS2+8.	,EC.IO	,<VARIABLE FORMAT EXPRESSION VALUE ERROR>
.ENDC ;DF F4P
 
 
ERCLS3	=ERCLS2+10.	;70
 
DE	INTOV	,ERCLS3+0	,EC.NRM	,<INTEGER OVERFLOW>
INT4OV=INTOV
DE	IZDIV	,ERCLS3+1	,EC.NRM	,<INTEGER ZERO DIVIDE>
INT4ZD=IZDIV
DE	FOVRFL	,ERCLS3+2	,EC.NRM	,<FLOATING OVERFLOW>
DE	FZDIV	,ERCLS3+3	,EC.NRM	,<FLOATING ZERO DIVIDE>
DE	FUNDFL	,ERCLS3+4	,EC.CON!EC.RTS!EC.INU	,<FLOATING UNDERFLOW>
 
	.IF DF FPP
 
DE	ERFLIN	,ERCLS3+5	,EC.NRM	,<FPP FLOATING TO INTEGER CONVERSION OVERFLOW>
 
	.ENDC	;DF FPP
 
 
ERCLS4	=ERCLS3+10.	;80
 
DE	NOARGS	,ERCLS4+0	,EC.NRM	,<WRONG NUMBER OF ARGUMENTS>
DE	BADARG	,ERCLS4+1	,EC.NRM	,<INVALID ARGUMENT>
ERINVA	=BADARG
DE	UNDEXP	,ERCLS4+2	,EC.NRM	,<UNDEFINED EXPONENTIATION>
DE	BADLOG	,ERCLS4+3	,EC.NRM	,<LOGARITHM OF NEGATIVE VALUE>
DE	NGSQRT	,ERCLS4+4	,EC.NRM	,<SQUARE ROOT OF NEGATIVE VALUE>
DE	ERIFAR	,ERCLS4+5	,EC.NRM	,<INVALID ARGUMENT TO LIBRARY FUNCTION>
DE	ERINEN	,ERCLS4+6	,EC.NRM	,<INVALID ERROR NUMBER>
 
 
ERCLS5	=ERCLS4+10.	;90
 
 
.IF DF F4
DE	COMPER	,ERCLS5+0	,EC.FAT	,<COMPILER DETECTED ERROR>
.ENDC ;DF F4
 
DE	CMRNGE	,ERCLS5+1	,EC.CON!EC.RTS!EC.INU	,<COMPUTED GOTO OUT OF RANGE>
 
.IF DF F4P
DE	ERAGO	,ERCLS5+2	,EC.NRM	,<ASSIGNED LABEL NOT IN LIST>
DE	ERDILE	,ERCLS5+3	,EC.NRM	,<ADJUSTABLE ARRAY DIMENSION ERROR>
DE	ARYREF	,ERCLS5+4	,EC.NRM	,<ARRAY REFERENCE OUTSIDE ARRAY>
.ENDC	;DF F4P
 
DE	MIXOBJ	,ERCLS5+5	,EC.FAT	,<INCOMPATIBLE FORTRAN OBJECT MODULE IN TASK>
DE	ERNOFC	,ERCLS5+6	,EC.FAT	,<MISSING FORMAT CONVERSION ROUTINE>
DE	ERFTN	,ERCLS5+7	,EC.NRM	,<FTN FORTRAN ERROR CALL>
 
ERCLS6	=ERCLS5+10.	;100
 
 
DE	ERDIR0	,ERCLS6+0	,EC.FAT	,<DIRECTIVE: MISSING ARGUMENTS>
DE	ERDIR1	,ERCLS6+1	,EC.FAT	,<DIRECTIVE: INVALID EVENT FLAG NUMBER>
 
 
ERMAXN	=ERCLS6+10.	;110
 
	.MACRO	ERROR	NUM
	TRAP+NUM
	.ENDM
 
.IF B OPT
.MACRO	ERRDEF	OPT
.ENDM
.ENDC
 
 
	.ENDM	;ERRDEF
 
.ENDC	;NDF $PASS2
 
	.LIST
