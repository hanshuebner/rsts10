; RXMDIR -- RSX-11M/M-PLUS Executive Directive Macros
;
;
;	     COPYRIGHT (c) 1990 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERRED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
; Written by:
;
;	Clark A. D'Elia	Feb-74
;
; Previously modified by:
;
;	C. A. D'Elia
;	B. L. Schreiber
;	J. E. Provino
;	J. R. Covert
;	J. H. Matthews
;	C.    Spitz
;	M. S. Harvey
;	J. E. Pollack
;	T. M. Martin
;	J. M. Lawler
;	J. R. Kauffman
;	B. S. McCarthy
;	J. W. Berzle
;	T.    Lekas
;	P. K. Weiss
;	J. C. Franzini
;	E. D. Postpischil
;	K. L. Noel
;
; Modified for RSX-11M-PLUS V4.2 by:
;
;	K. L. Noel
;
; Modified for RSX-11M-PLUS V4.3 by:
;
;	G. N. Larsen	13-Jul-89
;		GNL112 -- Add RS.RES flag to make the common resident
;			  upon creation or return error.
;

 
	.MACRO	CALL	ADR
	JSR	PC,ADR
	.ENDM	CALL


	.MACRO	RETURN
	RTS	PC
	.ENDM	RETURN
 
 
	.MACRO	CALLR	ADR
	JMP	ADR
	.ENDM	CALLR
 
 
 

;+
;		'ABRT$C'
;
; THE ABRT$C MACRO GENERATES A DPB FOR THE "ABORT TASK"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN
; THE USER SPECIFIED PSECT.
;
; MACRO CALL:	ABRT$C	TSK,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "ABORT TASK" DIRECTIVE IN THE SEPARATE CONTROL
; SECTION NAMED '$DPB$.'.  THE ONLY ARGUMENT REQUIRED
; FOR THE DPB DEFINITION IS 'TSK', THE TASK NAME.  THE
; MACRO THEN GENERATES AN ENTRY INTO THE CONTROL
; SECTION SPECIFIED BY 'PSCT' FOLLOWED BY A MONITOR
; TRAP.  THE OPTIONAL ARGUMENT 'ERR' MUST BE A VALID
; ASSEMBLER DESTINATION OPERAND SPECIFYING AN ERROR
; ROUTINE ADDRESS.  SINCE THIS ROUTINE INVOKES 'ABRT$'
; THE EXPANSION OF CODE AND SYMBOLIC OFFSETS IS
; GOVERNED BY THE SAME FACTORS.
;
;-
	.MACRO	ABRT$C	TSK,PSCT,ERR
	.MCALL	ABRT$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ABRT$	TSK
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ABRT$C
;+
;		'ABRT$S'
;
; THE ABRT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "ABORT TASK" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ABRT$S	NAMADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "ABORT TASK" DIRECTIVE ON THE STACK.  THE ARGUMENT
; 'NAMADR' MUST BE A VALID ASSEMBLER SOURCE OPERAND THAT YIELDS
; THE ADDRESS OF A DOUBLE-WORD WITH THE TASK NAME IN RADIX-50.
; THE MACRO THEN GENERATES A MONITOR TRAP AND CONSIDERS
; THE OPTIONAL ARGUMENT 'ERR', THE ERROR ROUTINE ADDRESS.
;
;-
	.MACRO	ABRT$S	NADR,ERR
	.MCALL	RFA$,DIR$
	RFA$	NADR
	MOV	(PC)+,-(SP)
	.BYTE	83.,3
	DIR$	,ERR
	.ENDM	ABRT$S

;+
;		'ABRT$'
;
; THE ABRT$ MACRO GENERATES A DPB FOR THE "ABORT TASK"
; DIRECTIVE.
;
; MACRO CALL:	ABRT$	TSK
;
; DESCRIPTION: THIS MACRO CREATES A DPB FOR THE "ABORT TASK"
; DIRECTIVE.  THE ARGUMENT 'TSK' IS THE NAME OF THE TASK
; TO BE ABORTED.
;
; THE FOLLOWING SYMBOLIC OFFSET IS DEFINED BY THIS MACRO:
;
;	A.BTTN-(LENGTH IS 4 BYTES) TASK NAME.
;
; IF THE MACRO IS INVOKED WHEN THE SYMBOL '$$$GLB' IS
; DEFINED, ONLY THE SYMBOLIC OFFSET IS GENERATED.
; FURTHERMORE, THE SYMBOL IS SPECIFIED AS GLOBAL IN THAT
; SPECIAL CASE.
;
;-
	.MACRO	ABRT$	TSK
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	83.,3
	R50$	TSK
	.ENDC
	.IF NDF	A.BTTN
	.NLIST
	OFF$
	OFF$	A.BTTN,4
	.LIST
	.ENDC
	.ENDM	ABRT$
 
;+
;		'ACHN$'
;
; The ACHN$ macro generates a DPB for the assign channel directive.
;
; Macro Call:	ACHN$ MOD,TBMSK,LUN,FSBUF,FSSZ
;
; Description: This macro generates the DPB necessary to assign a channel.
;
;-
	.MACRO	ACHN$	MOD,TBMSK,LUN,FSBUF,FSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,5		;DIC and DPB length
	.BYTE	6		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.BYTE	LUN		;LUN
	.BYTE	TBMSK		;Table inhibit mask
	.WORD	FSBUF		;Address of the input string
	.WORD	FSSZ		;Byte count of the input string
	.ENDC
	.IF	NDF	A.LFUN
	.IRP	X,<,<A.LFUN,1>,<A.LMOD,1>,<A.LLUN,1>,<A.LTBL,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<A.LSBF,2>,<A.LSSZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	ACHN$
;+
;		'ACHN$C'
;
; Macro Call:	ACHN$C MOD,TBMSK,LUN,FSBUF,FSSZ
;
; Description: This macro generates the DPB necessary to assign
; a channel in the control section named '$DPB$.'  This macro 
; generates a monitor trap in the original program control section
; named in 'PSCT'.  The error service address, 'ERR', is described in
; the DIR$ macro.
;
;-
	.MACRO	ACHN$C	MOD,TBMSK,LUN,FSBUF,FSSZ,CS,ERR
	.MCALL	ACHN$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ACHN$	MOD,TBMSK,LUN,FSBUF,FSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ACHN$C
;+
;		'ACHN$S'
;
; Macro Call:	ACHN$S MOD,TBMSK,LUN,FSBUF,FSSZ
;
; The ACHN$S macro generates the code to push a DPB for the assign
; channel directive on the stack and a monitor trap.
;
;-
	.MACRO	ACHN$S	MOD,TBMSK,LUN,FSBUF,FSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	FSSZ
	MOV$	FSBUF
	MVB$	LUN,TBMSK
	MVB$	#6,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,5
	DIR$	,ERR
	.ENDM	ACHN$S

;+
;		'ALTP$C'
;
; THE ALTP$C MACRO GENERATES A DPB FOR THE "ALTER TASK PRIORITY"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	ALTP$C	TTASK,NPRIO,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ALTER TASK
; PRIORITY" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE
; DPB PARAMETERS ARE DESCRIBED IN THE ALTP$ MACRO.  THEN THE
; MACRO GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM
; CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF
; SYMBOLIC OFFSETS IS CONTROLLED BY THE ALTP$ MACRO.
;
;-
	.MACRO	ALTP$C	TTASK,NPRIO,PSCT,ERR
	.MCALL	ALTP$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ALTP$	TTASK,NPRIO
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ALTP$C
;+
;		'ALTP$S'
;
; THE ALTP$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "ALTER
; TASK PRIORITY" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ALTP$S	TNAMADR,NPRIO,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR "ALTER
; TASK PRIORITY" ON THE STACK.  THE ARGUMENT 'TNAMADR' MUST BE
; A VALID ASSEMBLER SOURCE OPERAND THAT YIELDS THE ADDRESS OF
; A DOUBLE-WORD CONTAINING THE RADIX-50 NAME SPECIFIED IN THE
; ALTP$ MACRO.  THE MACRO THEN GENERATES A MONITOR TRAP.  THE
; ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ALTP$S	NAME,PRI,ERR
	.MCALL	MOV$,RFA$,DIR$
	MOV$	PRI
	RFA$	NAME
	MOV	(PC)+,-(SP)
	.BYTE	9.,4
	DIR$	,ERR
	.ENDM	ALTP$S
;+
;		'ALTP$'
;
; THE CSRQ$ MACRO GENERATES A DPB FOR THE "ALTER TASK PRIORITY"
; DIRECTIVE.
;
; MACRO CALL:	ALTP$	TTASK,NPRIO
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ALTER TASK
; PRIORITY" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TTASK=NAME OF TARGET TASK FOR NEW PRIORITY
;	NPRIO=NEW PRIORITY FOR TASK
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED VALUES
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE
; RESPECTIVE DPB ELEMENTS:
;
;	A.LTTN-(LENGTH 4 BYTES) TARGET TASK NAME,
;	T.LTPR-(LENGTH 2 BYTES) NEW PRIORITY
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB
; IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE GLOBALLY DEFINED.
;
;
;-
	.MACRO	ALTP$	NAME,PRI
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	9.,4
	R50$	NAME
	.WORD	PRI
	.ENDC
	.IF NDF	A.LTTN
	.NLIST
	OFF$
	OFF$	A.LTTN,4
	OFF$	A.LTPR,2
	.LIST
	.ENDC
	.ENDM	ALTP$

;+
;		'ALUN$C'
;
; THE ALUN$C MACRO GENERATES A DPB FOR THE "ASSIGN LUN" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	ALUN$C	LUN,DEVNAM,DEVNUM,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ASSIGN LUN"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE ARGUMENTS
; THROUGH 'DEVNUM' ARE THE DPB PARAMETERS AS DESCRIBED FOR THE
; ALUN$ MACRO.  THE MACRO THEN GENERATES A MONITOR TRAP
; IN THE ORIGINAL PROGRAM CONTROL SECTION AS SPECIFIED BY
; 'PSCT'.  THE ARGUMENT 'ERR' IS AS DESCRIBED FOR THE DIR$
; MACRO.  FOR AN EXPLANATION OF SYMBOLIC OFFSETS, SEE THE
; ALUN$ MACRO.
;
;-
	.MACRO	ALUN$C	LUN,DA,DU,CS,ERR
	.MCALL	ALUN$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ALUN$	LUN,DA,DU
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ALUN$C
 
;+
;		'ALUN$S'
;
; THE ALUN$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "ASSIGN LUN" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ALUN$S	LUN,DEVNAM,DEVNUM,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB
; FOR THE "ASSIGN LUN" DIRECTIVE ON THE STACK.  THE ARGUMENTS
; THROUGH 'DEVNUM' MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND
; THEY MUST SPECIFY THE DPB PARAMETERS LISTED IN THE ALUN$
; MACRO.  THE ARGUMENT 'ERR' IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ALUN$S	LUN,DA,DU,ERR
	.MCALL	MOV$,DIR$
	MOV$	DU
	MOV$	DA
	MOV$	LUN
	MOV	(PC)+,-(SP)
	.BYTE	7,4
	DIR$	,ERR
	.ENDM	ALUN$S
 
 
;+
;		'ALUN$'
;
; THE ALUN$ MACRO GENERATES A DPB FOR THE "ASSIGN LUN"
; DIRECTIVE.
;
; MACRO CALL:	ALUN$	LUN,DEVNAM,DEVNUM
;
; DESCRIPTION: THIS MACRO CREATES A DPB FOR THE "ASSIGN LUN"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	LUN=LOGICAL UNIT NUMBER,
;	DEVNAM=PHYSICAL DEVICE NAME (TWO CHARACTERS),
;	DEVNUM=PHYSICAL DEVICE UNIT NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	A.LULU-(LENGTH 2 BYTES) LOGICAL UNIT NUMBER,
;	A.LUNA-(2) PHYSICAL DEVICE NAME,
;	A.LUNU-(2) PHYSICAL DEVICE UNIT NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED,
; THE DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE
; GLOBALLY DEFINED.
;
;-

	.MACRO	ALUN$	LUN,DA,DU
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	7,4
	.WORD	LUN
	.IF B	<DA>
	.WORD	0
	.IFF
	.NCHR	$$$T1,<DA>
$$$T2=.
	.ASCII	/DA/
.=$$$T2+2
	.ENDC
	.WORD	DU
	.ENDC
	.IF NDF	A.LULU
	.NLIST
	.IRP	X,<,<A.LULU,2>,<A.LUNA,2>,<A.LUNU,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	ALUN$
;+
;+
;		'ASTX$C'
;
; THE ASTX$C MACRO GENERATES A DPB FOR THE "AST SERVICE EXIT"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:	ASTX$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "AST SERVICE EXIT"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE ARGUMENT 'PSCT'
; IS THE ORIGINAL PROGRAM SECTION IN WHICH TO GENERATE THE MONITOR TRAP.
; THE ARGUMENT 'ERR' IS AS DESCRIBED FOR THE DIR$ MACRO.
;
;-
	.MACRO	ASTX$C	PSCT,ERR
	.MCALL	ASTX$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ASTX$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ASTX$C

;+
;		'ASTX$S'
;
; THE ASTX$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "AST
; SERVICE EXIT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ASTX$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "AST
; SERVICE EXIT" DIRECTIVE ON THE STACK.  THEN A MONITOR TRAP IS
; GENERATED.  THE ERROR ROUTINE ADDRESS ARGUMENT, 'ERR', RESULTS IN AN
; AN UNCONDITIONAL CALL FOLLOWING THE EMT SINCE CONTROL SHOULD NEVER BE
; RETURNED ON THE AST EXIT.
;
;-
	.MACRO	ASTX$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	115.,1
	DIR$
	.IIF NB	<ERR>,	JSR	PC,ERR
	.ENDM	ASTX$S
;+
;		'ASTX$'
;
; THE ASTX$ MACRO GENERATES A DPB FOR THE "AST SERVICE EXIT"
; DIRECTIVE.
;
; MACRO CALL:	ASTX$
;
; DESCRIPTION:	THIS MACRO CREATES A DPB FOR THE "AST SERVICE EXIT"
; DIRECTIVE.  IT TAKES NO ARGUMENTS.
;
; NOTE:	IF THE SYMBOL $$$GLB IS DEFINED, THIS MACRO DOES NOT GENERATE
; ANY CODE.
;
;-
	.MACRO	ASTX$
	.IF NDF $$$GLB
	.BYTE	115.,1
	.ENDC
	.ENDM	ASTX$

 
;
; ATRG$/ATRG$C/ATRG$S - ATTACH A REGION
;
 
	.MACRO	ATRG$	RDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	57.,2
	.WORD	RDB
	.ENDC
	.IF NDF	A.TRBA
	OFF$
	OFF$	A.TRBA,2
	.ENDC
	.ENDM	ATRG$
 
 
	.MACRO	ATRG$C	RDB,CS,ERR
	.MCALL	ATRG$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ATRG$	RDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ATRG$C
 
 
	.MACRO	ATRG$S	RDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	RDB
	MOV	(PC)+,-(SP)
	.BYTE	57.,2
	DIR$	,ERR
	.ENDM	ATRG$S
 

;+
;		'CINT$C'
;
; CONNECT TO INTERRUPT VECTOR.
; MACRO CALL:	CINT$C	VEC,BASE,ISR,DSI,PSW,AST,PSCT,ERR
;
;-
	.MACRO	CINT$C	VEC,BASE,ISR,DSI,PSW,AST,PSCT,ERR
	.MCALL	CINT$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CINT$	VEC,BASE,ISR,DSI,PSW,AST
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CINT$C
 
;+
;		'CINT$S'
;
; CONNECT TO INTERRUPT VECTOR.
; MACRO CALL:	CINT$S	VEC,BASE,ISR,DSI,PSW,AST,ERR
;
;-
	.MACRO	CINT$S	VEC,BASE,ISR,DSI,PSW,AST,ERR
	.MCALL	RVP$,DIR$
	RVP$	VEC,BASE,ISR,DSI,PSW,AST
	MOV	(PC)+,-(SP)
	.BYTE	129.,7
	DIR$	,ERR
	.ENDM	CINT$S
 
;+
;		'CINT$'
;
; CONNECT TO INTERRUPT VECTOR.
; MACRO CALL:	CINT$	VEC,BASE,ISR,DSI,PSW,AST
;-
	.MACRO	CINT$	VEC,BASE,ISR,DSI,PSW,AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	129.,7
	.WORD	VEC
	.WORD	BASE
	.WORD	ISR
	.WORD	DSI
	.WORD	PSW
	.WORD	AST
	.ENDC
	.IF NDF	C.INVE
	OFF$
	OFF$	C.INVE,2
	OFF$	C.INBA,2
	OFF$	C.INIS,2
	OFF$	C.INDI,2
	OFF$	C.INPS,2
	OFF$	C.INAS,2
	.ENDC
	.ENDM	CINT$
 
;+
;		'CLEF$C'
;
; THE CLEF$C MACRO GENERATES A DPB FOR THE "CLEAR EVENT FLAG"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE
; USER SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:	CLEF$C	EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "CLEAR EVENT FLAG" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE CLEF$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION
; OF SYMBOLIC OFFSETS IS CONTROLLED BY THE CLEF$
; MACRO.
;
;-
	.MACRO	CLEF$C	EFN,CS,ERR
	.MCALL	CLEF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CLEF$	EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CLEF$C

;+
;		'CLEF$S'
;
; THE CLEF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "CLEAR EVENT FLAG" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CLEF$S	EFN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR 
; THE "CLEAR EVENT FLAG" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE CLEF$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR
; TRAP, USING THE ERROR SERVICE ADDRESS,'ERR',AS DESCRIBED
; IN THE DIR$ MACRO.
;
;-
	.MACRO	CLEF$S	EFN,ERR
	.MCALL	MOV$,DIR$
	MOV$	EFN
	MOV	(PC)+,-(SP)
	.BYTE	31.,2
	DIR$	,ERR
	.ENDM	CLEF$S
;+
;		'CLEF$'
;
; THE CLEF$ MACRO GENERATES A DPB FOR THE "CLEAR EVENT FLAG"
; DIRECTIVE.
;
; MACRO CALL:	CLEF$	EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "CLEAR EVENT FLAG" DIRECTIVE.  THE ARGUMENTS ARE
; ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	EFN=EVENT FLAG NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	C.LEEF-(LENGTH 2 BYTES) EVENT FLAG NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	CLEF$	EFN
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	31.,2
	.WORD	EFN
	.ENDC
	.IF NDF	C.LEEF
	.NLIST
	OFF$
	OFF$	C.LEEF,2
	.LIST
	.ENDC
	.ENDM	CLEF$

;+
;		'CLON$'
;
; THE CLON$ MACRO GENERATES DPB FOR THE CREATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	CLON$	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLON$	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,7		;DIC and DPB length
	.BYTE	11.		;Subfunction
	.BYTE	MOD		;Modifier of logical name

$$$ARG = 0
	.IRP	SYM	<PRMLST>
	.BYTE	SYM
$$$ARG=$$$ARG+1
	.ENDM
	.IIF	LT 2-$$$ARG,.ERROR ; INVALID NUMBER OF PARAMETER ELEMENTS
	.IF	GT 2-$$$ARG
	.REPT	<2-$$$ARG>
	.BYTE	0
	.ENDR
	.ENDC

	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.ENDC
	.IF	NDF	C.LFUN
	.IRP	X,<,<C.LFUN,1>,<C.LMOD,1>,<C.LTBL,1>,<C.LSTS,1>,<C.LLNS,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<C.LLSZ,2>,<C.LENS,2>,<C.LESZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	CLON$
;+
;		'CLON$C'
;
; THE CLON$ MACRO GENERATES DPB FOR THE CREATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	CLON$C	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLON$C	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ,CS,ERR
	.MCALL	CLON$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CLON$	MOD,<PRMLST>,LNS,LNSSZ,ENS,ENSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CLON$C
;+
;		'CLON$S'
;
; THE CLON$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE CREATE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CLON$S	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLON$S	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	PRMLST
	MVB$	#11.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,7
	DIR$	,ERR
	.ENDM	CLON$S
;+
;		'CLOG$'
;
; THE CLOG$ MACRO GENERATES DPB FOR THE CREATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	CLOG$	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLOG$	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,7		;DIC and DPB length
	.BYTE	0		;Subfunction
	.BYTE	MOD		;Modifier of logical name

$$$ARG = 0
	.IRP	SYM	<PRMLST>
	.BYTE	SYM
$$$ARG=$$$ARG+1
	.ENDM
	.IIF	LT 2-$$$ARG,.ERROR ; INVALID NUMBER OF PARAMETER ELEMENTS
	.IF	GT 2-$$$ARG
	.REPT	<2-$$$ARG>
	.BYTE	0
	.ENDR
	.ENDC

	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.ENDC
	.IF	NDF	C.LFUN
	.IRP	X,<,<C.LFUN,1>,<C.LMOD,1>,<C.LTBL,1>,<C.LSTS,1>,<C.LLNS,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<C.LLSZ,2>,<C.LENS,2>,<C.LESZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	CLOG$
;+
;		'CLOG$C'
;
; THE CLOG$ MACRO GENERATES DPB FOR THE CREATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	CLOG$C	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLOG$C	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ,CS,ERR
	.MCALL	CLOG$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CLOG$	MOD,<PRMLST>,LNS,LNSSZ,ENS,ENSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CLOG$C
;+
;		'CLOG$S'
;
; THE CLOG$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE CREATE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CLOG$S	MOD,<TBNUM,STATUS>,LNS,LNSSZ,ENS,ENSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO CREATE A LOGICAL
; NAME BLOCK FOR ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	CLOG$S	MOD,PRMLST,LNS,LNSSZ,ENS,ENSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	PRMLST
	MVB$	#0,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,7
	DIR$	,ERR
	.ENDM	CLOG$S

;+
;		'CMKT$C'
;
; THE CMKT$C MACRO GENERATES A DPB FOR THE "CANCEL MARK-TIME REQUESTS"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	CMKT$C	EFN,AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CANCEL MARK-TIME
; REQUESTS" DIRECTIVE IN THE CONTROL SECTION NAME '$DPB$.'.  THE
; DPB PARAMETERS ARE DESCRIBED IN THE CMKT$S MACRO.  THEN THE MACRO
; GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION NAMED IN
; THE ARGUMENT 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED
; IN THE DIR$ MACRO.
;
;-
	.MACRO	CMKT$C	EFN,AST,PSCT,ERR
	.MCALL	CMKT$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CMKT$	EFN,AST
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CMKT$C

;+
;		'CMKT$S'
;
; THE CMKT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "CANCEL
; MARK-TIME REQUESTS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CMKT$S	EFN,AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "CANCEL MARK-TIME REQUESTS" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY
; MUST SPECIFY THE INFORMATION DESCRIBED IN THE CMKT$ MACRO.
; THE MACRO ALSO GENERATES A MONITOR TRAP.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	CMKT$S	EFN,AST,ERR
	.MCALL	DIR$,RVP$
	$$$T1=0
	.IIF NB EFN $$$T1=1
	.IIF NB AST $$$T1=1
	.IF EQ	$$$T1
	MOV	(PC)+,-(SP)
	.BYTE	27.,1
	.IFF
	RVP$	EFN,AST
	MOV	(PC)+,-(SP)
	.BYTE	27.,3
	.ENDC
	DIR$	,ERR
	.ENDM	CMKT$S

;+
;		'CMKT$'
;
; THE CMKT$ MACRO GENERATES A DPB FOR THE "CANCEL MARK-TIME REQUESTS"
; DIRECTIVE.
;
; MACRO CALL:	CMKT$	EFN,AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CANCEL MARK-TIME
; REQUESTS" DIRECTIVE. THE CANCEL MARK-TIME DIRECTIVE OPERATION
; IS AS FOLLOWS:
;
; IF NEITHER THE ARGUMENT EFN NOR THE ARGUMENT AST IS SPECIFIED AND
; NON-ZERO, ALL MARK-TIME REQUESTS (MADE BY THE ISSUING TASK) ARE CANCELLED.
;
; IF BOTH ARGUMENTS EFN AND AST ARE SPECIFIED AND NON-ZERO, ONLY MARK-TIME
; REQUESTS (MADE BY THE ISSUING TASK) SPECIFYING EITHER THAT EVENT FLAG
; OR THAT AST ENTRY ADDRESS OR BOTH ARE CANCELLED.
;
; IF EXACTLY ONE OF THE ARGUMENTS EFN AND AST IS SPECIFIED AND NON-ZERO,
; ONLY MARK-TIME REQUESTS (MADE BY THE ISSUING TASK) SPECIFYING THAT
; EVENT FLAG OR THAT AST ENTRY ADDRESS ARE CANCELLED.
;
; IF THE SYMBOL $$$GLB IS DEFINED, THIS MACRO DOES NOT GENERATE ANY CODE.
;
;-
	.MACRO	CMKT$	EFN,AST
	.MCALL	OFF$
	.IF NDF $$$GLB
	$$$T1=0
	.IIF NB EFN $$$T1=1
	.IIF NB AST $$$T1=1
	.IF EQ	$$$T1
	.BYTE	27.,1
	.IFF
	.BYTE	27.,3
	.WORD	EFN
	.WORD	AST
	.ENDC
	.ENDC
	.IF NDF	C.MKEF
	.NLIST
	OFF$
	OFF$	C.MKEF,2
	OFF$	C.MKAE,2
	.LIST
	.ENDC
	.ENDM	CMKT$

;
; CONNECT
; CAPTURE EXIT CONDITIONS FOR A TASK THAT IS ALREADY ACTIVE
;
	.MACRO	CNCT$	TNAME,EFN,EAST,ESB
	.MCALL 	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	143.,6
	R50$	TNAME
	.WORD	EFN
	.WORD	EAST
	.WORD	ESB
	.ENDC
	.IF	NDF	C.NCTN
	.IRP	X,<,<C.NCTN,4>,<C.NCEF,2>,<C.NCEA,2>,<C.NCES,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	CNCT$
;
	.MACRO	CNCT$C	TNAME,EFN,EAST,ESB,CS,ERR
	.MCALL	CNCT$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CNCT$	TNAME,EFN,EAST,ESB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CNCT$C
;
	.MACRO	CNCT$S	TNAME,EFN,EAST,ESB,ERR
	.MCALL	DIR$,MOV$,RFA$,MVB$
	MOV$	ESB
	MOV$	EAST
	MOV$	EFN
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	143.,6
	DIR$	,ERR
	.ENDM	CNCT$S
;
; CPCR$/CPCR$C/CPCR$S -- CHECKPOINT COMMON REGION
;
 
	.MACRO	CPCR$	NAME
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	205.,3
	R50$	NAME
	.ENDC
	.IF NDF	C.PCNM
	OFF$
	OFF$	C.PCNM,2
	.ENDC
	.ENDM	CPCR$
 
 
	.MACRO	CPCR$C	NAME,CS,ERR
	.MCALL	CPCR$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CPCR$	NAME
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CPCR$C
 
 
	.MACRO	CPCR$S	NAME,ERR
	.MCALL	DIR$,MOV$,RFA$
	RFA$	NAME
	MOV	(PC)+,-(SP)
	.BYTE	205.,3
	DIR$	,ERR
	.ENDM	CPCR$S
 

;
; CRAW$/CRAW$C/CRAW$S - CREATE ADDRESS WINDOW
;
 
	.MACRO	CRAW$	WDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	117.,2
	.WORD	WDB
	.ENDC
	.IF NDF	C.RABA
	OFF$
	OFF$	C.RABA,2
	.ENDC
	.ENDM	CRAW$
 
 
	.MACRO	CRAW$C	WDB,CS,ERR
	.MCALL	CRAW$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CRAW$	WDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CRAW$C
 
 
	.MACRO	CRAW$S	WDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	WDB
	MOV	(PC)+,-(SP)
	.BYTE	117.,2
	DIR$	,ERR
	.ENDM	CRAW$S
 
;		'CRGF$C'
;
; THE CRGF$C MACRO GENERATES A DPB FOR THE "CREATE GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN  
; THE USER SPECIFIED PSECT.
;
; MACRO CALL:	CRGF$C	GROUP,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CREATE GROUP GLOBAL 
; EVENT FLAGS" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE CRGF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE CRGF$ MACRO.
;
;-
	.MACRO	CRGF$C	GROUP,CS,ERR
	.MCALL	CRGF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CRGF$	GROUP
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CRGF$C
;+
;		'CRGF$S'
;
; THE CRGF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "CREATE 
; GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CRGF$S	GROUP,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE 
; "CREATE GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK.  THE DPB 
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST 
; SPECIFY THE INFORMATION DESCRIBED IN THE CRGF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	CRGF$S	GROUP,ERR
	.MCALL	MOV$,DIR$
	MOV$	GROUP
	MOV	(PC)+,-(SP)
	.BYTE	157.,2
	DIR$	,ERR
	.ENDM	CRGF$S
;+
;		'CRGF$'
;
; THE CRGF$ MACRO GENERATES A DPB FOR THE "CREATE GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE.
;
; MACRO CALL:	CRGF$	GROUP
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CREATE GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	GROUP=GROUP GLOBAL EVENT FLAGS GROUP NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	C.RGRP-(LENGTH 2 BYTES) GROUP NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	CRGF$	GROUP
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	157.,2
	.WORD	GROUP
	.ENDC
	.IF NDF	C.RGRP
	.NLIST
	OFF$
	OFF$	C.RGRP,2
	.LIST
	.ENDC
	.ENDM	CRGF$


;
; CRRG$/CRRG$C/CRRG$S - CREATE A REGION
;
 
	.MACRO	CRRG$	RDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	55.,2
	.WORD	RDB
	.ENDC
	.IF NDF	C.RRBA
	OFF$
	OFF$	C.RRBA,2
	.ENDC
	.ENDM	CRRG$
 
 
	.MACRO	CRRG$C	RDB,CS,ERR
	.MCALL	CRRG$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CRRG$	RDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CRRG$C
 
 
	.MACRO	CRRG$S	RDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	RDB
	MOV	(PC)+,-(SP)
	.BYTE	55.,2
	DIR$	,ERR
	.ENDM	CRRG$S
 
;
; CREATE A VIRTUAL TERMINAL
;
	.MACRO	CRVT$	IAST,OAST,AAST,MLEN
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	149.,5
	.WORD	IAST
	.WORD	OAST
	.WORD	AAST
	.WORD	MLEN
	.ENDC
	.IF	NDF	C.RVIA
	.IRP X,<,<C.RVIA,2>,<C.RVOA,2>,<C.RVAA,2>,<C.RVML,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	CRVT$
;
	.MACRO	CRVT$C	IAST,OAST,AAST,MLEN,CS,ERR
	.MCALL	CRVT$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CRVT$	IAST,OAST,AAST,MLEN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CRVT$C
;
	.MACRO	CRVT$S	IAST,OAST,AAST,MLEN,ERR
	.MCALL	DIR$,MOV$
	MOV$	MLEN
	MOV$	AAST
	MOV$	OAST
	MOV$	IAST
	MOV	(PC)+,-(SP)
	.BYTE	149.,5
	DIR$	,ERR
	.ENDM	CRVT$S

;+
;		'CSRQ$C'
;
; THE CSRQ$C MACRO GENERATES A DPB FOR THE "CANCEL SCHEDULED REQUESTS"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	CSRQ$C	TTASK,RTASK,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CANCEL SCHEDULED
; REQUESTS" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE
; DPB PARAMETERS ARE DESCRIBED IN THE CSRQ$ MACRO.  THEN THE
; MACRO GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM
; CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF
; SYMBOLIC OFFSETS IS CONTROLLED BY THE CSRQ$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; CSRQ$ MACRO BELOW.
;
;-
	.MACRO	CSRQ$C	TT,RT,CS,ERR
	.MCALL	CSRQ$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	CSRQ$	TT,RT
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	CSRQ$C
;+
;		'CSRQ$S'
;
; THE CSRQ$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "CANCEL
; SCHEDULED REQUESTS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	CSRQ$S	TNAMADR,RNAMADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR "CANCEL
; SCHEDULED REQUESTS" ON THE STACK.  THE ARGUMENTS 'TNAMADR' AND 'RNAMADR'
; MUST BE VALID ASSEMBLER SOURCE OPERANDS THAT YIELD THE ADDRESSES OF
; DOUBLE-WORDS CONTAINING THE RADIX-50 NAMES SPECIFIED IN THE
; CSRQ$ MACRO.  THE MACRO THEN GENERATES A MONITOR TRAP.  THE
; ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; CSRQ$ MACRO BELOW.
;
;-
	.MACRO	CSRQ$S	TN,RN,ERR
	.MCALL	RFA$,DIR$
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	25.,3
	DIR$	,ERR
	.ENDM	CSRQ$S
;+
;		'CSRQ$'
;
; THE CSRQ$ MACRO GENERATES A DPB FOR THE "CANCEL SCHEDULED REQUESTS"
; DIRECTIVE.
;
; MACRO CALL:	CSRQ$	TTASK,RTASK
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "CANCEL SCHEDULED
; REQUESTS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TTASK=SCHEDULED (TARGET) TASK NAME,
;	RTASK=SCHEDULER (REQUESTER) TASK NAME.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED VALUES
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE
; RESPECTIVE DPB ELEMENTS:
;
;	C.SRTN-(LENGTH 4 BYTES) TARGET TASK NAME,
;	C.SRRN-(4) REQUESTER TASK NAME.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB
; IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE GLOBALLY DEFINED.
;
; NOTE: THE ARGUMENT 'RTASK' IS REQUIRED TO MAINTAIN COMPATIBILITY
; WITH RSX-11D.  DESPITE THE FACT THAT IT MUST BE SPECIFIED,
; IT IS IGNORED.
;
;-
	.MACRO	CSRQ$	TT,RT
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	25.,3
	R50$	TT
	.ENDC
	.IF NDF	C.SRTN
	.NLIST
	OFF$
	OFF$	C.SRTN,4
	OFF$	C.SRRN,4
	.LIST
	.ENDC
	.ENDM	CSRQ$

;+
;		'DECL$C'
;
; THE DECL$C MACRO GENERATES A DPB FOR THE "DECLARE SIGNIFICANT EVENT"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM SECTION.
;
; MACRO CALL:	DECL$C	EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "DECLARE SIGNIFICANT
; EVENT" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THIS MACRO
; ALSO GENERATES A MONITOR TRAP IN THE USER SPECIFIED CONTROL SECTION,
; 'PSCT', WITH THE ERROR SERVICE ADDRESS 'ERR' AS DESCRIBED IN THE DIR$
; MACRO.
;
; NOTE: THE ARGUMENT 'EFN' IS REQUIRED TO MAINTAIN COMPATIBILITY WITH
; RSX-11D.  DESPITE THE FACT THAT IT MUST BE SPECIFIED, IT IS IGNORED.
;
;-
	.MACRO	DECL$C	EFN,PSCT,ERR
	.MCALL	DECL$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DECL$	EFN
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DECL$C

;+
;		'DECL$S'
;
; THE DECL$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "DECLARE SIGNIFICANT EVENT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	DECL$S	EFN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "DECLARE SIGNIFICANT EVENT' DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE DECL$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR
; TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
;
; NOTE: THE ARGUMENT 'EFN' IS REQUIRED TO MAINTAIN COMPATIBILITY
; WITH RSX-11D.  DESPITE THE FACT THAT IT MUST BE SPECIFIED,
; IT IS IGNORED.
;
;-
	.MACRO	DECL$S	EFN,ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	35.,1
	DIR$	,ERR
	.ENDM	DECL$S

;+
;		'DECL$'
;
; THE DECL$ MACRO GENERATES A DPB FOR THE "DECLARE SIGNIFICANT EVENT"
; DIRECTIVE.
;
; MACRO CALL:	DECL$	EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "DECLARE SIGNIFICANT
; EVENT" DIRECTIVE.  THE ARGUMENT 'EFN' IS IGNORED, BUT MUST BE PRESENT
; TO MAINTAIN COMPATIBILITY WITH RSX-11D.
;
;-
	.MACRO	DECL$	EFN
	.IF NDF $$$GLB
	.BYTE	35.,1
	.ENDC
	.ENDM	DECL$

;+
;		'DLON$'
;
; THE DLON$ MACRO GENERATES DPB FOR THE DELETE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	DLON$	MOD,TBNUM,LNS,LNSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLON$	MOD,TBNUM,LNS,LNSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,5		;DIC and DPB length
	.BYTE	12.		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.BYTE	TBNUM		;Table number (alias type)
	.BYTE	0		;Reserved for future use
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.ENDC
	.IF	NDF	D.LFUN
	.IRP	X,<,<D.LFUN,1>,<D.LMOD,1>,<D.LTBL,2>,<D.LLNS,2>,<D.LLSZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	DLON$
;+
;		'DLON$C'
;
; THE DLON$ MACRO GENERATES DPB FOR THE DELETE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	DLON$C	MOD,TBNUM,LNS,LNSSZ,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLON$C	MOD,TBNUM,LNS,LNSSZ,CS,ERR
	.MCALL	DLON$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DLON$	MOD,TBNUM,LNS,LNSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DLON$C
;+
;		'DLON$S'
;
; THE CLOG$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE DELETE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	DLON$S	MOD,TBNUM,LNS,LNSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLON$S	MOD,TBNUM,LNS,LNSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	LNSSZ
	MOV$	LNS
	MOV$	TBNUM
	MVB$	#12.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,5
	DIR$	,ERR
	.ENDM	DLON$S
;+
;		'DLOG$'
;
; THE DLOG$ MACRO GENERATES DPB FOR THE DELETE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	DLOG$	MOD,TBNUM,LNS,LNSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLOG$	MOD,TBNUM,LNS,LNSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,5		;DIC and DPB length
	.BYTE	2		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.BYTE	TBNUM		;Table number (alias type)
	.BYTE	0		;Reserved for future use
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.ENDC
	.IF	NDF	D.LFUN
	.IRP	X,<,<D.LFUN,1>,<D.LMOD,1>,<D.LTBL,2>,<D.LLNS,2>,<D.LLSZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	DLOG$
;+
;		'DLOG$C'
;
; THE DLOG$ MACRO GENERATES DPB FOR THE DELETE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	DLOG$C	MOD,TBNUM,LNS,LNSSZ,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLOG$C	MOD,TBNUM,LNS,LNSSZ,CS,ERR
	.MCALL	DLOG$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DLOG$	MOD,TBNUM,LNS,LNSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DLOG$C
;+
;		'DLOG$S'
;
; THE CLOG$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE DELETE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	DLOG$S	MOD,TBNUM,LNS,LNSSZ
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO DELETE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	DLOG$S	MOD,TBNUM,LNS,LNSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	LNSSZ
	MOV$	LNS
	MOV$	TBNUM
	MVB$	#2,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,5
	DIR$	,ERR
	.ENDM	DLOG$S

;+
;		'DSAR$C'
;
; THE DSAR$C MACRO GENERATES THE DPB FOR THE "DISABLE AST RECOGNITION"
; DIRECTIVE IN A SEPARATE PROGRAM SECTION AND A MONITOR TRAP IN THE
; USER SPECIFIED PSECT.
;
; MACRO CALL:	DSAR$C	PSCT,ERR
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB FOR THE "DISABLE AST
; RECOGNITION" DIRECTIVE IN THE PSECT '$DPB$.' AND A MONITOR TRAP
; IN THE ORIGINAL PROGRAM CONTROL SECTION, 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	DSAR$C	PSCT,ERR
	.MCALL	DSAR$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DSAR$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DSAR$C

;+
;		'DSAR$S'
;
; THE DSAR$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "DISABLE AST
; RECOGNITION" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	DSAR$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB FOR
; THE "DISABLE AST RECOGNITION" DIRECTIVE ON THE STACK.  THEN THE MACRO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR',
; DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	DSAR$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	99.,1
	DIR$	,ERR
	.ENDM	DSAR$S

;+
;		'DSAR$'
;
; THE DSAR$ MACRO GENERATES A DPB FOR THE "DISABLE AST RECOGNITION"
; DIRECTIVE.
;
; MACRO CALL:	DSAR$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "DISABLE AST
; RECOGNITION" DIRECTIVE.
;
;-
	.MACRO	DSAR$
	.IF NDF $$$GLB
	.BYTE	99.,1
	.ENDC
	.ENDM	DSAR$

;+
;		'DSCP$C'
;
; THE DSCP$C MACRO GENERATES A DPB FOR THE "DISABLE CHECKPOINTING"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	DSCP$C	PSCT,ERR
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB FOR THE "DISABLE CHECKPOINTING"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.', AND A MONITOR
; TRAP IN THE USER SPECIFIED CONTROL SECTION 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	DSCP$C	PSCT,ERR
	.MCALL	DSCP$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DSCP$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DSCP$C

;+
;		'DSCP$S'
;
; THE DSCP$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "DISABLE CHECKPOINTING" DIRECTIVE ON THE STACK AND A MONITOR
; TRAP.
;
; MACRO CALL:		DSCP$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB
; FOR THE "DISABLE CHECKPOINTING" DIRECTIVE ON THE STACK.  THEN A
; MONITOR TRAP IS GENERATED, USING THE ERROR SERVICE ADDRESS, 'ERR',
; AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	DSCP$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	95.,1
	DIR$	,ERR
	.ENDM	DSCP$S

;+
;		'DSCP$'
;
; THE DSCP$ MACRO GENERATES A DPB FOR THE "DISABLE CHECKPOINTING"
; DIRECTIVE.
;
; MACRO CALL:	DSCP$
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB FOR THE "DISABLE CHECKPOINTING"
; DIRECTIVE.  THERE ARE NO ARGUMENTS.
;
;-
	.MACRO	DSCP$
	.IF NDF $$$GLB
	.BYTE	95.,1
	.ENDC
	.ENDM	DSCP$

 
;
; DTRG$/DTRG$C/DTRG$S - DETACH A REGION
;
 
	.MACRO	DTRG$	RDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	59.,2
	.WORD	RDB
	.ENDC
	.IF NDF	D.TRBA
	OFF$
	OFF$	D.TRBA,2
	.ENDC
	.ENDM	DTRG$
 
 
	.MACRO	DTRG$C	RDB,CS,ERR
	.MCALL	DTRG$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	DTRG$	RDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	DTRG$C
 
 
	.MACRO	DTRG$S	RDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	RDB
	MOV	(PC)+,-(SP)
	.BYTE	59.,2
	DIR$	,ERR
	.ENDM	DTRG$S
;
; ELAW$/ELAW$C/ELAW$S - ELIMINATE ADDRESS WINDOW
;
 
	.MACRO	ELAW$	WDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	119.,2
	.WORD	WDB
	.ENDC
	.IF NDF	E.LABA
	OFF$
	OFF$	E.LABA,2
	.ENDC
	.ENDM	ELAW$
 
 
	.MACRO	ELAW$C	WDB,CS,ERR
	.MCALL	ELAW$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ELAW$	WDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ELAW$C
 
 
	.MACRO	ELAW$S	WDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	WDB
	MOV	(PC)+,-(SP)
	.BYTE	119.,2
	DIR$	,ERR
	.ENDM	ELAW$S
 
;		'ELGF$C'
;
; THE ELGF$C MACRO GENERATES A DPB FOR THE "ELIMINATE GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP  
; IN THE USER SECIFIED PSECT.
;
; MACRO CALL:	ELGF$C	GROUP,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ELIMINATE
; GROUP GLOBAL EVENT FLAGS" DIRECTIVE IN THE CONTROL SECTION 
; NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE ELGF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE ELGF$ MACRO.
;
;-
	.MACRO	ELGF$C	GROUP,CS,ERR
	.MCALL	ELGF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ELGF$	GROUP
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ELGF$C
;+
;		'ELGF$S'
;
; THE ELGF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "ELIMINATE 
; GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ELGF$S	GROUP,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE 
; "ELIMINATE GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK.
; THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE ELGF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ELGF$S	GROUP,ERR
	.MCALL	MOV$,DIR$
	MOV$	GROUP
	MOV	(PC)+,-(SP)
	.BYTE	159.,2
	DIR$	,ERR
	.ENDM	ELGF$S
;+
;		'ELGF$'
;
; THE ELGF$ MACRO GENERATES A DPB FOR THE "ELIMINATE GROUP
; GLOBAL EVENT FLAGS" DIRECTIVE.
;
; MACRO CALL:	ELGF$	GROUP
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ELIMINATE
; GROUP GLOBAL EVENT FLAGS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED 
; TO HAVE THE FOLLOWING MEANINGS:
;
;	GROUP=GROUP NUMBER
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	E.LGRP-(LENGTH 2 BYTES) GROUP NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	ELGF$	GROUP
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	159.,2
	.WORD	GROUP
	.ENDC
	.IF NDF	E.LGRP
	.NLIST
	OFF$
	OFF$	E.LGRP,2
	.LIST
	.ENDC
	.ENDM	ELGF$

;
; ELIMINATE A VIRTUAL TERMINAL
;
	.MACRO	ELVT$	UNUM
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	151.,2
	.WORD	UNUM
	.ENDC
	.IF	NDF	E.LVNM
	OFF$
	OFF$	E.LVNM,2
	.ENDC
	.ENDM	ELVT$
;
	.MACRO	ELVT$C	UNUM,CS,ERR
	.MCALL	ELVT$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ELVT$	UNUM
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ELVT$C
;
	.MACRO	ELVT$S	UNUM,ERR
	.MCALL	DIR$,MOV$
	MOV$	UNUM
	MOV	(PC)+,-(SP)
	.BYTE	151.,2
	DIR$	,ERR
	.ENDM	ELVT$S

;
;
; EMIT STATUS
; RETURN SPECIFIED 16 BIT QUANTITY TO THE SPECIFIED CONNECTED TASK
;
	.MACRO	EMST$	TNAME,STATUS
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	147.,4
	R50$	TNAME
	.WORD	STATUS
	.ENDC
	.IF	NDF	E.MSTN
	OFF$
	OFF$	E.MSTN,4
	OFF$	E.MSST,2
	.ENDC
	.ENDM	EMST$
;
	.MACRO	EMST$C	TNAME,STATUS,CS,ERR
	.MCALL	EMST$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	EMST$	TNAME,STATUS
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	EMST$C
;
	.MACRO	EMST$S	TNAME,STATUS,ERR
	.MCALL	DIR$,MOV$,RFA$
	MOV$	STATUS
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	147.,4
	DIR$	,ERR
	.ENDM	EMST$S

;+
;		'ENAR$C'
;
; THE ENAR$C MACRO GENERATES A DPB FOR THE "ENABLE AST RECOGNITION"
; DIRECTIVE IN A SEPARATE PSECT, AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	ENAR$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ENABLE AST RECOGNITION"
; DIRECTIVE IN THE PROGRAM CONTROL SECTION '$DPB$.', AND A MONITOR TRAP
; IN THE PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ENAR$C	PSCT,ERR
	.MCALL	ENAR$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ENAR$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ENAR$C

;+
;			'ENAR$S'
;
; THE ENAR$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "ENABLE AST
; RECOGNITION" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		ENAR$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB
; FOR THE "ENABLE AST RECOGNITION" DIRECTIVE ON THE STACK.  THEN A
; MONITOR TRAP IS GENERATED USING THE ERROR SERVICE ADDRESS, 'ERR', AS
; DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ENAR$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	101.,1
	DIR$	,ERR
	.ENDM	ENAR$S

;+
;		'ENAR$'
;
; THE ENAR$ MACRO GENERATES A DPB FOR THE "ENABLE AST RECOGNITION"
; DIRECTIVE.
;
; MACRO CALL:	ENAR$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ENABLE AST RECOGNITION"
; DIRECTIVE.  THERE ARE NO PARAMETERS.
;
;-
	.MACRO	ENAR$
	.IF NDF $$$GLB
	.BYTE	101.,1
	.ENDC
	.ENDM	ENAR$

;+
;		'ENCP$C'
;
; THE ENCP$C MACRO GENERATES A DPB FOR THE "ENABLE CHECKPOINTING"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PROGRAM PSECT.
;
; MACRO CALL:	ENCP$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ENABLE CHECKPOINTING"
; DIRECTIVE IN THE PROGRAM CONTROL SECTION '$DPB$.'. THEN THE MACRO
; GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION NAMED
; IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN
; THE DIR$ MACRO.
;-
	.MACRO	ENCP$C	PSCT,ERR
	.MCALL	ENCP$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	ENCP$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ENCP$C

;+
;			'ENCP$S'
;
; THE ENCP$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "ENABLE
; CHECKPOINTING" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
;
; MACRO CALL:		ENCP$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB FOR
; THE "ENABLE CHECKPOINTING" DIRECTIVE ON THE STACK.  THEN A MONITOR
; TRAP IS GENERATED USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
;
;-
	.MACRO	ENCP$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	97.,1
	DIR$	,ERR
	.ENDM	ENCP$S

;+
;		'ENCP$'
;
; THE ENCP$ MACRO GENERATES A DPB FOR THE "ENABLE CHECKPOINTING"
; DIRECTIVE.
;
; MACRO CALL:	ENCP$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "ENABLE CHECKPOINTING"
; DIRECTIVE.  THERE ARE NO PARAMETERS
;
;-
	.MACRO	ENCP$
	.IF NDF $$$GLB
	.BYTE	97.,1
	.ENDC
	.ENDM	ENCP$

;+
;			'EXIF$C'
;
; THE EXIF$C MACRO GENERATES A DPB FOR THE "EXIT IF"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN 
; THE USER SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		EXIF$C	EFN,PSCT,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE
; "EXIT IF" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE EXIF$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION
; OF SYMBOLIC OFFSETS IS CONTROLLED BY THE EXIF$
; MACRO.
;
;-
	.MACRO	EXIF$C	EFN,CS,ERR
	.MCALL	EXIF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	EXIF$	EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	EXIF$C
;+
;			'EXIF$S'
;
; THE EXIF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "EXIT IF" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		EXIF$S	EFN,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB 
; FOR THE "EXIT IF" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE EXIF$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR
; TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
;
;-
	.MACRO	EXIF$S	EFN,ERR
	.MCALL	MOV$,DIR$
	MOV$	EFN
	MOV	(PC)+,-(SP)
	.BYTE	53.,2
	DIR$	,ERR
	.ENDM	EXIF$S
;+
;			'EXIF$'
;
; THE EXIF$ MACRO GENERATES A DPB FOR THE "EXIT IF"
; DIRECTIVE.
;
; MACRO CALL:		EXIF$	EFN
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE
; "EXIT IF" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED
; TO HAVE THE FOLLOWING MEANINGS:
;
;	EFN=EVENT FLAG NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	E.XFEF-(LENGTH 2 BYTES) EVENT FLAG NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	EXIF$	EFN
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	53.,2
	.WORD	EFN
	.ENDC
	.IF NDF	E.XFEF
	.NLIST
	OFF$
	OFF$	E.XFEF,2
	.LIST
	.ENDC
	.ENDM	EXIF$

;+
;		'EXIT$C'
;
; THE EXIT$C MACRO GENERATES A DPB FOR THE "TASK EXIT" DIRECTIVE
; IN A SEPARATE PSECT AND AN EXECUTIVE TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	EXIT$C	PSCT,ERR
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB IN THE PROGRAM SECTION '$DPB$.'
; AND A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION, 'PSCT'.
; THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	EXIT$C	PSCT,ERR
	.MCALL	EXIT$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	EXIT$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	EXIT$C

;+
;			'EXIT$S'
;
; THE EXIT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "TASK EXIT"
; DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		EXIT$S ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB FOR
; THE "TASK EXIT" DIRECTIVE ON THE STACK.  THEN A MONITOR TRAP IS GENERATED
; USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED IN THE EXIT$ MACRO.
;
;-
	.MACRO	EXIT$S ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	51.,1
	DIR$
	.IIF NB	<ERR>,	CALL	ERR
	.ENDM	EXIT$S

;+
;		'EXIT$'
;
; THE EXIT$ MACRO GENERATES A DPB FOR THE "TASK EXIT" DIRECTIVE.
;
; MACRO CALL:	EXIT$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "TASK EXIT" DIRECTIVE.
; THERE ARE NO PARAMETERS.
;
;-
	.MACRO	EXIT$
	.IF NDF $$$GLB
	.BYTE	51.,1
	.ENDC
	.ENDM	EXIT$

;+
;			'EXST$C'
;
; THE EXST$C MACRO GENERATES A DPB FOR THE "EXIT WITH STATUS"
; DIRECTIVE IN A SEPARATE PSECT AND AN EXECUTIVE TRAP IN 
; THE USER SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		EXST$C	STS,PSCT,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE
; "EXIT WITH STATUS" DIRECTIVE IN THE PROGRAM SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE EXST$ MACRO.  THIS MACRO THEN GENERATES
; AN EXECUTIVE TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION
; OF SYMBOLIC OFFSETS IS CONTROLLED BY THE EXST$
; MACRO.
;
;-
	.MACRO	EXST$C	STS,CS,ERR
	.MCALL	EXST$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	EXST$	STS
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	EXST$C
;+
;			'EXST$S'
;
; THE EXST$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "EXIT WITH STATUS" DIRECTIVE ON THE STACK AND AN EXECUTIVE TRAP.
;
; MACRO CALL:		EXST$S	STS,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB 
; FOR THE "EXIT WITH STATUS" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE EXST$ MACRO.  THIS MACRO ALSO GENERATES AN EXECUTIVE
; TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
;
;-
	.MACRO	EXST$S	STS,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	STS
	MOV	(PC)+,-(SP)
	.BYTE	29.,2
	DIR$	,ERR
	.NLIST
$$$OST=0
	.IRP	X,<<EX$WAR,1>,<EX$SUC,1>,<EX$ERR,2>,<EX$SEV,1>>
	OFF$	X
	.ENDM
	.LIST
	.ENDM	EXST$S
;+
;			'EXST$'
;
; THE EXST$ MACRO GENERATES A DPB FOR THE "EXIT WITH STATUS"
; DIRECTIVE.
;
; MACRO CALL:		EXST$	STS
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE
; "EXIT WITH STATUS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED
; TO HAVE THE FOLLOWING MEANINGS:
;
;	STS=EXIT STATUS.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	E.XSTS-(LENGTH 2 BYTES) EXIT STATUS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	EXST$	STS
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	29.,2
	.WORD	STS
	.ENDC
	.IF NDF	E.XSTS
	.NLIST
	OFF$
	OFF$	E.XSTS,2
$$$OST=0
	.IRP	X,<<EX$WAR,1>,<EX$SUC,1>,<EX$ERR,2>,<EX$SEV,1>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	EXST$
;+
;		'EXTK$C'
;
; THE EXTK$C MACRO GENERATES A DPB FOR THE "EXTEND TASK" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	EXTK$C	INC,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "EXTEND TASK"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE EXTK$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE EXTK$ MACRO.
;
;-
	.MACRO	EXTK$C	INC,CS,ERR
	.MCALL	EXTK$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	EXTK$	INC
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	EXTK$C
;+
;		'EXTK$S'
;
; THE EXTK$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "EXTEND TASK" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	EXTK$S	INC,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "EXTEND TASK" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE EXTK$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	EXTK$S	INC,ERR
	.MCALL	MOV$,DIR$
	CLR	-(SP)
	MOV$	INC
	MOV	(PC)+,-(SP)
	.BYTE	89.,3
	DIR$	,ERR
	.ENDM	EXTK$S
;+
;		'EXTK$'
;
; THE EXTK$ MACRO GENERATES A DPB FOR THE "EXTEND TASK" DIRECTIVE.
;
; MACRO CALL:	EXTK$	INC
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "EXTEND TASK"
; DIRECTIVE.  THE ARGUMENT IS ASSUMED TO HAVE THE FOLLOWING
; MEANING:
;
;	INC=TASK SIZE INCREMENT IN 32 WORD BLOCKS.
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED
; VALUE EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENT:
;
;	E.XTIN-(LENGTH 2 BYTES) TASK SIZE INCREMENT.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	EXTK$	INC
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	89.,3
	.WORD	INC
	.WORD	0
	.ENDC
	.IF NDF	E.XTIN
	.NLIST
	OFF$
	OFF$	E.XTIN,2
	.LIST
	.ENDC
	.ENDM	EXTK$
;
;	FEAT$ --  TEST SYSTEM FEATURES DIRECTIVE
;
	.MACRO	FEAT$	FEAT
	.MCALL	OFF$,FEADF$
	.IF	NDF $$$GLB
	.BYTE	177.,2.
	.WORD	FEAT
	.ENDC
;
; DEFINE DPB OFFSETS
;
	.IF NDF	F.EAF

	OFF$
	OFF$	F.EAF,2
;
; DEFINE FEATURE VALUES
;
	.IF DF $$$GLB

	FEADF$	,<=>

	.IFF

	FEADF$

	.ENDC	;DF $$$GLB

	.ENDC	;NDF F.EAF

	.ENDM	FEAT$
;
	.MACRO	FEAT$C	FEAT,CS,ERR
	.MCALL	FEAT$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	FEAT$	FEAT
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO	FEAT$S	FEAT,ERR
	.MCALL	MOV$,DIR$
	MOV$	FEAT
	MOV	(PC)+,-(SP)
	.BYTE	177.,2.
	DIR$	,ERR
	.ENDM

;+
;		'FSS$'
;
; The FSS$ macro generates a DPB for the file specification scan directive.
;
; Macro Call:	FSS$ FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV
;
; Description: This macro generates the DPB necessary to parse a file
; specification.
;
;-
	.MACRO	FSS$	FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.IIF NB	RESERV,	.ERROR	;Reserved parameter must be blank
	.BYTE	207.,7		;DIC and DPB length
	.BYTE	5		;Subfunction
	.BYTE	0		;Reserved
	.WORD	0		;Reserved
	.WORD	FSBUF		;Address of the input string
	.WORD	FSSZ		;Byte count of the input string
	.WORD	PRSBLK		;Address of the parse block
	.WORD	PRSSZ		;Byte count of the parse flock
	.ENDC
	.IF	NDF	F.RSV1
	.IRP	X,<,<F.LFUN,1>,<F.RSV1,1>,<F.RSV2,2>,<F.LSBF,2>,<F.LSSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<F.LPBK,2>,<F.LPBZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	FSS$
;+
;		'FSS$C'
;
; Macro Call:	FSS$C FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV
;
; Description: This macro generates the DPB necessary to parse a file
; specification in the control section named '$DPB$.'  This macro 
; generates a monitor trap in the original program control section
; named in 'PSCT'.  The error service address, 'ERR', is described in
; the DIR$ macro.
;
;-
	.MACRO	FSS$C	FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV,CS,ERR
	.MCALL	FSS$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	FSS$	FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	FSS$C
;+
;		'FSS$S'
;
; Macro Call:	FSS$S FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV
;
; The FSS$S macro generates the code to push a DPB for the file specification
; scan directive on the stack and a monitor trap.
;
;-
	.MACRO	FSS$S	FSBUF,FSSZ,PRSBLK,PRSSZ,RESERV,ERR
	.IIF NB	RESERV,	.ERROR	;Reserved parameter must be blank
	.MCALL	DIR$,MOV$,MVB$
	MOV$	PRSSZ
	MOV$	PRSBLK
	MOV$	FSSZ
	MOV$	FSBUF
	MOV$	#0
	MVB$	#5,
	MOV	(PC)+,-(SP)
	.BYTE	207.,7
	DIR$	,ERR
	.ENDM	FSS$S

;
; GCCI$
;
	.MACRO	GCCI$	CBUF,CBFL,IBUF,IBFL,ADDR,NCP
	.MCALL	OFF$
	.IF	NDF $$$GLB
	.BYTE	127.,7.
	.BYTE	NCP
	.BYTE	0
	.WORD	ADDR
	.WORD	CBUF
	.WORD	CBFL
	.WORD	IBUF
	.WORD	IBFL
	.ENDC
;
; DEFINE DPB OFFSETS
;
	.IF	NDF G.CCNC
	.IRP	X,<,<G.CCNC,2>,<G.CCAD,2>,<G.CCBA,2>,<G.CCBL,2>,<G.CCIA,2>>
	OFF$	X
	.ENDM
	OFF$	G.CCIL,2
;
; DEFINE INFORMATION BUFFER OFFSETS
;
; OFFSETS BEGIN AT ZERO
$$$OST=0
	.IRP	X,<<G.CCW2,2>,<G.CCPT,4>,<G.CCOA,2>,<G.CCPU,2>,<G.CCCU,2>,<G.CCCA,2>>
	OFF$	X
	.ENDM
;
; DEFINE COMMAND BUFFER OFFSETS
;
; OFFSETS BEGIN AT ZERO
$$$OST=0
	.IRP	X,<<G.CCDV,2>,<G.CCUN,1>,<G.CCCT,1>,<G.CCCL,2>,<G.CCTC,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.CCFL,1>,<G.CCBF,>>
	OFF$	X
	.ENDM

;
; DEFINE ACTION FLAG BYTE BIT DEFINITIONS
;
	.IF DF $$$GLB
	.GLOBL	GC.CND,GC.CST,GC.CEX,GC.CCS
	.ENDC

GC.CND=200
GC.CST=002
GC.CEX=001
GC.CCS=000	;DEFAULT

	.ENDC
	.ENDM	GCCI$
;
	.MACRO	GCCI$C	CBUF,CBFL,IBUF,IBFL,ADDR,NCP,CS,ERR
	.MCALL	GCCI$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GCCI$	CBUF,CBFL,IBUF,IBFL,ADDR,NCP
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO GCCI$S	CBUF,CBFL,IBUF,IBFL,ADDR,NCP,ERR
	.MCALL	MOV$,MVB$,DIR$
	MOV$	IBFL
	MOV$	IBUF
	MOV$	CBFL
	MOV$	CBUF
	MOV$	ADDR
	MVB$	NCP,#0
	MOV	(PC)+,-(SP)
	.BYTE	127.,7.
	DIR$	,ERR
	.ENDM

;
;	GCII$
;
	.MACRO	GCII$	BUF,BUFL,CLI,DEV,UNIT
	.MCALL	OFF$,R50$
	.IF	NDF $$$GLB
	.BYTE	173.,7.
	.WORD	BUF
	.WORD	BUFL
	R50$	CLI
$$$T2=.
	.ASCII	/DEV/
.=$$$T2+2
	.BYTE	UNIT,0
	.ENDC
	.IF	NDF G.CIBF
;
; DEFINE DPB OFFSETS
;
	.IRP	X,<,<G.CIBF,2>,<G.CIBL,2>,<G.CICN,4>,<G.CIDV,2>,<G.CIUN,2>>
	OFF$	X
	.ENDM
;
; DEFINE INFORMATION BUFFER OFFSETS
;
; OFFSETS BEGIN AT ZERO
$$$OST=0
	.IRP	X,<<G.CICL,4>,<G.CICS,2>,<G.CITK,4>,<G.CIW2,2>,<G.CIPU,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.CICU,2>,<G.CIDP,16.>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	GCII$
;
	.MACRO	GCII$C	BUF,BUFL,CLI,DEV,UNIT,CS,ERR
	.MCALL	GCII$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
	.IFTF
$$$=.
	GCII$	BUF,BUFL,CLI,DEV,UNIT
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO	GCII$S	BUF,BUFL,CLI,DEV,UNIT,ERR
	.MCALL	MOV$,MVB$,DIR$,RFA$
	MVB$	UNIT,#0
	MOV$	DEV
	RFA$	CLI
	MOV$	BUFL
	MOV$	BUF
	MOV	(PC)+,-(SP)
	.BYTE	173.,7.
	DIR$	,ERR
	.ENDM	GCII$S

;
; GET DEFAULT DIRECTORY STRING
;
	.MACRO	GDIR$	MOD,ENS,ENSSZ,RSIZE
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,6.		;DIC and DPB length
	.BYTE	4		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	0		;Reserved for future use
	.WORD	ENS		;Address of logical name string
	.WORD	ENSSZ		;Byte count of logical name string
	.WORD	RSIZE		;Word to contain size of default dir. string
	.ENDC
	.IF	NDF	G.DFUN
	.IRP	X,<,<G.DFUN,1>,<G.DMOD,3>,<G.DENS,2>,<G.DESZ,2>,<G.DRSZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	GDIR$
;
	.MACRO	GDIR$C	MOD,ENS,ENSSZ,RSIZE,CS,ERR
	.MCALL	GDIR$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GDIR$	MOD,ENS,ENSSZ,RSIZE
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GDIR$C
;
	.MACRO	GDIR$S	MOD,ENS,ENSSZ,RSIZE,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	RSIZE
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	#0
	MVB$	#4,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,6
	DIR$	,ERR
	.ENDM	GDIR$S

;+
;			'GDVI$C'
;
; THE GDVI$C MACRO GENERATES A DPB FOR THE "GET DEVICE INFORMATION"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		GDVI$C	LUN,BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET DEVICE INFORMATION" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE GDVI$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION
; OF SYMBOLIC OFFSETS IS CONTROLLED BY THE GDVI$
; MACRO.
;
;-
	.MACRO 	GDVI$C	LUN,BUFA,BUFL,CS,ERR
	.MCALL	GDVI$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GDVI$	LUN,BUFA,BUFL
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GDVI$C
 
;+
;			'GDVI$S'
;
; THE GDVI$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET DEVICE INFORMATION" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		GDVI$S	LUN,BUFADR,BUFLEN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "GET DEVICE INFORMATION" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE GDVI$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR
; TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
; THIS MACRO ALSO GENERATES SYMBOLIC OFFSETS RELATIVE TO THE
; INFORMATION BUFFER AS DESCRIBED IN THE GDVI$ MACRO.
;
;-
	.MACRO	GDVI$S	LUN,BUFA,BUFL,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	BUFL
	MOV$	BUFA
	MOV$	LUN
	MOV	(PC)+,-(SP)
	.BYTE	5,4
	DIR$	,ERR
	.IF NDF	G.DVNA
	.NLIST
$$$OST=0
	.IRP	X,<<G.DVNA,2>,<G.DVNU,1>,<G.DVFB,1>,<G.DVCW,8.>,<G.DVTY,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GDVI$S
 
;+
;			'GDVI$'
;
; THE GDVI$ MACRO GENERATES A DPB FOR THE "GET DEVICE INFORMATION"
; DIRECTIVE.
;
; MACRO CALL:		GDVI$	LUN,BUFADR,BUFLEN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET DEVICE INFORMATION" DIRECTIVE.  THE ARGUMENTS 
; ARE ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	LUN=LOGICAL UNIT NUMBER,
;	BUFADR=ADDRESS OF INFORMATION BUFFER.
;	BUFLEN=LENGTH OF INFORMATION BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	G.DVLU-(LENGTH 2 BYTES) LOGICAL UNIT NUMBER,
;	G.DVBA-(2) BUFFER ADDRESS,
;	G.DVBL-(2) BUFFER LENGTH.
;
; THE FOLLOWING SYMBOLS ARE ASSIGNED RELATIVE TO THE START OF
; THE DEVICE INFORMATION BUFFER:
;
;	G.DVNA-(2) DEVICE NAME,
;	G.DVNU-(1) DEVICE UNIT NUMBER,
;	G.DVFB-(1) FLAGS BYTE,
;	G.DVCW-(8) FOUR DEVICE CHARACTERISTIC WORDS.
;	G.DVTY-(2) DEVICE TYPE WORD
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	GDVI$	LUN,BUFA,BUFL
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	5,4
	.WORD	LUN
	.WORD	BUFA
	.WORD	BUFL
	.ENDC
	.IF NDF	G.DVLU
	.NLIST
	.IRP	X,<,<G.DVLU,2>,<G.DVBA,2>,<G.DVBL,2>>
	OFF$	X
	.ENDM
	.IF NDF	G.DVNA
$$$OST=0
	.IRP	X,<<G.DVNA,2>,<G.DVNU,1>,<G.DVFB,1>,<G.DVCW,8.>,<G.DVTY,2.>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GDVI$

;+
;			'GIN$C'
;
; THE GIN$C MACRO GENERATES A DPB FOR THE "GET INFORMATION"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		GIN$C	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET INFORMATION" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE GIN$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  
; THE GENERATION OF SYMBOLIC OFFSETS IS CONTROLLED BY THE GIN$
; MACRO.
;
;-
	.MACRO	GIN$C	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
	.MCALL	GIN$,DIR$,GFN$,OFF$
	.IF NDF	$$$GLB
	.SAVE
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GFN$
	.NARG	$$$N                                                    
$$$I=$$$N                                                               
	.BYTE	169.,$$$N+1                                             
	.IRP	$$$PRM,<SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9>                
	.IF EQ	$$$I                                                    
	.MEXIT                                                          
	.IFF                                                            
$$$I=$$$I-1                                                             
	.ENDC                                                           
	.WORD	$$$PRM                                                  
	.ENDR                                                           
	.IF NDF	G.INSF                                                  
	.NLIST                                                          
	.IRP	X,<,<G.INSF,2>,<G.IP01,2>,<G.IP02,2>,<G.IP03,2>>        
	OFF$	X                                                       
	.ENDR                                                           
	.IRP	X,<<G.IP04,2>,<G.IP05,2>,<G.IP06,2>>                   
	OFF$	X                                                       
	.ENDR                                                           
	.IRP	X,<<G.IP07,2>,<G.IP08,2>,<G.IP09,2>>                   
	OFF$	X                                                       
	.ENDR                                                           
	.ENDC                                                           
	.IFT                                                            
	.RESTORE
	DIR$	#$$$                                                    
	.ENDC                                                           
	.ENDM	GIN$C

;+
;			'GIN$S'
;
; THE GIN$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET INFORMATION" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		GIN$S	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "GET INFORMATION" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE GIN$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR TRAP.
;
;-
	.MACRO	GIN$S	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
	.MCALL	MOV$,DIR$,OFF$,MVB$,GFN$
	GFN$
	.NARG	$$$N
$$$I=$$$N
$$$K=9.				;NUMBER OF PARAMETERS
	.IRP	$$$PRM,<P9,P8,P7,P6,P5,P4,P3,P2,P1,SFCN>
	.IF GT $$$I-$$$K
	MOV$	$$$PRM
	.ENDC
$$$K=$$$K-1
	.ENDR
	MOV	(PC)+,-(SP)
	.BYTE	169.,$$$N+1
	DIR$	
	.ENDM	GIN$S

;+
;			'GIN$'
;
; THE GIN$ MACRO GENERATES A DPB FOR THE "GET INFORMATION"
; DIRECTIVE.
;
; MACRO CALL:		GIN$	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET INFORMATION" DIRECTIVE.  THE ARGUMENTS
; ARE ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	SFCN=SUB FUNCTION CODE
;	P1-P9=PARAMETERS 1 THROUGH 9
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	G.INSF-(LENGTH 2 BYTES) SUBFUNCTION CODE
;	G.IP01-G.IP09 (LENGTH 2 BYTES) PARAMETERS 1 THROUGH 9
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	GIN$	SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9
	.MCALL	OFF$,GFN$
	.IF NDF	$$$GLB
	GFN$
	.NARG	$$$N
$$$I=$$$N
	.BYTE	169.,$$$N+1
	.IRP	$$$PRM,<SFCN,P1,P2,P3,P4,P5,P6,P7,P8,P9>
	.IF EQ	$$$I
	.MEXIT
	.IFF
$$$I=$$$I-1
	.ENDC
	.WORD	$$$PRM
	.ENDR
	.ENDC
	.IF NDF	G.INSF
	.NLIST
	.IRP	X,<,<G.INSF,2>,<G.IP01,2>,<G.IP02,2>,<G.IP03,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.IP04,2>,<G.IP05,2>,<G.IP06,2>>
	OFF$	X
	.ENDR
	.IRP	X,<<G.IP07,2>,<G.IP08,2>,<G.IP09,2>>
	OFF$	X
	.ENDR
	.ENDC
	.ENDM	GIN$

;+
;			'GLUN$C'
;
; THE GLUN$C MACRO GENERATES A DPB FOR THE "GET LUN INFORMATION"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		GLUN$C	LUN,BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET LUN INFORMATION" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE GLUN$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION
; OF SYMBOLIC OFFSETS IS CONTROLLED BY THE GLUN$
; MACRO.
;
;-
	.MACRO 	GLUN$C	LUN,BUFA,CS,ERR
	.MCALL	GLUN$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GLUN$	LUN,BUFA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GLUN$C
 
;+
;			'GLUN$S'
;
; THE GLUN$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET LUN INFORMATION" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		GLUN$S	LUN,BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "GET LUN INFORMATION" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE GLUN$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR
; TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
; THIS MACRO ALSO GENERATES SYMBOLIC OFFSETS RELATIVE TO THE
; INFORMATION BUFFER AS DESCRIBED IN THE GLUN$ MACRO.
;
;-
	.MACRO	GLUN$S	LUN,BUFA,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	BUFA
	MOV$	LUN
	MOV	(PC)+,-(SP)
	.BYTE	5,3
	DIR$	,ERR
	.IF NDF	G.LUNA
	.NLIST
$$$OST=0
	.IRP	X,<<G.LUNA,2>,<G.LUNU,1>,<G.LUFB,1>,<G.LUCW,8.>>
	OFF$	X
	.ENDM
$$$OST=1
	.IRP	X,<<GF.VCP,1>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GLUN$S
 
;+
;			'GLUN$'
;
; THE GLUN$ MACRO GENERATES A DPB FOR THE "GET LUN INFORMATION"
; DIRECTIVE.
;
; MACRO CALL:		GLUN$	LUN,BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "GET LUN INFORMATION" DIRECTIVE.  THE ARGUMENTS 
; ARE ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	LUN=LOGICAL UNIT NUMBER,
;	BUFADR=ADDRESS OF SIX-WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	G.LULU-(LENGTH 2 BYTES) LOGICAL UNIT NUMBER,
;	G.LUBA-(2) BUFFER ADDRESS,
;	G.LUBL-(2) BUFFER LENGTH.
;
; THE FOLLOWING SYMBOLS ARE ASSIGNED RELATIVE TO THE START OF
; THE LUN INFORMATION BUFFER:
;
;	G.LUNA-(2) DEVICE NAME,
;	G.LUNU-(1) DEVICE UNIT NUMBER,
;	G.LUFB-(1) FLAGS BYTE,
;	G.LUCW-(8) FOUR DEVICE CHARACTERISTIC WORDS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	GLUN$	LUN,BUFA
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	5,3
	.WORD	LUN
	.WORD	BUFA
	.ENDC
	.IF NDF	G.LULU
	.NLIST
	.IRP	X,<,<G.LULU,2>,<G.LUBA,2>,<G.LUBL,2>>
	OFF$	X
	.ENDM
	.IF NDF	G.LUNA
$$$OST=0
	.IRP	X,<<G.LUNA,2>,<G.LUNU,1>,<G.LUFB,1>,<G.LUCW,8.>>
	OFF$	X
	.ENDM
$$$OST=1
	.IRP	X,<<GF.VCP,1>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GLUN$

;+
;		'GMCR$C'
;
; THE GMCR$C MACRO GENERATES A DPB FOR THE "GET MCR COMMAND LINE" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	GMCR$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET MCR COMMAND
; LINE" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE GMCR$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE GMCR$ MACRO.
;
;-
	.MACRO	GMCR$C	CS,ERR
	.MCALL	GMCR$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GMCR$
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GMCR$C
;+
;		'GMCR$'
;
; THE GMCR$ MACRO GENERATES A DPB FOR THE "GET MCR COMMAND LINE" DIRECTIVE.
;
; MACRO CALL:	GMCR$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET MCR COMMAND LINE"
; DIRECTIVE.
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED
; VALUE EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENT:
;
;	G.MCRB-(LENGTH 80 BYTES) MCR LINE BUFFER
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-

	.MACRO	GMCR$
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	127.,41.
	.BLKW	40.
	.ENDC
	.IF NDF	G.MCRB
	.NLIST
	OFF$
	OFF$	G.MCRB,80.
	.LIST
	.ENDC
	.ENDM	GMCR$
 
;
; GMCX$/GMCX$C/GMCX$S - GET MAPPING CONTEXT
;
 
	.MACRO	GMCX$	WVEC
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	113.,2
	.WORD	WVEC
	.ENDC
	.IF NDF	G.MCVA
	OFF$
	OFF$	G.MCVA,2
	.ENDC
	.ENDM	GMCX$
 
 
	.MACRO	GMCX$C	WVEC,CS,ERR
	.MCALL	GMCX$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GMCX$	WVEC
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GMCX$C
 
 
	.MACRO	GMCX$S	WVEC,ERR
	.MCALL	DIR$,MOV$
	MOV$	WVEC
	MOV	(PC)+,-(SP)
	.BYTE	113.,2
	DIR$	,ERR
	.ENDM	GMCX$S
 

;+
;		'GPRT$C'
;
;  THE GPRT$C MACRO GENERATES A DPB FOR THE "GET PARTITION PARAMETERS"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PSECT.
;
; MACRO CALL:	GPRT$C	PRTNAM,BUFADR,PSCT,ERR
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB FOR THE "GET PARTITION
; PARAMETERS" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE
; DPB PARAMETERS ARE DESCRIBED IN THE GPRT$ MACRO.  THIS MACRO THEN
; GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION
; NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN
; THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC OFFSETS IS CONTROLLED
; BY THE GPRT$ MACRO.
;
;-
	.MACRO	GPRT$C	PRT,BUF,CS,ERR
	.MCALL	GPRT$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GPRT$	PRT,BUF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GPRT$C
;+
;		'GPRT$S'
;
; THE GPRT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "GET
; PARTITION PARAMETERS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	GPRT$S	PRTNAMADR,BUFADR,ERR
;
; DESCRIPTION:	THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET PARTITION PARAMETERS" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY THE
; INFORMATION DESCRIBED IN THE GPRT$ MACRO.  THIS MACRO ALSO GENERATES
; A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO.
; THIS MACRO ALSO GENERATES SYMBOLIC OFFSETS RELATIVE TO THE START
; OF THE PARTITION PARAMETERS BUFFER AS DESCRIBED IN THE GPRT$ MACRO.
;
;-
	.MACRO	GPRT$S	PRT,BUF,ERR
	.MCALL	MOV$,RFA$,DIR$,OFF$
	MOV$	BUF
	RFA$	PRT
	MOV	(PC)+,-(SP)
	.BYTE	65.,4
	DIR$	,ERR
	.IF NDF	G.PRPB
	.NLIST
$$$OST=0
	.IRP	X,<<G.PRPB,2>,<G.PRPS,2>,<G.PRFW,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GPRT$S
;+
;		'GPRT$'
;
; THE GPRT$ MACRO GENERATES A DPB FOR THE "GET PARTITION PARAMETERS"
; DIRECTIVE.
;
; MACRO CALL:	GPRT$	PRTNAM,BUF
;
; DESCRIPTION:	THIS MACRO GENERATES A DPB FOR THE "GET PARTITION
; PARAMETERS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE
; FOLLOWING MEANINGS:
;
;	PRTNAM=PARTITION NAME,
;	BUFADR=ADDRESS OF THREE WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE
; RESPECTIVE DPB ELEMENTS:
;
;	G.PRPN-(LENGTH 4 BYTES) PARTITION NAME,
;	G.PRBA-(2) BUFFER ADDRESS.
;
; THE FOLLOWING OFFSETS ARE ASSIGNED RELATIVE TO THE START OF
; THE PARTITION PARAMETERS BUFFER:
;
;	G.PRPB-(2) 1/64 PARTITION BASE ADDRESS,
;	G.PRPS-(2) 1/64 PARTITION SIZE,
;	G.PRFW-(2) PARTITION FLAGS WORD.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	GPRT$	PRT,BUF
	.MCALL	OFF$,R50$
	.IF NDF	$$$GLB
	.BYTE	65.,4
	R50$	PRT
	.WORD	BUF
	.ENDC
	.IF NDF	G.PRPN
	.NLIST
	OFF$
	OFF$	G.PRPN,4
	OFF$	G.PRBA,2
	.IF NDF	G.PRPB
$$$OST=0
	.IRP	X,<<G.PRPB,2>,<G.PRPS,2>,<G.PRFW,2>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GPRT$
 
 
;
; GREG$/GREG$C/GREG$S - GET REGION PARAMETERS
;
;	(NOTE:  THESE MACROS ARE A SPECIAL CASE OF THE
;	GET PARTITION PARAMETERS MACRO.)
;
 
	.MACRO	GREG$	RID,BUF
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	65.,4
	.WORD	0,RID
	.WORD	BUF
	.ENDC
	.IF NDF	G.RGID
	.NLIST
	OFF$
	OFF$	,2
	OFF$	G.RGID,2
	OFF$	G.RGBA,2
	.IF NDF	G.RGRB
$$$OST=0
	.IRP	X,<<G.RGRB,2>,<G.RGRS,2>,<G.RGFW,2>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GREG$
 
 
	.MACRO	GREG$C	RID,BUF,CS,ERR
	.MCALL	GREG$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GREG$	RID,BUF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GREG$C
 
 
	.MACRO	GREG$S	RID,BUF,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	BUF
	MOV$	RID
	CLR	-(SP)
	MOV	(PC)+,-(SP)
	.BYTE	65.,4
	DIR$	,ERR
	.IF NDF	G.RGRB
	.NLIST
$$$OST=0
	.IRP	X,<<G.RGRB,2>,<G.RGRS,2>,<G.RGFW,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GREG$S
 

;+
;		'GSSW$C'
;
; THE GSSW$C MACRO GENERATES A DPB FOR THE "GET SENSE SWITCHES"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	GSSW$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET SENSE SWITCHES"
; DIRECTIVE IN THE PROGRAM SECTION NAMED '$DPB$.' AND A MONITOR TRAP
; IN THE USER SPECIFIED PROGRAM SECTION 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	GSSW$C	PSCT,ERR
	.MCALL	GSSW$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GSSW$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GSSW$C

;+
;		'GSSW$S'
;
; THE GSSW$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "GET SENSE
; SWITCHES" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	GSSW$S	ERR
;
; DESCRIPTION:	THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB FOR
; THE "GET SENSE SWTICHES" DIRECTIVE ON THE STACK.  THEN IT GENERATES A
; MONITOR TRAP USING THE ERROR SERVICE ADDRESS AS DESCRIBED IN THE DIR$
; MACRO.
;
;-
	.MACRO	GSSW$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	125.,1
	DIR$	,ERR
	.ENDM	GSSW$S

;+
;		'GSSW$'
;
; THE GSSW$ MACRO GENERATES A DPB FOR THE "GET SENSE SWITCHES" DIRECTIVE.
;
; MACRO CALL:	GSSW$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET SENSE SWITCHES"
; DIRECTIVE.  THERE ARE NO ARGUMENTS.
;
;-
	.MACRO	GSSW$
	.IF NDF $$$GLB
	.BYTE	125.,1
	.ENDC
	.ENDM	GSSW$

;+
;		'GTIM$C'
;
; THE GTIM$C MACRO GENERATES A DPB FOR THE "GET TIME PARAMETERS" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	GTIM$C	BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET TIME PARAMETERS"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE GTIM$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE GTIM$ MACRO.
;
;-
	.MACRO	GTIM$C	BUFA,CS ERR
	.MCALL	GTIM$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GTIM$	BUFA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GTIM$C

;+
;		'GTIM$S'
;
; THE GTIM$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET TIME PARAMETERS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	GTIM$S	BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "GET TIME PARAMETERS" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE GTIM$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
; THIS MACRO ALSO GENERATES SYMBOLIC OFFSETS RELATIVE TO THE
; TIME PARAMETERS BUFFER AS DESCRIBED IN THE GTIM$ MACRO.
;
;-
	.MACRO	GTIM$S	BUFA,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	BUFA
	MOV	(PC)+,-(SP)
	.BYTE	61.,2
	DIR$	,ERR
	.IF NDF	G.TIYR
	.NLIST
$$$OST=0
	.IRP	X,<<G.TIYR,2>,<G.TIMO,2>,<G.TIDA,2>,<G.TIHR,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.TIMI,2>,<G.TISC,2>,<G.TICT,2>,<G.TICP,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GTIM$S
 
;+
;		'GTIM$'
;
; THE GTIM$ MACRO GENERATES A DPB FOR THE "GET TIME PARAMETERS" DIRECTIVE.
;
; MACRO CALL:	GTIM$	BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE  "GET TIME PARAMETERS"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	BUFADR=ADDRESS OF EIGHT WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	G.TIBA-(LENGTH 2 BYTES) BUFFER ADDRESS.
;
; THE FOLLOWING OFFSETS ARE ASSIGNED RELATIVE TO THE START OF
; THE TIME PARAMETERS BUFFER:
;
;	G.TIYR-(2) YEAR,
;	G.TIMO-(2) MONTH,
;	G.TIDA-(2) DAY,
;	G.TIHR-(2) HOUR,
;	G.TIMI-(2) MINUTE,
;	G.TISC-(2) SECOND,
;	G.TICT-(2) CLOCK TICK,
;	G.TICP-(2) CLOCK TICKS PER SECOND.
;
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	GTIM$	BUFA
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	61.,2
	.WORD	BUFA
	.ENDC
	.IF NDF	G.TIBA
	.NLIST
	OFF$
	OFF$	G.TIBA,2
	.IF NDF	G.TIYR
$$$OST=0
	.IRP	X,<<G.TIYR,2>,<G.TIMO,2>,<G.TIDA,2>,<G.TIHR,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.TIMI,2>,<G.TISC,2>,<G.TICT,2>,<G.TICP,2>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GTIM$

;+
;		'GTSK$C'
;
; THE GTSK$C MACRO GENERATES A DPB FOR THE "GET TASK PARAMETERS" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	GTSK$C	BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET TASK PARAMETERS"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE GTSK$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE GTSK$ MACRO.
;
;-

	.MACRO	GTSK$C	BUFA,CS,ERR
	.MCALL	GTSK$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFT
	GTSK$	BUFA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	GTSK$C

;+
;		'GTSK$S'
;
; THE GTSK$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET TASK PARAMETERS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	GTSK$S	BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "GET TASK PARAMETERS" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE GTSK$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
; THIS MACRO ALSO GENERATES SYMBOLIC OFFSETS RELATIVE TO THE
; TASK PARAMETERS BUFFER AS DESCRIBED IN THE GTSK$ MACRO.
;
;-
	.MACRO	GTSK$S	BUFA,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	BUFA
	MOV	(PC)+,-(SP)
	.BYTE	63.,2
	DIR$	,ERR
	.IF NDF	G.TSTN
	.NLIST
$$$OST=0
	.IRP	X,<<G.TSTN,4>,<G.TSPN,4>,<G.TSRN,4>,<G.TSPR,2>,<G.TSPC,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.TSGC,1>,<G.TSNL,2>,<G.TSMT,2>,<G.TSFW,2>,<G.TSVA,2>>
	OFF$	X
	.ENDM
	OFF$	G.TSVL,2
	OFF$	G.TSTS,2
	OFF$	G.TSSY,2
	OFF$	G.TSDU,2
$$$OST=0
	.IRP	X,<<RX$11D,1>,<RX$11M,1>,<RX$11S,1>,<RX$IAS,1>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	GTSK$S

;+
;		'GTSK$'
;
; THE GTSK$ MACRO GENERATES A DPB FOR THE "GET TASK PARAMETERS" DIRECTIVE.
;
; MACRO CALL	GTSK$	BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "GET TASK PARAMETERS"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	BUFADR=ADDRESS OF A 16 WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	G.TSBA-(LENGTH 2 BYTES) BUFFER ADDRESS.
;
; THE FOLLOWING OFFSETS ARE ASSIGNED RELATIVE TO THE START OF
; THE TASK PARAMETERS BUFFER:
;
;	G.TSTN-(4) TASK NAME,
;	G.TSPN-(4) PARTITION NAME,
;	G.TSRN-(4) NAME OF TASK'S REQUESTER,
;	G.TSPR-(2) PRIORITY,
;	G.TSGC-(1) UIC GROUP CODE,
;	G.TSPC-(1) UIC PROGRAMMER CODE,
;	G.TSNL-(2) NUMBER OF LOGICAL UNITS,
;	G.TSMT-(2) MACHINE TYPE,
;	G.TSFW-(2) STD FLAGS WORD,
;	G.TSVA-(2) ADDRESS OF TASK SST VECTOR TABLE,
;	G.TSVL-(2) LENGTH (NUMBER OF WORDS) OF TASK SST VECTOR TABLE.
;	G.TSTS-(2) SIZE (IN BYTES) OF TASK ADDRESS SPACE
;	G.TSSY-(2) SYSTEM IN WHICH TASK IS RUNNING:
;		   RX$11D - SYSTEM IS RSX-11D
;		   RX$11M - SYSTEM IS RSX-11M
;		   RX$11S - SYSTEM IS RSX-11S
;		   RX$IAS - SYSTEM IS IAS
;	G.TSDU-(2) PROTECTION UIC FOR RSX-11M MULTI-USER PROT. SYSTEMS
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-

	.MACRO	GTSK$	BUFA
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	63.,2
	.WORD	BUFA
	.ENDC
	.IF NDF	G.TSBA
	.NLIST
	OFF$
	OFF$	G.TSBA,2
	.IF NDF	G.TSTN
$$$OST=0
	.IRP	X,<<G.TSTN,4>,<G.TSPN,4>,<G.TSRN,4>,<G.TSPR,2>,<G.TSPC,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<G.TSGC,1>,<G.TSNL,2>,<G.TSMT,2>,<G.TSFW,2>,<G.TSVA,2>>
	OFF$	X
	.ENDM
	OFF$	G.TSVL,2
	OFF$	G.TSTS,2
	OFF$	G.TSSY,2
	OFF$	G.TSDU,2
$$$OST=0
	.IRP	X,<<RX$11D,1>,<RX$11M,1>,<RX$11S,1>,<RX$IAS,1>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	GTSK$
 
;+
;		'IHAR$C'
;
; THE IHAR$C MACRO GENERATES A DPB FOR THE "INHIBIT AST RECOGNITION"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	IHAR$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "INHIBIT AST RECOGNITION"
; DIRECTIVE IN THE PROGRAM SECTION '$DPB$.' AND A MONITOR TRAP IN
; THE USER SPECIFIED PROGRAM SECTION 'PSCT'.  THE ERROR SERVICE ADDRESS,
; 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; NOTE: THIS MACRO IS THE SAME AS THE DSAR$C MACRO, AND IS INCLUDED
; ONLY FOR COMPATIBILITY WITH RSX-11D.
;
;-
	.MACRO	IHAR$C	PSCT,ERR
	.MCALL	DSAR$C
	DSAR$C	PSCT,ERR
	.ENDM	IHAR$C

;+
;		'IHAR$S'
;
; THE IHAR$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "INHIBIT AST
; RECOGNITION" DIRECTIVE ON THE STACK AND AN EXECUTIVE TRAP.
;
; MACRO CALL:	IHAR$S	ERR
;
; DESCRIPTION:	THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB
; FOR THE "DISABLE AST RECOGNITION" ON THE STACK.  THEN THE MACRO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', DESCRIBED
; IN THE DIR$ MACRO.
;
; NOTE: THIS MACRO IS INCLUDED ONLY FOR COMPATIBILITY WITH RSX-11D.
;
;-
	.MACRO	IHAR$S	ERR
	.MCALL	DSAR$S
	DSAR$S	ERR
	.ENDM	IHAR$S
;+
;		'IHAR$'
;
; THE IHAR$ MACRO GENERATES A DPB FOR THE "INHIBIT AST RECOGNITION"
; DIRECTIVE.
;
; MACRO CALL:	IHAR$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "INHIBIT AST RECOGNITION"
; DIRECTIVE.  THERE ARE NO PARAMETERS.
;
; NOTE: THIS MACRO IS INCLUDED ONLY FOR COMPATIBLITY WITH RSX-11D.
;
;-
	.MACRO	IHAR$
	.MCALL	DSAR$
	DSAR$
	.ENDM	IHAR$

 
;
; MAP$/MAP$C/MAP$S - MAP ADDRESS WINDOW
;
 
	.MACRO	MAP$	WDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	121.,2
	.WORD	WDB
	.ENDC
	.IF NDF	M.APBA
	OFF$
	OFF$	M.APBA,2
	.ENDC
	.ENDM	MAP$
 
 
	.MACRO	MAP$C	WDB,CS,ERR
	.MCALL	MAP$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	MAP$	WDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	MAP$C
 
 
	.MACRO	MAP$S	WDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	WDB
	MOV	(PC)+,-(SP)
	.BYTE	121.,2
	DIR$	,ERR
	.ENDM	MAP$S
 
 
;+
;		'MRKT$C'
;
; THE MRKT$C MACRO GENERATES A DPB FOR THE "MARK TIME" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	MRKT$C	EFN,TIMMAG,TIMUNIT,AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "MARK TIME"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE MRKT$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE MRKT$ MACRO.
;
;-
	.MACRO	MRKT$C	EF,TM,TU,AST,CS,ERR
	.MCALL	MRKT$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	MRKT$	EF,TM,TU,AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	MRKT$C
;+
;		'MRKT$S'
;
; THE MRKT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "MARK TIME" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	MRKT$S	EFN,TIMMAG,TIMUNIT,AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "MARK TIME" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE MRKT$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	MRKT$S	EF,TM,TU,AST,ERR
	.MCALL	RVP$,DIR$
	RVP$	EF,TM,TU,AST
	MOV	(PC)+,-(SP)
	.BYTE	23.,5
	DIR$	,ERR
	.ENDM	MRKT$S
;+
;		'MRKT$'
;
; THE MRKT$ MACRO GENERATES A DPB FOR THE "MARK TIME" DIRECTIVE.
;
; MACRO CALL:	MRKT$	EFN,TIMMAG,TIMUNIT,AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "MARK TIME"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	EFN=EVENT FLAG NUMBER,
;	TIMMAG=TIME INTERVAL MAGNITUDE,
;	TIMUNIT=TIME INTERVAL UNIT,
;	AST=AST ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	M.KTEF-(LENGTH 2 BYTES) EVENT FLAG,
;	M.KTMG-(2) TIME MAGNITUDE,
;	M.KTUN-(2) TIME UNIT,
;	M.KTAE-(2) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	MRKT$	EFN,TM,TU,AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	23.,5
	.WORD	EFN
	.WORD	TM
	.WORD	TU
	.WORD	AST
	.ENDC
	.IF NDF	M.KTEF
	.NLIST
	.IRP	X,<,<M.KTEF,2>,<M.KTMG,2>,<M.KTUN,2>,<M.KTAE,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	MRKT$
;
; MAP SUPERVISOR D-SPACE
;
	.MACRO	MSDS$	MASK
	.MCALL	OFF$
	.IF	NDF $$$GLB
	.BYTE	201.,2.
	.WORD	MASK
	.ENDC
;
; DEFINE DPB OFFSETS
;
	.IF	NDF M.SDMA
	.IRP	X,<,<M.SDMA,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	MSDS$

;
	.MACRO	MSDS$C	MASK,CS,ERR
	.MCALL	MSDS$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPBD$	D
$$$=.
	.IFTF
	MSDS$	MASK
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO MSDS$S	MASK,ERR
	.MCALL	MOV$,DIR$
	MOV$	MASK
	MOV	(PC)+,-(SP)
	.BYTE	201.,2.
	DIR$	,ERR
	.ENDM
;
; MOVE TO/FROM USER/SUPERVISOR I/D-SPACE
;
	.MACRO	MVTS$	ACTION,ADDR,VAL
	.MCALL	OFF$
	.IF	NDF $$$GLB
	.BYTE	203.,4.
	.WORD	ACTION
	.WORD	ADDR
	.WORD	VAL
	.ENDC
;
; DEFINE DPB OFFSETS
;
	.IF	NDF M.VTAC
	.IRP	X,<,<M.VTAC,2>,<M.VTAD,2>,<M.VTVA,0>,<M.VTBF,2>>
	OFF$	X
	.ENDM
;
; DEFINE ACTIONS
;
	$$$=0
	.IRP	X,<<MV.FUI,1>,<MV.FSI,1>,<MV.FUD,1>,<MV.FSD,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<MV.TUI,1>,<MV.TSI,1>,<MV.TUD,1>,<MV.TSD,1>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	MVTS$

;
	.MACRO	MVTS$C	ACTION,ADDR,VAL,CS,ERR
	.MCALL	MVTS$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPBD$	D
$$$=.
	.IFTF
	MVTS$	ACTION,ADDR,VAL
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO MVTS$S	ACTION,ADDR,VAL,ERR
	.MCALL	MOV$,DIR$
	MOV$	VAL
	MOV$	ADDR
	MOV$	ACTION
	MOV	(PC)+,-(SP)
	.BYTE	203.,4.
	DIR$	,ERR
	.ENDM


;+
;		'PFCS$'
;
; Macro Call:
;	PFCS$  MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,
;							DFNBK,DFNSZ,RSMSK
;
; The PFCS$ macro generates a DPB for the FCS format parse directive.
;
;-
	.MACRO	PFCS$	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFNBK,DFNSZ,RSMSK
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,13.;DIC and DPB length
	.BYTE	8.	;Subfunction
	.BYTE	MOD	;Modifier of logical name
	.BYTE	LUN	;LUN
	.BYTE	TBMSK	;Table inhibit mask
	.WORD	PRBUF	;Address of the primary file specification buffer
	.WORD	PRSZ	;Size of the primary file specification buffer in bytes
	.WORD	RSBUF	;Address of the resultant file specification buffer
	.WORD	RSSZ	;Size of the resultant file specification buffer in bytes
	.WORD	RSLEN	;Address of a word to receive the resultant string size
	.WORD	PRSBLK	;Address of the parse block
	.WORD	PRSSZ	;Size of the parse block in bytes
	.WORD	DFNBK	;Address of the default name block
	.WORD	DFNSZ	;Size of the default name block in bytes
	.WORD	RSMSK	;Mask to suppress fields in the resultant string
	.ENDC
	.IF	NDF	F.LMOD
	.IRP	X,<,<F.LFUN,1>,<F.LMOD,1>,<F.LLUN,1>,<F.LTBL,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<F.LPBF,2>,<F.LPSZ,2>,<F.LRBF,2>,<F.LRSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<F.LRLN,2>,<F.LPRS,2>,<F.LPRZ,2>,<F.LDBF,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<F.LDSZ,2>,<F.LMSK,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	PFCS$
;+
;		'PFCS$C'
;
; Macro Call:
;	PFCS$C  MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,
;							DFNBK,DFNSZ,RSMSK
;
; Description: This macro generates the DPB necessary to do an FCS format
; parse in the control section named '$DPB$.'  This macro 
; generates a monitor trap in the original program control section
; named in 'PSCT'.  The error service address, 'ERR', is described in
; the DIR$ macro.
;
;-
	.MACRO	PFCS$C	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFNBK,DFNSZ,RSMSK,CS,ERR
	.MCALL	PFCS$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	PFCS$	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFNBK,DFNSZ,RSMSK
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	PFCS$C
;+
;		'PFCS$S'
;
; Macro Call:
;	PFCS$S MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,
;							DFNBK,DFNSZ,RSMSK
;
; The PFCS$S macro generates the code to push a DPB for the FCS format
; parse directive on the stack and a monitor trap.
;
;
;-
	.MACRO	PFCS$S	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFNBK,DFNSZ,RSMSK,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	RSMSK
	MOV$	DFNSZ
	MOV$	DFNBK
	MOV$	PRSSZ
	MOV$	PRSBLK
	MOV$	RSLEN
	MOV$	RSSZ
	MOV$	RSBUF
	MOV$	PRSZ
	MOV$	PRBUF
	MVB$	LUN,TBMSK
	MVB$	#8.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,13.
	DIR$	,ERR
	.ENDM	PFCS$S

;+
;		'PRMS$'
;
; Macro Call:
;	PRMS$  MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,
;							DFBUF,DFSZ,RSMSK
;
; The PRMS$ macro generates a DPB for the RMS format parse directive.
;
;-
	.MACRO	PRMS$	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFBUF,DFSZ,RSMSK
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,13.;DIC and DPB length
	.BYTE	7	;Subfunction
	.BYTE	MOD	;Modifier of logical name
	.BYTE	LUN	;LUN
	.BYTE	TBMSK	;Table inhibit mask
	.WORD	PRBUF	;Address of the primary file specification buffer
	.WORD	PRSZ	;Size of the primary file specification buffer in bytes
	.WORD	RSBUF	;Address of the resultant file specification buffer
	.WORD	RSSZ	;Size of the resultant file specification buffer in bytes
	.WORD	RSLEN	;Address of a word to receive the resultant string size
	.WORD	PRSBLK	;Address of the parse block
	.WORD	PRSSZ	;Size of the parse block in bytes
	.WORD	DFBUF	;Address of the default file specification buffer
	.WORD	DFSZ	;Size of the default file specification buffer in bytes
	.WORD	RSMSK	;Mask to suppress fields in the resultant string
	.ENDC
	.IF	NDF	R.LFUN
	.IRP	X,<,<R.LFUN,1>,<R.LMOD,1>,<R.LLUN,1>,<R.LTBL,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.LPBF,2>,<R.LPSZ,2>,<R.LRBF,2>,<R.LRSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.LRLN,2>,<R.LPRS,2>,<R.LPRZ,2>,<R.LDBF,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.LDSZ,2>,<R.LMSK,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	PRMS$
;+
;		'PRMS$C'
;
; Macro Call:
;	PRMS$C MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,
;							DFBUF,DFSZ,RSMSK
;
; Description: This macro generates the DPB necessary to do an RMS format
; parse in the control section named '$DPB$.'  This macro 
; generates a monitor trap in the original program control section
; named in 'PSCT'.  The error service address, 'ERR', is described in
; the DIR$ macro.
;
;-
	.MACRO	PRMS$C	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFBUF,DFSZ,RSMSK,CS,ERR
	.MCALL	PRMS$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	PRMS$	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFBUF,DFSZ,RSMSK
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	PRMS$C
;+
;		'PRMS$S'
;
; Macro Call:
;	PRMS$S MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFBUF,DFSZ,RSMSK
;
; The PRMS$S macro generates the code to push a DPB for the RMS format
; parse directive on the stack and a monitor trap.
;
;
;-
	.MACRO	PRMS$S	MOD,TBMSK,LUN,PRBUF,PRSZ,RSBUF,RSSZ,RSLEN,PRSBLK,PRSSZ,DFBUF,DFSZ,RSMSK,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	RSMSK
	MOV$	DFSZ
	MOV$	DFBUF
	MOV$	PRSSZ
	MOV$	PRSBLK
	MOV$	RSLEN
	MOV$	RSSZ
	MOV$	RSBUF
	MOV$	PRSZ
	MOV$	PRBUF
	MVB$	LUN,TBMSK
	MVB$	#7,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,13.
	DIR$	,ERR
	.ENDM	PRMS$S

;+
;		'QIO$C'
;
; THE QIO$C MACRO GENERATES A "QUEUE I/O" DPB IN
; A SPECIAL, SEPARATE PSECT AND A MONITOR TRAP
; IN THE ORIGINAL PROGRAM PSECT.
;
; MACRO CALL:	QIO$C	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,PSECT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE PROPER
; "QUEUE I/O" DPB IN THE CONTROL SECTION NAMED
; '$DPB$.'.  ALL OF THE ARGUMENTS THROUGH 'PRMLST' ARE
; AS DESCRIBED FOR THE MACRO 'QIO$'.  THE ARGUMENT
; 'PSECT' SHOULD BE THE NAME OF THE ORIGINAL PROGRAM
; CONTROL SECTION, INTO WHICH THE STANDARD MONITOR
; TRAP CODE WILL BE GENERATED.  THE OPTIONAL ARGUMENT
; 'ERR' IS THE ERROR ROUTINE ADDRESS.  THIS MACRO
; INVOKES QIO$ AND, THEREFORE, FOLLOWS THE SAME EXPANSION
; GUIDELINES.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; QIO$ MACRO BELOW.
;
;-
	.MACRO	QIO$C	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,PSCT,ERR
	.MCALL	QDPB$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	QDPB$	1,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	QIO$C
;+
;		'QIO$S'
;
; THE QIO$S MACRO GENERATES THE CODE TO PUSH A
; "QUEUE I/O" DPB ON THE STACK AND GENERATE
; A MONITOR TRAP.
;
; MACRO CALL:	QIO$S	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO
; PUSH THE PROPER "QUEUE I/O" DPB ON THE STACK.
; THE ARGUMENTS THROUGH 'PRMLST' REPRESENT THE
; INFORMATION AS DESCRIBED IN THE MACRO QIO$.
; HOWEVER, THE ARGUMENTS MUST ALL BE VALID
; ASSEMBLER SOURCE OPERANDS. 
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; QIO$ MACRO BELOW.
;
;-
	.MACRO	QIO$S	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
	.MCALL	QDPB$S
	QDPB$S	1,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>,ERR
	.ENDM	QIO$S
;+
;		'QIO$'
;
; THE QIO$ MACRO GENERATES THE "QUEUE I/O" DPB.
;
; MACRO CALL: 	QIO$	FNC,LUN,EFN,PRI,IOST,AST,PRMLST
;
; DESCRIPTION: THIS MACRO GENERATES THE PROPER
; DPB SPECIFIED FOR THE "QUEUE I/O" DIRECTIVE.
; THE ARGUMENTS ARE TREATED AS FOLLOWS:
;
;	FNC-I/O FUNCTION CODE,
;	LUN-LOGICAL UNIT NUMBER,
;	EFN-EVENT FLAG NUMBER,
;	PRI-PRIORITY,
;	IOST-ADDRESS OF I/O STATUS BLOCK,
;	AST-ADDRESS OF I/O DONE AST ENTRY POINT
;	PRMLST-PARAMETER LIST OF THE FORM
;		<P1,...,P6> .
;
; ALL OF THE ARGUMENTS MUST BE VALID EXPRESSIONS
; TO BE USED IN ASSEMBLER DATA STORAGE DIRECTIVES.
; THE FIRST CALL OF THIS MACRO WILL DEFINE THE FOLLOWING
; SYMBOLS AND ASSIGN, AS VALUES, THEIR BYTE OFFSET FROM THE
; BEGINNING OF THE DPB:
;
;	Q.IOFN-(LENGTH 2 BYTES) I/O FUNCTION,
;	Q.IOLU-(2) LOGICAL UNIT NUMBER,
;	Q.IOEF-(1) EVENT FLAG NUMBER,
;	Q.IOPR-(1) PRIORITY,
;	Q.IOSB-(2) ADDRESS OF I/O STATUS BLOCK,
;	Q.IOAE-(2) ADDRESS OF I/O DONE AST ENTRY POINT,
;	Q.IOPL-(0) PARAMETER LIST (UP TO 6 WORDS).
;
; IF THE SYMBOL '$$$GLB' IS DEFINED THE DPB WILL NOT
; BE GENERATED, AND THE SYMBOLIC OFFSETS WILL BE DEFINED
; AS GLOBALS.
;
; NOTE: THE ARGUMENT 'PRI' IS REQUIRED TO MAINTAIN COMPATIBILITY
; WITH RSX-11D.  DESPITE THE FACT THAT IT MUST BE SPECIFIED,
; IT IS IGNORED.
;
;-
	.MACRO	QIO$	FNC,LUN,EFN,PRI,IOST,AST,PRMLST
	.MCALL	QDPB$
	QDPB$	1,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>
	.ENDM	QIO$
;+
;		'QIOW$C'
;
; THE QIOW$C MACRO GENERATES A "QUEUE I/O AND WAIT" DPB IN
; A SPECIAL, SEPARATE PSECT AND A MONITOR TRAP
; IN THE ORIGINAL PROGRAM PSECT.
;
; MACRO CALL:	QIOW$C	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,PSECT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE PROPER
; "QUEUE I/O AND WAIT" DPB IN THE CONTROL SECTION NAMED
; '$DPB$.'.  ALL OF THE ARGUMENTS THROUGH 'PRMLST' ARE
; AS DESCRIBED FOR THE MACRO 'QIOW$'.  THE ARGUMENT
; 'PSECT' SHOULD BE THE NAME OF THE ORIGINAL PROGRAM
; CONTROL SECTION, INTO WHICH THE STANDARD MONITOR
; TRAP CODE WILL BE GENERATED.  THE OPTIONAL ARGUMENT
; 'ERR' IS THE ERROR ROUTINE ADDRESS.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; QIOW$ MACRO BELOW.
;
;-
	.MACRO	QIOW$C	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,PSCT,ERR
	.MCALL	QDPB$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	QDPB$	3,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	QIOW$C
;+
;		'QIOW$S'
;
; THE QIOW$S MACRO GENERATES THE CODE TO PUSH A
; "QUEUE I/O AND WAIT" DPB ON THE STACK AND GENERATE
; A MONITOR TRAP.
;
; MACRO CALL:	QIOW$S	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO
; PUSH THE PROPER "QUEUE I/O AND WAIT" DPB ON THE STACK.
; THE ARGUMENTS THROUGH 'PRMLST' REPRESENT THE
; INFORMATION AS DESCRIBED IN THE MACRO QIOW$.
; HOWEVER, THE ARGUMENTS MUST ALL BE VALID
; ASSEMBLER SOURCE OPERANDS. 
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; QIOW$ MACRO BELOW.
;
;-
	.MACRO	QIOW$S	FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
	.MCALL	QDPB$S
	QDPB$S	3,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>,ERR
	.ENDM	QIOW$S
;+
;		'QIOW$'
;
; THE QIOW$ MACRO GENERATES THE "QUEUE I/O AND WAIT" DPB.
;
; MACRO CALL: 	QIOW$	FNC,LUN,EFN,PRI,IOST,AST,PRMLST
;
; DESCRIPTION: THIS MACRO GENERATES THE PROPER
; DPB SPECIFIED FOR THE "QUEUE I/O AND WAIT" DIRECTIVE.
; THE ARGUMENTS ARE TREATED AS FOLLOWS:
;
;	FNC-I/O FUNCTION CODE,
;	LUN-LOGICAL UNIT NUMBER,
;	EFN-EVENT FLAG NUMBER,
;	PRI-PRIORITY,
;	IOST-ADDRESS OF I/O STATUS BLOCK,
;	AST-ADDRESS OF I/O DONE AST ENTRY POINT
;	PRMLST-PARAMETER LIST OF THE FORM
;		<P1,...,P6> .
;
; ALL OF THE ARGUMENTS MUST BE VALID EXPRESSIONS
; TO BE USED IN ASSEMBLER DATA STORAGE DIRECTIVES.
; THE FIRST CALL OF THIS MACRO WILL DEFINE THE FOLLOWING
; SYMBOLS AND ASSIGN, AS VALUES, THEIR BYTE OFFSET FROM THE
; BEGINNING OF THE DPB:
;
;	Q.IOFN-(LENGTH 2 BYTES) I/O FUNCTION,
;	Q.IOLU-(2) LOGICAL UNIT NUMBER,
;	Q.IOEF-(1) EVENT FLAG NUMBER,
;	Q.IOPR-(1) PRIORITY,
;	Q.IOSB-(2) ADDRESS OF I/O STATUS BLOCK,
;	Q.IOAE-(2) ADDRESS OF I/O DONE AST ENTRY POINT,
;	Q.IOPL-(0) PARAMETER LIST (UP TO 6 WORDS).
;
; IF THE SYMBOL '$$$GLB' IS DEFINED THE DPB WILL NOT
; BE GENERATED, AND THE SYMBOLIC OFFSETS WILL BE DEFINED
; AS GLOBALS.
;
; NOTE: THE ARGUMENT 'PRI' IS REQUIRED TO MAINTAIN COMPATIBILITY
; WITH RSX-11D.  DESPITE THE FACT THAT IT MUST BE SPECIFIED,
; IT IS IGNORED.
;
;-
	.MACRO	QIOW$	FNC,LUN,EFN,PRI,IOST,AST,PRMLST
	.MCALL	QDPB$
	QDPB$	3,FNC,LUN,EFN,PRI,IOST,AST,<PRMLST>
	.ENDM	QIOW$
;+
;		'QDPB$S'
;
; THE QDPB$S MACRO GENERATES THE CODE TO PUSH A 'QUEUE I/O" OR
; "QUEUE I/O AND WAIT" DPB ON THE STACK AND GENERATE
; A MONITOR TRAP.
;
; MACRO CALL:	QDPB$S	DIC,FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO
; PUSH THE PROPER "QUEUE I/O" DPB ON THE STACK.
; IT IS MEANT TO BE CALLED ONLY BY 'QIO$S', OR 'QIOW$S'
; TO GENERATE THE PROPER CODE TO BUILD A DPB AND ISSUE
; THE MONITOR CALL, ETC.
;
;-
	.MACRO	QDPB$S	DIC,FNC,LUN,EFN,PRI,IOST,AST,PRMLST,ERR
	.MCALL	RVP$,MVB$,DIR$
	.NLIST
$$$ARG=0
	.IRP	X,<PRMLST>
$$$ARG=$$$ARG+1
	.ENDM
	.LIST
	.IF GT	6-$$$ARG
	.REPT	<6-$$$ARG>
	CLR	-(SP)
	.ENDR
	.ENDC
	.IIF NB	<PRMLST>,	RVP$	PRMLST
	RVP$	IOST,AST
	MVB$	EFN,
	RVP$	FNC,LUN
	MOV	(PC)+,-(SP)
	.BYTE	DIC,12.
	DIR$	,ERR
	.ENDM	QDPB$S
;+
;		'QDPB$'
;
; THE QDPB$ MACRO GENERATES THE "QUEUE I/O" OR
; "QUEUE I/O AND WAIT" DPB.
;
; MACRO CALL: 	QDPB$	DIC,FNC,LUN,EFN,PRI,IOST,AST,PRMLST
;
; DESCRIPTION: THIS MACRO GENERATES THE PROPER
; DPB FOR THE SPECIFIED "QUEUE I/O" DIRECTIVE.
; IT IS ONLY MEANT TO BE CALLED BY THE 'QIO$', 'QIO$C',
; 'QIOW$', OR 'QIOW$C' MACROS TO GENERATE THE PROPER
; DPB.
;
;-
	.MACRO	QDPB$	DIC,FNC,LUN,EFN,PRI,IOST,AST,PRMLST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	DIC,12.
	.WORD	FNC
	.WORD	LUN
	.BYTE	EFN,0
	.WORD	IOST
	.WORD	AST
	.NLIST
$$$ARG=0
	.LIST
	.IRP	X,<PRMLST>
	.WORD	X
	.NLIST
$$$ARG=$$$ARG+1
	.LIST
	.ENDM
	.IF GT	6-$$$ARG
	.REPT	<6-$$$ARG>
	.WORD	0
	.ENDR
	.ENDC
	.ENDC
	.IF NDF	Q.IOFN
	.NLIST
	.IRP	X,<,<Q.IOFN,2>,<Q.IOLU,2>,<Q.IOEF,1>,<Q.IOPR,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<Q.IOSB,2>,<Q.IOAE,2>,<Q.IOPL>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	QDPB$
;
; RECEIVE DATA OR STOP
;
	.MACRO	RCST$	TNAME,BUF
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	139.,4
	R50$	TNAME
	.WORD	BUF
	.ENDC
	.IF	NDF	R.CSTN
	OFF$
	OFF$	R.CSTN,4
	OFF$	R.CSBF,2
	.ENDC
	.ENDM	RCST$
;
	.MACRO	RCST$C	TNAME,BUF,CS,ERR
	.MCALL	RCST$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RCST$	TNAME,BUF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RCST$C
;
	.MACRO	RCST$S	TNAME,BUF,ERR
	.MCALL	DIR$,MOV$,RFA$
	MOV$	BUF
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	139.,4
	DIR$	,ERR
	.ENDM	RCST$S

;+
;		'RDAF$C'
;
; THE RDAF$C MACRO GENERATES A DPB FOR THE "READ ALL FLAGS" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RDAF$C	BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ ALL FLAGS"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RDAF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RDAF$ MACRO.
;
;-
	.MACRO	RDAF$C	BA,CS,ERR
	.MCALL	RDAF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RDAF$	BA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RDAF$C
;+
;		'RDAF$S'
;
; THE RDAF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "READ ALL FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RDAF$S	BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "READ ALL FLAGS" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RDAF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	RDAF$S	BA,ERR
	.MCALL	MOV$,DIR$
	MOV$	BA
	MOV	(PC)+,-(SP)
	.BYTE	39.,2
	DIR$	,ERR
	.ENDM	RDAF$S
;+
;		'RDAF$'
;
; THE RDAF$ MACRO GENERATES A DPB FOR THE "READ ALL FLAGS" DIRECTIVE.
;
; MACRO CALL:	RDAF$	BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ ALL FLAGS"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	BUFADR=ADDRESS OF FOUR WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.DABA-(LENGTH 2 BYTES) BUFFER ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	RDAF$	BA
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	39.,2
	.WORD	BA
	.ENDC
	.IF NDF	R.DABA
	.NLIST
	OFF$
	OFF$	R.DABA,2.
	.LIST
	.ENDC
	.ENDM	RDAF$


;
; RDBBK$ - GENERATE A REGION DEFINITION BLOCK
;
 
	.MACRO	RDBBK$	SIZ,NAM,PAR,STS,PRO
 
	.MCALL	RDBDF$,R50$
	RDBDF$			;DEFINE REGION DEFINITION BLOCK SYMBOLS
 
	.WORD	0		;REGION ID
	.WORD	SIZ		;SIZE OF REGION (32W BLOCKS)
	R50$	NAM		;NAME OF REGION (RAD50)
	R50$	PAR		;REGION'S MAIN PARTITION NAME (RAD50)
	.WORD	STS		;REGION STATUS WORD
	.WORD	PRO		;REGION PROTECTION WORD
 
	.ENDM	RDBBK$
 
;
; RDBDF$ - DEFINE THE REGION DEFINITION BLOCK SYMBOLS
;
 
	.MACRO	RDBDF$	GBL
;
; REGION DEFINITION BLOCK OFFSETS
;
	.MCALL	.BLKW.,.BLK.
	.BLK.
	.BLKW.	1,R.GID,GBL	;REGION ID
	.BLKW.	1,R.GSIZ,GBL	;SIZE OF REGION (32W BLOCKS)
	.BLKW.	2,R.GNAM,GBL	;NAME OF REGION (RAD50)
	.BLKW.	2,R.GPAR,GBL	;REGION'S MAIN PARTITION NAME (RAD50)
	.BLKW.	1,R.GSTS,GBL	;REGION STATUS WORD
	.BLKW.	1,R.GPRO,GBL	;PROTECTION CODE OF REGION
	.BLKW.	0,R.GLGH,GBL	;LENGTH OF REGION DEFINITION BLOCK
;
; REGION STATUS WORD SYMBOLS
;
 
	.IF IDN	<DEF$G>,<GBL>
 
	.GLOBL	RS.CRR,RS.UNM,RS.RES,RS.MDL,RS.NDL,RS.ATT
	.GLOBL	RS.NEX,RS.EXT,RS.DEL,RS.WRT,RS.RED
 
	.ENDC
 
 
RS.CRR=^O<100000>		;REGION WAS SUCCESSFULLY CREATED
RS.UNM=^O<40000>		;ONE OR MORE WINDOWS WERE UNMAPPED ON A DETACH
 
RS.RES=^O<400>			;MAKE REGION RESIDENT UPON CREATION
RS.MDL=^O<200>			;MARK REGION FOR DELETE ON LAST DETACH
RS.NDL=^O<100>			;CREATED REGION IS NOT TO BE MARKED FOR DETACH
RS.ATT=^O<40>			;ATTACH TO CREATED REGION
RS.NEX=^O<20>			;CREATED REGION IS NOT EXTENDABLE
RS.DEL=^O<10>			;DELETE ACCESS DESIRED ON ATTACH
RS.EXT=^O<4>			;EXTEND ACCESS DESIRED ON ATTACH
RS.WRT=^O<2>			;WRITE ACCESS DESIRED ON ATTACH
RS.RED=^O<1>			;READ ACCESS DESIRED ON ATTACH
;
; REDEFINE MACRO TO NULL
;
	.MACRO	RDBDF$	X
	.ENDM
 
	.ENDM	RDBDF$
 
 
;+
;		'RDEF$C'
;
; THE RDEF$C MACRO GENERATES A DPB FOR THE "READ SINGLE EVENT FLAG"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PSECT.
;
; MACRO CALL:	RDEF$C	EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ SINGLE EVENT
; FLAG" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RDEF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RDEF$ MACRO.
;
;-
	.MACRO	RDEF$C	EFN,CS,ERR
	.MCALL	RDEF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RDEF$	EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RDEF$C
;+
;		'RDEF$S'
;
; THE RDEF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "READ SINGLE EVENT FLAG" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RDEF$S	BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "READ SINGLE EVENT FLAG" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RDEF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	RDEF$S	EFN,ERR
	.MCALL	MOV$,DIR$
	MOV$	EFN
	MOV	(PC)+,-(SP)
	.BYTE	37.,2
	DIR$	,ERR
	.ENDM	RDEF$S
;+
;		'RDEF$'
;
; THE RDEF$ MACRO GENERATES A DPB FOR THE "READ SINGLE EVNET FLAG"
; DIRECTIVE.
;
; MACRO CALL:	RDEF$	EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ SINGLE EVENT
; FLAG" DIRECTIVE.  THE ARGUMENT IS ASSUMED TO HAVE THE FOLLOWING
; MEANING:
;
;	EFN=EVENT FLAG NUMBER
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.DEEF=OFFSET INTO DPB WHICH CONTAINS THE EVENT FLAG NUMBER
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	RDEF$	EFN
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	37.,2
	.WORD	EFN
	.ENDC
	.IF NDF	R.DEEF
	.NLIST
	OFF$
	OFF$	R.DEEF,2.
	.LIST
	.ENDC
	.ENDM	RDEF$

;		'RDXF$C'
;
; THE RDXF$C MACRO GENERATES A DPB FOR THE "READ EXTENDED FLAGS" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RDXF$C	BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ EXTENDED FLAGS"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RDXF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RDXF$ MACRO.
;
;-
	.MACRO	RDXF$C	BA,CS,ERR
	.MCALL	RDXF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RDXF$	BA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RDXF$C
;+
;		'RDXF$S'
;
; THE RDXF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "READ EXTENDED FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RDXF$S	BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "READ EXTENDED FLAGS" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RDXF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	RDXF$S	BA,ERR
	.MCALL	MOV$,DIR$
	CLR	-(SP)
	MOV$	BA
	MOV	(PC)+,-(SP)
	.BYTE	39.,3.
	DIR$	,ERR
	.ENDM	RDXF$S
;+
;		'RDXF$'
;
; THE RDXF$ MACRO GENERATES A DPB FOR THE "READ EXTENDED FLAGS" DIRECTIVE.
;
; MACRO CALL:	RDXF$	BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "READ EXTENDED FLAGS"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	BUFADR=ADDRESS OF SIX WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.DABA-(LENGTH 2 BYTES) BUFFER ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	RDXF$	BA
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	39.,3.
	.WORD	BA
	.WORD	0
	.ENDC
	.IF NDF	R.DABA
	.NLIST
	OFF$
	OFF$	R.DABA,2.
	.LIST
	.ENDC
	.ENDM	RDXF$

;+
;		'RCVD$C'
;
; THE RCVD$C MACRO GENERATES A DPB FOR THE "RECEIVE DATA" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RCVD$C	TASK,BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RECEIVE DATA"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RCVD$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RCVD$ MACRO.
;
;-
	.MACRO	RCVD$C	TN,BA,CS,ERR
	.MCALL	RCVD$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RCVD$	TN,BA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RCVD$C
;+
;		'RCVD$S'
;
; THE RCVD$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "RECEIVE DATA" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RCVD$S	TSKNAMADR,BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "RECEIVE DATA" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RCVD$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	RCVD$S	TN,BA,ERR
	.MCALL	MOV$,DIR$, RFA$
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	75.,4
	DIR$	,ERR
	.ENDM	RCVD$S

;+
;		'RCVD$'
;
; THE RCVD$ MACRO GENERATES A DPB FOR THE "RECEIVE DATA" DIRECTIVE.
;
; MACRO CALL:	RCVD$	TASK,BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RECEIVE DATA"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=SENDER TASK NAME,
;	BUFADR=ADDRESS OF FIFTEEN WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.VDTN-(LENGTH 4 BYTES) TASK NAME,
;	R.VDBA-(2) BUFFER ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	RCVD$	TN,BA
	.MCALL	OFF$, R50$
	.IF NDF	$$$GLB
	.BYTE	75.,4
	R50$	TN
	.WORD	BA
	.ENDC
	.IF NDF	R.VDTN
	.NLIST
	.IRP	X,<,<R.VDTN,4>,<R.VDBA,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	RCVD$
 
;+
;		'RCVX$C'
;
; THE RCVX$C MACRO GENERATES A DPB FOR THE "RECEIVE DATA OR EXIT" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RCVX$C	TASK,BUFADR,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RECEIVE DATA OR
; EXIT" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RCVX$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RCVX$ MACRO.
;
;-
	.MACRO	RCVX$C	TN,BA,CS,ERR
	.MCALL	RCVX$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RCVX$	TN,BA
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RCVX$C
;+
;		'RCVX$S'
;
; THE RCVX$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RCVX$S	TSKNAMADR,BUFADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RCVX$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DEFINED IN THE DIR$ MACRO.
;
;-
	.MACRO	RCVX$S	TN,BA,ERR
	.MCALL	MOV$,DIR$, RFA$
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	77.,4
	DIR$	,ERR
	.ENDM	RCVX$S
;+
;		'RCVX$'
;
; THE RCVX$ MACRO GENERATES A DPB FOR THE "RECEIVE DATA OR EXIT" DIRECTIVE.
;
; MACRO CALL: 	RCVX$	TASK,BUFADR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RECEIVE DATA OR EXIT"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=SENDER TASK NAME,
;	BUFADR=ADDRESS OF FIFTEEN WORD BUFFER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.VXTN-(LENGTH 4 BYTES) TASK NAME,
;	R.VXBA-(2) BUFFER ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-

	.MACRO	RCVX$	TN,BA
	.MCALL	OFF$, R50$
	.IF NDF	$$$GLB
	.BYTE	77.,4
	R50$	TN
	.WORD	BA
	.ENDC
	.IF NDF	R.VXTN
	.NLIST
	.IRP	X,<,<R.VXTN,4>,<R.VXBA,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	RCVX$

;+
;		'RLON$'
;
; THE RLON$ MACRO GENERATES DPB FOR THE RECURSIVE TRANSLATE LOGICAL NAME 
; DIRECTIVE.
;
; MACRO CALL:	RLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER. A RECURSIVE LOOKUP FOR EACH NEWLY IDENTIFIED 
; EQUIVALENCE STRING WILL BE EXECUTED UNTIL NO MORE TRANSLATIONS CAN BE
; PERFORMED.
;
;-
	.MACRO	RLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,10.	;DIC and DPB length
	.BYTE	14.		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	TBMSK		;Table inhibit mask
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.WORD	RSIZE		;Address of a word into which is returned
				;the size in bytes of equivalence name string
	.WORD	RTBMOD		;Address of a word into which is returned
				;the type and Modifier of the translation performed
	.WORD	STATUS		;Address of a data block to hold the LNB status
	.ENDC
	.IF	NDF	R.LFUN
	.IRP	X,<,<R.LFUN,1>,<R.LMOD,1>,<R.LTBL,2>,<R.LLNS,2>,<R.LLSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.LENS,2>,<R.LESZ,2>,<R.LRSZ,2>,<R.LRTM,2>,<R.LSTS,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	RLON$
;+
;		'RLON$C'
;
; THE RLON$C MACRO GENERATES DPB FOR THE RECURSIVE TRANSLATE LOGICAL NAME 
; DIRECTIVE.
;
; MACRO CALL:	RLON$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	RLON$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,CS,ERR
	.MCALL	RLON$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RLON$C
;+
;		'RLON$S'
;
; THE RLON$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE RECURSIVE 
; TRANSLATE LOGICAL NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RLON$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	RLON$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	STATUS
	MOV$	RTBMOD
	MOV$	RSIZE
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	TBMSK,#0
	MVB$	#14.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,10.
	DIR$	,ERR
	.ENDM	RLON$S

;+
;		'RLOG$'
;
; THE RLOG$ MACRO GENERATES DPB FOR THE RECURSIVE TRANSLATE LOGICAL NAME 
; DIRECTIVE.
;
; MACRO CALL:	RLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER. A RECURSIVE LOOKUP FOR EACH NEWLY IDENTIFIED 
; EQUIVALENCE STRING WILL BE EXECUTED UNTIL NO MORE TRANSLATIONS CAN BE
; PERFORMED.
;
;-
	.MACRO	RLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,10.	;DIC and DPB length
	.BYTE	10.		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	TBMSK		;Table inhibit mask
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.WORD	RSIZE		;Address of a word into which is returned
				;the size in bytes of equivalence name string
	.WORD	RTBMOD		;Address of a word into which is returned
				;the type and Modifier of the translation performed
	.WORD	STATUS		;Address of a data block to hold the LNB status
	.ENDC
	.IF	NDF	R.LFUN
	.IRP	X,<,<R.LFUN,1>,<R.LMOD,1>,<R.LTBL,2>,<R.LLNS,2>,<R.LLSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.LENS,2>,<R.LESZ,2>,<R.LRSZ,2>,<R.LRTM,2>,<R.LSTS,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	RLOG$
;+
;		'RLOG$C'
;
; THE RLOG$C MACRO GENERATES DPB FOR THE RECURSIVE TRANSLATE LOGICAL NAME 
; DIRECTIVE.
;
; MACRO CALL:	RLOG$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	RLOG$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,CS,ERR
	.MCALL	RLOG$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RLOG$C
;+
;		'RLOG$S'
;
; THE RLOG$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE RECURSIVE 
; TRANSLATE LOGICAL NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RLOG$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	RLOG$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	STATUS
	MOV$	RTBMOD
	MOV$	RSIZE
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	TBMSK,#0
	MVB$	#10.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,10.
	DIR$	,ERR
	.ENDM	RLOG$S

;+
;		'RMAF$S'
;
; THE RMAF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "REMOVE AFFINITY" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RMAF$S	ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "REMOVE AFFINITY" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS.
; THIS DIRECTIVE ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE 
; ADDRESS, 'ERR' AS DEFINED IN THE DIR$ MACRO.
;
;-
	.MACRO	RMAF$S	ERR
	MOV	(PC)+,-(SP)
	.BYTE	163.,1
	DIR$	,ERR
	.ENDM	RMAF$S
 

;
; RPOI
;
	.MACRO RPOI$ TNAME,PN,PR,UGC,UMC,PARENT,BUFADR,BUFLEN,SC,DNAM,UNIT,TASK,OCBAD
	.MCALL	R50$,OFF$
	.IF	NDF $$$GLB
	.BYTE	11.,16.
	R50$	TNAME
	.BLKW	3
	.BYTE	UMC,UGC
	R50$	PARENT
	.WORD	OCBAD
	.WORD	BUFADR
	.WORD	BUFLEN
	.BYTE	UNIT
	.BYTE	SC
	.IF	NB DNAM
$$$T2=.
	.ASCII	/DNAM/
.=$$$T2+2
	.IFF
	.WORD
	.ENDC
	R50$	TASK
	.ENDC
	.IF	NDF R.POTK
	.IRP	X,<,<R.POTK,12>,<R.POUM,1>,<R.POUG,1>,<R.POPT,4>,<R.POOA,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.POBF,2>,<R.POBL,2>,<R.POUN,1>,<R.POSC,1>,<R.PODV,2>>
	OFF$	X
	.ENDM
	OFF$	R.POTN,2
;
; DEFINE FLAGS BYTE BIT DEFINITIONS
;
	.IF DF $$$GLB
	.GLOBL	RP.OEX,RP.OAL,RP.ONX
	.ENDC
RP.OEX=200
RP.OAL=001
RP.ONX=002

	.ENDC
	.ENDM	RPOI$
;
	.MACRO	RPOI$C	TNAME,PN,PR,UGC,UMC,PARENT,BUFADR,BUFLEN,SC,DNAM,UNIT,TASK,OCBAD,CS,ERR
	.MCALL	RPOI$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RPOI$	TNAME,PN,PR,UGC,UMC,PARENT,BUFADR,BUFLEN,SC,DNAM,UNIT,TASK,OCBAD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RPOI$C
;
	.MACRO	RPOI$S TNAME,PN,PR,UGC,UMC,PARENT,BUFADR,BUFLEN,SC,DNAM,UNIT,TASK,OCBAD,ERR
	.MCALL	MVB$,MOV$,RFA$,DIR$
	RFA$	TASK
	MOV$	DNAM
	MVB$	UNIT,SC
	MOV$	BUFLEN
	MOV$	BUFADR
	MOV$	OCBAD
	RFA$	PARENT
	MVB$	UMC,UGC
	CLR	-(SP)
	CLR	-(SP)
	CLR	-(SP)
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	11.,16.
	DIR$	,ERR
	.ENDM	RPOI$S

;+
;		'RQST$C'
;
; THE RQST$C MACRO GENERATES A DPB FOR THE "REQUEST" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RQST$C	TASK,PART,PRI,UICGC,UICPC,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "REQUEST"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RQST$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RQST$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; RQST$ MACRO BELOW.
;
;-
	.MACRO	RQST$C	TN,PN,PR,GC,P,CS,ERR
	.MCALL	RQST$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RQST$	TN,PN,PR,GC,P
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;+
;		'RQST$S'
;
; THE RQST$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "REQUEST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RQST$S	TSKNAMADR,PRTNAMADR,PRI,UICGC,UICPC,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "REQUEST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RQST$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; RQST$ MACRO BELOW.
;
;-
	.MACRO	RQST$S	TN,PN,PR,GC,P,ERR
	.MCALL	MVB$,RFA$,DIR$
	MVB$	P,GC
	CLR	-(SP)
	RFA$
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	11.,7
	DIR$	,ERR
	.ENDM	RQST$S
;+
;		'RQST$'
;
; THE RQST$ MACRO GENERATES A DPB FOR THE "REQUEST" DIRECTIVE.
;
; MACRO CALL:	RQST$	TASK,PART,PRI,UIGC,UICPC
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "REQUEST"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=TASK NAME,
;	PART=PARTITION NAME,
;	PRI=PRIORITY,
;	UICGC=UIC GROUP CODE,
;	UICPC=UIC PROGRAMMER CODE.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.QSTN-(LENGTH 4 BYTES) TASK NAME,
;	R.QSPN-(4) PARTITION NAME,
;	R.QSPR-(2) PRIORITY,
;	R.QSGC-(1) UIC GROUP,
;	R.QSPC-(1) UIC PROGRAMMER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
; NOTE: THE ARGUMENTS 'PART' AND 'PRI' ARE REQUIRED TO MAINTAIN
; COMPATIBILITY WITH RSX-11D.  DESPITE THE FACT THAT THEY MUST
; BE SPECIFIED, THEY ARE IGNORED.
;
;-
	.MACRO	RQST$	TN,PN,PR,GC,P
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	11.,7
	R50$	TN
	.WORD	0,0
	.WORD	0
	.BYTE	P,GC
	.ENDC
	.IF NDF	R.QSTN
	.NLIST
	.IRP	X,<,<R.QSTN,4>,<R.QSPN,4>,<R.QSPR,2>,<R.QSPC,1>,<R.QSGC,1>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	RQST$

;
; RREF$/RREF$C/RREF$S - RECEIVE BY REFERENCE
;
 
	.MACRO	RREF$	WDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	81.,2
	.WORD	WDB
	.ENDC
	.IF NDF	R.REBA
	OFF$
	OFF$	R.REBA,2
	.ENDC
	.ENDM	RREF$
 
 
	.MACRO	RREF$C	WDB,CS,ERR
	.MCALL	RREF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RREF$	WDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RREF$C
 
 
	.MACRO	RREF$S	WDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	WDB
	MOV	(PC)+,-(SP)
	.BYTE	81.,2
	DIR$	,ERR
	.ENDM	RREF$S
 
 

;+
;		'RSUM$C'
;
; THE RSUM$C MACRO GENERATES A DPB FOR THE "RESUME" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RSUM$C	TASK,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RESUME"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RSUM$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RSUM$ MACRO.
;
;-
	.MACRO	RSUM$C	TN,CS,ERR
	.MCALL	RSUM$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RSUM$	TN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RSUM$C
;+
;		'RSUM$S'
;
; THE RSUM$S GENERATES THE CODE TO PUSH A DPB FOR THE
; "RESUME" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RSUM$S	TSKNAMADR,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "RESUME" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RSUM$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	RSUM$S	TN,ERR
	.MCALL	RFA$,DIR$
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	47.,3
	DIR$	,ERR
	.ENDM	RSUM$S

;+
;		'RSUM$'
;
; THE RSUM$ MACRO GENERATES A DPB FOR THE "RESUME" DIRECTIVE.
;
; MACRO CALL:	RSUM$	TASK
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RESUME"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=TASK NAME.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.SUTN-(LENGTH 4 BYTES) TASK NAME.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSER ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	RSUM$	TN
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	47.,3
	R50$	TN
	.ENDC
	.IF NDF	R.SUTN
	.NLIST
	OFF$
	OFF$	R.SUTN,4
	.LIST
	.ENDC
	.ENDM	RSUM$
;+
;		'RUN$C'
;
; THE RUN$C MACRO GENERATES A DPB FOR THE "RUN" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	RUN$C	TSK,PRT,PRI,UGC,UPC,SMG,SNT,RMG,RNT,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RUN"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE RUN$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE RUN$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; RUN$ MACRO BELOW.
;
;-
	.MACRO	RUN$C	TN,PN,PR,UG,UP,SM,SU,RM,RU,CS,ERR
	.MCALL	RUN$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	RUN$	TN,PN,PR,UG,UP,SM,SU,RM,RU
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	RUN$C
;+
;		'RUN$S'
;
; THE RUN$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "RUN" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	RUN$S	TNAMADR,PNAMADR,PRI,UGC,UPC,SMG,SNT,RMG,RNT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "RUN" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE RUN$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING IGNORED ARGUMENTS IN THE
; RUN$ MACRO BELOW.
;
;-
	.MACRO	RUN$S	TN,PN,PR,UG,UP,SM,SU,RM,RU,ERR
	.MCALL	RVP$,MVB$,RFA$,DIR$
	RVP$	SM,SU,RM,RU
	MVB$	UP,UG
	CLR	-(SP)
	RFA$
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	17.,11.
	DIR$	,ERR
	.ENDM	RUN$S
;+
;		'RUN$'
;
; THE RUN$ MACRO GENERATES A DPB FOR THE "RUN" DIRECTIVE.
;
; MACRO CALL:	RUN$	TSK,PRT,PRI,UGC,UPC,SMG,SNT,RMG,RNT
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "RUN"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TSK=TASK NAME,
;	PRT=PARTITION NAME,
;	PRI=PRIORITY,
;	UGC=UIC GROUP CODE,
;	UPC=UIC PROGRAMMER CODE,
;	SMG=SCHEDULE DELTA MAGNITUDE,
;	SNT=SCHEDULE DELTA UNIT,
;	RMG=RE-SCHEDULE INTERVAL MAGNITUDE,
;	RNT=RE-SCHEDULE INTERVAL UNIT.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.UNTN-(LENGTH 4 BYTES) TASK NAME,
;	R.UNPN-(4) PARTITION NAME,
;	R.UNPR-(2) PRIORITY,
;	R.UNGC-(1) UIC GROUP,
;	R.UNPC-(1) UIC PROGRAMMER,
;	R.UNSM-(2) SCHEDULE MAGNITUDE,
;	R.UNSU-(2) SCHEDULE UNIT,
;	R.UNRM-(2) RE-SCHEDULE MAGNITUDE,
;	R.UNRU-(2) RE-SCHEDULE UNIT.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
; NOTE: THE ARGUMENTS 'PRT' AND 'PRI' ARE REQUIRED TO MAINTAIN
; COMPATIBILITY WITH RSX-11D.  DESPITE THE FACT THAT THEY MUST
; BE SPECIFIED, THEY ARE IGNORED.
;
;-
	.MACRO	RUN$	TN,PN,PR,GC,P,SM,SU,RM,RU
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	17.,11.
	R50$	TN
	.WORD	0,0
	.WORD	0
	.BYTE	P,GC
	.WORD	SM
	.WORD	SU
	.WORD	RM
	.WORD	RU
	.ENDC
	.IF NDF	R.UNTN
	.NLIST
	.IRP	X,<,<R.UNTN,4>,<R.UNPN,4>,<R.UNPR,2>,<R.UNPC,1>,<R.UNGC,1>>
	OFF$	X
	.ENDM
	.IRP	X,<<R.UNSM,2>,<R.UNSU,2>,<R.UNRM,2>,<R.UNRU,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	RUN$

;
;	SCAA$
;
	.MACRO	SCAA$	AST
	.MCALL	OFF$
	.IF	NDF $$$GLB
	.BYTE	173.,2.
	.WORD	AST
	.ENDC
	.IF	NDF S.CAAE
	OFF$
	OFF$	S.CAAE,2
	.ENDC
	.ENDM
;
	.MACRO	SCAA$C	AST,CS,ERR
	.MCALL	SCAA$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SCAA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SCAA$C
;
	.MACRO	SCAA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	173.,2.
	DIR$	,ERR
	.ENDM	SCAA$S
;
; SUPERVISOR CALL
;
	.MACRO	SCAL$S	SRAD,CRAD
	.MCALL	DIR$,MOV$
	MOV$	CRAD
	MOV$	SRAD
	MOV	(PC)+,-(SP)
	.BYTE	155.,3
	DIR$	,ERR
	.ENDM	SCAL$S

;
;	SCLI$
;
	.MACRO	SCLI$	CLI,DEV,UNIT
	.MCALL	R50$,OFF$
	.IF	NDF $$$GLB
	.BYTE	173.,5.
$$$T2=.
	.ASCII	/DEV/
.=$$$T2+2
	.BYTE	UNIT,0
	R50$	CLI
	.ENDC
	.IF	NDF S.CIDV
	.IRP	X,<,<S.CIDV,2>,<S.CIUN,2>,<S.CICN,4>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	SCLI$
;
	.MACRO	SCLI$C	CLI,DEV,UNIT,CS,ERR
	.MCALL	SCLI$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SCLI$	CLI,DEV,UNIT
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SCLI$C
;
	.MACRO	SCLI$S	CLI,DEV,UNIT,ERR
	.MCALL	MOV$,RFA$,DIR$,MVB$
	RFA$	CLI
	MVB$	UNIT,#0
	MOV$	DEV
	MOV	(PC)+,-(SP)
	.BYTE	173.,5.
	DIR$	,ERR
	.ENDM

;+
;		'SDAT$C'
;
; THE SDAT$C MACRO GENERATES A DPB FOR THE "SEND DATA" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	SDAT$C	TASK,BUFADR,EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SEND DATA"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SDAT$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IN CONTROLLED BY THE SDAT$ MACRO.
;
;-
	.MACRO	SDAT$C	TN,BA,EFN,CS,ERR
	.MCALL	SDAT$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SDAT$	TN,BA,EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SDAT$C
;+
;		'SDAT$S'
;
; THE SDAT$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SEND DATA" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SDAT$S	TSKNAMADR,BUFADR,EFN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "SEND DATA" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE SDAT$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP.  USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SDAT$S	TN,BA,EFN,ERR
	.MCALL	MOV$,RFA$,DIR$
	MOV$	EFN
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	71.,5
	DIR$	,ERR
	.ENDM	SDAT$S

;+
;		'SDAT$'
;
; THE SDAT$ MACRO GENERATES A DPB FOR THE "SEND DATA" DIRECTIVE.
;
; MACRO CALL:	SDAT$	TASK,BUFADR,EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SEND DATA"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=RECEIVER TASK NAME,
;	BUFADR=ADDRESS OF THIRTEEN WORD DATA BUFFER,
;	EFN=EVENT FLAG NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.DATN-(LENGTH 4 BYTES) TASK NAME,
;	S.DABA-(2) BUFFER ADDRESS,
;	S.DAEF-(2) EVENT FLAG NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SDAT$	TN,BA,EFN
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	71.,5
	R50$	TN
	.WORD	BA
	.WORD	EFN
	.ENDC
	.IF NDF	S.DATN
	.NLIST
	.IRP	X,<,<S.DATN,4>,<S.DABA,2>,<S.DAEF,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	SDAT$

;
; SET UP DEFAULT DIRECTORY STRING
;
	.MACRO	SDIR$	MOD,ENS,ENSSZ
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,5.		;DIC and DPB length
	.BYTE	3		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	0		;Reserved for future use
	.WORD	ENS		;Address of logical name string
	.WORD	ENSSZ		;Byte count of logical name string
	.ENDC
	.IF	NDF	S.DFUN
	.IRP	X,<,<S.DFUN,1>,<S.DMOD,3>,<S.DENS,2>,<S.DESZ,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	SDIR$
;
	.MACRO	SDIR$C	MOD,ENS,ENSSZ,CS,ERR
	.MCALL	SDIR$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SDIR$	MOD,ENS,ENSSZ
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SDIR$C
;
	.MACRO	SDIR$S	MOD,ENS,ENSSZ,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	#0
	MVB$	#3,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,5
	DIR$	,ERR
	.ENDM	SDIR$S
;
; SEND,REQUEST, AND CONNECT
;
	.MACRO	SDRC$	TNAME,BUF,EFN,EAST,ESB
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	141.,7
	R50$	TNAME
	.WORD	BUF
	.WORD	EFN
	.WORD	EAST
	.WORD	ESB
	.ENDC
	.IF	NDF	S.DRTN
	.IRP	X,<,<S.DRTN,4>,<S.DRBF,2>,<S.DREF,2>,<S.DREA,2>,<S.DRES,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	SDRC$
;
	.MACRO	SDRC$C	TNAME,BUF,EFN,EAST,ESB,CS,ERR
	.MCALL	SDRC$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SDRC$	TNAME,BUF,EFN,EAST,ESB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SDRC$C
;
	.MACRO	SDRC$S	TNAME,BUF,EFN,EAST,ESB,ERR
	.MCALL	DIR$,MOV$,RFA$,MVB$
	MOV$	ESB
	MOV$	EAST
	MOV$	EFN
	MOV$	BUF
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	141.,7
	DIR$	,ERR
	.ENDM	SDRC$S

;
;	SDRP$
;
	.MACRO	SDRP$	TASK,BUFADR,BUFLEN,EFN,FLAG,PARENT,OCBAD
	.MCALL	R50$,OFF$
	.IF	NDF $$$GLB
	.BYTE	141.,9.
	R50$	TASK
	.WORD	BUFADR
	.BYTE	EFN,FLAG
	.IF	NB BUFLEN
	.WORD	BUFLEN
	.IFF
	.WORD	13.
	.ENDC
	R50$	PARENT
	.WORD	OCBAD
	.ENDC
	.IF	NDF S.DRTK
	.IRP	X,<,<S.DRTK,4>,<S.DRAD,2>,<S.DREF,1>,<S.DRFL,1>,<S.DRBL,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<S.DRPT,4>,<S.DROA,2>>
	OFF$	X
	.ENDM
;
; DEFINE FLAGS BYTE BIT DEFINITIONS
;
	.IF DF $$$GLB
	.GLOBL	SD.REX,SD.RAL,SD.RNX
	.ENDC
SD.REX=200
SD.RAL=001
SD.RNX=002

	.ENDC
	.ENDM	SDRP$
;
	.MACRO	SDRP$C	TASK,BUFADR,BUFLEN,EFN,FLAG,PARENT,OCBAD,CS,ERR
	.MCALL	SDRP$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SDRP$	TASK,BUFADR,BUFLEN,EFN,FLAG,PARENT,OCBAD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SDRP$C
;
	.MACRO	SDRP$S	TASK,BUFADR,BUFLEN,EFN,FLAG,PARENT,OCBAD,ERR
	.MCALL	MVB$,MOV$,RFA$,DIR$
	MOV$	OCBAD
	RFA$	PARENT
	MOV$	BUFLEN
	MVB$	EFN,FLAG
	MOV$	BUFADR
	RFA$	TASK
	MOV	(PC)+,-(SP)
	.BYTE	141.,9.
	DIR$	,ERR
	.ENDM	SDRP$S

;+
;		'SETF$C'
;
; THE SETF$C MACRO GENERATES A DPB FOR THE "SET EVENT FLAG" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	SETF$C	EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SET EVENT FLAG"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SETF$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SETF$ MACRO.
;
;-
	.MACRO	SETF$C	EFN,CS,ERR
	.MCALL	SETF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SETF$	EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SETF$C

;+
;		'SETF$S'
;
; THE SETF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SET EVENT FLAG" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SETF$S	EFN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "SET EVENT FLAG" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE SETF$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SETF$S	EFN,ERR
	.MCALL	MOV$,DIR$
	MOV$	EFN
	MOV	(PC)+,-(SP)
	.BYTE	33.,2
	DIR$	,ERR
	.ENDM	SETF$S
;+
;		'SETF$'
;
; THE SETF$ MACRO GENERATES A DPB FOR THE "SET EVENT FLAG" DIRECTIVE.
;
; MACRO CALL:	SETF$	EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SET EVENT FLAG"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	EFN=EVENT FLAG NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.ETEF-(LENGTH 2 BYTES) EVENT FLAG.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SETF$	EFN
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	33.,2
	.WORD	EFN
	.ENDC
	.IF NDF	S.ETEF
	.NLIST
	OFF$
	OFF$	S.ETEF,2
	.LIST
	.ENDC
	.ENDM	SETF$

;+
;		'SFPA$C'
;
; THE SFPA$C MACRO GENERATES A DPB FOR THE "SPECIFY FLOATING POINT EXCEPTION
; AST" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	SFPA$C	AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY FLOATING POINT
; EXCEPTION AST" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SFPA$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SFPA$ MACRO.
;
;-
	.MACRO	SFPA$C	AST,CS,ERR
	.MCALL	SFPA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SFPA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SFPA$C
;+
;		'SFPA$S'
;
; THE SFPA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY FLOATING
; POINT EXCEPTION AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SFPA$S	AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY
; FLOATING POINT EXCEPTION AST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE SFPA$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SFPA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	111.,2
	DIR$	,ERR
	.ENDM	SFPA$S
;+
;		'SFPA$'
;
; THE SFPA$ MACRO GENERATES A DPB FOR THE "SPECIFY FLOATING POINT EXCEPTION
; AST" DIRECTIVE.
;
; MACRO CALL:	SFPA$	AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY FLOATING POINT
; EXCEPTION AST" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.FPAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SFPA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	111.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.FPAE
	.NLIST
	OFF$
	OFF$	S.FPAE,2
	.LIST
	.ENDC
	.ENDM	SFPA$



;
; SEND MESSAGE
;
	.MACRO	SMSG$	TGT,BUF,LEN,PRMLST
	.MCALL	OFF$
	.NLIST
	.IF	NDF S.MTGT
	OFF$
	.IRP	X,<<S.MTGT,2>,<S.MDBA,2>,<S.MDBL,2>,<S.MPRL>>
	OFF$	X
	.ENDM
;
; DEFINE KNOWN TARGETS
;
	.IF DF $$$GLB
	.GLOBL	SM.SER
	.ENDC
SM.SER=1
	.ENDC
	.IF	NDF $$$GLB
$$$ARG=0
	.IRP	X,<PRMLST>
$$$ARG=$$$ARG+1
	.ENDM
	.IF	NB TGT
	.IF	IDN TGT SM.SER
	.IF	LT,$$$ARG-4
	$$$ARG=4
	.ENDC
	.ENDC
	.ENDC
	.LIST
	.BYTE	171.,4+$$$ARG
	.BYTE	TGT
	.BYTE	0
	.WORD	BUF
	.WORD	LEN
	.IRP	X,<PRMLST>
$$$ARG=$$$ARG-1
	.WORD	X
	.ENDM
	.REPT	$$$ARG
	.WORD
	.ENDR
	.ENDC
	.ENDM
;
	.MACRO	SMSG$C	TGT,BUF,LEN,PRMLST,CS,ERR
	.MCALL	SMSG$,DIR$
	.IF	NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SMSG$	TGT,BUF,LEN,<PRMLST>
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM
;
	.MACRO	SMSG$S	TGT,BUF,LEN,PRMLST,ERR
	.MCALL	MVB$,MOV$,RVP$,DIR$
$$$ARG=0
$$$=0
	.IRP	X,<PRMLST>
$$$ARG=$$$ARG+1
	.ENDM
	.IF	NB TGT
	.IF	IDN TGT #SM.SER
	.IF	LT,$$$ARG-4
$$$=4-$$$ARG
	.REPT	$$$
	CLR	-(SP)
	.ENDR
	.ENDC
	.ENDC
	.ENDC
	RVP$	PRMLST
	MOV$	LEN
	MOV$	BUF
	MVB$	TGT
	MOV	(PC)+,-(SP)
	.BYTE	171.,4+$$$ARG+$$$
	DIR$	,ERR
	.ENDM


;+
;		'SNXC$'
;
; THE SNXC$ MACRO GENERATES A DPB FOR THE "SEND NEXT COMMAND"
; DIRECTIVE.
;
; MACRO CALL:	SNXC$	DEVICE,UNIT
;
; DESCRIPTION: THIS SNXC$ MACRO IS USED TO GENERATE THE DPB FOOR THE
; "SEND NEXT COMMAND" DIRECTIVE. IT IS USED TO INFORM THE TERMINAL
; DRIVER ON M-PLUS SYSTEMS TO SEND THE NEXT COMMAND TO THE CLI FOR
; TERMINAL "DEVICE'UNIT" WHEN THE LINE IS IN "SERIAL MODE".
;
;-
	.MACRO	SNXC$	DEVICE,UNIT
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	127.,3.

	.IF B	DEVICE
	.WORD	0
	.IFF
	$$$T2=.
	.ASCII	/DEVICE/
	.=$$$T2+2
	.ENDC

	.BYTE	UNIT
	.BYTE	0
	.ENDC
	.IF	NDF	S.NXDV
	.IRP	X,<,<S.NXDV,2>,<S.NXUN,1>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	SNXC$
;
	.MACRO	SNXC$C	DEVICE,UNIT,CS,ERR
	.MCALL	SNXC$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SNXC$	DEVICE,UNIT
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SNXC$C
;
	.MACRO	SNXC$S	DEVICE,UNIT,ERR
	.MCALL	DIR$,MOV$
	MOV$	UNIT
	MOV$	DEVICE
	MOV	(PC)+,-(SP)
	.BYTE	127.,3.
	DIR$	,ERR
	.ENDM	SNXC$S

;+
;		'SPEA$C'
;
; THE SPEA$C MACRO GENERATES A DPB FOR THE "SPECIFY PARITY ERROR
; AST" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER 
; SPECIFIED PSECT.
;
; MACRO CALL:	SPEA$C	AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY PARITY ERROR
; AST" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SFPA$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SPEA$ MACRO.
;
;-
	.MACRO	SPEA$C	AST,CS,ERR
	.MCALL	SPEA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SPEA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SPEA$C
;+
;		'SPEA$S'
;
; THE SPEA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY 
; PARITY ERROR AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SPEA$S	AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY
; PARITY ERROR AST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE SPEA$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SPEA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	165.,2
	DIR$	,ERR
	.ENDM	SPEA$S
;+
;		'SPEA$'
;
; THE SPEA$ MACRO GENERATES A DPB FOR THE "SPECIFY PARITY ERROR
; AST" DIRECTIVE.
;
; MACRO CALL:	SPEA$	AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY PARITY
; ERROR AST" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.PEAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SPEA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	165.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.PEAE
	.NLIST
	OFF$
	OFF$	S.PEAE,2
	.LIST
	.ENDC
	.ENDM	SPEA$

;+
;		'SPND$C'
;
; THE SPND$C MACRO GENERATES A DPB FOR THE "SUSPEND" DIRECTIVE IN A
; SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	SPND$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SUSPEND" DIRECTIVE
; IN THE CONTROL SECTION NAMED '$DPB$.'.  THIS MACRO THEN GENERATES A
; MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SPND$C	PSCT,ERR
	.MCALL	SPND$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SPND$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SPND$C

;+
;		'SPND$S'
;
; THE SPND$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SUSPEND"
; DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SPND$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB FOR
; THE "SUSPEND" DIRECTIVE ON THE STACK.  THEN IT GENERATES A MONITOR TRAP
; USING THE ERROR SERVICE ADDRESS AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SPND$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	45.,1
	DIR$	,ERR
	.ENDM	SPND$S

;+
;		'SPND$'
;
; THE SPND$ MACRO GENERATES A DPB FOR THE "SUSPEND" DIRECTIVE.
;
; MACRO CALL:	SPND$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SUSPEND" DIRECTIVE.
; THERE ARE NO ARGUMENTS.
;
;-
	.MACRO	SPND$
	.IF NDF $$$GLB
	.BYTE	45.,1
	.ENDC
	.ENDM	SPND$

;+
;		'SPRA$C'
;
; THE SPAR$C MACRO GENERATES A DPB FOR THE "SPECIFY POWER RECOVERY AST"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	SPRA$C	AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY POWER RECOVERY
; AST" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SPRA$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SPRA$ MACRO.
;
;-
	.MACRO	SPRA$C	AST,CS,ERR
	.MCALL	SPRA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SPRA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SPRA$C
;+
;		'SPRA$S'
;
; THE SPRA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY
; POWER RECOVERY AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SPRA$S	AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY POWER RECOVERY AST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE SPRA$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SPRA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	109.,2
	DIR$	,ERR
	.ENDM	SPRA$S

;+
;		'SPRA$'
;
; THE SPRA$ MACRO GENERATES A DPB FOR THE "SPECIFY POWER RECOVERY AST"
; DIRECTIVE.
;
; MACRO CALL:	SPRA$	AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY POWER RECOVERY
; AST" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.PRAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SPRA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	109.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.PRAE
	.NLIST
	OFF$
	OFF$	S.PRAE,2
	.LIST
	.ENDC
	.ENDM	SPRA$
 
;
; SPAWN A TASK
;
	.MACRO	SPWN$	TNAME,PN,PR,UGC,UMC,EFN,EAST,ESB,CMDLIN,CMDLEN,UNIT,DNAM
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.IF B	DNAM
	.BYTE	11.,13.
	.IFF
	.BYTE	11.,14.
	.ENDC
	R50$	TNAME
	.BLKW	3
	.BYTE	UMC,UGC
	.WORD	EFN
	.WORD	EAST
	.WORD	ESB
	.WORD	CMDLIN
	.WORD	CMDLEN
	.WORD	UNIT
	.IF NB	DNAM
$$$T2=.
	.ASCII	/DNAM/
.=$$$T2+2
	.ENDC
	.ENDC
	.IF	NDF	S.PWTN
	.IRP X,<,<S.PWTN,4>,<S.PWXX,6>,<S.PWUM,1>,<S.PWUG,1>,<S.PWEF,2>>
	OFF$	X
	.ENDM
	.IRP X,<<S.PWEA,2>,<S.PWES,2>,<S.PWCA,2>,<S.PWCL,2>,<S.PWVT,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<S.PWDN,2>>
	OFF$	X
	.ENDR
	$$$OST=256.*8.
	OFF$	SP.WX8
	.ENDC
	.ENDM	SPWN$
;
 .MACRO	SPWN$C TNAME,PN,PR,UGC,UMC,EFN,EAST,ESB,CMDLIN,CMDLEN,UNIT,DNAM,CS,ERR
	.MCALL	SPWN$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SPWN$	TNAME,,,UGC,UMC,EFN,EAST,ESB,CMDLIN,CMDLEN,UNIT,DNAM
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SPWN$C
;
 .MACRO SPWN$S TNAME,PN,PR,UGC,UMC,EFN,EAST,ESB,CMDLIN,CMDLEN,UNIT,DNAM,ERR
	.MCALL	DIR$,MOV$,MVB$,RFA$
	.IF NB	DNAM
	MOV$	DNAM
	.ENDC
	MOV$	UNIT
	MOV$	CMDLEN
	MOV$	CMDLIN
	MOV$	ESB
	MOV$	EAST
	MOV$	EFN
	MVB$	UMC,UGC
	CLR	-(SP)
	CLR	-(SP)
	CLR	-(SP)
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.IF B	DNAM
	.BYTE	11.,13.
	.IFF
	.BYTE	11.,14.
	.ENDC
	DIR$	,ERR
	.ENDM	SPWN$S

;+
;		'SRDA$C'
;
; THE SRDA$C MACRO GENERATES A DPB FOR THE "SPECIFY RECEIVE DATA AST"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	SRDA$C	AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY RECEIVE DATA
; AST" DIRECTIVE IN THE PROGRAM SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SRDA$ MACRO.  THIS MACRO THEN
; GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION
; NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR', IS
; DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SRDA$ MACRO.
;
;-
	.MACRO	SRDA$C	AST,CS,ERR
	.MCALL	SRDA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SRDA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SRDA$C
;+
;		'SRDA$S'
;
; THE SRDA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY
; RECEIVE DATA AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SRDA$S	AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY RECEIVE DATA AST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY THE
; INFORMATION DESCRIBED IN THE SRDA$ MACRO.  THIS MACRO ALSO GENERATES
; A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS
; DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SRDA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	107.,2
	DIR$	,ERR
	.ENDM	SRDA$S
;+
;		'SRDA$'
;
; THE SRDA$ MACRO GENERATES A DPB FOR THE "SPECIFY RECEIVE DATA AST"
; DIRECTIVE.
;
; MACRO CALL:	SRDA$	AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY RECEIVE DATA AST"
; DIRECTIVE.  THE ARGUMENT IS ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED VALUE
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE DPB
; ELEMENT:
;
;	S.RDAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB IS
; NOT GENERATED, AND THE SYMBOLIC OFFSET IS DEFINED GLOBALLY.
;
;-
	.MACRO	SRDA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	107.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.RDAE
	.NLIST
	OFF$
	OFF$	S.RDAE,2
	.LIST
	.ENDC
	.ENDM	SRDA$
 
;+
;		'SREA$C'
;
; THE SREA$C MACRO GENERATES A DPB FOR THE "SPECIFY REQUESTED EXIT AST"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	SREA$C	AST,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY REQUESTED EXIT
; AST" DIRECTIVE IN THE PROGRAM SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SREA$ MACRO.  THIS MACRO THEN
; GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION
; NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR', IS
; DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SREA$ MACRO.
;
;-
	.MACRO	SREA$C	AST,CS,ERR
	.MCALL	SREA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SREA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SREA$C
;+
;		'SREA$S'
;
; THE SREA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY
; REQUESTED EXIT AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SREA$S	AST,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY REQUESTED EXIT AST" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY THE
; INFORMATION DESCRIBED IN THE SREA$ MACRO.  THIS MACRO ALSO GENERATES
; A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS
; DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SREA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	167.,2
	DIR$	,ERR
	.ENDM	SREA$S
;+
;		'SREA$'
;
; THE SREA$ MACRO GENERATES A DPB FOR THE "SPECIFY REQUESTED EXIT AST"
; DIRECTIVE.
;
; MACRO CALL:	SREA$	AST
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SPECIFY REQUESTED EXIT AST"
; DIRECTIVE.  THE ARGUMENT IS ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED VALUE
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE DPB
; ELEMENT:
;
;	S.RDAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB IS
; NOT GENERATED, AND THE SYMBOLIC OFFSET IS DEFINED GLOBALLY.
;
;-
	.MACRO	SREA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	167.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.REAE
	.NLIST
	OFF$
	OFF$	S.REAE,2
	.LIST
	.ENDC
	.ENDM	SREA$

;
; SREF$/SREF$C/SREF$S - SEND BY REFERENCE
;
 
	.MACRO	SREF$	TASK,WDB,EFN
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	69.,5
	R50$	TASK
	.WORD	EFN
	.WORD	WDB
	.ENDC
	.IF NDF	S.RETN
	.IRP	X,<,<S.RETN,4>,<S.REEF,2>,<S.REBA,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	SREF$
 
 
	.MACRO	SREF$C	TASK,WDB,EFN,CS,ERR
	.MCALL	SREF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SREF$	TASK,WDB,EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SREF$C
 
 
	.MACRO	SREF$S	TSKADR,WDB,EFN,ERR
	.MCALL	DIR$,MOV$,RFA$
	MOV$	WDB
	MOV$	EFN
	RFA$	TSKADR
	MOV	(PC)+,-(SP)
	.BYTE	69.,5
	DIR$	,ERR
	.ENDM	SREF$S
 
 
;+
;		'SREX$C'
;
; THE SREX$C MACRO GENERATES A DPB FOR THE EXTENDED "SPECIFY
; REQUESTED EXIT AST" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR
; TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	SREX$C	AST,BUF,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE EXTENDED "SPECIFY
; REQUESTED EXIT AST" DIRECTIVE IN THE PROGRAM SECTION NAMED '$DPB$.'.
; THE DPB PARAMETERS ARE DESCRIBED IN THE SREX$ MACRO. THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM SECTION NAMED
; IN 'PSCT'. THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE
; DIR$ MACRO. THE GENERATION OF SYMBOLIC OFFSETS IS CONTROLLED BY THE
; SREX$ MACRO.
;
;-
	.MACRO	SREX$C	AST,BUF,CS,ERR
	.MCALL	SREX$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SREX$	AST,BUF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SREX$C

;+
;		'SREX$S'
;
; THE SREX$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE EXTENDED
; "SPECIFY REQUESTED EXIT AST" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SREX$S	AST,BUF,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; EXTENDED "SPECIFY REQUESTED EXIT AST" DIRECTIVE ON THE STACK. THE
; DPB ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY
; MUST SPECIFY THE INFORMATION DESCRIBED IN THE SREX$ MACRO. THIS
; MACRO ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE
; ADDRESS, 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SREX$S	AST,BUF,ERR
	.MCALL	MOV$,DIR$
	CLR	-(SP)
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	167.,3
	DIR$	,ERR
	.ENDM	SREX$S

;+
;		'SREX$'
;
; THE SREX$ MACRO GENERATES A DPB FOR THE EXTENDED "SPECIFY REQUESTED
; EXIT AST" DIRECTIVE.
;
; MACRO CALL:	SREX$	AST,BUF
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE EXTENDED "SPECIFY
; REQUESTED EXIT AST" DIRECTIVE. THE ARGUMENT IS ASSUMED TO HAVE THE
; FOLLOWING MEANING:
;
;	AST=AST SERVICE ENTRY ADDRESS.
;	BUF=RESERVED FOR FUTURE USE
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED VALUE
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO THE DPB
; ELEMENT:
;
;	S.REAE-(LENGTH 2 BYTES) AST ENTRY ADDRESS.
;
; NOTE THAT THE DPB LENGTH OF 3 WORDS IS USED TO DISTINGUISH THIS
; FORM OF THE DIRECTIVE FROM SREA$.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB
; IS NOT GENERATED, AND THE SYMBOLIC OFFSET IS DEFINED GLOBALLY.
;
;-
	.MACRO	SREX$	AST,BUF
	.MCALL	OFF$
	.IF NDF $$$GLB
	.BYTE	167.,3
	.WORD	AST
	.WORD	0
	.ENDC
	.IF NDF	S.REAE
	.NLIST
	OFF$
	OFF$	S.REAE,2
	.LIST
	.ENDC
	.ENDM	SREX$

;
; SRRA$/SRRA$C/SRRA$S - SPECIFY RECEIVE BY REFERENCE AST
;
 
	.MACRO	SRRA$	AST
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	21.,2
	.WORD	AST
	.ENDC
	.IF NDF	S.RRAE
	.NLIST
	OFF$
	OFF$	S.RRAE,2
	.LIST
	.ENDC
	.ENDM	SRRA$
 
 
	.MACRO	SRRA$C	AST,CS,ERR
	.MCALL	SRRA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SRRA$	AST
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SRRA$C
 
 
	.MACRO	SRRA$S	AST,ERR
	.MCALL	MOV$,DIR$
	MOV$	AST
	MOV	(PC)+,-(SP)
	.BYTE	21.,2
	DIR$	,ERR
	.ENDM	SRRA$S
 

;+
;		'STAF$C'
;
; THE STAF$C MACRO GENERATES A DPB FOR THE "SPECIFY CPU AFFINITY" 
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER 
; SPECIFIED PSECT.
;
; MACRO CALL	STAF$C	AFF,PSCT,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY CPU AFFINITY" 
;		DIRECTIVE IN A THE CONTROL SECTION '$DPB$.'.  THE DPB
;		PARAMETERS ARE DESCRIBED IN THE STAF$ MACRO.  THIS MACRO THEN
;		GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL 
;		SECTION.  THE ERROR SERVICE ADDRESS, 'ERR' IS DESCRIBED  
;		IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC OFFSETS IS 
;		CONTROLLED BY THE STAF$ MACRO.
;
;-
	.MACRO	STAF$C	AFF,CS,ERR
	.MCALL	STAF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	STAF$	AFF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	STAF$C
;+
;		'STAF$S'
;
; THE STAF$S MACRO GENERATES THE CODE TO PUSH A PDB FOR THE 
; "SPECIFY CPU AFFINITY" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	STAF$S	AFF,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY CPU AFFINITY" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS MUST 
; BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY THE 
; INFORMATION DESCRIBED IN THE STAF$ MACRO.
; THIS MACRO ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE
; ADDRESS 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	STAF$S	AFF,ERR
	.MCALL	DIR$,MOV$,AFF$
	AFF$
	MOV$	AFF
	MOV	(PC)+,-(SP)
	.BYTE	161.,2.
	DIR$	,ERR
	.ENDM	STAF$S
;+
;		'STAF$'
;
; THE STAF$ MACRO GENERATES A DPB FOR THE "SPECIFY CPU AFFINITY" 
; DIRECTIVE.
;
; MACRO CALL:	STAF$	AFF
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY CPU AFFINITY"
; DIRECTIVE.  THE ARGUMENT IS ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	AFF=DESIRED AFFINITY TO BE ADDED TO THE TASKS REQUIRED RUN MASK
;
; THE FOLLOWING SYMBOL IS LOCALLY DEFINED WITH ITS ASSIGNED VALUE
; EQUAL TO THE BYTE OFFSET FROM THE START OF THE DBP TO THE FIRST ELEMT:
;
;	S.AFAF-(LENGTH 2 BYTES) AFFINITY
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GBL' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
 
	.MACRO	STAF$	AFF
	.MCALL	AFF$,OFF$
	.IF NDF	$$$GBL
	AFF$
	.BYTE	161.,2.
	.WORD	AFF
	.ENDC
	.IF NDF S.AFAF
	.NLIST
	OFF$	
	OFF$	S.AFAF,2
	.LIST
	.ENDC
	.ENDM	STAF$

;+
;		'STIM$C'
;
; THE STIM$C MACRO GENERATES A DPB FOR THE "SET SYSTEM TIME" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	STIM$C	NEWTIM,OLDTIM,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SET SYSTEM TIME"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'. THE DPB PARAMETERS
; ARE DESCRIBED IN THE STIM$ MACRO. THIS MACRO THEN GENERATES A
; MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED 'PSCT'.
; THE ERROR SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
; THE GENERATION OF SYMBOLIC OFFSETS IS CONTROLLED BY THE STIM$ MACRO.
;
;-
	.MACRO	STIM$C	NBUF,OBUF,CS,ERR
	.MCALL	STIM$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	STIM$	NBUF,OBUF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	STIM$C

;+
;		'STIM$S'
;
; THE STIM$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SET SYSTEM
; TIME" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	STIM$S	NEWTIM,OLDTIM,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SET SYSTEM TIME" DIRECTIVE ON THE STACK. THE DPB ARGUMENTS MUST
; BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY THE
; INFORMATION DESCRIBED IN THE STIM$ MACRO. THIS MACRO ALSO GENERATES
; A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR', AS DESCRIBED
; IN THE DIR$ MACRO. THIS MACRO ALSO GENERATES THE SYMBOLIC OFFSETS
; RELATIVE TO THE TIME PARAMETERS BUFFERS AS DESCRIBED IN THE STIM$
; MACRO.
;
;-
	.MACRO	STIM$S	NBUF,OBUF,ERR
	.MCALL	MOV$,DIR$,OFF$
	MOV$	OBUF
	MOV$	NBUF
	MOV	(PC)+,-(SP)
	.BYTE	61.,3
	DIR$	,ERR
	.IF NDF	S.TIYR
	.NLIST
$$$OST=0
	.IRP	X,<<S.TIYR,2>,<S.TIMO,2>,<S.TIDA,2>,<S.TIHR,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<S.TIMI,2>,<S.TISC,2>,<S.TICT,2>,<S.TICP,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	STIM$S

;+
;		'STIM$'
;
; THE STIM$ MACRO GENERATES A DPB FOR THE "SET SYSTEM TIME" DIRECTIVE.
;
; MACRO CALL:	STIM$	NEWTIM,OLDTIM
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "SET SYSTEM TIME"
; DIRECTIVE. THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING MEANINGS:
;
;	NEWTIM=ADDRESS OF 8-WORD NEW TIME BUFFER
;
;	OLDTIM=ADDRESS OF 8-WORD BUFFER TO DUMP OLD SYSTEM TIME
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE FROM THE START OF THE DPB
; TO THE RESPECTIVE DPB ELEMENTS:
;
;	S.TIBA-(LENGTH 2 BYTES) NEW TIME BUFFER ADDRESS
;
;	S.TIBO-(LENGTH 2 BYTES) OLD TIME BUFFER ADDRESS
;
; THE FOLLOWING OFFSETS ARE ASSIGNED RELATIVE TO THE START OF THE
; TIME PARAMETERS BUFFERS:
;
;	S.TIYR-(2) YEAR,
;	S.TIMO-(2) MONTH,
;	S.TIDA-(2) DAY,
;	S.TIHR-(2) HOUR,
;	S.TIMI-(2) MINUTE,
;	S.TISC-(2) SECOND,
;	S.TICT-(2) CLOCK TICK,
;	S.TICP-(2) CLOCK TICKS PER SECOND.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE DPB
; IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	STIM$	NBUF,OBUF
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	61.,3
	.WORD	NBUF
	.WORD	OBUF
	.ENDC
	.IF NDF	S.TIBA
	.NLIST
	OFF$
	OFF$	S.TIBA,2
	OFF$	S.TIBO,2
	.IF NDF	S.TIYR
$$$OST=0
	.IRP	X,<<S.TIYR,2>,<S.TIMO,2>,<S.TIDA,2>,<S.TIHR,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<S.TIMI,2>,<S.TISC,2>,<S.TICT,2>,<S.TICP,2>>
	OFF$	X
	.ENDM
	.ENDC
	.LIST
	.ENDC
	.ENDM	STIM$


;
; STOP FOR LOGICAL 'OR' OF EVENT FLAGS
;
	.MACRO	STLO$	GRP,MSK
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	137.,3
	.WORD	GRP
	.WORD	MSK
	.ENDC
	.IF	NDF	S.TLGR
	OFF$
	OFF$	S.TLGR,2
	OFF$	S.TLMS,2
	.ENDC
	.ENDM	STLO$
;
	.MACRO	STLO$C	GRP,MSK,CS,ERR
	.MCALL	STLO$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	STLO$	GRP,MSK
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	STLO$C
;
	.MACRO	STLO$S	GRP,MSK,ERR
	.MCALL	DIR$,MOV$
	MOV$	MSK
	.IF NB GRP
	MOV	#GRP,-(SP)
	.IFF
	CLR	-(SP)
	.ENDC
	MOV	(PC)+,-(SP)
	.BYTE	137.,3
	DIR$	,ERR
	.ENDM	STLO$S
;
; STOP FOR A SINGLE EVENT FLAG
;
	.MACRO	STSE$	EFN
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	135.,2
	.WORD	EFN
	.ENDC
	.IF	NDF	S.TSEF
	OFF$
	OFF$	S.TSEF,2
	.ENDC
	.ENDM	STSE$
;
	.MACRO	STSE$C	EFN,CS,ERR
	.MCALL	STSE$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	STSE$	EFN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	STSE$C
;
	.MACRO	STSE$S	EFN,ERR
	.MCALL	DIR$,MOV$
	MOV$	EFN
	MOV	(PC)+,-(SP)
	.BYTE	135.,2
	DIR$	,ERR
	.ENDM	STSE$S
;
;STOP
;
	.MACRO	STOP$
	.IF	NDF	$$$GLB
	.BYTE	131.,1
	.ENDC
	.ENDM	STOP$
;
	.MACRO	STOP$C	CS,ERR
	.MCALL	STOP$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	STOP$
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	STOP$C
;
	.MACRO	STOP$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	131.,1
	DIR$	,ERR
	.ENDM	STOP$S

;+
;		'SVDB$C'
;
; THE SVDB$C MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR TABLE FOR
; DEBUGGING AID" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE
; USER SPECIFIED PSECT.
;
; MACRO CALL:	SVDB$C	ADR,LEN,PSCT,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR
; TABLE FOR DEBUGGING AID" DIRECTIVE IN THE CONTROL SECTION '$DPB$.'.
; THE DPB PARAMETERS ARE DESCRIBED IN THE SVDB$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SVDB$ MACRO.
;
;-
	.MACRO	SVDB$C	AD,LN,CS,ERR
	.MCALL	SVDB$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SVDB$	AD,LN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SVDB$C
;+
;		'SVDB$S'
;
; THE SVDB$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY SST VECTOR TABLE FOR DEBUGGING AID" DIRECTIVE ON
; THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SVDB$S	ADR,LEN,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "SPECIFY SST VECTOR TABLE FOR DEBUGGING AID" DIRECTIVE ON THE STACK.
; THE DPB ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND
; THEY MUST SPECIFY THE INFORMATION DESCRIBED IN THE SVDB$ MACRO.
; THIS MACRO ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE
; ADDRESS, 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SVDB$S	AD,LN,ERR
	.MCALL	MOV$,DIR$
	MOV$	LN
	MOV$	AD
	MOV	(PC)+,-(SP)
	.BYTE	103.,3
	DIR$	,ERR
	.ENDM	SVDB$S
;+
;		'SVDB$'
;
; THE SVDB$ MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR TABLE FOR
; DEBUGGING AID" DIRECTIVE.
;
; MACRO CALL:	SVDB$	ADR,LEN
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY SST
; VECTOR TABLE FOR DEBUGGING AID" DIRECTIVE.  THE ARGUMENTS ARE
; ASSUMED TO HAVE THE FOLLOWING MEANINGS:
;
;	ADR=ADDRESS OF SST VECTOR TABLE,
;	LEN=LENGTH OF (NUMBER OF ENTRIES IN) TABLE.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.VDTA-(LENGTH 2 BYTES) TABLE ADDRESS,
;	S.VDTL-(2) TABLE LENGTH.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SVDB$	A,L
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	103.,3
	.WORD	A
	.WORD	L
	.ENDC
	.IF NDF	S.VDTA
	.NLIST
	.IRP	X,<,<S.VDTA,2>,<S.VDTL,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	SVDB$

;+
;		'SVTK$C'
;
; THE SVTK$C MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR TABLE FOR
; TASK" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	SVTK$C	ADR,LEN,PSCT,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR TABLE
; FOR TASK" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE SVTK$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE SVTK$ MACRO.
;
;-
	.MACRO	SVTK$C	ADR,LEN,CS,ERR
	.MCALL	SVTK$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SVTK$	ADR,LEN
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SVTK$C
;+
;		'SVTK$S'
;
; THE SVTK$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "SPECIFY SST
; VECTOR TABLE FOR TASK" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	SVTK$S	ADR,LEN,ERR
;
; DESCRIPTION:  THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "SPECIFY SST VECTOR TABLE FOR TASK" DIRECTIVE ON THE STACK.
; THE DPB ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN THE SVTK$ MACRO.
; THIS MACRO ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE
; ADDRESS, 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	SVTK$S	ADR,LEN,ERR
	.MCALL	MOV$,DIR$
	MOV$	LEN
	MOV$	ADR
	MOV	(PC)+,-(SP)
	.BYTE	105.,3
	DIR$	,ERR
	.ENDM	SVTK$S

;+
;		'SVTK$'
;
; THE SVTK$ MACRO GENERATES A DPB FOR THE "SPECIFY SST VECTOR TABLE
; FOR TASK" DIRECTIVE.
;
; MACRO CALL:	SVTK$	ADR,LEN
;
; DESCRIPTION:  THIS MACRO GENERATES A DPB FOR THE "SPECIFY SST
; VECTOR TABLE FOR TASK" DIRECTIVE. THE ARGUMENTS ARE ASSUMED TO
; HAVE THE FOLLOWING MEANINGS:
;
;	ADR=ADDRESS OF SST VECTOR TABLE,
;	LEN=LENGTH OF (NUMBER OF ENTRIES IN) TABLE.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.VTTA-(LENGTH 2 BYTES) TABLE ADDRESS,
;	S.VTTL-(2) TABLE LENGTH.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	SVTK$	TA,TL
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	105.,3
	.WORD	TA
	.WORD	TL
	.ENDC
	.IF NDF	S.VTTA
	.NLIST
	.IRP	X,<,<S.VTTA,2>,<S.VTTL,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	SVTK$

;
;
; SWITCH STATE
;
	.MACRO	SWST$	BASE,ADDR
	.MCALL	OFF$
	.IF	NDF	$$$GLB
	.BYTE	175.,3.		;DIC and DPB length
	.WORD	BASE		;BASE
	.WORD	ADDR		;Address of routine
	.ENDC
	.IF	NDF	S.WBAS
	.IRP	X,<,<S.WBAS,2>,<S.WADD,2>>
	OFF$	X
	.ENDM
	$$$OST=2
	.IRP	X,<<S.WSR0,2>,<S.WSR1,2>,<S.WSR2,2>,<S.WSR3,2>,<S.WSR4,2>>
	OFF$	X
	.ENDM
	OFF$	S.WSR5,2
	.ENDC
	.ENDM	SWST$
;
	.MACRO	SWST$C	BASE,ADDR,CS,ERR
	.MCALL	SWST$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	SWST$	BASE,ADDR
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	SWST$C
;
	.MACRO	SWST$S	BASE,ADDR,ERR
	.MCALL	DIR$,MOV$
	MOV$	ADDR
	MOV$	BASE
	MOV	(PC)+,-(SP)
	.BYTE	175.,3.
	DIR$	,ERR
	.ENDM	SWST$S


;+
;		'TLON$'
;
; THE TLON$ MACRO GENERATES DPB FOR THE TRANSLATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	TLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,10.	;DIC and DPB length
	.BYTE	13.		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	TBMSK		;Table inhibit mask
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.WORD	RSIZE		;Address of a word into which is returned
				;the size in bytes of equivalence name string
	.WORD	RTBMOD		;Address of a word into which is returned
				;the type and Modifier of the translation performed
	.WORD	STATUS		;Address of a data block to hold the LNB status
	.ENDC
	.IF	NDF	T.LFUN
	.IRP	X,<,<T.LFUN,1>,<T.LMOD,1>,<T.LTBL,2>,<T.LLNS,2>,<T.LLSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<T.LENS,2>,<T.LESZ,2>,<T.LRSZ,2>,<T.LRTM,2>,<T.LSTS,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	TLON$
;+
;		'TLON$C'
;
; THE TLON$C MACRO GENERATES DPB FOR THE TRANSLATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	TLON$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLON$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,CS,ERR
	.MCALL	TLON$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	TLON$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	TLON$C
;+
;		'TLON$S'
;
; THE TLON$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE TRANSLATE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	TLON$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLON$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	STATUS
	MOV$	RTBMOD
	MOV$	RSIZE
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	TBMSK,#0
	MVB$	#13.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,10.
	DIR$	,ERR
	.ENDM	TLON$S
;+
;		'TLOG$'
;
; THE TLOG$ MACRO GENERATES DPB FOR THE TRANSLATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	TLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.MCALL	OFF$,LNMOD$
	.IF	NDF	$$$GLB
	LNMOD$
	.BYTE	207.,10.	;DIC and DPB length
	.BYTE	9.		;Subfunction
	.BYTE	MOD		;Modifier of logical name
	.WORD	TBMSK		;Table inhibit mask
	.WORD	LNS		;Address of logical name string
	.WORD	LNSSZ		;Byte count of logical name string
	.WORD	ENS		;Address of equivalence name string
	.WORD	ENSSZ		;Byte count of equivalence name string
	.WORD	RSIZE		;Address of a word into which is returned
				;the size in bytes of equivalence name string
	.WORD	RTBMOD		;Address of a word into which is returned
				;the type and Modifier of the translation performed
	.WORD	STATUS		;Address of a data block to hold the LNB status
	.ENDC
	.IF	NDF	T.LFUN
	.IRP	X,<,<T.LFUN,1>,<T.LMOD,1>,<T.LTBL,2>,<T.LLNS,2>,<T.LLSZ,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<T.LENS,2>,<T.LESZ,2>,<T.LRSZ,2>,<T.LRTM,2>,<T.LSTS,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	TLOG$
;+
;		'TLOG$C'
;
; THE TLOG$C MACRO GENERATES DPB FOR THE TRANSLATE LOGICAL NAME DIRECTIVE.
;
; MACRO CALL:	TLOG$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM
; IN THE CONTROL SECTION NAMED '$DPB$.'  THIS MACRO GENERATES A MONITOR
; TRAP IN THE ORIGINAL PROGRAM CONTROL SECTION NAMED IN 'PSCT'.  THE ERROR
; SERVICE ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLOG$C	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,CS,ERR
	.MCALL	TLOG$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	TLOG$	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	TLOG$C
;+
;		'TLOG$S'
;
; THE TLOG$S MACRO GENERATES THE CODE TO PUSH  A DPB FOR THE TRANSLATE LOGICAL 
; NAME DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	TLOG$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD
;
; DESCRIPTION: THIS MACRO GENERATES THE DPB NECESSARY TO TRANSLATE A LOGICAL
; NAME BLOCK IN ONE OF THE THREE HIERARCHICAL LOGICAL TABLES IN THE SYSTEM.
; IDENTICAL LOGICAL NAMES IN THE SAME TABLE CAN BE IDENTIFIED WITH THE 
; NUMERIC MOD QUALIFIER.
;
;-
	.MACRO	TLOG$S	MOD,TBMSK,STATUS,LNS,LNSSZ,ENS,ENSSZ,RSIZE,RTBMOD,ERR
	.MCALL	DIR$,MOV$,MVB$,LNMOD$
	LNMOD$
	MOV$	STATUS
	MOV$	RTBMOD
	MOV$	RSIZE
	MOV$	ENSSZ
	MOV$	ENS
	MOV$	LNSSZ
	MOV$	LNS
	MVB$	TBMSK,#0
	MVB$	#9.,MOD
	MOV	(PC)+,-(SP)
	.BYTE	207.,10.
	DIR$	,ERR
	.ENDM	TLOG$S

;+
;		'ULGF$C'
;
; THE ULGF$C MACRO GENERATES A DPB FOR THE "UNLOCK GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN
; THE USER SPECIFIED PSECT.
;
; MACRO CALL:	ULGF$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "UNLOCK GROUP
; GLOBAL EVENT FLAGS" DIRECTIVE IN THE CONTROL SECION NAMED '$DPB$.'.
; THE DPB PARAMETERS ARE DESCRIBED IN THE ULGF$ MACRO. THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'. THE ERROR SERVICE ADDRESS, 'ERR', IS
; DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ULGF$C	CS,ERR
	.MCALL	ULGF$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D$
$$$=.
	.IFTF
	ULGF$
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	ULGF$C

;+
;		'ULGF$S'
;
; THE ULGF$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "UNLOCK
; GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	ULGF$S	ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "UNLOCK GROUP GLOBAL EVENT FLAGS" DIRECTIVE ON THE STACK. THIS MACRO
; ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS, 'ERR',
; AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	ULGF$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	159.,1
	DIR$	,ERR
	.ENDM	ULGF$S

;+
;		'ULGF$'
;
; THE ULGF$ MACRO GENERATES A DPB FOR THE "UNLOCK GROUP GLOBAL EVENT
; FLAGS" DIRECTIVE.
;
; MACRO CALL:	ULGF$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "UNLOCK GROUP GLOBAL
; EVENT FLAGS" DIRECTIVE. IF THE MACRO IS INVOKED WITH THE SYMBOL
; '$$$GLB' DEFINED, THE DPB IS NOT GENERATED.
;
;-
	.MACRO	ULGF$
	.IF NDF	$$$GLB
	.BYTE	159.,1
	.ENDC
	.ENDM	ULGF$


 
;
; UMAP$/UMAP$C/UMAP$S - UNMAP ADDRESS WINDOW
;
 
	.MACRO	UMAP$	WDB
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	123.,2
	.WORD	WDB
	.ENDC
	.IF NDF	U.MABA
	OFF$
	OFF$	U.MABA,2
	.ENDC
	.ENDM	UMAP$
 
 
	.MACRO	UMAP$C	WDB,CS,ERR
	.MCALL	UMAP$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	UMAP$	WDB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	UMAP$C
 
 
	.MACRO	UMAP$S	WDB,ERR
	.MCALL	DIR$,MOV$
	MOV$	WDB
	MOV	(PC)+,-(SP)
	.BYTE	123.,2
	DIR$	,ERR
	.ENDM	UMAP$S
 
;
; UNSTOP TASK
;
	.MACRO	USTP$	TNAME
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	133.,3
	R50$	TNAME
	.ENDC
	.IF	NDF	U.STTN
	OFF$
	OFF$	U.STTN,2
	.ENDC
	.ENDM	USTP$
;
	.MACRO	USTP$C	TNAME,CS,ERR
	.MCALL	USTP$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	USTP$	TNAME
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	USTP$C
;
	.MACRO	USTP$S	TNAME,ERR
	.MCALL	DIR$,RFA$
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	133.,3
	DIR$	,ERR
	.ENDM	USTP$S

;		'VRCD$C'
;
; THE VRCD$C MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	VRCD$C	TASK,BUFADR,BUFLEN,TI,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE VRCD$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE VRCD$ MACRO.
;
;-
	.MACRO	VRCD$C	TN,BA,BL=13.,TI,CS,ERR
	.MCALL	VRCD$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	VRCD$	TN,BA,BL,TI
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	VRCD$C
;+
;		'VRCD$S'
;
; THE VRCD$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "VARIABLE LENGTH RECEIVE DATA" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	VRCD$S	TSKNAMADR,BUFADR,BUFLEN,TI,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "VARIABLE LENGTH RECEIVE DATA" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE VRCD$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	VRCD$S	TN,BA,BL=#13.,TI,ERR
	.MCALL	MOV$,DIR$, RFA$
	MOV$	TI
	MOV$	BL
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	75.,6.
	DIR$	,ERR
	.ENDM	VRCD$S

;+
;		'VRCD$'
;
; THE VRCD$ MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA" DIRECTIVE.
;
; MACRO CALL:	VRCD$	TASK,BUFADR,BUFLEN,TI
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=SENDER TASK NAME,
;	BUFADR=ADDRESS OF BUFFER.
;	BUFLEN=NUMBER OF WORDS IN BUFFER.
;	TI=ADDRESS TO STORE TI.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.VDTN-(LENGTH 4 BYTES) TASK NAME,
;	R.VDBA-(2) BUFFER ADDRESS.
;	R.VDBL-(2) BUFFER SIZE IN WORDS.
;	R.VDTI-(2) TI ADDRESS.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	VRCD$	TN,BA,BL=13.,TI
	.MCALL	OFF$, R50$
	.IF NDF	$$$GLB
	.BYTE	75.,6.
	R50$	TN
	.WORD	BA
	.WORD	BL
	.WORD	TI
	.ENDC
	.IF NDF	R.VDTN
	.NLIST
	.IRP	X,<,<R.VDTN,4>,<R.VDBA,2>,<R.VDBL,2>,<R.VDTI,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	VRCD$

;		'VRCS$C'
;
; THE VRCS$C MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	VRCS$C	TASK,BUFADR,BUFLEN,TI,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR
; EXIT" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE VRCS$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE VRCS$ MACRO.
;
;-
	.MACRO	VRCS$C	TN,BA,BL=13.,TI,CS,ERR
	.MCALL	VRCS$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	VRCS$	TN,BA,BL,TI
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	VRCS$C
;+
;		'VRCS$S'
;
; THE VRCS$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	VRCS$S	TSKNAMADR,BUFADR,BUFLEN,TI,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE VRCS$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DEFINED IN THE DIR$ MACRO.
;
;-
	.MACRO	VRCS$S	TN,BA,BL=#13.,TI,ERR
	.MCALL	MOV$,DIR$, RFA$
	MOV$	TI
	MOV$	BL
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	139.,6.
	DIR$	,ERR
	.ENDM	VRCS$S
;+
;		'VRCS$'
;
; THE VRCS$ MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE.
;
; MACRO CALL: 	VRCS$	TASK,BUFADR,BUFLEN,TI
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=SENDER TASK NAME,
;	BUFADR=ADDRESS OF FIFTEEN WORD BUFFER.
;	BUFLEN=SIZE OF BUFFER IN WORDS.
;	TI=ADDRESS TO STORE TI
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.VSTN-(LENGTH 4 BYTES) TASK NAME,
;	R.VSBA-(2) BUFFER ADDRESS.
;	R.VSBL-(2) BUFFER LENGTH.
;	R.VSTI-(2) ADDRESS IN WHICH TO STORE TI.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-

	.MACRO	VRCS$	TN,BA,BL=13.,TI
	.MCALL	OFF$, R50$
	.IF NDF	$$$GLB
	.BYTE	139.,6.
	R50$	TN
	.WORD	BA
	.WORD	BL
	.WORD	TI
	.ENDC
	.IF NDF	R.VSTN
	.NLIST
	.IRP	X,<,<R.VSTN,4>,<R.VSBA,2>,<R.VSBL,2>,<R.VSTI,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	VRCS$

;+
;		'VRCX$C'
;
; THE VRCX$C MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	VRCX$C	TASK,BUFADR,BUFLEN,TI,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR
; EXIT" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE VRCX$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE VRCX$ MACRO.
;
;-
	.MACRO	VRCX$C	TN,BA,BL=13.,TI,CS,ERR
	.MCALL	VRCX$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	VRCX$	TN,BA,BL,TI
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	VRCX$C
;+
;		'VRCX$S'
;
; THE VRCX$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	VRCX$S	TSKNAMADR,BUFADR,BUFLEN,TI,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE VRCX$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DEFINED IN THE DIR$ MACRO.
;
;-
	.MACRO	VRCX$S	TN,BA,BL=#13.,TI,ERR
	.MCALL	MOV$,DIR$, RFA$
	MOV$	TI
	MOV$	BL
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	77.,6.
	DIR$	,ERR
	.ENDM	VRCX$S
;+
;		'VRCX$'
;
; THE VRCX$ MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT" DIRECTIVE.
;
; MACRO CALL: 	VRCX$	TASK,BUFADR,BUFLEN,TI
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH RECEIVE DATA OR EXIT"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=SENDER TASK NAME,
;	BUFADR=ADDRESS OF BUFFER.
;	BUFLEN=LENGTH OF BUFFER IN WORDS.
;	TI=ADDRESS IN WHICH TO STORE TI.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	R.VXTN-(LENGTH 4 BYTES) TASK NAME,
;	R.VXBA-(2) BUFFER ADDRESS.
;	R.VXBL-(2) BUFFER LENGTH.
;	R.VXTI-(2) ADDRESS IN WHCIH TO STORE TI.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-

	.MACRO	VRCX$	TN,BA,BL=13.,TI
	.MCALL	OFF$, R50$
	.IF NDF	$$$GLB
	.BYTE	77.,6.
	R50$	TN
	.WORD	BA
	.WORD	BL
	.WORD	TI
	.ENDC
	.IF NDF	R.VXTN
	.NLIST
	.IRP	X,<,<R.VXTN,4>,<R.VXBA,2>,<R.VXBL,2>,<R.VXTI,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	VRCX$

;		'VSDA$C'
;
; THE VSDA$C MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH SEND DATA" DIRECTIVE
; IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	VSDA$C	TASK,BUFADR,BUFLEN,EFN,SNDPRI,TI,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH SEND DATA"
; DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE VSDA$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IN CONTROLLED BY THE VSDA$ MACRO.
;
;-
	.MACRO	VSDA$C	TN,BA,BL=13.,EFN,SPRI,TI,CS,ERR
	.MCALL	VSDA$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	VSDA$	TN,BA,BL,EFN,SPRI,TI
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	VSDA$C
;+
;		'VSDA$S'
;
; THE VSDA$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "VARIABLE LENGTH SEND DATA" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	VSDA$S	TSKNAMADR,BUFADR,BUFLEN,EFN,SPRI,TI,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "VARIABLE LENGTH SEND DATA" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE VSDA$ MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP.  USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	VSDA$S	TN,BA,BL=#13.,EFN,SPRI,TI,ERR
	.MCALL	MOV$,RFA$,DIR$
	MOV$	TI
	MOV$	SPRI
	MOV$	BL
	MOV$	EFN
	MOV$	BA
	RFA$	TN
	MOV	(PC)+,-(SP)
	.BYTE	71.,8.
	DIR$	,ERR
	.ENDM	VSDA$S

;+
;		'VSDA$'
;
; THE VSDA$ MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH SEND DATA" DIRECTIVE.
;
; MACRO CALL:	VSDA$	TASK,BUFADR,BUFLEN,EFN,SPRI,TI
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "VARIABLE LENGTH SEND DATA"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING
; MEANINGS:
;
;	TASK=RECEIVER TASK NAME,
;	BUFADR=ADDRESS OF THIRTEEN WORD DATA BUFFER,
;	EFN=EVENT FLAG NUMBER.
;	BUFLEN=LENGTH OF BUFFER IN WORDS.
;	SPRI=PRIORITY OF SEND.
;	TI=TI INDICATOR.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	S.DATN-(LENGTH 4 BYTES) TASK NAME,
;	S.DABA-(2) BUFFER ADDRESS,
;	S.DAEF-(2) EVENT FLAG NUMBER.
;	S.DABL-(2) BUFFER LENGTH.
;	S.DASP-(2) SEND PRIORITY.
;	S.DATI-(2) TI INDICATOR.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	VSDA$	TN,BA,BL=13.,EFN,SPRI,TI
	.MCALL	R50$,OFF$
	.IF NDF	$$$GLB
	.BYTE	71.,8.
	R50$	TN
	.WORD	BA
	.WORD	EFN
	.WORD	BL
	.WORD	SPRI
	.WORD	TI
	.ENDC
	.IF NDF	S.DABL
	.NLIST
	.IRP	X,<,<S.DATN,4>,<S.DABA,2>,<S.DAEF,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<S.DABL,2>,<S.DASP,2>,<S.DATI,2>>
	OFF$	X
	.ENDM
	.LIST
	.ENDC
	.ENDM	VSDA$
	
;
; VARIABLE SEND,REQUEST, AND CONNECT
;
	.MACRO	VSRC$	TNAME,BUF,BUFLEN,EFN,EAST,ESB
	.MCALL	OFF$,R50$
	.IF	NDF	$$$GLB
	.BYTE	141.,8.
	R50$	TNAME
	.WORD	BUF
	.WORD	EFN
	.WORD	BUFLEN
	.WORD	EAST
	.WORD	ESB
	.ENDC
	.IF	NDF	V.SRTN
	.IRP	X,<,<V.SRTN,4>,<V.SRBF,2>,<V.SREF,2>,<V.SRBL,2>,<V.SREA,2>,<V.SRES,2>>
	OFF$	X
	.ENDM
	.ENDC
	.ENDM	VSRC$
;
	.MACRO	VSRC$C	TNAME,BUF,BUFLEN,EFN,EAST,ESB,CS,ERR
	.MCALL	VSRC$,DIR$
	.IF	NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	VSRC$	TNAME,BUF,BUFLEN,EFN,EAST,ESB
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	VSRC$C
;
	.MACRO	VSRC$S	TNAME,BUF,BUFLEN,EFN,EAST,ESB,ERR
	.MCALL	DIR$,MOV$,RFA$,MVB$
	MOV$	ESB
	MOV$	EAST
	MOV$	BUFLEN
	MOV$	EFN
	MOV$	BUF
	RFA$	TNAME
	MOV	(PC)+,-(SP)
	.BYTE	141.,8.
	DIR$	,ERR
	.ENDM	VSRC$S

;
; WDBBK$ - GENERATE A WINDOW DEFINITION BLOCK
;
 
	.MACRO	WDBBK$	APR,SIZ,RID,OFF,LEN,STS,SRB
 
	.MCALL	WDBDF$
	WDBDF$			;DEFINE WINDOW DEFINITION BLOCK SYMBOLS
 
	.BYTE	0,APR		;WINDOW ID / BASE APR.
	.WORD	0		;VIRTUAL BASE ADDRESS (BYTES)
	.WORD	SIZ		;WINDOW SIZE (32W BLOCKS)
	.WORD	RID		;REGION ID
	.WORD	OFF		;OFFSET IN PARTITION (32W BLOCKS)
	.WORD	LEN		;LENGTH TO MAP (32W BLOCKS)
	.WORD	STS		;STATUS WORD
	.WORD	SRB		;SEND/RECEIVE BUFFER VIRTUAL ADDRESS
 
	.ENDM	WDBBK$
 
 
 
;
; WDBDF$ - DEFINE THE WINDOW DEFINITION BLOCK SYMBOLS
;
 
	.MACRO	WDBDF$	GBL
;
; WINDOW DEFINITION BLOCK OFFSETS
;
	.MCALL	.BLKW.,.BLKB.,.BLK.
	.BLK.
	.BLKB.	1,W.NID,GBL	;WINDOW ID
	.BLKB.	1,W.NAPR,GBL	;BASE APR
	.BLKW.	1,W.NBAS,GBL	;VIRTUAL BASE ADDRESS (BYTES)
	.BLKW.	1,W.NSIZ,GBL	;WINDOW SIZE (32W BLOCKS)
	.BLKW.	1,W.NRID,GBL	;REGION ID
	.BLKW.	1,W.NOFF,GBL	;OFFSET IN PARTITION (32W BLOCKS)
	.BLKW.	1,W.NLEN,GBL	;LENGTH TO MAP (32W BLOCKS)
	.BLKW.	1,W.NSTS,GBL	;WINDOW STATUS WORD
	.BLKW.	1,W.NSRB,GBL	;SEND/RECEIVE BUFFER VIRTUAL ADDR (BYTES)
	.BLKW.	0,W.NLGH,GBL	;LENGTH OF WINDOW DEFINITION BLOCK
;
; WINDOW STATUS WORD SYMBOLS
;
 
	.IF IDN	<DEF$G>,<GBL>
 
	.GLOBL	WS.CRW,WS.UNM,WS.ELW,WS.RRF,WS.64B,WS.SIS
	.GLOBL	WS.MAP,WS.RCX,WS.DEL,WS.EXT,WS.WRT,WS.RED
	.GLOBL	WS.BPS,WS.NBP,WS.UDS,WS.NAT,WS.RES
 
	.ENDC
 
 
WS.CRW=^O<100000>		;ADDRESS WINDOW WAS SUCCESSFULLY CREATED
WS.UNM=^O<40000>		;ONE OR MORE WINDOWS WERE UNMAPPED IN
				;CREATE ADDRESS WINDOW OR MAP.
WS.ELW=^O<20000>		;ONE OR MORE WINDOWS WERE ELIMINATED IN
				;CREATE ADDRESS WINDOW
WS.RRF=^O<10000>		;REFERENCE WAS SUCCESSFULLY RECEIVED
 
WS.BPS=^O<4000>			;DO NOT BYPASS CACHE ON MAP
WS.NBP=^O<4000>			;DO NOT BYPASS CACHE ON CRAW
WS.RES=^O<2000>			;MAP ONLY IF RESIDENT
WS.NAT=^O<1000>			;CREATE ATT DESCR ONLY IF NECESSARY
WS.64B=^O<400>			;64 BYTE ALIGNMENT ALLOWED
WS.MAP=^O<200>			;MAP AFTER CREATE WINDOW OR RECEIVE BY REF
WS.RCX=^O<100>			;EXIT IF NO REFERENCES TO RECEIVE
WS.SIS=^O<40>			;CREATE WINDOW IN SUPERVISOR I SPACE
WS.UDS=^O<20>			;CREATE WINDOW IN USER D SPACE
WS.DEL=^O<10>			;SEND WITH DELETE ACCESS
WS.EXT=^O<4>			;SEND WITH EXTEND ACCESS
WS.WRT=^O<2>			;SEND WITH WRITE ACCESS OR MAP WITH WRITE ACCESS
WS.RED=^O<1>			;SEND WITH READ ACCESS
WS.EDS=WS.SIS!WS.UDS		;EFFECTIVE DATA SPACE
;
; REDEFINE MACRO TO NULL
;
	.MACRO	WDBDF$	X
	.ENDM
 
	.ENDM	WDBDF$
 
;+
;			'WIMP$C'
;
; THE WIMP$C MACRO GENERATES A DPB FOR THE "WHAT'S IN MY PROFESSIONAL"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER
; SPECIFIED PROGRAM PSECT.
;
; MACRO CALL:		WIMP$C	SFCN,P1,P2,P3,P4,P5,P6,CS,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "WHAT'S IN MY PROFESSIONAL" DIRECTIVE IN THE CONTROL SECTION
; NAMED '$DPB$.'.  THE DPB PARAMETERS ARE DESCRIBED
; IN THE WIMP$ MACRO.  THIS MACRO THEN GENERATES
; A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  
; THE GENERATION OF SYMBOLIC OFFSETS IS CONTROLLED BY THE WIMP$
; MACRO.
;
;-
	.MACRO	WIMP$C	SFCN,P1,P2,P3,P4,P5,P6,CS,ERR
	.MCALL	DIR$,GFN$,OFF$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	GFN$
	.NARG	$$$N                                                    
$$$I=$$$N                                                               
	.BYTE	169.,$$$N+1                                             
	.IRP	$$$PRM,<SFCN,P1,P2,P3,P4,P5,P6>
	.IF EQ	$$$I                                                    
	.MEXIT                                                          
	.IFF                                                            
$$$I=$$$I-1                                                             
	.ENDC                                                           
	.WORD	$$$PRM                                                  
	.ENDR                                                           
	.IF NDF	W.IMSF                                                  
	.NLIST                                                          
	.IRP	X,<,<W.IMSF,2>,<W.IP01,2>,<W.IP02,2>,<W.IP03,2>>        
	OFF$	X                                                       
	.ENDR                                                           
	.IRP	X,<<W.IP04,2>,<W.IP05,2>,<W.IP06,2>>                   
	OFF$	X                                                       
	.ENDR                                                           
	OFF$	W.IP07,2
	.ENDC                                                           
	.IFT                                                            
	.PSECT	CS                                                      
	DIR$	#$$$,ERR
	.ENDC                                                           
	.ENDM	WIMP$C

;+
;			'WIMP$S'
;
; THE WIMP$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE
; "WHAT'S IN MY PROFESSIONAL" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:		WIMP$S	SFCN,P1,P2,P3,P4,P5,P6
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR
; THE "WHAT'S IN MY PROFESSIONAL" DIRECTIVE ON THE STACK.  THE DPB
; ARGUMENTS MUST BE VALID ASSEMBLER SOURCE OPERANDS,
; AND THEY MUST SPECIFY THE INFORMATION DESCRIBED IN
; THE WIMP$ MACRO.  THIS MACRO ALSO GENERATES A MONITOR TRAP.
;
;-
	.MACRO	WIMP$S	SFCN,P1,P2,P3,P4,P5,P6
	.MCALL	MOV$,DIR$,OFF$,MVB$,GFN$
	GFN$
	.NARG	$$$N
$$$I=$$$N
$$$K=6.				;NUMBER OF PARAMETERS
	.IRP	$$$PRM,<P6,P5,P4,P3,P2,P1,SFCN>
	.IF GT $$$I-$$$K
	MOV$	$$$PRM
	.ENDC
$$$K=$$$K-1
	.ENDR
	MOV	(PC)+,-(SP)
	.BYTE	169.,$$$N+1
	DIR$	
	.ENDM	WIMP$S

;+
;			'WIMP$'
;
; THE WIMP$ MACRO GENERATES A DPB FOR THE "WHAT'S IN MY PROFESSIONAL"
; DIRECTIVE.
;
; MACRO CALL:		WIMP$	SFCN,P1,P2,P3,P4,P5,P6
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE
; "WHAT'S IN MY PROFESSIONAL" DIRECTIVE.  THE ARGUMENTS
; ARE ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	SFCN=SUB FUNCTION CODE
;	P1-P6=PARAMETERS 1 THROUGH 6
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR
; ASSIGNED VALUES EQUAL TO THE BYTE OFFSET FROM THE
; START OF THE DPB TO THE RESPECTIVE DPB ELEMENTS:
;
;	W.INSF-(LENGTH 2 BYTES) SUBFUNCTION CODE
;	W.IP01-W.IP06 (LENGTH 2 BYTES) PARAMETERS 1 THROUGH 6
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB'
; DEFINED, THE DPB IS NOT GENERATED, AND THE
; SYMBOLIC OFFSETS ARE DEFINED GLOBALLY.
;
;-
	.MACRO	WIMP$	SFCN,P1,P2,P3,P4,P5,P6
	.MCALL	OFF$,GFN$
	.IF NDF	$$$GLB
	GFN$
	.NARG	$$$N
$$$I=$$$N
	.BYTE	169.,$$$N+1
	.IRP	$$$PRM,<SFCN,P1,P2,P3,P4,P5,P6>
	.IF EQ	$$$I
	.MEXIT
	.IFF
$$$I=$$$I-1
	.ENDC
	.WORD	$$$PRM
	.ENDR
	.ENDC
	.IF NDF	W.INSF
	.NLIST
	.IRP	X,<,<W.INSF,2>,<W.IP01,2>,<W.IP02,2>,<W.IP03,2>>
	OFF$	X
	.ENDM
	.IRP	X,<<W.IP04,2>,<W.IP05,2>,<W.IP06,2>>
	OFF$	X
	.ENDR
	.ENDC
	.ENDM	WIMP$

;+
;		'WSIG$C'
;
; THE WSIG$C MACRO GENERATES A DPB FOR THE "WAIT FOR SIGNIFICANT
; EVENT" DIRECITVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE
; USER SPECIFIED PSECT.
;
; MACRO CALL:	WSIG$C	PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR SIGNIFICANT
; EVENT" DIRECTIVE IN THE PROGRAM SECTION '$DPB$.', AND A MONITOR TRAP
; IN THE USER SPECIFIED PROGRAM SECTION, 'PSCT'.  THE ERROR SERVICE
; ADDRESS, 'ERR', IS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	WSIG$C	PSCT,ERR
	.MCALL	WSIG$,DIR$
	.IF NDF $$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	WSIG$
	.IFT
	.PSECT	PSCT
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	WSIG$C

;+
;
;	'WSIG$S'
;
; THE WSIG$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "WAIT FOR 
; SIGNIFICANT EVENT" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	WSIG$S	ERR
;
; DESCRIPTION:	THIS MACRO GENERATES THE CODE TO PUSH A ONE-WORD DPB
; FOR THE "WAIT FOR SIGNIFICANT EVENT" DIRECTIVE ON THE STACK.  THEN IT 
; GENERATES A MONITOR TRAP USING THE ERROR SERVICE ADDRESS AS DESCRIBED IN
; THE DIR$ MACRO.
;
;-
	.MACRO	WSIG$S	ERR
	.MCALL	DIR$
	MOV	(PC)+,-(SP)
	.BYTE	49.,1
	DIR$	,ERR
	.ENDM	WSIG$S

;+
;		'WSIG$'
;
; THE WSIG$ MACRO GENERATES A DPB FOR THE "WAIT FOR SIGNIFICANT EVENT"
; DIRECTIVE.
;
; MACRO CALL:	WSIG$
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR SIGNIFICANT
; EVENT" DIRECTIVE.  THERE ARE NO ARGUMENTS.
;
;-
	.MACRO	WSIG$
	.IF NDF $$$GLB
	.BYTE	49.,1
	.ENDC
	.ENDM	WSIG$

;+
;		'WTLO$C'
;
; THE WTLO$C MACRO GENERATES A DPB FOR THE "WAIT FOR LOGICAL 'OR' OF EVENT
; FLAGS IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED PSECT.
;
; MACRO CALL:	WTLO$C	SET,MASK,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR LOGICAL 'OR' OF
; EVENT FLAGS" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE WTLO$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE WTLO$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING INVALID ARGUMENTS IN THE
; WTLO$ MACRO BELOW.
;
;-
	.MACRO	WTLO$C	SET,MASK,CS,ERR
	.MCALL	WTLO$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	WTLO$	SET,<MASK>
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	WTLO$C
;+
;		'WTLO$S'
;
; THE WTLO$S MACRO GENERATES  THE CODE TO PUSH A DPB FOR THE "WAIT FOR
; LOGICAL 'OR' OF EVENT FLAGS" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	WTLO$S	SET,MASK,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "WAIT
; FOR LOGICAL 'OR' OF EVENT FLAGS" DIRECTIVE ON THE STACK.  THE ARGUMENTS
; ARE ASSUMED TO HAVE THE FOLLOWING MEANINGS:
;
;	SET=DESIRED SET OF EVENT FLAGS (0-5)
;	MASK=ASSEMBLER SOURCE OPERAND THAT YIELDS THE DESIRED
;		MASK WORD
;
; THE MACRO ALSO GENERATES A MONITOR TRAP, USING THE ERROR SERVICE
; ADDRESS, 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
; NOTE: READ THE DISCUSSION NOTICE CONCERNING INVALID ARGUMENTS IN THE
; WTLO$ MACRO BELOW.
;
;-
	.MACRO	WTLO$S	SET,MSK,ERR
	.MCALL	MOV$,DIR$
$$$T1=1
	.IF EQ	SET-4
$$$T1=0
	.IRP	X,<MSK>
$$$T1=$$$T1+1
	.ENDM
	.IF NE $$$T1-1
	.ERROR	SET	;UNSUPPORTED EXECUTIVE OPTION;
	.ENDC
	.ENDC
	.IF EQ	$$$T1-1
	MOV$	MSK
	.IF NE	SET
	MOV	#SET,-(SP)
	.IFF
	CLR	-(SP)
	.ENDC
	MOV	(PC)+,-(SP)
	.BYTE	43.,3
	.ENDC
	DIR$	,ERR
	.ENDM	WTLO$S
;+
;		'WTLO$'
;
; THE WTLO$ MACRO GENERATES A DPB FOR THE "WAIT FOR LOGICAL 'OR' OF EVENT
; FLAGS" DIRECTIVE.
;
; MACRO CALL:	WTLO$	SET,MASK
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR LOGICAL 'OR'
; OF EVENT FLAGS" DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE
; FOLLOWING MEANINGS:
;
;	SET=DESIRED SET OF EVENT FLAGS (0-5)
;	MASK=A SIXTEEN BIT (16 FLAG) MASK WORD.
;
; THERE ARE NO SYMBOLIC OFFSETS DEFINED BY THIS MACRO.  IF THE SYMBOL
; '$$$GLB' IS DEFINED AT MACRO INVOCATION, NOTHING IS GENERATED.
;
; NOTE: THE SPECIFICATION OF FLAG SET 4 WITH 4 MASK WORDS (LEGAL IN
; RSX-11D AND IAS) IS NOT SUPPORTED IN RSX-11M/M+. IF SPECIFIED AN
; ASSEMBLY ERROR WILL BE GENERATED.  FLAG SET 4 MAY BE SPECIFIED WITH
; A SINGLE MASK WORD IN ORDER TO WAIT FOR THE LOGICAL OR OF EVENT
; FLAGS IN THE FIRST GROUP GLOBAL SET.
;
;-
	.MACRO	WTLO$	SET,MASK
	.IF NDF	$$$GLB
$$$T1=1
	.IF EQ	SET-4
$$$T1=0
	.IRP	X,<MASK>
$$$T1=$$$T1+1
	.ENDM
	.IF NE $$$T1-1
	.ERROR	SET	;UNSUPPORTED EXECUTIVE OPTION;
	.ENDC
	.ENDC
	.IF EQ	$$$T1-1
	.BYTE	43.,3
	.WORD	SET
	.WORD	MASK
	.ENDC
	.ENDC
	.ENDM	WTLO$
;+
;		'WTSE$C'
;
; THE WTSE$C MACRO GENERATES A DPB FOR THE "WAIT FOR SINGLE EVENT FLAG"
; DIRECTIVE IN A SEPARATE PSECT AND A MONITOR TRAP IN THE USER SPECIFIED
; PSECT.
;
; MACRO CALL:	WTSE$C	EFN,PSCT,ERR
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR SINGLE EVENT
; FLAG" DIRECTIVE IN THE CONTROL SECTION NAMED '$DPB$.'.  THE DPB
; PARAMETERS ARE DESCRIBED IN THE WTSE$ MACRO.  THIS MACRO
; THEN GENERATES A MONITOR TRAP IN THE ORIGINAL PROGRAM CONTROL
; SECTION NAMED IN 'PSCT'.  THE ERROR SERVICE ADDRESS, 'ERR',
; IS DESCRIBED IN THE DIR$ MACRO.  THE GENERATION OF SYMBOLIC
; OFFSETS IS CONTROLLED BY THE WTSE$ MACRO.
;
;-
	.MACRO	WTSE$C	EF,CS,ERR
	.MCALL	WTSE$,DIR$
	.IF NDF	$$$GLB
	.PSECT	$DPB$.,D
$$$=.
	.IFTF
	WTSE$	EF
	.IFT
	.PSECT	CS
	DIR$	#$$$,ERR
	.ENDC
	.ENDM	WTSE$C

;+
;		'WTSE$S'
;
; THE WTSE$S MACRO GENERATES THE CODE TO PUSH A DPB FOR THE 'WAIT FOR
; SINGLE EVENT FLAG" DIRECTIVE ON THE STACK AND A MONITOR TRAP.
;
; MACRO CALL:	WTSE$S	EFN,ERR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH A DPB FOR THE "WAIT
; FOR SINGLE EVENT FLAG" DIRECTIVE ON THE STACK.  THE DPB ARGUMENTS
; MUST BE VALID ASSEMBLER SOURCE OPERANDS, AND THEY MUST SPECIFY
; THE INFORMATION DESCRIBED IN THE WTSE$S MACRO.  THIS MACRO ALSO
; GENERATES A MONITOR TRAP, USING THE ERROR SERVICE ADDRESS,
; 'ERR', AS DESCRIBED IN THE DIR$ MACRO.
;
;-
	.MACRO	WTSE$S	EF,ERR
	.MCALL	MOV$,DIR$
	MOV$	EF
	MOV	(PC)+,-(SP)
	.BYTE	41.,2
	DIR$	,ERR
	.ENDM	WTSE$S
;+
;		'WTSE$'
;
; THE WTSE$ MACRO GENERATES A DPB FOR THE "WAIT FOR SINGLE EVENT FLAG"
; DIRECTIVE.
;
; MACRO CALL:	WTSE$	EFN
;
; DESCRIPTION: THIS MACRO GENERATES A DPB FOR THE "WAIT FOR SINGLE EVENT FLAG"
; DIRECTIVE.  THE ARGUMENTS ARE ASSUMED TO HAVE THE FOLLOWING MEANING:
;
;	EFN=EVENT FLAG NUMBER.
;
; THE FOLLOWING SYMBOLS ARE LOCALLY DEFINED WITH THEIR ASSIGNED
; VALUES EQUAL TO THE BYTE OFFSET FROM THE START OF THE DPB TO
; THE RESPECTIVE DPB ELEMENTS:
;
;	W.TSEF-(LENGTH 2 BYTES) EVENT FLAG NUMBER.
;
; IF THE MACRO IS INVOKED WITH THE SYMBOL '$$$GLB' DEFINED, THE
; DPB IS NOT GENERATED, AND THE SYMBOLIC OFFSETS ARE DEFINED
; GLOBALLY.
;
;-
	.MACRO	WTSE$	EFN
	.MCALL	OFF$
	.IF NDF	$$$GLB
	.BYTE	41.,2
	.WORD	EFN
	.ENDC
	.IF NDF	W.TSEF
	.NLIST
	OFF$
	OFF$	W.TSEF,2
	.LIST
	.ENDC
	.ENDM	WTSE$

;+
;		'DIR$'
;
; GENERATES AN RSX-11M MONITOR TRAP WITH A PRE-DEFINED DPB.
;
; MACRO CALL:	DIR$	ADR,ERR
;
; DESCRIPTION: THE ARGUMENT 'ADR' MUST BE A VALID ASSEMBLER
; SOURCE OPERAND USED TO PUSH THE DPB ADDRESS ON THE STACK.
; THE MACRO THEN GENERATES AN 'EMT 377' TO TRAP TO
; THE MONITOR.  THE ARGUMENT 'ERR' IS OPTIONAL.  IF
; DEFINED, IT MUST BE A VALID ASSEMBLER DESTINATION
; OPERAND TO PERMIT A 'JUMP TO SUBROUTINE' TO AN
; ERROR HANDLER IF THE MONITOR CALL FAILS.
;
;-
	.MACRO	DIR$	ADR,ERR
	.IF NB	<ADR>
	MOV	ADR,-(SP)
	.ENDC
	EMT	^O<377>
	.IIF NB	<ERR>,	.MCALL	ERR$
	.IIF NB	<ERR>,	ERR$	ERR
	.ENDM	DIR$
;+
;		'ERR$'
;
; THIS IS AN INTERNAL MACRO USED TO GENERATE A TEST FOR
; DIRECTIVE FAILURE ACCOMPANIED BY A JSR TO AN ERROR HANDLER.
;
; MACRO CALL:	ERR$	ERR
;
; DESCRIPTION: DIRECTIVE FAILURE IS INDICATED BY A SET C-BIT.
; IF THE ARGUMENT 'ERR' IS DEFINED, CODE IS GENERATED TO
; TEST THE C-BIT AND SKIP IF NOT SET.  THAT IS FOLLOWED
; BY A JSR TO AN ERROR HANDLER SPECIFIED BY 'ERR'.
;
;-
	.MACRO	ERR$	ERR
	.IF NB	<ERR>
	.NLIST
	.NTYPE	$$$T1,ERR
	.LIST
	.IIF EQ	^O<$$$T1-27>,	BCC	.+6
	.IIF EQ	^O<$$$T1-37>,	BCC	.+6
	.IF GE	^O<$$$T1-60>
	BCC	.+6
	.IFF
	.IF NE	^O<$$$T1-27>
	.IIF NE	^O<$$$T1-37>,	BCC	.+4
	.ENDC
	.ENDC
	CALL	ERR
	.ENDC
	.ENDM	ERR$
;+
;		'MVB$'
;
; THIS IS AN INTERNAL MACRO USED TO PUSH TWO BYTES ON THE STACK.
;
; MACRO CALL:	MVB$	LOWB,HIGHB
;
; DESCRIPTION: THIS MACRO EXAMINES THE TWO ARGUMENTS, AND, BASED
; ON THAT EXAMINATION, GENERATES THE CODE TO PUSH THE BYTES ON THE
; STACK.
;
;-
	.MACRO	MVB$	LOW,HIGH
	.IF B	<LOW>
	.IF B	<HIGH>
	CLR	-(SP)
	.IFF
	CLRB	-(SP)
	MOVB	HIGH,1(SP)
	.ENDC
	.IFF
	.IF B	<HIGH>
	CLR	-(SP)
	MOVB	LOW,(SP)
	.IFF
	MOVB	LOW,-(SP)
	MOVB	HIGH,1(SP)
	.ENDC
	.ENDC
	.ENDM	MVB$
;+
;		'OFF$'
;
; THIS IS AN INTERNAL MACRO USED TO GENERATE SYMBOLIC
; OFFSETS.
;
; MACRO CALL:	OFF$	SYMB,LEN
;
; DESCRIPTION: THIS MACRO IS USED TO CREATE TABLES OF
; SYMBOLIC OFFSETS FOR THE ELEMENTS WITHIN DPB'S.
; THE FIRST ARGUMENT, 'SYMB', IS THE NAME OF THE
; SYMBOL.  THE SECOND ARGUMENT, 'LEN', IS THE
; LENGTH OF THE SYMBOL IN BYTES.  IT IS ADDED
; TO THE OFFSET COUNTER AFTER THE SYMBOLIC ASSIGN-
; MENT HAS BEEN MADE.  IF THE SYMBOL '$$$GLB' IS
; DEFINED THE SYMBOLIC ASSIGNMENTS WILL BE MADE
; GLOBAL.  OTHERWISE, ALL ASSIGNMENTS ARE LOCAL.
;
; IF BOTH 'SYMB' AND 'LEN' ARE BLANK, THE OFFSET
; COUNTER IS INITIALIZED TO TWO (2).
;
;-

	.MACRO	OFF$	SYMB,LEN
	.IF B	<'SYMB'LEN>
$$$OST=2
	.MEXIT
	.ENDC
	.IF NB	<SYMB>
	.IF NDF	$$$GLB
SYMB=$$$OST
	.IFF
SYMB==$$$OST
	.ENDC
	.ENDC
	.IF NB	<LEN>
$$$OST = ^O<$$$OST+LEN>
	.ENDC
	.ENDM	OFF$
;+
;		'RFA$'
;
; THIS INTERNAL MACRO PUSHES TWO WORDS ON THE STACK IN REVERSE
; ORDER FROM THE SPECIFIED DOUBLE-WORD.
;
; MACRO CALL:	RFA$	ADR
;
; DESCRIPTION: THIS MACRO GENERATES THE CODE TO PUSH TWO WORDS
; ON THE STACK IN REVERSE ORDER FROM THE DOUBLE WORD WITH ITS
; ADDRESS SPECIFIED BY THE SOURCE OPERANDS 'ADR'.
;
;-
	.MACRO	RFA$	ADR
	.IF NB	<ADR>
	.NLIST
	.NTYPE	$$$T2,ADR
	.LIST
	.IF LT	$$$T2-6
	MOV	2(ADR),-(SP)
	MOV	(ADR),-(SP)
	.IFF
	MOV	ADR,-(SP)
	MOV	@(SP),-(SP)
	ADD	#2,2(SP)
	MOV	@2(SP),2(SP)
	.ENDC
	.IFF
	CLR	-(SP)
	CLR	-(SP)
	.ENDC
	.ENDM	RFA$
;+
;		'RVP$'
;
; THIS IS AN INTERNAL MACRO USED TO PLACE THE PARAMETERS
; PASSED AS AN ARGUMENT LIST INTO THE STACK IN REVERSE
; ORDER.
;
; MACRO CALL:	RVP$	A1,A2,...,A10
;
; DESCRIPTION: THE ELEMENTS OF THE ARGUMENT LIST ARE
; PUSHED ON THE STACK IN REVERSE ORDER.  ALL ELEMENTS
; ARE ASSUMED TO BE FULL-WORD.  THE LIST IS LIMITED TO
; A MAXIMUM OF TEN ELEMENTS.
;
;-
	.MACRO	RVP$	P0,P1,P2,P3,P4,P5,P6,P7,P8,P9
	.MCALL	MOV$
	.NLIST
	.NARG	$$$ARG
	.LIST
	.IIF GT	$$$ARG-9.,	MOV$	<P9>
	.IIF GT	$$$ARG-8.,	MOV$	<P8>
	.IIF GT	$$$ARG-7,	MOV$	<P7>
	.IIF GT	$$$ARG-6,	MOV$	<P6>
	.IIF GT	$$$ARG-5,	MOV$	<P5>
	.IIF GT	$$$ARG-4,	MOV$	<P4>
	.IIF GT	$$$ARG-3,	MOV$	<P3>
	.IIF GT	$$$ARG-2,	MOV$	<P2>
	.IIF GT	$$$ARG-1,	MOV$	<P1>
	.IIF GT	$$$ARG,	MOV$	<P0>
	.ENDM	RVP$
 
;+
;		'R50$'
;
; THIS INTERNAL MACRO GENERATES A TWO-WORD RADIX-50 NAME.
;
; MACRO CALL:	R50$	NAME
;
; DESCRIPTION: THIS MACRO WILL CONVERT THE ARGUMENT 'NAME' INTO
; RADIX-50 USING THE '.RAD50' ASSEMBLER DIRECTIVE.  FURTHERMORE,
; THE MACRO INSURES THAT THE DATA GENERATED IS AT LEAST TWO
; WORDS LONG.
; 
;-
	.MACRO	R50$	NAME
	.NLIST
	.NCHR	$$$T1,NAME
	.LIST
	.IF EQ	$$$T1
	.WORD	0,0
	.IFF
	.IF GT	$$$T1-6
$$$T4=.+4
	.IFTF
	.RAD50	/NAME/
	.IFT
.=$$$T4
	.ENDC
	.IIF LT	$$$T1-4,	.WORD	0
	.ENDC
	.ENDM	R50$
 
;+
;		'MOV$'
;
; THIS IS AN INTERNAL MACRO USED TO PUSH AN ARGUMENT ON THE STACK.
;
; MACRO CALL:	MOV$	<ARG>
;
; DESCRIPTION: THIS MACRO IS USED TO PUSH AN ARGUMENT ON THE STACK.
; THE MACRO EXAMINES THE ARGUMENT FIRST TO DETERMINE WHICH
; CODE WILL BE VALID TO PERFORM THE PUSH.  IF THE ARGUMEMT IS
; LEFT BLANK, A 'CLR' INSTRUCTION IS USED.  OTHERWISE A 'MOV  ARG,-(SP)'
; INSTRUCTION IS GENERATED.
;
;-
	.MACRO	MOV$	ARG
	.IF NB	<ARG>
	.IF DIF	<ARG>,<#0>
	MOV	ARG,-(SP)
	.MEXIT
	.ENDC
	.ENDC
	CLR	-(SP)
	.ENDM	MOV$
 
 
;
; .BLK./.BLKB./.BLKW.  - DEFINE BLOCK OFFSET SYMBOL
;
 
	.MACRO	.BLKB.	NUM,SYM,GBL
	.IF NB	<SYM>
	.IF IDN	<DEF$G>,<GBL>
SYM==$$$
	.IFF
SYM=$$$
	.ENDC
	.ENDC
$$$=$$$+NUM
	.ENDM	.BLKB.
 
 
	.MACRO	.BLKW.	NUM,SYM,GBL
	.IF NB	<SYM>
	.IF IDN	<DEF$G>,<GBL>
SYM==$$$
	.IFF
SYM=$$$
	.ENDC
	.ENDC
$$$=$$$+<2*NUM>
	.ENDM	.BLKW.
 
 
	.MACRO	.BLK.
$$$=0
	.ENDM	.BLK.

;
; LNMOD$ DEFINES USER MODIFIER BASE FOR LOGICAL NAMES
;
	.MACRO	LNMOD$
	LM.USR=128.
	LT.USR=2.
	SD.LOG=3.
	SD.BYE=4.
	GD.LOG=5.
	SD.TI=6.
	SD.MOD=7.
	SD.MUD=8.
	.ENDM
;+
;		'AFF$'
;
; THIS MACRO DEFINES THE SYMBOLS USED TO SET UP A CPU AFFINITY MASK.
;
; MACRO CALL:	AFF$
;
; DESCRIPTION:  THIS MACRO DEFINES THE SYMBOLS USED TO SET UP A CPU 
;  AFFINITY MASK.
;
;-
	.MACRO	AFF$
CPA=1
CPB=2
CPC=4
CPD=10
UBE=20
UBF=40
UBH=100
UBJ=200
UBK=400
UBL=1000
UBM=2000
UBN=4000
UBP=10000
UBR=20000
UBS=40000
UBT=100000
	.ENDM 	AFF$
	
;+
;	'GFN$'
;
; THIS MACRO DEFINES THE SUB-FUNCTION CODES FOR THE GIN$ DIRECTIVE.
;
; MACRO CALL:	GFN$
;
;-
 
	.MACRO	GFN$
GI.GAS=0
GI.UIC=1
GI.DEF=2
GI.FMK=3
GI.QMC=4
GI.UAB=5
GI.DEV=6
GI.SPR=7.
GI.REN=8.
GI.APR=9.
GI.TSK=10.
GI.SPM=11.
GI.CFG=12.
GI.SSN=13.
GI.ABO=14.
GI.VEC=15.
GI.MSD=16.
GI.UPD=17.
GI.DVJ=18.
	.ENDM
