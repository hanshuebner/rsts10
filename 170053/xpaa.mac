	.TITLE	.X.PAA
	.IDENT	/05/
;
;		COPYRIGHT (c) 1981 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; COPYRIGHT   1974,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
; VERSION 05
;
; C.MONIA 24-JUN-74
;
; MODIFIED BY:
;
;	T. M. MARTIN	5-APR-81
;			ADD SUPPORT FOR USER I&D SPACE TASKS
;			( ALTERNATE ENTRY POINT -- .X.PA1 )
;
;	T. M. MARTIN	9-NOV-81
;			PLACE CODE IN PIC I-SPACE PSECT
;
; COMMON CODE TO PUSH FORTRAN ARGUMENT LIST ON STACK
;
; MACRO LIBRARY CALLS
;
 
	.MCALL	CALL,RETURN,.PICOD
 
;
; LOCAL MACROS
;
; SOB	REG,TAG
;

	.MACRO	SOB	REG,TAG
	DEC	REG
	BNE	TAG
	.ENDM

.PAGE
.SBTTL	SUBROUTINE -- .X.PAA
;
; .X.PAA -- SUBROUTINE TO PUSH ARGUMENT ADDRESSES ONTO STACK
;
; ENTRY CONDITIONS:
;
;	R5 -- ADDRESS OF ARGUMENT ADDRESS TABLE
;
;	MAXARG -- MAXIMUM NUMBER OF ARGUMENTS
;	BITMAP -- MAP OF ONE'S FOR MANDATORY ARGUMENTS
;	(BIT-0 FOR LAST ARGUMENT, BIT-1 FOR NEXT TO LAST, ...)
;
; CALLING SEQUENCE:
;
;	CALL	.X.PAA
;	.WORD	MAXARG
;	.WORD	BITMAP
;
; EXIT CONDITIONS:
;
; ERROR IF TOO MANY ARGUMENTS, OF IF A MANDATORY ARGUMENT IS NOT SPECIFIED.
;
;	'MAXARG' WORDS PUSHED ONTO THE STACK -- EITHER ARGUMENT ADDRESSES
;	OR ZEROS.
;
;	R1 -- STACK POINTER
;	R2 -- STACK POINTER
;
;
;	CONTROL IS RETURNED AT JSR+06
;
; REGISTERS ALTERED:
;
;	R1, R2, R3, & R4
;
	.ENABLE	LSB
	.PICOD			;PLACE CODE IN PIC I-SPACE PSECT

.X.PA1::MOV	(SP)+,R4	;GET RETURN ADDRESS
	BR	5$		;BR INTO COMMON CODE

.X.PAA::MOV	(SP)+,R4	;SET ADR OF WORD FOLLOWING JSR IN R4
;
	MOV	(R4)+,R2	;SET R2 TO THE MAX NUMBER OF ARGUMENTS,
	MOV	(R4)+,R1	;SET R1 TO THE BIT MAP OF MANDATORY ARGUMENTS,
				;AND LEAVE R4 CONTAINING THE RETURN ADDRESS.
;
5$:	MOVB	@R5,R3		;SET R3 TO THE ACTUAL NUMBER OF ARGUMENTS
;
	SUB	R3,R2		;PUSH A ZERO FOR EACH ARGUMENT NOT PROVIDED
	BMI	ERR		;IN CALL LIST & LEAVE R2=0
	BEQ	20$
10$:
	ROR	R1
	BCS	ERR
	CLR	-(SP)
	SOB	R2,10$
20$:
	ADD	R3,R2		;(R2=0)
	BEQ	60$		;NO MORE ARGUMENTS TO PROCESS, EXIT.
	INC	R2		;ELSE SET R2 TO ADR OF WORD FOLLOWING
				;ADDRESS LIST.
	ADD	R2,R2		;[R2=2(R3+1)+R5]
	ADD	R5,R2
30$:
	MOV	-(R2),-(SP)	;PUSH SPECIFIED ARGUMENT ADDRESSES (OR -1'S)
				;ONTO STACK IN REVERSE ORDER.
	CMP	@SP,#-1		;WAS ARGUMENT OMITTED?
	BEQ	40$
	ROR	R1		;NO -- ROTATE BIT MAP
	BR	50$
;
40$:	ROR	R1		;YES -- WAS ARGUMENT MANDATORY
	BCS	ERR		;YES -- ERROR
	CLR	@SP		;NO -- CHANGE -1 TO ZERO
50$:
	SOB	R3,30$		;LOOP
;
60$:
	MOV	SP,R1		;SET R1 & R2 TO SP
	MOV	SP,R2
;
;
	JMP	@R4		;SUBROUTINE EXIT

	.DSABL	LSB
;
ERR:	MOV	#100000,R0	;NO RETURN
	CALL	.X.ERR		;SEND CLASS 8, ERROR#0
	HALT			;SHOULD NEVER GET HERE
;
	.END

