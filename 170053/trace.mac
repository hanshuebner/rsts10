TITLE	TRACE,<TRACE DEBUGGING AID>,05,29-AUG-85,HK/CM/MJG

;
;		COPYRIGHT (c) 1974, 1985 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

;
; VERSION 02
;
; H. KREJCI/C. MONIA 25-AUG-74
;
; TRACE DEBUGGING AID
;
; MODIFICATIONS:
;
; M.GOODRICH	21-FEB-79	;++RSTS V7.0 ENHANCED TO RUN ON RSTS
;
; MACRO LIBRARY CALLS
;
 
	.IF DF,	RSTS		;++RSTS V7.0

	.MCALL	DIR$,SVDB$	;++RSTS V7.0
	.ENABL	GBL		;++RSTS V7.0

	.IFF			;++RSTS V7.0

	.MCALL	CALL,DIR$,FILIO$,QIO$,RETURN,SVDB$,WTSE$S
	FILIO$	DEF$L		; DEFINE QIO FUNCTION CODES
 
;
; LOCAL MACROS
;
; DECREMENT AND LOOP IF NE
;
; SOB	REG,TAG
;
 
	.MACRO	SOB	REG,TAG
	 DEC	REG
	 BNE	TAG
	.ENDM	SOB

	.ENDC			;++RSTS V7.0

.IIF	DF,RSTS	TMPORG	$$$ODA	;++RSTS V7.0 PUT DATA IN DATA PSECT

.SBTTL	NOTES ON USAGE
;
; TRACE INCLUSION -- THIS TRACE PACKAGE IS INCLUDED IN A TASK BY THE
; TASK BUILDED UNDER THE FOLLOWING COMMAND SYNTAX:
;
;	TKB>TASK=TEST,TRACE/DA
;	              --------
;
; BIAS -- CONSTANT TO PRODUCE "RELATIVE PC" (RELATIVE VIRTUAL).  UNLESS SET
; NON-ZERO, THE INITIAL 'SP' IS SUBTRACTED FROM THE PRESENT 'PC' TO PRODUCE
; THIS RELATIVE PC.  THIS VALUE MAY BE SET USING THE FOLLOWING TASKBUILDER
; KEYWORD INPUT:
;
;	GBLPAT=[SEGMENT NAME]:.BIAS:[BIAS VALUE]
;
.BIAS::.WORD	0
;
; TRACE RANGES -- TRACE IS OUTPUT ONLY WHEN "RELATIVE PC" IS WHTHIN ONE OF THE
; OF THE FOUR RANGES BELOW (AND THE PROCESSOR PRIORITY IS ZERO).  THESE RANGES
; MAY BE ALTERED USING THE FOLLOWING TASKBUILDER KEYWORD INPUT:
;
;   GBLPAT=[SEGMENT NAME]:.RANGE:[R1LO]:[R1HI]:[R2LO]:[R2HI]: ...
;
.RANGE::.WORD	0,-1	;TRACE RANGE ONE (EVERYTHING, 32K VIRTUAL)
	.WORD	-1,0	;TRACE RANGE TWO (NOTHING)
	.WORD	-1,0	;TRACE RANGE THREE (NOTHING)
	.WORD	-1,0	;TRACE RANGE FOUR (NOTHING)

;
; NOTE -- THE PRINTING PART OF THIS PACKAGE IS NON-RE-ENTRANT.  THEREFORE
; CARE IN SELECTING RANGES IS REQUIRED WHEN TRACING AST SERVICE.
;
; A LOGICAL UNIT NUMBER (LUN) FOR USE BY THIS DEBUGGING AID IS ALLOCATED
; BY THE TASKBUILDER IN ADDITION TO THE NORMAL LUN'S USED BY THE TASK.
;
EFN=28.		;EVENT FLAG 'EFN' IS ALTERED

.IIF	DF,RSTS	TMPORG	$$$ODT	;++RSTS V7.0 PUT CODE IN CODE PSECT

.SBTTL	INITIALIZATION CODE
;
; CONTROL IS INITIALLY TRANSFERRED AT 'START' WITH THE TASK'S REAL
; ENTRY POINT STORED IN R0 (DUE TO THE "/DA" SWITCH).
;
;
 
START:
	.IF DF,	RSTS		;++RSTS V7.0
	CMP	#-1,.RANGE	;++RSTS V7.0 IS ANY TRACING DESIRED?
	BNE	5$		;++RSTS V7.0 YUP, PUSH ON
	CLR	-(SP)		;++RSTS V7.0 INHIBIT T-BIT TRAP
	MOV	R0,-(SP)	;++RSTS V7.0 SET RETURN TO USER ADDRESS
	RTI			;++RSTS V7.0 BYE-BYE
5$:				;++RSTS V7.0 REFERENCE LABEL
	.ENDC			;++RSTS V7.0

	TST	.BIAS		;IF UNSPECIFIED BIAS, USE INITIAL SP
	BNE	10$
	MOV	SP,.BIAS
10$:
	MOV	#RTRAP,ILINST	; SET VECTOR FOR ILLEGAL INSTRUCTION TRAP
	DIR$	#SSTDPB		; SPECIFY SST TABLE FOR DEBUGGING AID
	BCC	20$
	TRAP	0		; ABORT IF SST VECTOR ALREADY SPECIFIED
20$:
	.IF NDF,RSTS		;++RSTS V7.0
	MOV	.TRLUN,BKOLUN	;SET TASKBUILDER PROVIDED LUN IN SECOND
				;QUEUE I/O DPB.
	.ENDC			;++RSTS V7.0
	CMP	STADD,#1	; STARTING ADDRESS PEVIOUSLY RECORDED?
	BNE	30$		; IF NE YES
	MOV	R0,STADD	; RECORD STARTING ADDRESS
30$:				;
	MOV	#RTT,TRPRET	; SET TO EXECUTE RTT ON SST SERVICE EXIT
;
	MOV	#20,-(SP)	;TRANSFER TO TASK WITH T-BIT SET
	MOV	STADD,-(SP)	; PUSH STARTING ADDRESS OF TASK PROPER
	MOV	(SP),PREVPC
RTT:				;
	RTT
 
;
; THIS CODE IS ENTERED IF THE PREVIOUS 'RTT' INSTRUCTION
; CAUSED AN 'ILLEGAL INSTRUCTION' TRAP
;
 
RTRAP:				;
	CLR	ILINST		; CLEAR ILLEGAL INSTRUCTION VECTOR
	CMP	(SP),#RTRAP	; PREVIOUS INSTRUCTION CAUSE TRAP?
	BEQ	10$		; IF EQ YES
	SUB	#2,(SP)		; BACK UP TRAPPED PC
	BR	20$		; EXIT SST SERVICE ROUTINE
10$:				;
	MOV	#RTI,TRPRET	; POINT TO 'RTI' RETURN
	CMP	(SP)+,(SP)+	; POP PS,PC FROM THIS TRAP
20$:				;
	JMP	@TRPRET		; EXIT
 

.SBTTL	"T-BIT TRAP" SST SERVICE ROUTINE
;
; CONTROL IS TRANSFERRED HERE WITH THE TASK'S PS & PC PUSHED ONTO ITS STACK.
;
SSTSER:				;
	CMP	@SP,PREVPC	; HAS PC CHANGED SINCE LAST TRACE
	BNE	10$
	JMP	@TRPRET		; NO -- EXIT SST SERVICE (EITHER TASK IS
				;IN SINGLE INSTRUCTION LOOP, OR "RTT" FROM LAST
				;T-BIT SERVICE WAS CONVERTED TO AN "RTI" DUE TO
				;INTERRUPT SERVICE)
10$:	BIT	#000340,+2(SP)	;YES -- IS PROCESSOR PRIORITY NON-ZERO?
	BNE	BKSEQ		;YES -- BREAK TRACE OUTPUT
	MOV	PREVPC,RELPC	;NO -- IS RELATIVE PC WITHIN A TRACE RANGE?
	.IF NDF,RSTS		;++RSTS V7.0
	SUB	.BIAS,RELPC	;(DETERMINE RELATIVE PC)
	.ENDC			;++RSTS V7.0
	CMP	RELPC,.RANGE+00
	BLO	20$
	CMP	RELPC,.RANGE+02
	BLOS	TRACE
20$:	CMP	RELPC,.RANGE+04
	BLO	30$
	CMP	RELPC,.RANGE+06
	BLOS	TRACE
30$:	CMP	RELPC,.RANGE+10
	BLO	40$
	CMP	RELPC,.RANGE+12
	BLOS	TRACE
40$:	CMP	RELPC,.RANGE+14
	BLO	BKSEQ
	CMP	RELPC,.RANGE+16
	BLOS	TRACE
BKSEQ:				;BREAK INSTRCUTION TRACE SEQUENCE
	MOV	#1,SBFLAG	;SET BREAK FLAG & EXIT SST SERVICE
	JMP	RECPC
;
TRACE:
	MOV	@#$DSW,-(SP)	;PUSH DIRECTIVE STATUS WORD
	MOV	R0,-(SP)	;PUSH R0
	MOV	R1,-(SP)	;PUSH R1
	MOV	R2,-(SP)	;PUSH R2
	MOV	R3,-(SP)	;PUSH R3
	TST	SBFLAG		;TRACE -- OUTPUT BREAK INDICATOR IF END
	BEQ	10$		;OF A BREAK IN TRACE SEQUENCE
	CLR	SBFLAG
	.IF NDF,RSTS		;++RSTS V7.0
	DIR$	#BKODPB		; OUTPUT BREAK SEQUENCE
	BCS	10$
	WTSE$S	#EFN		; WAIT FOR OUTPUT TO COMPLETE
	.IFF			;++RSTS V7.0
	CALL	SETXRB,R5,<ENDBRK-BREAK,BREAK> ;++RSTS V7.0
	.ENDC			;++RSTS V7.0
10$:
;
	MOV	#BUF1,R1	;SETUP R1 TO FILL FIRST LINE BUFFER
;
	.IF DF,	RSTS		;++RSTS V7.0
	SUB	.BIAS,RELPC	;++RSTS V7.0 (DETERMINE RELATIVE PC)
	.ENDC			;++RSTS V7.0
	MOV	RELPC,R3	;PACK RELATIVE PC
	CALL	PKR3
;
	MOV	PREVPC,R3	;PACK PREVIOUS PC
	CALL	PKR3
;
	MOV	+12(SP),R3	;PACK NEXT PC
	CALL	PKR3
;
	MOV	+14(SP),R3	;PACK PS
	CALL	PKR3
;
	MOV	+10(SP),R3	;PACK DIRECTIVE STATUS WORD
	CALL	PKR3
;
	.IF DF,	RSTS		;++RSTS V7.0
	MOV	@PREVPC,R3	;++RSTS V7.0 PACK ACTUAL INSTRUCTION
	MOV	R3,O.PCODE	;++RSTS V7.0 SAVE FOR NEXT PART
	CALL	PKR3		;++RSTS V7.0
;
	ADD	#2,PREVPC	;++RSTS V7.0 BUMP TO NEXT WORD
	CMP	PREVPC,12(SP)	;++RSTS V7.0 WAS IT A ONE WORD INSTR?
	BEQ	14$		;++RSTS V7.0 YES, BLANK OUT THE REST
	CMP	#207,O.PCODE	;++RSTS V7.0 A RETURN INSTR?
	BEQ	14$		;++RSTS V7.0 YES, BLANK OUT THE REST
	MOV	@PREVPC,R3	;++RSTS V7.0 PACK SOURCE/DESTINATION
	CALL	PKR3		;++RSTS V7.0
;
	ADD	#2,PREVPC	;++RSTS V7.0 BUMP TO NEXT WORD
	CMP	PREVPC,12(SP)	;++RSTS V7.0 WAS IT A TWO WORD INSTR?
	BEQ	16$		;++RSTS V7.0 YES, BLANK OUT THE REST
	MOV	@PREVPC,R3	;++RSTS V7.0 GET VALUE JUST IN CASE
	ADD	#2,PREVPC	;++RSTS V7.0 
	CMP	PREVPC,12(SP)	;++RSTS V7.0 WAS IT A THREE WORD INSTR?
	BNE	16$		;++RSTS V7.0 NO, BLANK OUT THE REST
	CALL	PKR3		;++RSTS V7.0 PRINT DESTINATION
	BR	18$		;++RSTS V7.0 DONE

14$:	CALL	PKBLK		;++RSTS V7.0 PACK 8 BLANKS
16$:	CALL	PKBLK		;++RSTS V7.0 PACK 8 BLANKS
18$:				;++RSTS V7.0
	.ENDC			;++RSTS V7.0
;	
	MOV	#BUF2,R1	;SETUP R2 TO FILL SECOND LINE BUFFER
;
	MOV	+6(SP),R3	;PACK R0
	CALL	PKR3
;
	MOV	+4(SP),R3	;PACK R1
	CALL	PKR3
;
	MOV	+2(SP),R3	;PACK R2
	CALL	PKR3
;
	MOV	@SP,R3		;PACK R3
	CALL	PKR3
;
	MOV	R4,R3		;PACK R4
	CALL	PKR3
;
	MOV	R5,R3		;PACK R5
	CALL	PKR3
;
	MOV	SP,R3		;PACK SP
	ADD	#16,R3
	CALL	PKR3
;
	MOV	+16(SP),R3	;PACK TOP OF STACK
	CALL	PKR3
;
	.IF NDF,RSTS		;++RSTS V7.0
	DIR$	#TRODPB		; WRITE TRACE OUTPUT TO LUN
	BCS	20$
	WTSE$S	#EFN		; WAIT-FOR I/O COMPLETION
	.IFF			;++RSTS V7.0
	CALL	SETXRB,R5,<ENDBUF-BUFFER,BUFFER> ;++RSTS V7.0
	.ENDC			;++RSTS V7.0
20$:
;
	MOV	(SP)+,R3	;POP R3
	MOV	(SP)+,R2	;POP R2
	MOV	(SP)+,R1	;POP R1
	MOV	(SP)+,R0	;POP R0
	MOV	(SP)+,@#$DSW	; RESTORE DIRECTIVE STATUS WORD
;
RECPC:
	MOV	@SP,PREVPC	;RECORD PC AS "PREVIOUS PC", AND
	JMP	@TRPRET		;EXIT T-BIT SST SERVICE

;
; PKR3 -- SUBROUTINE TO PACK THE CONTENTS OF AN OCTAL WORD (R3) INTO AN OUTPUT
; BUFFER (PER R1).  EIGHT ASCII CHARACTERS ARE PACKED, SIX OCTALS & TWO BLANKS.
;
; ENTRY CONDITIONS:
;
;	R1 -- BYTE POINTER TO FIRST CHARACTER
;	R3 -- OCTAL VALUE TO BE PACKED INTO BUFFER
;
; EXIT CONDITIONS:
;
;	R1 -- POINTING TO BYTE FOLLOWING LAST CHARACTER PACKED
;
; REGISTERS ALTERED:
;
;	R0, R1, R2, & R3
;
PKR3:	MOV	#6,R0
	CLR	R2
	ASL	R3		; GET MSB IN R2
	ROL	R2		; ...
	BR	20$
;
10$:	CLR	R2
	ASL	R3		; GET NEXT OCTAL BYTE IN R2
	ROL	R2		; ...
	ASL	R3		; ...
	ROL	R2		; ...
	ASL	R3		; ...
	ROL	R2		; ...
20$:
	ADD	#60,R2
	MOVB	R2,(R1)+
	SOB	R0,10$
;
	MOVB	#040,(R1)+
	MOVB	#040,(R1)+
;
	RETURN

	.IF DF,	RSTS		;++RSTS V7.0

;+
;
; SETXRB
;
;-

.SBTTL	SETXRB	DO RSTS I/O THROUGH XRB

SETXRB:
	MOV	@#FIRQB,O.IOSTS	;++RSTS V7.0 SAVE IOSTS
	MOV	@#FIRQB+FQJOB,O.FQJOB ;++RSTS V7.0 SAVE FQJOB
	MOV	#XRBSIZ/2,R0	;++RSTS V7.0 SAVE AND CLEAR XRB
	MOV	#XRB+XRBSIZ,R1	;++RSTS V7.0  ...
	MOV	#O.XRBE,R2	;++RSTS V7.0     ...
10$:	MOV	-(R1),-(R2)	;++RSTS V7.0        ...
	CLR	(R1)		;++RSTS V7.0           ...
	SOB	R0,10$		;++RSTS V7.0 LOOP UNTIL DONE        
	MOV	(R5),(R1)+	;++RSTS V7.0 STORE # OF BYTES IN XRLEN
	MOV	(R5)+,(R1)+	;++RSTS V7.0 DUPLICATE BYTES IN XRBC
	MOV	(R5)+,(R1)	;++RSTS V7.0 STORE ADDRESS IN XRLOC
	BIS	#1000,@#XRB+XRMOD ;++RSTS V7.0 DOING RSX-STYLE I/O
	.WRITE			;++RSTS V7.0 LET RSTS DO IT
	MOV	#XRBSIZ/2,R0	;++RSTS V7.0 RESTORE XRB
	MOV	#XRB,R1		;++RSTS V7.0  ...
20$:	MOV	(R2)+,(R1)+	;++RSTS V7.0     ...
	SOB	R0,20$		;++RSTS V7.0 LOOP UNTIL DONE   
	MOV	O.FQJOB,@#FIRQB+FQJOB ;++RSTS V7.0 RESTORE FQJOB
	MOV	O.IOSTS,@#FIRQB	;++RSTS V7.0 RESTORE IOSTS
	RETURN	R5		;++RSTS V7.0 DONE

;+
;
; PKBLK
;
;-

.SBTTL	PKBLK	BLANK OUT 8 CHARACTERS

PKBLK:	MOV	#8.,R0		;++RSTS V7.0 SET BYTE COUNT TO BLANK
10$:	MOVB	#40,(R1)+	;++RSTS V7.0 MOVE BLANKS TO OUTPUT
	SOB	R0,10$		;++RSTS V7.0 ...UNTIL DONE
	RETURN			;++RSTS V7.0

	.ENDC			;++RSTS V7.0

.IIF	DF,RSTS	TMPORG	$$$ODA	;++RSTS V7.0 PUT DATA IN DATA PSECT

.SBTTL	VARIABLES & CONSTANTS
;

PREVPC:	.WORD	0		;PREVIOUS PC
RELPC:	.WORD	0		;RELATIVE PC
RTI:	RTI			; RTI INSTRUCTION
SBFLAG:	.WORD	0		;SEQUENCE BREAK FLAG
STADD:	.WORD	1		; TASK STARTING ADDRESS
TRPRET:	.WORD	RTT		; TRAP RETURN VECTOR
;
; DIRECTIVE PARAMETER BLOCKS (DPB'S)
;
;
; TRACE OUTPUT QIO DPB
;
	.IF NDF,RSTS		;++RSTS V7.0

TRODPB:	QIO$	IO.WVB,,EFN,,,,<BUFFER,ENDBUF-BUFFER,0>
.TRLUN==TRODPB+Q.IOLU		; TRACE LUN (SETUP BY TKB)
;
BKODPB:	QIO$	IO.WVB,,EFN,,,,<BREAK,ENDBRK-BREAK,0>
BKOLUN=BKODPB+Q.IOLU		; LUN

	.IFF			;++RSTS V7.0

O.PCODE:.BLKW	1		;++RSTS V7.0 SAVE AREA FOR OPCODE
O.IOSTS:.BLKW	1		;++RSTS V7.0 SAVE AREA FOR IOSTS
O.FQJOB:.BLKW	1		;++RSTS V7.0 SAVE AREA FOR FQJOB
O.XRB:	.BLKW	XRBSIZ/2	;++RSTS V7.0 SAVE AREA FOR XRB
O.XRBE:				;++RSTS V7.0 REFERENCE LABEL

	.ENDC			;++RSTS V7.0

;
SSTDPB:	SVDB$	SSTBL,5		; SPECIFY SST VECTOR TABLE FOR DEBUGGING AID
;
;
SSTBL:	.WORD	0		;ODD ADDRESS TRAP
	.WORD	0		;MEMORY PROTECTION VIOLATION
	.WORD	SSTSER		;T-BIT & BPT TRAP
	.WORD	0		;IOT TRAP
ILINST:	.WORD	0		;ILLEGAL OR RESERVED INSTRUCTION TRAP
;
BUFFER:	.ASCII	<12>

	.IF DF,	RSTS		;++RSTS V7.0
	.ASCII	"RPC/R0  LPC/R1  NPC/R2  PSW/R3  DSW/R4  "
	.ASCII	"OPC/R5   SS/SP  DD/TOS  "<15><12>
	.ENDC			;++RSTS V7.0

BUF1:	.ASCII	"PCPCPC  PCPCPC  PCPCPC  PSPSPS  DSDSDS  "

	.IF DF,	RSTS		;++RSTS V7.0
	.ASCII	"OPCOPC  SSSSSS  DDDDDD  "
	.ENDC			;++RSTS V7.0

	.ASCII	<15><12>
BUF2:	.ASCII	"R0R0R0  R1R1R1  R2R2R2  R3R3R3  "
	.ASCII	"R4R4R4  R5R5R5  SPSPSP  TOSTOS  "<15><12>
ENDBUF:
;
BREAK:	.ASCII	<12>">>> BREAK <<<"<15><12>
ENDBRK:
.EVEN
;
	.END	START
