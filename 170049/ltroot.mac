.INCLUDE /CMN:COMMON/
.INCLUDE /CMN:KERNEL/
.INCLUDE /CMN:LATDEF/
TITLE	LTROOT,<LAT Root code/data>,0D,02-AUG-91,DWF/KPH/JFM/PJH

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit History for LTROOT     
;+
;
;			[RSTS V9.6]
;  000  KPH  20-Oct-87	Creation from DWF's efforts
;  001  KPH  23-Dec-87	Changes for variable multicast message
;  002	DWF  02-Mar-88	Use LAT L3Q bit, add idle circuit block queue,
;			clean up .ASSUMEs
;  003	PJH  02-Mar-88	Globalize root area for INISTA return
;  004	JFM  24-Feb-88	More changes for variable multicast message
;  005	DWF  21-Apr-88	Add receive buffer count per datalink
;
;			[RSTS V10.0]
;  006	DRP  12-Oct-89	Add Soliciation block list
;  007	DRP  12-Nov-89	Add L.FLAG flag byte
;
;			[RSTS/E V10.1]
;  008	DRP  31-Jul-91	Change symbol name L.FLAG to L.FLG
;-
.SBTTL	Declare our .PSECTs

	DEFORG	LTROOT		;**Temporary** to make an easy include
	DEFORG	LATCTL

.SBTTL	LAT Root Data Structures                           

	ORG	LATCTL

; First of all, define the control table
                                    
$$LATS::								;003
LATCTL:	
.ASSUME	L.ACT	EQ	<.-LATCTL>					;002
	.BYTE	0		; No lines open
.ASSUME	L.MCTT	EQ	<.-LATCTL>					;002
	.BYTE	3		; Multicast timer
.ASSUME	L.NCIR	EQ	<.-LATCTL>					;002
	.WORD	1		; Initial circuit ID
.ASSUME	L.AVCB	EQ	<.-LATCTL>					;002
	.WORD	0		; Link to first circuit block
	.WORD	LATCTL+L.AVCB 	; Link to last circuit block
.ASSUME	L.IVCB	EQ	<.-LATCTL>					;002
	.WORD	0		; Link to first idle circuit block	;002
	.WORD	LATCTL+L.IVCB	; Link to last idle circuit block	;002
.ASSUME	L.ICNT	EQ	<.-LATCTL>					;002
	.BYTE	0		; Number of idle circuit blocks		;002
.ASSUME	L.NSVC	EQ 	<.-LATCTL>					;004
	.BYTE	0		; Number of services currently offered	;004
.ASSUME	L.XMTV	EQ	<.-LATCTL>					;002
	.BYTE	3		; Retransmit timer
.ASSUME	L.XMTC	EQ	<.-LATCTL>					;002
	.BYTE	3		; Maximum retransmits allowed
.ASSUME	L.MCTP	EQ	<.-LATCTL>					;002
	.WORD	MCTMSG		; Pointer to multicast message
.ASSUME	L.NODE 	EQ	<.-LATCTL>					;004
	.WORD	0		; Pointer to node descriptor block	;004
.ASSUME	L.SRVC	EQ	<.-LATCTL>					;004
	.WORD	0		; Link to first service			;004
	.WORD	LATCTL+L.SRVC	; Link to last service block		;004
.ASSUME	L.EDDB	EQ	<.-LATCTL>					;002
	.BLKW0	LATLIN,0 	; DDB table
.ASSUME	L.EPDB	EQ	<.-LATCTL>					;002
	.BLKW0	LATLIN,0 	; PDB table
.ASSUME	L.NRCV	EQ	<.-LATCTL>					;005
	.BLKW0	LATLIN,0	; Number of receive buffers per datalink;005
				; (current and quota)			;005
.ASSUME	L.SOBL	EQ	<.-LATCTL>					;006
	.WORD	0		; Link to first solicitation block	;006
	.WORD	LATCTL+L.SOBL	; Link to last solicitation block	;006
.ASSUME	L.FLG	EQ	<.-LATCTL>					;008
	.BYTE	0		; Flag byte				;007
	.EVEN			; ...in the quietest moments		;005
.ASSUME	L.ZTME	EQ	<.-LATCTL>					;002
	.BLKB0	L.CLNG,0 	; Counters  
.ASSUME	L.LENG	EQ	<.-LATCTL>					;002

; Define LAT's completion queue


LATQUE::.WORD	0,LATQUE	; LAT completion queue
	.L3Q	QLAT		; Bit to set on completion		;002

	TMPORG	SJBQUE,LATJOB-1
	.WORD	LATQUE		; Set the System Job table pointer
	UNORG                       

.SBTTL	Multicast message

	.WORD	0		; Length of multicast message		;001
MCTMSG::
	.BYTE	9.,0,43.,0,0,15.; Multicast address 09-00-2B-00-00-0F
	.BYTE	0,0,0,0,0,0	; Source address (filled in by driver)
	.WORD	0		; Protocol Type (filled in by driver)
	.BYTE	40.		; Service announcement type
	.BYTE	0		; No preferred Server Circuit Timer
	.BYTE	5,5		; Max and Min protocol versions = 5
	.BYTE	5,1		; This is a V5.1 implementation
	.BYTE	0,0		; Incarnation and change flags
				;  (changed by the LAT process code)
	.WORD	632.		; Datalink recv frame size
	.BYTE	60.		; Multicast timer (seconds)
	.BYTE	0		; Node status (available)
.ASSUME	M.VAR	EQ <.-MCTMSG>	; We must be at start of variable fields;004
	.BLKB0	N.LEN		; Include room for maximum node block 	;004
	.BYTE	0		; Number of services currently offered	;004
	.BLKB0	S.LENG-2*M.NSER ; Include room for all services		;004
	.BYTE	1		; Length of service class		;004
	.BYTE	1		; Service class list = 1		;004
	.EVEN			; Multicast message must be even	;004
.ASSUME	M.LEN	EQ <.-MCTMSG> 						;004
MCTEND:

.SBTTL	NODBLK - LAT host node descriptor block				;004
;+									;004
; NODBLK - LAT host node descriptor block				;004
;									;004
; The node descriptor block is block carved out of memory for use by 	;004
; LAT to keep track of the group codes currently enabled on the system, ;004
; the node name, and a description ofthe node.  These things are used 	;004
; in the multicast message.  						;004
;									;004
; // This should be created from XBUFF in LTU (NETNDM function) when 	;004
;    the first SET NODE/LAT command is issued. //			;004
;-									;004

NODBLK::.BLKB0	N.LEN		; Set aside a spot for the node block	;004
NODEND:				; End of node block			;004
	.EVEN			; Ensure everything is evened up	;004
$$LATE::								;003

	.END          
