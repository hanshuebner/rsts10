1	SUB INISER							      &
\	MODULE$ = "INISER"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : INISER.B2S				      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : ACT/KCG/PRL/DBM				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL INISER						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		O	error status			      &
	!				  0 = no error			      &
	!				  n = ERR value n		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	30-MAR-84	(ACT) Creation for V9.0		      &
	! 		06-Jun-84	(KCG) Fixed location of runburst and  &
	!				      priority for batch servers      &
	! V9.0-07	18-Jun-84	(PRL) General cleanup		      &
	! V9.0-08	05-Oct-84	(PRL) Use 1st form in FDF if no qual  &
	! V9.0-10	28-Jan-85	(PRL) Allow /[NO]SHAREABLE for batch  &
	! V9.0-12	26-Feb-85	(PRL) Fix /PRIORITY=n rounding bug    &
	!		07-Mar-85	(PRL) Fix default run-burst bug	      &
	! =================================================================== &
	! V9.1-05	09-Aug-85	(PRL) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.5-01	10-Jun-87	(DBM) Fix FN.KBX.TO.KB$ function      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	This subprogram is called to process an INITIALIZE/SERVER     &
	!	command. The format of the command is			      &
	!								      &
	!		INITIALIZE/SERVER server-name[:]		      &
	!								      &
	!	 Qualifiers for this command are:			      &
	!								      &
	!		/[NO]CONTROLS[=UP_ARROW]			      &
	!		/FORMS=form-name				      &
	!		/PRIORITY=n					      &
	!		/RUN_BURST=n					      &
	!		/[NO]SHAREABLE					      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	10000			process print server qualifiers	      &
	!	11000			process batch server qualifiers	      &
	!								      &
	!	CHKNAM			validate name characters	      &
	!	CHKSER			validate server name		      &
	!	DISPLY			display text at user's KB:	      &
	!	GETFRM			lookup/parse form in FDF	      &
	!	INIPKT			initialize send packet		      &
	!	RECV			receive packet from queue manager     &
	!	SEND			send packet to queue manager	      &
	!								      &
	!	FET$A			(CUI) fetch argument		      &
	!	FET$CQ			(CUI) fetch command qualifier	      &
	!	FET$P			(CUI) fetch parameter		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!	15000	FN.PRIV%	check user's priv status	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	PBS common data (%INCLUDE PBSCMN.B2S)	      &
	!	   7o0	PBSMAP	PBS map fields (%INCLUDE PBSMAP.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSKEY	PBS CUI keywords (%INCLUDE PBSKEY.B2S)	      &
	!	   700	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	CALL INIPKT				!initialize send packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	CALL FET$CQ BY REF (TEN.Q%)		!fetch the /TENTATIVE qual    &
\	TEN.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$P BY REF (SER.T%)		!fetch server parameter	      &
\	SER.POS% = U.POS%			!save pos of server in cmd    &
\	SER$ = SEG$(U.STR$,1%,U.LEN%)		!get server specified	      &
\	Z% = 2% AND TEN.FLG%			!allow logical server name    &
						!  if /TENTATIVE qual found   &
\	CALL CHKSER (SER$,SER.TYP%,Z%)		!validate server name	      &
\	SUBEXIT IF ERRSTS%			!exit if invalid server	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	SRV$ = FN.KBX.TO.KB$ (SER$)		!display standard KBn: name   &
						!			      &
\	CALL FET$CQ BY REF (SHR.Q%)		!fetch the /SHAREABLE qual    &
\	IF U.PRES% THEN				!if present,		      &
		NOSHR.FLG% = U.NO%		!  set flag if /NOSHAREABLE   &
\		PKT.FLG% = PKT.FLG% OR IDF.ASN%	!  set assign flag in packet  &
			IF NOSHR.FLG%		!    if /NOSHAREABLE	      &
\	END IF					!end if			      &
						!			      &
\	GOSUB 10000				!go process print quals	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
\	GOSUB 11000				!go process batch quals	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
						!			      &
\	PKT.CMD$ = CHR$(ID.CMD%)		!load init device cmd code    &
\	PKT.RTQ$ = CHR$(AK.FLG%)		!load ACK request flag	      &
\	PKT.QUE$ = CHR$(SER.TYP%)		!load server queue type	      &
\	PKT.ID.DVL$ = CHR$(LEN(SER$)) 		!load the server name length  &
\	PKT.ID.DEV$ = SER$			!load the server name	      &
						!			      &
\	CALL SEND (ID.LEN%,SEND.RETRY%)		!send the init packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
			OR NOSEND%		!    or NOSEND flag set	      &
						!			      &
\	CALL RECV (RECV.WAIT%)			!wait for ACK/NACK	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	IF ASCII(PKT.CMD$) = AK.CMD% THEN	!if ACK received,	      &
		ERRSTS% = 0%			!  return success status      &
						!			      &
\		Z$,Z1$ = ""			!  init prefix/suffix text    &
\		SELECT SER.TYP%			!  select via server type:    &
\		CASE = PRT.TYP%			!  case = print server	      &
\			Z$ = "Print s"		!    build prefix text	      &
\		CASE = BAT.TYP%			!  case = batch server	      &
\			Z$ = "Batch s"		!    build prefix text	      &
\		CASE ELSE			!  case else		      &
\			Z$ = "S"		!    don't prefix type	      &
\		END SELECT			!  end select		      &
						!			      &
\		IF NOSHR.FLG% THEN		!  if /NOSHAREABLE,	      &
			Z1$ = "non-"		!    add 'non' to suffix      &
\		END IF				!  end if		      &
\		Z1$ = " " + Z1$ + "shareable"	!  build [non-]shareable text &
\		Z1$ = Z1$ + " with forms " + FORM$			      &
			IF SER.TYP% = PRT.TYP%	!  append form names if print &
						!			      &
\		U.POS% = 0%			!  disable repainting of cmnd &
\		CALL DISPLY (Z$+"erver "+SRV$+" initialized"+Z1$)	      &
						!  and display ack message    &
						!			      &
\		IF PKT.STS% = RMS.LBY% THEN	!  if dev in-use,	      &
			SELECT SER.TYP%		!    select by server type:   &
\			CASE = PRT.TYP%		!    case = print server,     &
\				Z$ = "%Device " + SRV$ + " in use"	      &
						!      build warning text     &
\			CASE = BAT.TYP%		!    case = batch server,     &
\				Z$ = "%No pseudo-keyboards available"	      &
						!      build warning text     &
\			CASE ELSE		!    case else,		      &
\				Z$ = "%Device in use"			      &
						!      build warning text     &
\			END SELECT		!    end select		      &
\			CALL DISPLY (Z$)	!    display warning text     &
\		END IF				!  end if		      &
						!			      &
	ELSE					!else NACK received:	      &
		ERRSTS% = PKT.STS%		!  return error status	      &
\		SELECT ERRSTS%			!  select based on error:     &
\		CASE = RMS.FEX%			!  case = dev already inited, &
\			U.POS% = SER.POS%	!    point at server name     &
\			CALL DISPLY ("?Server already exists")		      &
						!    display error msg	      &
\		CASE ELSE			!  case else,		      &
\			FATAL% = TRUE%		!    set fatal error flag     &
\			ERRNAM$ = MODULE$	!    return bad module name   &
\		END SELECT			!  end select		      &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit			      &

10000	!	p r o c e s s   p r i n t   q u a l i f i e r s		      &
	!								      &
	!								      &
	Z% = IDC.PUC%				!default is /CONT=UP_ARROW    &
\	CALL FET$CQ BY REF (CTL.Q%)		!fetch /[NO]CONTROLS qual     &
\	IF U.PRES% THEN				!if present,		      &
		RETURN IF FN.CONF%(PRT.TYP%)	!  error if not print server  &
\		IF U.NO% THEN			!  if NO,		      &
			Z% = 0%			!    clear CONTROL flag	      &
		ELSE	CALL FET$KA BY REF (UPA.K%)			      &
						!  else fetch UP_ARROW arg    &
\			Z% = IDC.CTL%		!    set CTL flag bit	      &
				UNLESS U.PRES%	!      unless present	      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
\	PKT.ID.CHR% = PKT.ID.CHR% OR Z%		!set CONTROLS flags (if any)  &
		IF SER.TYP% = PRT.TYP%		!  if print server	      &
						!			      &
\	IF TEN.FLG% THEN			!if /TENTATIVE qual found,    &
		RETURN IF FN.CONF%(PRT.TYP%)	!  error if not print server  &
\		PKT.FLG% = PKT.FLG% OR IDF.TEN%	!  set tentative flag in pkt  &
\	END IF					!end if			      &
						!			      &
\	FORM$ = ""				!init null form name	      &
\	U.POS% = 0%				!clear repaint flag	      &
\	CALL FET$CQ BY REF (FRM.Q%)		!fetch the /FORMS qualifier   &
\	IF U.PRES% THEN				!if qualifier is present,     &
		RETURN IF FN.CONF%(PRT.TYP%)	!  error if not print server  &
\		CALL FET$A BY REF		!  fetch the argument	      &
\		FORM$ = SEG$(U.STR$,1%,U.LEN%)	!  save form name	      &
\	END IF					!end if			      &
						!			      &
\	IF SER.TYP% = PRT.TYP% THEN		!if print server,	      &
		CALL GETFRM (FORM$,SER$,TRUE%)	!  load form attributes	      &
\		RETURN IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

11000	!	p r o c e s s   b a t c h   q u a l i f i e r s		      &
	!								      &
	!								      &
	Z% = -8%				!default to use priority -8   &
\	PRI.POS% = 0%				!show no qualifier found      &
\	CALL FET$CQ BY REF (PRI.Q%)		!fetch /PRIORITY qual	      &
\	IF U.PRES% THEN				!if present,		      &
		RETURN IF FN.CONF%(BAT.TYP%)	!  error if not batch server  &
\		RETURN UNLESS FN.PRIV% ("TUNE")	!  exit if no TUNE priv	      &
\		PRI.POS% = U.POS%		!  save priority arg position &
\		CALL FET$A BY REF		!  fetch priority arg	      &
\		Z% = U.LOW% AND NOT 7%		!  save value (rounded down)  &
\	END IF					!end if			      &
\	PKT.ID.PRI$ = CHR$(Z%)			!load priority value	      &
		IF SER.TYP% = BAT.TYP%		!  if batch server	      &
						!			      &
\	Z% = 6%					!default to use run-burst = 6 &
\	CALL FET$CQ BY REF (RNB.Q%)		!fetch /RUNBURST qual	      &
\	IF U.PRES% THEN				!if present,		      &
		RETURN IF FN.CONF%(BAT.TYP%)	!  error if not batch server  &
\		RETURN UNLESS FN.PRIV% ("TUNE")	!  exit if no TUNE priv	      &
\		CALL FET$A BY REF		!  get runburst arg	      &
\		Z% = U.LOW%			!  save value		      &
\	END IF					!end if			      &
\	PKT.ID.RNB$ = CHR$(Z%)			!load run-burst		      &
		IF SER.TYP% = BAT.TYP%		!  if batch server	      &
						!			      &
\	RETURN					!exit			      &

15000	!	f n . p r i v % ( P R I V $ )				      &
	!								      &
	!								      &
	!inputs:	PRIV$		-	priv name to check	      &
	!								      &
	!outputs:	FN.PRIV%	-	privilege status:	      &
	!					  TRUE  -> priv on	      &
	!					  FALSE -> priv off	      &
	!								      &
	!		ERRSTS%		-	0 if priv on		      &
	!					ERR.PRVIOL if priv off	      &
	!					ERR.BADNAM if invalid priv    &
	!								      &
	DEF FN.PRIV%(PRIV$)			!start definition	      &
\	ON ERROR GO TO 15010			!local error routine	      &
\	Z$ = SYS(PRIV.OFF$)			!disable temp privs	      &
\	ERRSTS% = 0%				!clear ERRSTS		      &
\	PRIV$ = EDIT$(PRIV$,-1%)		!trim the priv name string    &
\	Z$ = SYS (				!do check priv SYS call:      &
		CHR.6$ +			!  FIP call		      &
		CHR$(32%) +			!  check access function      &
		CHR$(1%) +			!  check priv name subfun     &
		CHR.0$ +			!  reserved		      &
		CHR.00$ +			!  reserved		      &
		PRIV$				!  priv name to check	      &
		 )				!end of sys call	      &
\	Z% = ASCII(SEG$(Z$,3%,3%))		!save priv status	      &
\	FN.PRIV% = (Z% = 0%)			!return fn value	      &
\	IF Z% THEN				!if priv not enabled,	      &
		CALL DISPLY ("?"+PRIV$+" privilege required")		      &
						!  display error message      &
\		ERRSTS% = ERR.PRVIOL%		!  and return PRVIOL error    &
\	END IF					!end if			      &
\	GOTO 15020				!skip to function exit	      &

15010	ERRSTS% = ERR.BADNAM%			!set bad priv name	      &
\	CALL DISPLY ("?Invalid privilege name")	!display error message	      &
\	FN.PRIV% = FALSE%			!return priv disabled	      &
\	RESUME 15020				!resume to function end	      &

15020	Z$ = SYS(PRIV.ON$)			!enable privs		      &
\	FNEND					!end FN.PRIV% function	      &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

16000	!	f n . c o n f % ( STYP% )				      &
	!								      &
	!								      &
	!inputs:	STYP%		-	server type to match	      &
	!		SER.TYP%	-	current server type	      &
	!								      &
	!outputs:	FN.CONF%	-	server types conflict flag:   &
	!					   TRUE% = types conflict     &
	!					  FALSE% = don't conflict     &
	!		ERRSTS%		-	error status:		      &
	!					       0 = no conflict	      &
	!					  BADNAM = types conflict     &
	!								      &
	DEF FN.CONF% (STYP%)						      &
\	IF SER.TYP% = STYP% THEN		!if correct server type,      &
		ERRSTS% = 0%			!  return success	      &
	ELSE	ERRSTS% = ERR.BADNAM%		!else return BADNAM error     &
\		C.POS% = SER.POS%		!  set 2nd pointer to server  &
\		CALL DISPLY ("?Conflicting elements")			      &
						!  display error message      &
\	END IF					!end if			      &
						!			      &
\	FN.CONF% = (ERRSTS% <> 0%)		!return TRUE% if error	      &
\	FNEND					!end FN.CONF% function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND								      &

