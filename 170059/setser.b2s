1	SUB SETSER							      &
\	MODULE$ = "SETSER"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : SETSER.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : ACT/KCG/DBM				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL SETSER						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		O	error status			      &
	!				  0 = no error			      &
	!				  n = ERR value n		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	30-MAR-84	(ACT) Creation for V9.0		      &
	! 		06-Jun-84	(KCG) Fixed location of runburst and  &
	!				      priority for batch servers      &
	! V9.0-07	18-Jun-84	(PRL) General cleanup		      &
	! V9.0-10	28-Jan-85	(PRL) Allow /[NO]SHAREABLE for batch  &
	! V9.0-12	26-Feb-85	(PRL) Fix /PRIORITY=n rounding bug    &
	!		07-Mar-85	(PRL) FIX default run-burst bug	      &
	! =================================================================== &
	! V9.1-05	05-Aug-85	(PRL) Return KBn format in NOSUCH msg &
	!				      Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.4-05	11-May-87	(DBM) Require only TUNE for /PRIORITY &
	!				      and /RUN_BURST		      &
	! =================================================================== &
	! V9.5-01	10-Jun-87	(DBM) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.6-09	07-Apr-88	(DBM) Add privilege check on /CONTROL &
	! =================================================================== &
	! V10.1-J	19-Mar-92	(PRL) Support 'xxx*' wildcards	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	This subprogram is called to process the SET SERVER	      &
	!	command. The format of the command is			      &
	!								      &
	!		SET SERVER server-name[:]			      &
	!								      &
	!	 Qualifiers for this command are:			      &
	!								      &
	!		/BATCH						      &
	!		/[NO]FORMS[=form-name]				      &
	!		/PRINT						      &
	!		/PRIORITY[=n]					      &
	!		/RUN_BURST[=n]					      &
	!		/[NO]SHAREABLE					      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	CHKNAM			validate name characters	      &
	!	CHKSER			validate server name		      &
	!	DISPLY			display text at user's KB:	      &
	!	GETFRM			lookup/parse form in FDF	      &
	!	INIPKT			initialize send packet		      &
	!	RECV			receive packet from queue manager     &
	!	SEND			send packet to queue manager	      &
	!								      &
	!	FET$A			(CUI) fetch argument		      &
	!	FET$CQ			(CUI) fetch command qualifier	      &
	!	FET$P			(CUI) fetch parameter		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	PBS common data (%INCLUDE PBSCMN.B2S)	      &
	!	   7o0	PBSMAP	PBS map fields (%INCLUDE PBSMAP.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSKEY	PBS CUI keywords (%INCLUDE PBSKEY.B2S)	      &
	!	   700	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
						!define SET bit values:	      &
	CTL.BIT% = 1%				! /CONTROLS		      &
\	NCT.BIT% = 2%				! /NOCONTROLS		      &
\	CUP.BIT% = 4%				! /CONTROLS=UPARROW	      &
\	FRM.BIT% = 8%				! /FORMS		      &
\	PRI.BIT% = 16%				! /PRIORITY		      &
\	RUN.BIT% = 32%				! /RUN_BURST		      &
\	SHR.BIT% = 64%				! /SHAREABLE		      &
\	NSH.BIT% = 128%				! /NOSHAREABLE		      &
						!			      &
\	SNAM$ = "*"				!init server name (any)	      &
\	STYP% = 0%				!init server type (any)	      &
\	SER.POS% = 0%				!init server position in cmd  &
						!			      &
\	CALL FET$P BY REF (SER.T%)		!fetch server parameter	      &
\	IF U.PRES% THEN				!if any specified,	      &
		SNAM$ = SEG$(U.STR$,1%,U.LEN%)	!  save server name string    &
\		SER.POS% = U.POS%		!  save position in cmd	      &
\		Z% = 1% + 2%			!  allow wldcrd,logical names &
\		CALL CHKSER (SNAM$,STYP%,Z%)	!  check for valid server     &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if error or CTRL/C    &
\	END IF					!end if			      &
\	SER$ = FN.SERVER$(SNAM$)		!build name for matching rec  &
						!			      &
\	CALL FET$CQ BY REF (BAT.Q%)		!fetch /BATCH qualifier	      &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = BAT.TYP%		!  select only batch servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(BAT.TYP%)	!  exit if not batch server   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (CTL.Q%)		!fetch /[NO]CONTROLS qual     &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = PRT.TYP%		!  select only print servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(PRT.TYP%)	!  exit if not print server   &
\		GOSUB 10000			!  process qualifier	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (FRM.Q%)		!fetch /FORMS qualifier	      &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = PRT.TYP%		!  select only print servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(PRT.TYP%)	!  exit if not print server   &
\		GOSUB 10100			!  process qualifier	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (PRN.Q%)		!fetch /PRINT qualifier	      &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = PRT.TYP%		!  select only print servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(PRT.TYP%)	!  exit if not print server   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (PTY.Q%)		!fetch /PRIORITY qualifier    &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = BAT.TYP%		!  select only batch servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(BAT.TYP%)	!  exit if not batch server   &
\		GOSUB 10200			!  process qualifier	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (RNB.Q%)		!fetch /RUN_BURST qualifier   &
\	IF U.PRES% THEN				!if present,		      &
		STYP% = BAT.TYP%		!  select only batch servers  &
			UNLESS STYP%		!    unless type selected     &
\		SUBEXIT IF FN.CONF%(BAT.TYP%)	!  exit if not batch server   &
\		GOSUB 10300			!  process qualifier	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (SHR.Q%)		!fetch /[NO]SHAREABLE qual    &
\	IF U.PRES% THEN				!if present,		      &
\		GOSUB 10400			!  process qualifier	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\	END IF					!end if			      &
						!			      &
\	IF SET.FLG% = 0% THEN			!if no SET bits on,	      &
		U.POS% = 1%			!  point to command	      &
\		CALL DISPLY ("?Additional qualifier required")		      &
						!  display no quals error     &
\		ERRSTS% = ERR.NOSUCH%		!  return NOSUCH error	      &
\		SUBEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	SER.CNT% = 0%				!show no servers seen yet     &
\	Z% = FN.GET.SERVER%(3%)			!get 1st server rec	      &
\	UNTIL ERRSTS% OR CC.FLG%		!do until error or CTRL/C:    &
\		GOSUB 2000			!  SET current server	      &
\		Z% = FN.GET.SERVER%(0%)		!  get next server	      &
			UNLESS ERRSTS%		!    unless pending error     &
\	NEXT					!do for all servers specified &
						!			      &
\	SUBEXIT IF CC.FLG% OR FATAL%		!exit if CTRL/C or fatal err  &
						!			      &
\	IF SER.CNT% > 0% THEN			!if any servers selected,     &
		ERRSTS% = 0%			!  show no error	      &
	ELSE	ERRSTS% = ERR.NOTFND%		!else return not found status &
\		Z$ = ""				!  init server type text      &
\		Z$ = "print "			!  build 'print'	      &
			IF STYP% = PRT.TYP%	!    if print servers	      &
\		Z$ = "batch "			!  build 'batch'	      &
			IF STYP% = BAT.TYP%	!    if batch servers	      &
\		U.POS% = 0%			!  no repainting of cmd	      &
\		CALL DISPLY ("%No "+Z$+"server "+FN.KBX.TO.KB$(SNAM$)+	      &
				" found")	!  display error msg	      &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit			      &

2000	!	S E T   c u r r e n t   s e r v e r			      &
	!								      &
	!								      &
	SER.CNT% = SER.CNT% + 1%		!incr server counter	      &
\	U.POS% = 0%				!disable repainting cmd	      &
						!			      &
\	SELECT SER.TYP%				!select via server type:      &
\	CASE = PRT.TYP%				!case = print server,	      &
\		SRV$ = "Print s"		!  build 'print' text	      &
\	CASE = BAT.TYP%				!case = batch server,	      &
\		SRV$ = "Batch s"		!  build 'batch' text	      &
\	CASE ELSE				!case else,		      &
\		SRV$ = "S"			!  build null text	      &
\	END SELECT				!end select		      &
\	SRV$ = SRV$ + "erver " + FN.KBX.TO.KB$ (SER.NAM$)		      &
						!build complete server name   &
						!			      &
\	GOSUB 3000				!go SET non-type fields	      &
\	IF ERRSTS% OR CC.FLG% THEN		!if errors or CTRL/C,	      &
		ERRSTS% = 0%			!  clear error to continue    &
			UNLESS FATAL%		!    unless a fatal error     &
\		RETURN				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	IF SER.TYP% = PRT.TYP% THEN		!if print server,	      &
		GOSUB 4000			!  go SET print fields	      &
\		IF ERRSTS% OR CC.FLG% THEN	!  if errors or CTRL/C,	      &
			ERRSTS% = 0%		!    clear error to continue  &
				UNLESS FATAL%	!      unless a fatal error   &
\			RETURN			!    and exit		      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	IF SER.TYP% = BAT.TYP% THEN		!if batch server,	      &
		GOSUB 5000			!  go SET batch fields	      &
\		IF ERRSTS% OR CC.FLG% THEN	!  if errors or CTRL/C,	      &
			ERRSTS% = 0%		!    clear error to continue  &
				UNLESS FATAL%	!      unless a fatal error   &
\			RETURN			!    and exit		      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	PKT.FLG% = SET.FLG%			!load SET field flag bits     &
\	PKT.HDR$ = STRING$(LEN(PKT.HDR$),0%)	!zero packet header fields    &
\	PKT.VER$ = CHR$(PBS.VER%)		!load PBS version no.	      &
\	PKT.CMD$ = CHR$(MS.CMD%)		!load MODIFY SERVER cmd code  &
\	PKT.RTQ$ = CHR$(AK.FLG%)		!load ACK request flag	      &
						!			      &
\	CALL SEND (MS.LEN%,SEND.RETRY%)		!send the MODIFY SERVER pkt   &
\	RETURN IF ERRSTS%			!exit if errors		      &
		  OR CC.FLG%			!  or CTRL/C		      &
			OR NOSEND%		!    or NOSEND flag set	      &
						!			      &
\	CALL RECV (RECV.WAIT%)			!wait for ACK/NACK	      &
\	RETURN IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
						!			      &
\	IF ASCII(PKT.CMD$) = AK.CMD% THEN	!if ACK received,	      &
		CALL DISPLY (SRV$+" modified")	!  display confirmation msg   &
\		ERRSTS% = 0%			!  show success		      &
\		RETURN				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	ERRSTS% = PKT.STS%			!return error status	      &
\	SELECT ERRSTS%				!select via error status:     &
\	CASE = RMS.RNF%				!case = device not found,     &
\		ERRSTS% = 0%			!  pretend success	      &
\		SER.CNT% = SER.CNT% - 1%	!  don't count as seen	      &
\	CASE ELSE				!case else,		      &
\		FATAL% = TRUE%			!  set fatal error flag	      &
\		ERRNAM$ = MODULE$		!  return bad module name     &
\	END SELECT				!end select		      &
						!			      &
\	RETURN					!exit			      &

3000	!	S E T   n o n - t y p e   f i e l d s			      &
	!								      &
	!								      &
	RETURN					!exit			      &

4000	!	S E T   p r i n t   t y p e   f i e l d s		      &
	!								      &
	!								      &
	IF SET.FLG% AND FRM.BIT% THEN		!if form fields changed,      &
		DISPLAY% = FALSE%		!  disable error display      &
\		CALL GETFRM (FORM$,SER.NAM$,TRUE%)			      &
						!  load form attributes	      &
\		DISPLAY% = TRUE%		!  re-enable error display    &
\		IF ERRSTS% THEN			!  if any errors,	      &
			SELECT ERRSTS%		!    select via error status: &
\			CASE = ERR.NOSUCH%	!    case = FDF not found,    &
\				Z$ = "forms definition file does not exist"   &
						!      use file not fnd txt   &
\			CASE = ERR.EOF%		!    case = end of file,      &
\				Z$ = "forms not defined for server"	      &
						!      use not defined txt    &
\			CASE ELSE		!    case else,		      &
\				Z$ = "invalid form definition"		      &
						!      use invalid form txt   &
\			END SELECT		!    end select		      &
\			CALL DISPLY ("%"+SRV$+" - "+Z$)			      &
						!    display error message    &
\			SER.FLG% = TRUE%	!    show we've seen a server &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

5000	!	S E T   b a t c h   t y p e   f i e l d s		      &
	!								      &
	!								      &
	IF SET.FLG% AND PRI.BIT% THEN		!if /PRIORITY specified,      &
		PKT.ID.PRI$ = ID.PRI$		!  load priority value	      &
\	END IF					!end if			      &
						!			      &
\	IF SET.FLG% AND RUN.BIT% THEN		!if /RUNBURST specified,      &
		PKT.ID.RNB$ = ID.RNB$		!  load run-burst value	      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10000	!	p r o c e s s   / [ N O ] C O N T R O L S   q u a l i f i e r &
	!								      &
	!								      &
	RETURN UNLESS FN.PRIV% ("PBSCTL")	!exit if no PBSCTL priv	      &
\	IF U.NO% THEN				!if /NOCONTROLS qual,	      &
		Z% = NCT.BIT%			!  set NOCONTROLS bit	      &
	ELSE	CALL FET$KA BY REF (UPA.K%)	!else fetch UPARROW qualifier &
\		IF U.PRES% THEN			!  if present,		      &
			Z% = CUP.BIT%		!    use UPARROW bit	      &
		ELSE	Z% = CTL.BIT%		!  else use CONTROLS bit      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	SET.FLG% = SET.FLG% OR Z%		!set proper bit		      &
\	RETURN					!and exit		      &

10100	!	p r o c e s s   / F O R M S   q u a l i f i e r		      &
	!								      &
	!								      &
	RETURN UNLESS FN.PRIV% ("PBSCTL")	!exit if no PBSCTL priv	      &
\	FRM.POS% = U.POS%			!save qual position	      &
\	CALL FET$A BY REF			!fetch the argument	      &
\	FORM$ = SEG$(U.STR$,1%,U.LEN%)		!save form name		      &
\	CALL GETFRM (FORM$,"",FALSE%)		!ensure form defined	      &
\	RETURN IF ERRSTS% OR CC.FLG%		!exit if error or CTRL/C      &
						!			      &
\	SET.FLG% = SET.FLG% OR FRM.BIT%		!set field changed bit	      &
\	RETURN					!exit			      &

10200	!	p r o c e s s   / P R I O R I T Y   q u a l i f i e r	      &
	!								      &
	!								      &
	RETURN UNLESS FN.PRIV% ("TUNE")		!exit if no TUNE priv	      &
						!			      &
\	PRI.POS% = U.POS%			!save qual position	      &
\	Z% = -8%				!default to use priority -8   &
\	CALL FET$A BY REF			!get priority arg	      &
\	IF U.PRES% THEN				!if present,		      &
		Z% = U.LOW% AND NOT 7%		!  save value (rounded down)  &
\	END IF					!end if			      &
\	ID.PRI$ = CHR$(Z%)			!save priority value	      &
\	SET.FLG% = SET.FLG% OR PRI.BIT%		!set field changed bit	      &
\	RETURN					!exit			      &

10300	!	p r o c e s s   / R U N B U R S T   q u a l i f i e r	      &
	!								      &
	!								      &
	RETURN UNLESS FN.PRIV% ("TUNE")		!exit if no TUNE priv	      &
						!			      &
\	RUN.POS% = U.POS%			!save qual position	      &
\	Z% = 6%					!use default run-burst = 6    &
\	CALL FET$A BY REF			!get priority arg	      &
\	IF U.PRES% THEN				!if arg specified,	      &
		Z% = U.LOW%			!  save value		      &
\	END IF					!end if			      &
\	ID.RNB$ = CHR$(Z%)			!save run-burst value	      &
\	SET.FLG% = SET.FLG% OR RUN.BIT%		!set field changed bit	      &
\	RETURN					!exit			      &

10400	!	p r o c e s s   / [ N O ] S H A R E A B L E   q u a l	      &
	!								      &
	!								      &
	RETURN UNLESS FN.PRIV% ("SWCFG")	!exit if no SWCFG priv	      &
\	SHR.POS% = U.POS%			!save qual position	      &
\	IF U.NO% THEN				!if NO prefix,		      &
		Z% = NSH.BIT%			!  use NOSHAREABLE bit	      &
	ELSE	Z% = SHR.BIT%			!else use SHAREABLE bit	      &
\	END IF					!end if			      &
						!			      &
\	SET.FLG% = SET.FLG% OR Z%		!set modify bit for field     &
\	RETURN					!exit			      &

15000	!	f n . p r i v % ( P R I V $ )				      &
	!								      &
	!								      &
	!inputs:	PRIV$		-	priv name to check	      &
	!								      &
	!outputs:	FN.PRIV%	-	privilege status:	      &
	!					  TRUE  -> priv on	      &
	!					  FALSE -> priv off	      &
	!								      &
	!		ERRSTS%		-	0 if priv on		      &
	!					ERR.PRVIOL if priv off	      &
	!					ERR.BADNAM if invalid priv    &
	!								      &
	DEF FN.PRIV%(PRIV$)			!start definition	      &
\	ON ERROR GO TO 15010			!local error routine	      &
\	ERRSTS% = 0%				!clear ERRSTS		      &
\	PRIV$ = EDIT$(PRIV$,-1%)		!trim the priv name string    &
\	Z$ = SYS (				!do check priv SYS call:      &
		CHR.6$ +			!  FIP call		      &
		CHR$(32%) +			!  check access function      &
		CHR$(1%) +			!  check priv name subfun     &
		CHR.0$ +			!  reserved		      &
		CHR.00$ +			!  reserved		      &
		PRIV$				!  priv name to check	      &
		 )				!end of sys call	      &
\	Z% = ASCII(SEG$(Z$,3%,3%))		!save priv status	      &
\	FN.PRIV% = (Z% = 0%)			!return fn value	      &
\	IF Z% THEN				!if priv not enabled,	      &
		CALL DISPLY ("?"+PRIV$+" privilege required")		      &
						!  display error message      &
\		ERRSTS% = ERR.PRVIOL%		!  and return PRVIOL error    &
\	END IF					!end if			      &
\	GOTO 15020				!skip to function exit	      &

15010	ERRSTS% = ERR.BADNAM%			!set bad priv name	      &
\	CALL DISPLY ("?Invalid privilege name")	!display error message	      &
\	FN.PRIV% = FALSE%			!return priv disabled	      &
\	RESUME 15020				!resume to function end	      &

15020	FNEND					!end FN.PRIV% function	      &

15100	!	f n . m a t c h . n a m e $ ( NAM.1$ , NAM.2$ )		      &
	!								      &
	!								      &
	!inputs:	NAM.1$		-	server name string	      &
	!		NAM.2$		-	name string to match	      &
	!								      &
	!outputs:	FN.MATCH.NAME%	-	returned match status:	      &
	!					   TRUE% = names match	      &
	!					  FALSE% = names don't match  &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		NAM.1%()	-	work table for server name    &
	!		NAM.2%()	-	work table for match name     &
	!								      &
	!notes:		This function compares a server name string (NAM.1$)  &
	!		against a match name string (NAM.2$). The match name  &
	!		string may contain a '*' or multiple '?' wildcard     &
	!		characters (always match).			      &
	!								      &
	!		If the match name string is null or *, then the	      &
	!		function returns TRUE% (match), regardless of the     &
	!		server name string.				      &
	!								      &
	!		If the match string contains a trailing *, then	      &
	!		the * is replaced with enough ?'s to fill the string  &
	!		to a length of nine characters.			      &
	!								      &
	!								      &
	DEF FN.MATCH.NAME% (NAM.1$,NAM.2$)				      &
\	IF LEN(NAM.2$) = 0%			!if null match name	      &
	   OR NAM.2$ = "*" THEN			! or wildcard match name,     &
		FN.MATCH.NAME% = TRUE%		!  return match		      &
\		FNEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	Z0% = POS(NAM.2$,"*",LEN(NAM.2$))	!look for trailing * char     &
\	IF Z0% > 0% THEN			!if any found,		      &
		NAM.2$ = SEG$(NAM.2$,1%,Z0%-1%) +			      &
			 STRING$(9%-Z0%+1%,ASCII("?"))			      &
						!  replace * with ?'s	      &

15110	CHANGE EDIT$(NAM.1$,2%+4%) TO NAM.1%	!move server name into array  &
\	CHANGE EDIT$(NAM.2$,2%+4%) TO NAM.2%	!move match name into array   &
\	FN.MATCH.NAME% = FALSE%			!init fn value as no match    &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(0%) > NAM.2%(0%)	!  if server name is longer   &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(Z0%) <> NAM.2%(Z0%)	!  if chars don't match	      &
			IF NAM.2%(Z0%) <> ASCII("?")			      &
						!    if not wildcard char     &
				FOR Z0% = 1% TO NAM.1%(0%)		      &
						!      for each char	      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.2%(Z0%) <> ASCII("?")	!  if next char not wild      &
			FOR Z0% = NAM.1%(0%)+1% TO NAM.2%(0%)		      &
						!    for remaining chars      &
						!			      &
\	FN.MATCH.NAME% = TRUE%			!match if loops complete      &
\	FNEND					!end FN.MATCH.NAME% function  &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

15700	!	f n . s e r v e r $  ( SRV$ )				      &
	!								      &
	!								      &
	!inputs:	SRV$		-	server name to standardize    &
	!								      &
	!outputs:	FN.SERVER$	-	standardized server name      &
	!								      &
	!uses:		Z0%,Z1%		-	work integers		      &
	!								      &
	!notes:	This function standardizes a server name as follows:	      &
	!								      &
	!		1) trims the server string			      &
	!		2) strips leading underscore			      &
	!		3) strips trailing colon			      &
	!		4) converts wildcard (*) server to null string	      &
	!		5) converts wildcard (*) unit no. to ???	      &
	!								      &
	!								      &
	DEF FN.SERVER$ (SRV$)						      &
\	SRV$ = EDIT$(SRV$,-2%)			!trim name string	      &
\	Z0% = 1%				!init start pos		      &
\	Z1% = LEN(SRV$)				!init end pos		      &
\	Z0% = Z0% + 1%				!strip leading underscore     &
		IF SEG$(SRV$,Z0%,Z0%) = "_"	!  if any		      &
\	Z1% = Z1% - 1%				!strip trailing colon	      &
		IF SEG$(SRV$,Z1%,Z1%) = ":"	!  if any		      &
\	SRV$ = SEG$(SRV$,Z0%,Z1%)		!save remaining chars	      &
\	SRV$ = "" IF SRV$ = "*"			!use null if wildcard char    &
\	SRV$ = SEG$(SRV$,1%,2%) + "???"		!convert unit no. to ???      &
		IF SEG$(SRV$,3%,3%) = "*"	!  if the unit no. is *	      &
\	FN.SERVER$ = SRV$			!return server name	      &
						!			      &
\	FNEND					!end FN.SERVER$ function      &

15800	!	f n . u n s i g n e d ( VALUE% )			      &
	!								      &
	!								      &
	!inputs:	VALUE%		-	16-bit unsigned integer	      &
	!								      &
	!outputs:	FN.UNSIGNED	-	corresponding FL-PT value     &
	!								      &
	!uses:		Z		-	work FL-PT		      &
	!								      &
	!								      &
	DEF FN.UNSIGNED (VALUE%)					      &
\	Z = VALUE%				!move to fl-pt variable	      &
\	Z = Z + 65536.				!normalize to 0		      &
		IF Z < 0.			!  if negative		      &
\	FN.UNSIGNED = Z				!  return fl-pt value	      &
\	FNEND					!end FN.UNSIGNED function     &

16200	!	f n . g e t . s e r v e r % ( GET.MODE% )		      &
	!								      &
	!								      &
	!inputs:	GET.MODE%	-	initial GET mode (0-3)	      &
	!		STYP%		-	server type to select	      &
	!		SNAM$		-	server name to select	      &
	!								      &
	!outputs:	FN.GET.SERVER%	-	selected server status:	      &
	!					   TRUE% = server selected    &
	!					  FALSE% = no server selected &
	!		ERRSTS%		-	error status:		      &
	!					  0 = no error (rec found)    &
	!					  n = error (rec not found)   &
	!		SER.TYP%	-	selected server's type	      &
	!		SER.NAM$	-	selected server's name	      &
	!								      &
	!uses:		Z%		-	local work integer	      &
	!		Z$		-	local work string	      &
	!								      &
	!notes:								      &
	!								      &
	! This routine is called to return the next server definition record  &
	! (SDR),  based  on  the selection values specified above.  The value &
	! GET.MODE% (0-3) is used by this function in  its  initial  call  to &
	! GETREC, to allow the caller to decide how to get the initial server &
	! record.  Mode 0 (GET NEXT) should be specified if at least one  SDR &
	! has  been  read and no other non-SDRs have been read since the last &
	! call; otherwise, mode 3 (GET GT) should be specified, with SER.TYP% &
	! set  accordingly.  Once the initial GET is performed, the record is &
	! tested to  ensure that it is actually a SDR;  if not,  the function &
	! exits  with status  ERR.NOTFND%.  Otherwise, a check is made to see &
	! if the SDR  should be  selected,  based  on  the  selection values. &
	! If the SDR is selected, the function exits with success status (0); &
	! otherwise, a GET NEXT is  performed  and  the  process repeats.     &
	!								      &
	!								      &
	DEF FN.GET.SERVER% (GET.MODE%)					      &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	Z$ = CHR$(STYP% OR SRV.DEF%) + STRING$(5%,0%)			      &
		IF GET.MODE%			!build key unless get next    &
\	FN.GET.SERVER% = FALSE%			!set fn value = rec not found &

16210	CALL GETREC (GET.MODE%,1%,Z$)		!get initial server record    &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	SER.TYP% = ASCII(PKT.QUE$)		!save server type	      &
\	ERRSTS% = ERR.NOTFND%			!return not-found error	      &
		UNLESS (SER.TYP% AND NOT 15%) = SRV.DEF%		      &
						!  unless a server def record &
			UNLESS ERRSTS%		!    unless a pending error   &
\	FNEXIT IF ERRSTS%			!exit if any error	      &
						!			      &
\	GET.MODE% = 0%				!use GET NEXT mode now	      &
\	SER.TYP% = SER.TYP% AND 15%		!return minor server type     &
						!			      &
\	GOTO 16210				!skip this server	      &
		IF SER.TYP% <> STYP%		!  if types don't match	      &
			IF STYP%		!    if single type	      &
						!			      &
\	SER.NAM$ = SEG$(PKT.ID.DEV$,1%,ASCII(PKT.ID.DVL$))		      &
						!extract server name	      &
\	GOTO 16210				!skip this server	      &
		UNLESS FN.MATCH.NAME%(FN.SERVER$(SER.NAM$),SER$)	      &
						!  unless server names match  &
						!			      &
\	FN.GET.SERVER% = TRUE%			!set fn value = rec found     &
\	FNEND					!end FN.GET.SERVER% function  &

16300	!	f n . c o n f % ( TYP% )				      &
	!								      &
	!								      &
	!inputs:	TYP%		-	server type to match	      &
	!		STYP%		-	current server type	      &
	!								      &
	!outputs:	FN.CONF%	-	server types conflict flag:   &
	!					   TRUE% = types conflict     &
	!					  FALSE% = don't conflict     &
	!		ERRSTS%		-	error status:		      &
	!					       0 = no conflict	      &
	!					  BADNAM = types conflict     &
	!								      &
	DEF FN.CONF% (TYP%)						      &
\	IF STYP% = TYP% THEN			!if correct server type,      &
		ERRSTS% = 0%			!  return success	      &
	ELSE	ERRSTS% = ERR.BADNAM%		!else return BADNAM error     &
\		C.POS% = SER.POS%		!  set 2nd pointer to server  &
\		CALL DISPLY ("?Conflicting elements")			      &
						!  display error message      &
\	END IF					!end if			      &
\	FN.CONF% = (ERRSTS% <> 0%)		!return TRUE% if error	      &
						!			      &
\	FNEND					!end FN.CONF% function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND								      &

