1	SUB STRSER							      &
\	MODULE$ = "STRSER"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : STRSER.B2S				      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : ACT/PRL/DBM				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL STRQUE						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		O	error status			      &
	!				  0 = no error			      &
	!				  n = ERR value n		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	02-Apr-84	(ACT) Creation for V9.0		      &
	! V9.0-03	15-Jun-84	(PRL) General cleanup		      &
	! V9.0-10	02-Feb-84	(PRL) Add server type to ACK message  &
	! V9.0-12	20-Feb-84	(PRL) Handle ?Already started error   &
	! =================================================================== &
	! V9.1-05	09-Aug-85	(PRL) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.5-01	10-Jun-87	(DBM) Fix FN.KBX.TO.KB$ function      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!  The START/SERVER command is used to resume printing on a device    &
	!  that had been stopped via a STOP/SERVER command. The format of     &
	!  the command is as follows:					      &
	!								      &
	!		START/SERVER server-name[:]			      &
	!								      &
	!  The following qualifiers are recognized:			      &
	!								      &
	!		/BACKSPACE[=n]					      &
	!		/FORWARDSPACE[=n]				      &
	!		/NEXT_JOB					      &
	!		/PAGE=n						      &
	!		/RESTART					      &
	!		/TOP_OF_FILE					      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	DISPLY			display text at user's KB:	      &
	!	INIPKT			initialize send packet		      &
	!	CHKSER			Check for valid server name	      &
	!	SEND			send packet to queue manager	      &
	!	RECV			receive packet from queue manager     &
	!								      &
	!	FET$CQ			(CUI) fetch command qualifier	      &
	!	FET$P			(CUI) fetch parameter		      &
	!	FET$A			(CUI) fetch argument		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!	15000	FN.UNSIGNED%	Convert fl-pt to unsigned int	      &
	!								      &
	!******************************************************************** &
						!			      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700  PBSCMN	PBS common data (%INCLUDE PBSCMN.B2S)	      &
	!	   700	PBSMAP  PBS map fields (%INCLUDE PBSMAP.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSKEY	PBS CUI keywords (%INCLUDE PBSKEY.B2S)	      &
	!	   700 CUICMN	PBS CUI common data (%INCLUDE CUICMN.B2S)     &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	CALL INIPKT				!initialize send packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	CALL FET$P BY REF (SER.T%)		!fetch server parameter	      &
\	SER.POS% = U.POS%			!save position in command     &
\	SER$ = SEG$(U.STR$,1%,U.LEN%)		!get server specified	      &
\	Z% = 2%					!allow logical server name    &
\	CALL CHKSER (SER$,SER.TYP%,Z%)		!validate server	      &
\	SUBEXIT IF ERRSTS%			!exit if invalid server	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	SRV$ = FN.KBX.TO.KB$ (SER$)		!display standard KBn: name   &
						!			      &
\	SELECT SER.TYP%				!select via server type:      &
\	CASE = PRT.TYP%				!case = print server,	      &
\		GOSUB 10000			!  go process print quals     &
\		SUBEXIT IF ERRSTS%		!  exit if any errors	      &
			   OR CC.FLG%		!    or CTRL/C		      &
\	CASE = BAT.TYP%				!case = batch server,	      &
\		GOSUB 11000			!  go process batch quals     &
\		SUBEXIT IF ERRSTS%		!  exit if any errors	      &
			   OR CC.FLG%		!    or CTRL/C		      &
\	END SELECT				!end select		      &
						!			      &
\	CALL FET$CQ BY REF (NXJ.Q%)		!fetch /NEXT_JOB qualifier    &
\	PKT.FLG% = PKT.FLG% OR CDF.NXT%		!set NXT flag		      &
		IF U.PRES%			!  if found		      &
						!			      &
\	PKT.CMD$ = CHR$(CD.CMD%)		!load CONT DEVICE cmd code    &
\	PKT.RTQ$ = CHR$(AK.FLG%)		!load ACK request flag	      &
\	PKT.QUE$ = CHR$(SER.TYP%)		!load server queue type	      &
\	PKT.ID.DVL$ = CHR$(LEN(SER$)) 		!load the server name length  &
\	PKT.ID.DEV$ = SER$			!load the server name	      &
						!			      &
\	CALL SEND (CD.LEN%,SEND.RETRY%)		!send the CONT DEV packet     &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
			OR NOSEND%		!    or NOSEND flag set	      &
						!			      &
\	CALL RECV (RECV.WAIT%)			!wait for ACK		      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	IF ASCII(PKT.CMD$) = AK.CMD% THEN	!if ACK received,	      &
		ERRSTS% = 0%			!  return success status      &
\		SELECT SER.TYP%			!  select via server type:    &
\		CASE = PRT.TYP%			!  case = print server	      &
\			Z$ = "Print s"		!    build prefix text	      &
\		CASE = BAT.TYP%			!  case = batch server	      &
\			Z$ = "Batch s"		!    build prefix text	      &
\		CASE ELSE			!  case else		      &
\			Z$ = "S"		!    don't prefix type	      &
\		END SELECT			!  end select		      &
						!			      &
\		U.POS% = 0%			!  disable repainting of cmnd &
\		CALL DISPLY (Z$+"erver "+SRV$+" started")		      &
						!  and display it	      &
\		SUBEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	ERRSTS% = PKT.STS%			!save error status code	      &
\	U.POS% = SER.POS%			!set command line pointer     &
						!			      &
\	SELECT ERRSTS%				!select via error code:	      &
\	CASE = RMS.RNF%				!case = device not found,     &
\		Z$ = "?Server does not exist"	!  use not exist msg	      &
\	CASE = RMS.IOP%				!case = already started,      &
\		Z$ = "?Server already started"	!  use already started msg    &
\	CASE ELSE				!case else,		      &
\		FATAL% = TRUE%			!  set fatal error flag	      &
\		ERRNAM$ = MODULE$		!  return bad module name     &
\	END SELECT				!end select		      &
						!			      &
\	CALL DISPLY (Z$)			!display  error mesage	      &
		UNLESS FATAL%			!  unless fatal		      &
\	SUBEXIT					!exit			      &

10000	!	p r o c e s s   p r i n t   q u a l i f i e r s		      &
	!								      &
	!								      &
	ERRSTS% = 0%				!init error status = success  &
						!			      &
\	CALL FET$CQ BY REF (RST.Q%)		!fetch /RESTART qualifier     &
\	IF U.PRES% THEN				!if found,		      &
		RETURN UNLESS FN.CHK.TYP%(PRT.TYP%)			      &
						!  exit if wrong server type  &
\		RETURN IF ERRSTS%		!  exit if wrong type	      &
\		PKT.FLG% = PKT.FLG% OR CDF.TJO%	!  set TJO flag		      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (TOP.Q%)		!fetch /TOP_OF_FILE qualifier &
\	IF U.PRES% THEN				!if found,		      &
		RETURN UNLESS FN.CHK.TYP%(PRT.TYP%)			      &
						!  exit if wrong server type  &
\		PKT.FLG% = PKT.FLG% OR CDF.TFI%	!  set TFI flag		      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (PAG.Q%)		!fetch /PAGE qual	      &
\	IF U.PRES% THEN				!if found,		      &
		RETURN UNLESS FN.CHK.TYP%(PRT.TYP%)			      &
						!  exit if wrong server type  &
\		PKT.FLG% = PKT.FLG% OR CDF.PAG%	!  set PAG flag		      &
\		PKT.ID.PAG.MSB% = 0%		!  set default page msb	      &
\		PKT.ID.PAG.LSB% = DFL.PGE%	!  set default page lsb	      &
\		CALL FET$A BY REF		!  fetch the argument	      &
\		IF U.PRES% THEN			!  if present		      &
			PKT.ID.PAG.MSB% = U.HIGH%			      &
						!    load arg msb value	      &
\			PKT.ID.PAG.LSB% = U.LOW%!    load arg lsb value	      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (BWD.Q%)		!fetch /BACKSPACE qualifier   &
\	IF U.PRES% THEN				!if found,		      &
		RETURN UNLESS FN.CHK.TYP%(PRT.TYP%)			      &
						!  exit if wrong server type  &
\		PKT.FLG% = PKT.FLG% OR CDF.BWD%	!  set BWD flag		      &
\		PKT.ID.PAG.MSB% = 0%		!  set default page msb	      &
\		PKT.ID.PAG.LSB% = DFL.PGE%	!  load default page no.      &
\		CALL FET$A BY REF		!  fetch the argument	      &
\		IF U.PRES% THEN			!  if present		      &
			PKT.ID.PAG.MSB% = U.HIGH%			      &
						!    load arg msb value	      &
\			PKT.ID.PAG.LSB% = U.LOW%!    load arg lsb value	      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (FWD.Q%)		!fetch /FORWARDSPACE qual     &
\	IF U.PRES% THEN				!if present,		      &
		RETURN UNLESS FN.CHK.TYP%(PRT.TYP%)			      &
						!  exit if wrong server type  &
\		PKT.FLG% = PKT.FLG% OR CDF.FWD%	!  set FWD flag		      &
\		PKT.ID.PAG.MSB% = 0%		!  set default page msb	      &
\		PKT.ID.PAG.LSB% = DFL.PGE%	!  set default page lsb	      &
\		CALL FET$A BY REF		!  fetch the argument	      &
\		IF U.PRES% THEN			!  if present		      &
			PKT.ID.PAG.MSB% = U.HIGH%			      &
						!    load arg msb value	      &
\			PKT.ID.PAG.LSB% = U.LOW%!    load arg lsb value	      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

11000	!	p r o c e s s   b a t c h   q u a l i f i e r s		      &
	!								      &
	!								      &
	ERRSTS% = 0%				!init error status	      &
\	RETURN					!exit			      &

15000	!	f n . u n s i g n e d % ( FL.PT )			      &
	!								      &
	!								      &
	!inputs:	VALUE		-	floating-pt value 0 to 65535  &
	!								      &
	!outputs:	FN.UNSIGNED%	-	unsigned 16-bit integer	      &
	!								      &
	!uses:		None.						      &
	!								      &
	!								      &
	DEF FN.UNSIGNED% (FL.PT)					      &
\	FL.PT = 0.				!force to 0		      &
		IF FL.PT < 0. OR FL.PT > 65535.	!  if not in range 0-65535    &
\	FL.PT = FL.PT - 65536.			!normalize (-32768,+32767)    &
		IF FL.PT > 32767.		!  if over max pos integer    &
\	FN.UNSIGNED% = FL.PT			!return unsigned integer      &
\	FNEND					!end FN.UNSIGNED% function    &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

16000	!	f n . c h k . t y p % ( QUE.TYP% )			      &
	!								      &
	!								      &
	!inputs:	TYP%		-	server type to match	      &
	!		SER.TYP% (G)	-	current server's type	      &
	!								      &
	!outputs:	FN.CHK.TYP%	-	types match flag:	      &
	!					  TRUE  -> types match	      &
	!					  FALSE -> types don't match  &
	!		ERRSTS%		-	error status:		      &
	!					            0 = types match   &
	!					  ERR.BADNAM% = no match      &
	!								      &
	!uses:		None.						      &
	!								      &
	!								      &
	DEF FN.CHK.TYP% (TYP%)						      &
\	IF SER.TYP% = TYP% THEN			!if types match,	      &
		FN.CHK.TYP% = TRUE%		!  return fn = TRUE	      &
\		ERRSTS% = 0%			!  show no error	      &
	ELSE	FN.CHK.TYP% = FALSE%		!else retrun fn = FALSE	      &
\		ERRSTS% = ERR.BADNAM%		!  show BADNAM error	      &
\		C.POS% = SER.POS%		!  set 2nd pointer to server  &
\		CALL DISPLY ("?Conflicting elements")			      &
						!  display error message      &
\	END IF					!end if			      &
						!			      &
\	FNEND					!end FN.CHK.TYP% error	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
