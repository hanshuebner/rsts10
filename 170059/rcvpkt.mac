.INCLUDE	%CMN:COMMON%
TITLE	RCVPKT,<RECEIVE ACK/NACK PACKET FROM PBS>,0A,10-MAY-91,PRL/KCG

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	RCVPKT Edit History
;+
; EDIT	BY	DATE		REASON
; 001	PRL	28-Jun-84	Creation
;-

.SBTTL	Program description

;+
; This routine is called by RECV.B2S in the PBSMGR task to receive a
; ACK/NACK packet from the PBS queue manager.  It returns status in
; the global error status word ERRSTS.
;
; Calling sequence is:
;
;		CALL RCVPKT BY REF (DATBUF$,DATLEN%,SLPTIM%)
;
;	where	DATBUF$	is the address of the buffer where the packet
;			data will be returned.
;
;		DATLEN% is the length of the data buffer, or 0 if no
;			data is to be returned.
;
;		SLPTIM% is the receive sleep time in seconds, or 0
;			if no sleep is desired.
;
;-

.SBTTL	Define and order the PSECTS

	DEFORG	RCVPKT

.SBTTL	Main program logic

RCVPKT::MOV	#<<FQBSIZ+XRBSIZ>/2>,R3	;R3 = size of FIRQB+XRB to zero
	MOV	#FIRQB,R4		;R4 -> area to zero
.ASSUME	FIRQB+FQBSIZ EQ XRB		;ensure XRB follows FIRQB
10$:	CLR	(R4)+			;clear word of FIRQB and XRB
	SOB	R3,10$			;  for all words there
	MOVB	#2,@#FIRQB+FQFIL	;load receive function byte
	MOVB	#6,R0			;init rmod byte:
					;  2 = truncate
					;  4 = local selecion
	MOV	@6(R5),@#FIRQB+FQMODE	;load sleep time
	BEQ	20$			;none, so don't set rcv sleep bit
	BISB	#1,R0			;non-zero, so set sleep bit
20$:	MOVB	R0,@#FIRQB+FQSIZM	;load rmod byte
	MOV	@4(R5),@#XRB+XRLEN	;load length of data buffer
	BEQ	30$			;zero, so skip buffer addr load
	MOV	2(R5),@#XRB+XRLOC	;non-zero, so load data buffer address
30$:	.MESAG				;receive the message
	CLR	ERRSTS			;clear error status
	BISB	@#FIRQB,ERRSTS		;load error status
	BNE	40$			;error, so exit
	MOVB	@#FIRQB+FQSIZM,RCVJOB	;return sender's job no.
	MOV	@#FIRQB+FQPPN,RCVPPN	;return sender's PPN
	MOV	@#FIRQB+FQNAM1+2,RCVREM	;return no. bytes not sent
	MOV	@#XRB+XRBC,RCVLEN	;return no. bytes sent
40$:	RTS	PC			;exit

GLOBAL	<ERRSTS,RCVJOB,RCVPPN,RCVREM,RCVLEN>
	.END
