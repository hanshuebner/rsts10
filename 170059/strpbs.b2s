1	SUB STRPBS							      &
\	MODULE$ = "STRPBS"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : STRPBS.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : PRL/DRP					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1982, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL STRPBS						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		O	error status:			      &
	!				   0 = no error			      &
	!				   n = ERR value n		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	10-Jul-83	(PRL) Update for V9.0		      &
	! V9.0-07	08-Aug-84	(PRL) Use PBS.LOC$ to build file-spec &
	! V9.0-10	16-Nov-84	(PRL) Add /PRIORITY, /RUNBURST quals  &
	!		29-Jan-85	(PRL) Set sign bit in parameter word  &
	! V9.0-12	25-Feb-85	(PRL) Fix /PRIORITY=0 bug	      &
	! V9.2-01	26-Nov-85	(TJK) Raise temp privs b4 spawning    &
	! V10.1-J	27-Mar-92	(DLS) Increase ack wait timeout on    &
	!					START/QUEUE/MANAGER	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	This subprogram processes the command			      &
	!								      &
	!		START/QUEUE/MANAGER				      &
	!								      &
	!	Command qualifiers:					      &
	!								      &
	!		/PRIORITY=n					      &
	!		/RUNBURST=n					      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!	15000	FN.SPAWN%	spawn a job			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	QUEUE common data (%INCLUDE PBSCMN.B2S)	      &
	!	   710	PBSMAP	Send/Recv/Record fields (%INCLUDE PBSMAP.B2S) &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	CALL INIPKT				!init send packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	PKT.CMD$ = CHR$(NP.CMD%)		!load NOP command	      &
\	PKT.RTQ$ = CHR.0$			!don't request an ACK	      &
\	DISPLAY% = FALSE%			!disable error msg display    &
\	CALL SEND (NP.LEN%,RETRY%)		!send NOP packet	      &
\	DISPLAY% = TRUE%			!re-enable error msg display  &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
		   OR NOSEND%			!  or NOSEND flag set	      &
\	IF ERRSTS% <> ERR.NOSUCH% THEN		!if QMAN rcvr exists,	      &
		U.POS% = 0%			!  disable repainting of cmd  &
\		CALL DISPLY ("?Print/Batch Services already started")	      &
						!  print error msg	      &
\		SUBEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	PRI% = 0%				!default to user's priority   &
\	CALL FET$CQ BY REF (PRI.Q%)		!fetch /PRIORITY qual	      &
\	IF U.PRES% THEN				!if present,		      &
		SUBEXIT UNLESS FN.PRIV%("TUNE")	!  exit if no TUNE priv	      &
\		CALL FET$A BY REF		!  get priority arg	      &
\		PRI% = U.LOW%			!  save priority value	      &
\		PRI% = 1%			!  use value of 1	      &
			IF PRI% = 0% 		!    to achieve priority 0    &
\	END IF					!end if			      &
						!			      &
\	RNB% = 0%				!default to user's run-burst  &
\	CALL FET$CQ BY REF (RNB.Q%)		!fetch /RUNBURST qual	      &
\	IF U.PRES% THEN				!if present,		      &
		SUBEXIT UNLESS FN.PRIV%("TUNE")	!  exit if no TUNE priv	      &
\		CALL FET$A BY REF		!  get runburst arg	      &
\		RNB% = U.LOW%			!  save value		      &
\	END IF					!end if			      &

1100	PBS.TSK% = FN.SPAWN%(PBS.LOC$+PBS.TSK$,PRI%,RNB%)		      &
						!try to spawn job	      &
\	SUBEXIT IF ERRSTS%			!exit if spawn failed	      &
		   OR CC.FLG%			!  or CTRL/C		      &
\	CLOSE #PBS.CHNL%			!close queue file channel     &
\	QUIT% = FALSE%				!clear quit flag	      &
\	RETRY% = 30%				!allow 30 retries on send     &

1200	CALL INIPKT				!init send packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
\	PKT.CMD$ = CHR$(NP.CMD%)		!load NOP command	      &
\	PKT.RTQ$ = CHR$(AK.FLG%)		!enable ACK request flag      &
						!			      &
\	DISPLAY% = QUIT%			!disable msgs unless quitting &
\	CALL SEND (NP.LEN%,RETRY%)		!send a STATUS REQUEST packet &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
		   OR NOSEND%			!  or NOSEND flag set	      &
\	IF ERRSTS% THEN				!if send failed,	      &
		SUBEXIT IF QUIT%		!  exit if quit flag set      &
\		RETRY% = RETRY% - 1%		!  decr no. of retries	      &
\		QUIT% = (RETRY% <= 0%)		!  set quit flg if no retries &
		   OR (ERRSTS% <> ERR.NOSUCH%)	!  or error except no rcvr    &
\		SLEEP 2%			!  wait a few seconds	      &
			UNLESS QUIT%		!    unless quit flag set     &
\		GOTO 1200			!  and try again	      &

1300	DISPLAY% = TRUE%			!re-enable error msg display  &
\	CALL RECV (2% * RECV.WAIT%)		!receive ACK/NACK packet      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	IF ASCII(PKT.CMD$) = AK.CMD% THEN	!if ACK received,	      &
		U.POS% = 0%			!  disable repainting of cmd  &
\		CALL DISPLY ("Print/Batch Services started at "+TIME$(0%))    &
						!  print start msg	      &
	ELSE	ERRSTS% = PKT.STS%		!else save the error code     &
\		FATAL% = TRUE%			!  set fatal error flag	      &
\		ERRNAM$ = MODULE$		!  return bad module name     &
\	END IF					!end if			      &
\	SUBEXIT					!exit			      &

15000	!	f n . s p a w n % ( JOBNAM$ , PRIORITY% , RUNBURST% )	      &
	!								      &
	!								      &
	!inputs:	JOBNAM$		-	file-spec of job to spawn     &
	!		PRIORITY%	-	priority to spawn job:	      &
	!					    0 = use caller's priority &
	!					  255 = priority 0	      &
	!					    n = priority n	      &
	!		RUNBURST%	-	runburst to spawn job:	      &
	!					    0 = use caller's runburst &
	!					    n = runburst n	      &
	!								      &
	!outputs:	ERRSTS%		-	exit status:		      &
	!					    0 = success		      &
	!					    n = ERR value	      &
	!		FN.SPAWN%	-	job no. of spawned job	      &
	!					(0 if spawn failed)	      &
	!								      &
	!uses:		FIRQB%()	-	sys call work array	      &
	!		Z$		-	work string		      &
	!		Z%		-	work integer		      &
	!								      &
	!								      &
	DEF FN.SPAWN% (JOBNAM$,PRIORITY%,RUNBURST%)			      &
\	ON ERROR GOTO 15050			!trap own errors	      &
\	JOBNAM$ = EDIT$(JOBNAM$,-2%)		!trim the jobname string      &
\	CHANGE FSS$(JOBNAM$,1%) TO FIRQB%	!FSS job file-spec to spawn   &
						!load spawn job data:	      &
\	FIRQB%(0%) = 30%			!  no. chars for spawn call   &
\	FIRQB%(1%) = 6%				!  FIP call		      &
\	FIRQB%(2%) = 24%			!  spawn job code	      &
\	FIRQB%(3%) = 128%+64%			!  override no logins flag    &
						!  spawn in another account   &
\	FIRQB%(4%) = 0%				!  create the job detached    &
\	FIRQB%(Z%) = 0%				!  zero core common bytes     &
		FOR Z% = 13% TO 22%		!    all 10 of them	      &
\	FIRQB%(15%) = PRIORITY%			!  priority of spawned job    &
\	FIRQB%(16%) = RUNBURST%			!  runburst of spawned job    &
\	FIRQB%(27%) = PBS.VER% AND 255%		!  load PBS ver in low byte   &
\	FIRQB%(28%) = 128%			!  set sign bit in high byte  &
\	FIRQB%(29%), FIRQB%(30%)  = 0%		!  zero remaining bytes	      &
\	Z$ = SYS(PRIV.ON$)			!Pick up temp privs	      &
\	CHANGE FIRQB% TO Z$			!convert array to string      &
\	CHANGE SYS(Z$) TO FIRQB%		!spawn job & get SYS data     &
\	FN.SPAWN% = FIRQB%(3%) / 2%		!return spawned job no.	      &
\	Z$ = SYS(PRIV.OFF$)			!Drop temp privs	      &
\	ERRSTS% = 0%				!return success status	      &
\	GOTO 15099				!and exit		      &

15050	ERRSTS% = ERR				!return error status	      &
\	RESUME 15060				!resume to process error      &

15060	Z$ = SYS(PRIV.OFF$)			!Ensure temp privs are dropped &
\	SELECT ERRSTS%				!select based on error code:  &
\	CASE = ERR.NOROOM%			!case = no free job slots:    &
\		Z$ = "?No room for additional jobs"			      &
						!  build 'no room' msg	      &
\	CASE = ERR.NOSUCH%			!case = can't find file:      &
\		Z$ = "?Program " + JOBNAM$ + " does not exist"		      &
						!  build 'can't find' msg     &
\	CASE = ERR.NOBUFS%			!case = no XBUF:	      &
\		Z$ = "?Additional XBUF required"!  build 'more XBUF' msg      &
\	CASE = ERR.QUOTA%			!case = quota exceeded	      &
\		Z$ = "?Job or detached-job quota exceeded"		      &
						!  build 'quota exceeded msg  &
\	CASE ELSE				!case else:		      &
\		Z$ = ERT$(ERRSTS%)		!  build RSTS error msg	      &
\	END SELECT				!end select		      &
						!			      &
\	U.POS% = 0%				!disable repainting of cmd    &
\	CALL DISPLY ("?Unable to start Print/Batch Services")		      &
						!display spawn failed text    &
\	CALL DISPLY (Z$)			!display error msg	      &
\	FN.SPAWN% = 0%				!show spawn failed	      &

15099	FNEND					!end FN.SPAWN% function	      &

15100	!	f n . p r i v % ( P R I V $ )				      &
	!								      &
	!								      &
	!inputs:	PRIV$		-	priv name to check	      &
	!								      &
	!outputs:	FN.PRIV%	-	privilege status:	      &
	!					  TRUE  -> priv on	      &
	!					  FALSE -> priv off	      &
	!								      &
	!		ERRSTS%		-	error status:		      &
	!					         0 -> priv on	      &
	!					    PRVIOL -> priv off	      &
	!								      &
	DEF FN.PRIV%(PRIV$)						      &
\	Z$ = SYS (				!do check priv SYS call:      &
		CHR.6$ +			!  FIP call		      &
		CHR$(32%) +			!  check access function      &
		CHR$(1%) +			!  check priv name subfun     &
		CHR.0$ +			!  reserved		      &
		CHR.00$ +			!  reserved		      &
		PRIV$				!  priv name to check	      &
		 )				!end of sys call	      &
\	Z%,FN.PRIV% = (ASCII(SEG$(Z$,3%,3%)) = 0%)			      &
						!return fn value	      &
\	IF Z% THEN				!if priv enabled,	      &
		ERRSTS% = 0%			!  return success	      &
	ELSE	ERRSTS% = ERR.PRVIOL%		!else return PRVIOL error     &
\		CALL DISPLY ("?"+PRIV$+" privilege required")		      &
						!  and display error message  &
\	END IF					!end if			      &
						!			      &
\	FNEND					!end FN.PRIV% function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
