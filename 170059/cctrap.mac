.INCLUDE	%CMN:COMMON%
TITLE	CCTRAP,<Guarded CTRL/C Handler>,0A,10-MAY-91,PRL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	CCTRAP Edit History
;+
; EDIT	BY	DATE		REASON
; 001	PRL	04-Nov-82	Creation
; 002	PRL	17-Oct-83	Don't restart output
;
;-

.SBTTL	Define and order the PSECTS

	DEFORG	CCTRAP

.SBTTL	Description

;+
; This  routine can be called from a BP2 program to protect itself against
; a  user typing  a CTRL/C.  Note  that there is currently no way to guard
; against  two  CTRL/C's  typed quickly  in succession (the famous "double
; CTRL/C" problem).  If  this  routine is called with a non-zero argument,
; the  current CTRL/C trap address is saved and the address of this CTRL/C
; handler is loaded into the CTRL/C interrupt vector.  When a user types a
; CTRL/C, an interrupt  occurs  causing the  new routine to simply set the
; global  CTRL/C  flag  CCFLAG (defined  in PBSCMN.MAC  and PBSCMN.B2S)  and
; return.  The  program  can  then  examine  the flag whenever it needs to
; determine if any CTRL/C's had been typed.  The program can later restore
; the  saved CTRL/C trap address by  alling this routine with an argument
; of zero.
;
; CALL:
;	CCTRAP BY REF (ENABLE%)
;
; PARAMETER LIST:
;	   (R5)	=	1		number of parameters
;	@ 2(R5) =	ENABLE%		enable trapping flag:
;					  <>0 = enable guarded CTRL/C trapping
;					    0 = disable trapping
; RETURNED:
;	None
;-

CCTRAP::TST	@2(R5)			;enable guarded CTRL/C mode?
	BNE	10$			;yes, so go do it
	MOV	CCSAVE,@#24		;no, restore saved trap address
	BR	20$			;all done

10$:	MOV	@#24,CCSAVE		;save current CTRL/C trap address
	MOV	#CTRLC,@#24		;and replace it with our own
20$:	RETURN				;and exit

.SBTTL	Guarded CTRL/C Interrupt Handler
;+
; Come here on a CTRL/C trap.
; Restore the CTRL/C interrupt address
; Set the CTRL/C flag CCFLAG to -1
;-

CTRLC:					;guarded CTRL/C trap entry point
	MOV	#CTRLC,@#24		; reload our CTRL/C address
	MOV	#-1,CCFLAG		; set the CTRL/C flag to -1
	RTI				; and return.

CCSAVE:	.WORD	0			;save CTRL/C trap address here

GLOBAL	<CCFLAG>

.END
