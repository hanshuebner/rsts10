1	SUB SHOSER							      &
\	MODULE$ = "SHOSER"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : SHOSER.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : ACT/KCG/PRL/DBM/SEL			      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1983, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL SHOSER 	(arguments passed via PBSCMN common)	      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		I	Error status			      &
	!				   0 = no error			      &
	!				   n = ERR value		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-06	06-Jun-84	(PRL) Correct display of parameters   &
	! V9.0-07	18-Jun-84	(PRL) General cleanup		      &
	! V9.0-10	16-Jan-85	(PRL) Display form's bottom margin    &
	!		28-Jan-85	      Show "[No]Shareable" for batch  &
	! V9.0-14	15-APR-85	(PRL) Show "[Not] Started" status     &
	!				      Don't show "on-line" status     &
	! =================================================================== &
	! V9.1-03	30-MAY-85	(PRL) Fix bug in %No server found msg &
	! V9.1-04	11-JUN-85	(PRL) Show "Marked for deletion" srvr &
	! V9.1-05	05-AUG-85	(PRL) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.2-01	21-OCT-85	(TJK) Add TRAILER_PAGES attribute     &
	! V9.3-01	01-Feb-87	(DBM) Align "Current Job:" title      &
	! V9.5-01	10-Jun-87	(DBM) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.6-08	03-Mar-88	(DBM) Add dynamic PK support	      &
	! =================================================================== &
	! V10.0-A	08-Jul-89	(PRL) Support /OUTPUT		      &
	! V10.0-G	17-Nov-89	(SEL) Print to output channel	      &
	! =================================================================== &
	! V10.1-J	19-Mar-92	(PRL) Support 'xxx*' wildcards	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSKEY	PBS CUI keywords (%INCLUDE PBSKEY.B2S)	      &
	!	   700	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	d i m e n s i o n   d e c l a r a t i o n s		      &
	!								      &
	!	line #	variable		description		      &
	!	======	========		===========		      &
	!	   900	NAM.1%(30)		work table for FN.MATCH.NAME% &
	!		NAM.2%(30)		work table for FN.MATCH.NAME% &
	!		ASB%(99,1)		ASB queue/server seq nos.     &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include common  data section &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include common map sections  &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

900	!	D I M E N S I O N   d e c l a r a t i o n s		      &
	!								      &
	!								      &
	DIM	NAM.1%(10),			!table for FN.MATCH.NAME%     &
		NAM.2%(10),			!table for FN.MATCH.NAME%     &
		ASB%(99,1)			!table for ASB entries	      &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	IF SHO.CHNL% THEN						      &
	   SHO.WIDTH% = 80%			!init to 80 if output to file &
\	ELSE								      &
	   SHO.WIDTH% = KB.WIDTH% 		!init to kb's width if output &
\	END IF					! is to channel 0 (_KB0:)     &
\	SNAM$ = "*"				!init server name (any)	      &
\	STYP% = 0%				!init server type (any)	      &
\	SER.POS% = 0%				!init server position in cmd  &
						!			      &
\	CALL FET$CQ BY REF (FUL.Q%)		!fetch /FULL qualifier	      &
\	FUL.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$CQ BY REF (ALL.Q%)		!fetch /ALL qualifier	      &
\	ALL.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$CQ BY REF (BRF.Q%)		!fetch /BRIEF qualifier	      &
\	BRF.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$P BY REF (SER.T%)		!fetch server parameter	      &
\	IF U.PRES% THEN				!if any specified,	      &
		SNAM$ = SEG$(U.STR$,1%,U.LEN%)	!  save server name string    &
\		SER.POS% = U.POS%		!  save position in cmd	      &
\		Z% = 1% + 2%			!  allow wldcrd,logical names &
\		CALL CHKSER (SNAM$,STYP%,Z%)	!  check for valid server     &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if error or CTRL/C    &
\	END IF					!end if			      &
\	SRV$ = FN.SERVER$(SNAM$)		!build name for matching recs &
						!			      &
\	CALL FET$CQ BY REF (PRT.Q%)		!fetch /PRINT qualifier	      &
\	PRT.FLG% = U.PRES%			!set/clear print type	      &
\	IF U.PRES% THEN				!if present,		      &
		PRT.POS% = U.POS%		!  save qual position	      &
\		STYP% = PRT.TYP%		!  select print server type   &
			UNLESS STYP%		!    unless type defined      &
\		IF STYP% <> PRT.TYP% THEN	!  if not a print server,     &
			ERRSTS% = ERR.BADNAM%	!    return BADNAM error      &
\			C.POS% = SER.POS%	!    point to server name     &
\			CALL DISPLY ("?Conflicting elements")		      &
						!    display error message    &
\			SUBEXIT			!    and exit		      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (BAT.Q%)		!fetch /BATCH qualifier	      &
\	BAT.FLG% = U.PRES%			!set/clear batch type	      &
\	IF U.PRES% THEN				!if present,		      &
		BAT.POS% = U.POS%		!  save qual position	      &
\		STYP% = BAT.TYP%		!  select batch server type   &
			UNLESS STYP%		!    unless type defined      &
\		IF STYP% <> BAT.TYP% THEN	!  if not a batch server,     &
			ERRSTS% = ERR.BADNAM%	!    return BADNAM error      &
\			C.POS% = SER.POS%	!    point to server name     &
\			CALL DISPLY ("?Conflicting elements")		      &
						!    display error message    &
\			SUBEXIT			!    and exit		      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	SER.FLG% = FALSE%			!clear server-selected flag   &
\	STR.POS% = 24%				!define start col for lists   &
\	ASB.END% = -1%				!show no ASB table yet	      &
						!			      &
\	Z% = FN.GET.SERVER%(3%)			!get 1st server record	      &
\	UNTIL ERRSTS% OR CC.FLG%		!until no servers or CTRL/C:  &
\		SER.KEY$ = PKT.KEY.1$		!  save server's key 1 string &
\		SER.SEQ% = PKT.SEQ%		!  save server's seq no.      &
\		GOSUB 10000			!  display current server     &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\		CALL GETREC (1%,1%,SER.KEY$)	!  re-get current server      &
			IF SER.KEY$ <> PKT.KEY.1$			      &
						!    if record changed	      &
\		Z% = FN.GET.SERVER%(0%)		!  get next server	      &
\	NEXT					!next server record	      &
						!			      &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
						!			      &
\	IF SER.FLG% THEN			!if any servers selected,     &
		ERRSTS% = 0%			!  return success status      &
						!			      &
	ELSE	ERRSTS% = ERR.NOTFND%		!  else return NOTFND error   &
\		SELECT STYP%			!  select via server type:    &
\		CASE = PRT.TYP%			!  case = print server,	      &
\			Z$ = "print " 		!    build 'print' text	      &
\		CASE = BAT.TYP%			!  case = batch server,	      &
\			Z$ = "batch " 		!    build 'batch' text	      &
\		CASE ELSE			!  case else,		      &
\			Z$ = ""			!    build null text	      &
\		END SELECT			!  end select		      &
						!			      &
\		U.POS% = 0%			!  disable repainting cmd     &
\		CALL DISPLY ("%No "+Z$+"server "+FN.KBX.TO.KB$(SNAM$)	      &
				+" found")	!  display warning msg	      &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit SHOSER subprogram	      &

10000	!	d i s p l a y   c u r r e n t   s e r v e r   d a t a	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure left margin	      &
\	PRINT #SHO.CHNL%			!skip a line		      &
		IF FUL.FLG%			!  if /FULL specified	      &
			IF SER.FLG%		!    if not 1st server	      &
						!			      &
\	SELECT SER.TYP%				!select via type:	      &
\	CASE = PRT.TYP%				!case = print server,	      &
\		Z0$ = "Print s"			!  show print server	      &
\	CASE = BAT.TYP%				!case = batch server	      &
\		Z0$ = "Batch s"			!  show batch server	      &
\	CASE ELSE				!case else,		      &
\		Z0$ = "S"			!  show no server type	      &
\	END SELECT				!end select		      &
\	PRINT #SHO.CHNL%, Z0$; "erver "; FN.KBX.TO.KB$(			      &
				SEG$(PKT.ID.DEV$,1%,ASCII(PKT.ID.DVL$)));     &
						!display the server name      &
\	PRINT #SHO.CHNL%, TAB(STR.POS%);"Status: ";			      &
						!display status heading	      &
\	GOSUB 10800				!go display status fields     &
\	PRINT #SHO.CHNL%			!start new line		      &
						!			      &
\	GOSUB 10100				!go display full job data     &
		IF FUL.FLG%			!  if /FULL specified	      &
						!			      &
\	SER.FLG% = TRUE%			!show we've seen a server     &
\	RETURN					!exit			      &

10100	!	d i s p l a y   f u l l   s e r v e r   d a t a		      &
	!								      &
	!								      &
	SELECT SER.TYP%				!select based on server type: &
\	CASE = PRT.TYP%				!case = print server,	      &
\		GOSUB 10200			!  go display print data      &
\	CASE = BAT.TYP%				!case = batch server,	      &
\		GOSUB 10300			!  go display batch data      &
\	END SELECT				!end select		      &
						!			      &
\	IF PKT.STS% AND SPS.JOB% THEN		!if any job active,	      &
		JOB.SEQ% = PKT.SB.JSQ%		!  save seq no. of curr job   &
\		GOSUB 10700			!  go display job data	      &
\	END IF					!end if			      &
						!			      &
\	GOSUB 10400				!display any assigned queues  &
						!			      &
\	RETURN					!exit routine		      &

10200	!	d i s p l a y   p r i n t   s e r v e r   d a t a	      &
	!								      &
	!								      &
	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	IF PKT.ID.CHR% AND IDC.CTL% THEN	!if CONTROLS,		      &
		Z$ = "Enabled"			!  use 'enabled'	      &
	ELSE	IF PKT.ID.CHR% AND IDC.PUC% THEN!else if UP_ARROW,	      &
			Z$ = "Up_arrow"		!    use 'up_arrow'	      &
		ELSE	Z$ = "Disabled"		!  else use 'disabled'	      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
\	PRINT #SHO.CHNL%, TAB(5%); "    Controls:"; TAB(STR.POS%); Z$	      &
						!display controls handling    &
						!			      &
\	RETURN UNLESS ASCII(PKT.ID.FML$)	!exit if no form name	      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(5%); "Forms layout:";			      &
						!print forms line header      &
\	CUR.POS% = STR.POS%			!init 1st display position    &
						!			      &
\	Z% = FN.LIST%("Length "+NUM1$(ASCII(PKT.ID.LNG$)),0%)		      &
						!display form length	      &
						!			      &
\	Z% = FN.LIST%("Width "+NUM1$(ASCII(PKT.ID.WID$)),0%)		      &
						!display form width	      &
						!			      &
\	Z% = FN.LIST%("Bottom Margin "+NUM1$(ASCII(PKT.ID.BOM$)),0%)	      &
						!display bottom margin	      &
						!			      &
\	IF PKT.ID.CHR% AND IDC.TOF% THEN	!if form's TOF bit set,	      &
		Z$ = "No"			!  add 'No' prefix	      &
	ELSE	Z$ = ""				!else null prefix	      &
\	END IF					!end if			      &
\	Z% = FN.LIST%(Z$+"Simulate",0%)		!display [no]simulate text    &
						!			      &
\	Z% = FN.LIST%("Job Pages "+NUM1$(ASCII(PKT.ID.JHD$)),0%)	      &
						!display job pages	      &
						!			      &
\	Z% = FN.LIST%("Flag Pages "+NUM1$(ASCII(PKT.ID.FHD$)),0%)	      &
						!display flag pages	      &
\	IF (PKT.ID.CHR% AND IDC.FTP%) = IDC.FTP% THEN	!If trailer bit set   &
		Z$ = ""				! null prefix		      &
	ELSE								      &
		Z$ = "No"			!  add 'No' prefix	      &
\	END IF					!end if			      &
\	Z% = FN.LIST%(Z$ + "Trailer_Pages",0%)	! Display trailer pages	      &
						!			      &
\	PRINT #SHO.CHNL%			!return to left margin	      &
\	RETURN					!exit			      &

10300	!	d i s p l a y   b a t c h   s e r v e r   d a t a	      &
	!								      &
	!								      &
	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	PRINT #SHO.CHNL%, TAB(5%); " Job control:";			      &
						!display job control heading  &
\	CUR.POS% = STR.POS%			!init 1st display position    &
\	Z% = FN.LIST%("Priority "+NUM1$(SWAP%(ASCII(PKT.ID.PRI$))/256%),0%)   &
						!display priority	      &
\	Z% = FN.LIST%("Run burst "+NUM1$(ASCII(PKT.ID.RNB$)),0%)	      &
						!display run-burst	      &
\	RETURN					!exit			      &

10400	!	d i s p l a y   a s s i g n e d   q u e u e s		      &
	!								      &
	!								      &
	IF ASB.END% < 0% THEN			!if no ASB table yet,	      &
		GOSUB 10500			!  build ASB table	      &
\		RETURN IF CC.FLG%		!  exit if CTRL/C	      &
\	END IF					!end if			      &
						!			      &
\	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	PRINT #SHO.CHNL%, TAB(5%); "      Queues:";			      &
						!display line header	      &
\	CUR.POS% = STR.POS%			!init 1st display position    &
						!			      &
\	QUE.FLG% = FALSE%			!show no queues found	      &
\	ERRSTS% = 0%				!show no errors		      &
\	FOR IDX% = 0% TO ASB.END%		!for each ASB entry,	      &
\		IF ASB%(IDX%,1%) = SER.SEQ% THEN!  if ASB belongs to server,  &
			QUE.SEQ$ = CVT%$(SWAP%(ASB%(IDX%,0%)))		      &
						!    build queue's seq no.    &
\			GOSUB 10600		!    get/display queue	      &
\			RETURN IF ERRSTS% OR CC.FLG%			      &
						!    exit if error or CTRL/C  &
\		END IF				!  end if		      &
						!			      &
\	NEXT IDX%				!for all ASB entries	      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(STR.POS%); "None";!display none		      &
		UNLESS QUE.FLG%			!  unless any queues found    &
\	PRINT #SHO.CHNL%			!skip to next line	      &
						!			      &
\	RETURN					!exit			      &

10500	!	b u i l d   A S B   q u e u e / s e r v e r   t a b l e	      &
	!								      &
	!								      &
	!	This routine loads a 2-col ASB table.  The ASB entries start  &
	!	at row 0 and end at row ASB.END%.  If no ASB records exist,   &
	!	then ASB.END% is returned as -1. Column 0 contains the queue  &
	!	sequence no.; column 1 contains the server sequence no.	      &
	!								      &
	!								      &
	ASB.END% = -1%				!init table index	      &
\	Z0$ = CHR$(STYP% OR ASN.DEF%) + STRING$(5%,0%)			      &
						!build initial key	      &
									      &
\	CALL GETREC(3%,1%,Z0$)			!get initial ASB record	      &
\	UNTIL ERRSTS% OR CC.FLG%		!until error or CTRL/C:	      &
\		Z0% = ASCII(PKT.QUE$)		!  get queue type	      &
\		ERRSTS% = ERR.NOTFND%		!  return not-found error     &
			UNLESS (Z0% AND NOT 15%) = ASN.DEF%		      &
						!    unless an ASB record     &
				UNLESS ERRSTS%	!      unless a pending error &
\		RETURN IF ERRSTS%		!  exit if any error	      &
						!			      &
\		ASB.END% = ASB.END% + 1%	!  incr table index	      &
\		ASB%(ASB.END%,0%) = PKT.AB.QSQ%	!  save queue seq no.	      &
\		ASB%(ASB.END%,1%) = PKT.AB.SSQ%	!  save server seq no.	      &
						!			      &
\		CALL GETREC (0%,1%,"")		!  get next ASB record	      &
			UNLESS ERRSTS%		!    unless pending error     &
\	NEXT					!do for all ASB records	      &
\	ERRSTS% = 0%				!clear error status	      &
\	RETURN					!exit			      &

10600	!	g e t   a n d   d i s p l a y   q u e u e		      &
	!								      &
	!								      &
	CALL GETREC (1%,0%,QUE.SEQ$)		!get queue record	      &
\	RETURN IF ERRSTS%			!exit if any errors	      &
						!			      &
\	Z% = FN.LIST%(SEG$(PKT.IQ.QNM$,1%,ASCII(PKT.IQ.QNL$)),12%)	      &
						!display queue name	      &
\	QUE.FLG% = TRUE%			!show we've seen a queue      &
\	RETURN					!exit			      &

10700	!	d i s p l a y   c u r r e n t   j o b   d a t a		      &
	!								      &
	!								      &
	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure left margin	      &
						!			      &
\	Z$ = CVT%$(SWAP%(JOB.SEQ%))		!build sequence no. string    &
\	CALL GETREC(1%,0%,Z$)			!get the job record	      &
\	RETURN IF ERRSTS% OR CC.FLG%		!exit if error or CTRL/C      &
						!			      &
\	ENT.NO$ = NUM1$(FN.UNSIGNED(JOB.SEQ%))	!build entry number string    &
\	PRINT #SHO.CHNL%, TAB(5%); " Current Job:";			      &
						!display current job heading  &
\	CUR.POS% = STR.POS%			!init current position	      &
\	Z% = FN.LIST%("Entry "+FN.ENTRY.ID$,0%)	!display entry no. & spec     &
\	Z% = FN.LIST%("Started on "+DATE$(PKT.JB.SDA%)+			      &
			" at "+TIME$(FN.TIME%(PKT.JB.STI%)),0%)		      &
						!display started date & time  &
\	PRINT #SHO.CHNL%			!skip to next line	      &
						!			      &
\	RETURN					!exit			      &

10800	!	d i s p l a y   s e r v e r   s t a t u s		      &
	!								      &
	!								      &
	SAV.POS% = STR.POS%			!save global start position   &
\	STR.POS%,CUR.POS% = CCPOS(SHO.CHNL%)	!define new start position    &
						!			      &
\	IF PKT.STS% AND SPS.DIS% THEN		!if disabled bit set,	      &
		Z% = FN.LIST%("Disabled",0%)	!  show disabled server	      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.TEN% THEN		!if tentative bit set,	      &
		Z% = FN.LIST%("Tentative",0%)	!  show tentative server      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.PDV% THEN		!if paused bit set,	      &
		Z$ = "Stopped"			!  use "stopped"	      &
	ELSE	Z$ = "Started"			!else use "started"	      &
\	END IF					!end if			      &
\	Z% = FN.LIST%(Z$,0%)			!show started/stopped status  &
						!			      &
\	IF PKT.STS% AND SPS.JOB% THEN		!if job bit set,	      &
		Z$ = "Active"			!  build 'active' text	      &
\		PKT.STS% = PKT.STS% AND (NOT SPS.RES%) UNLESS DEBUG%	      &
						!  and clear resource bit     &
	ELSE	Z$ = "Idle"			!else build 'idle' text	      &
\	END IF					!end if			      &
\	Z% = FN.LIST%(Z$,0%)			!show active/idle status      &
						!			      &
\	IF SER.TYP% = PRT.TYP% THEN		!if a print server,	      &
		IF PKT.STS% AND SPS.HNG% THEN	!  if hung bit set,	      &
			Z$ = "Lost carrier"	!    build 'lost-carrier'     &
		ELSE	IF PKT.STS% AND SPS.OFL% THEN			      &
						!  else if off-line bit set,  &
				Z$ = "Off-line"	!      build 'off-line'	      &
			ELSE	Z$ = ""		!    else set null display    &
\			END IF			!    end if		      &
\		END IF				!  end if		      &
\		Z% = FN.LIST%(Z$,0%)		!  show off-line or lost carr &
			IF LEN(Z$)		!    if either one	      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.SPN% THEN		!if spawn bit set,	      &
		Z% = FN.LIST%("Job-wait",0%)	!  show waiting for job	      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.RES% THEN		!if resource bit set,	      &
		Z% = FN.LIST%("Device-wait",0%)	!  show waiting for device    &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.ALC% THEN		!if allocated bit set,	      &
		Z$ = "Non-s"			!  build 'non-' prefix	      &
	ELSE	Z$ = "S"			!else null prefix	      &
\	END IF					!end if			      &
\	Z% = FN.LIST%(Z$+"hareable",0%)		!display shareable status     &
						!			      &
\	IF SER.TYP% = PRT.TYP% THEN		!if a print server,	      &
		Z% = ASCII(PKT.ID.FML$)		!  get form name length	      &
\		IF Z% THEN			!  if any form,		      &
			Z$ = "Forms " + SEG$(PKT.ID.FRM$,1%,Z%)		      &
						!     build forms name	      &
		ELSE	Z$ = "No forms"		!  else build no forms	      &
\		END IF				!  end if		      &
\		Z% = FN.LIST%(Z$,0%)		!  display forms status	      &
						!			      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND SPS.MDL% THEN		!if marked for delete server, &
		Z% = FN.LIST%("Marked for deletion",0%)			      &
						!  display that status	      &
\	END IF					!end if			      &
						!			      &
\	STR.POS% = SAV.POS%			!restore saved start position &
\	RETURN					!exit			      &

15000	!	f n . p p n $ ( PPN% )					      &
	!								      &
	!inputs:	PPN%		-	PPN word		      &
	!								      &
	!outputs:	FN.PPN$		-	PPN string "[proj,prog]"      &
	!								      &
	!uses:		Z%		-	work integer		      &
	!		Z1$, Z2$	-	work strings		      &
	!								      &
	!								      &
	DEF FN.PPN$ (PPN%)						      &
\	Z1$, Z2$ = "*"				!init proj,prog strings	      &
\	Z% = SWAP%(PPN%) AND 255%		!get project no.	      &
\	Z1$ = NUM1$(Z%)				!build project string	      &
		UNLESS Z% = 255%		!  unless wild		      &
\	Z% = PPN% AND 255%			!get programmer no.	      &
\	Z2$ = NUM1$(Z%)				!build programmer string      &
		UNLESS Z% = 255%		!  unless wild		      &
\	FN.PPN$ = "[" + Z1$ + "," + Z2$ + "]"	!return PPN string	      &
\	FNEND					!end FN.PPN$ function	      &

15100	!	f n . l i s t % ( ITEM$ , ZONE.WID% )			      &
	!								      &
	!								      &
	!inputs:	ITEM$		-	list item to display	      &
	!		ZONE.WID%	-	width of print zone, or 0     &
	!		CUR.POS% (G)	-	cursor pos to begin display   &
	!		STR.POS% (G)	-	leftmost display position     &
	!		SHO.WIDTH%	-	width of output device	      &
	!								      &
	!outputs:	FN.LIST%	-	ending cursor position	      &
	!		CUR.POS%	-	same as FN.LIST%	      &
	!								      &
	!uses:		Z%		-	work integer		      &
	!		Z$		-	work string		      &
	!								      &
	!notes:	This function will display the string ITEM$ starting at print &
	!	position CUR.POS%.  If the string will not fit on the current &
	!	line, then a <cr><lf> is inserted and the string is displayed &
	!	starting at position STR.POS%.  ZONE.WID% controls the format &
	!	of the display.  If 0, then items are separated by a <comma>  &
	!	<space>.  If non-zero, then item are displayed at the start   &
	!	of the next print zone, where ZONE.WID% defines the width of  &
	!	the zone.						      &
	!								      &
	!								      &
	DEF FN.LIST% (ITEM$,ZONE.WID%)					      &
\	Z$ = ""					!show no separator string     &
\	Z$ = ", "				!use separator string	      &
		IF CUR.POS% <> STR.POS%		!  if not at leftmost pos     &
			UNLESS ZONE.WID%	!    unless using print zones &
						!			      &
\	Z% = LEN(ITEM$) + LEN(Z$)		!compute len of strings	      &
\	IF CUR.POS% + Z% >= SHO.WIDTH% THEN	!if item won't fit on line,   &
		PRINT #SHO.CHNL%		!  skip to new line	      &
\		CUR.POS% = STR.POS%		!  start at left position     &
\		IF LEN(Z$) THEN			!  if separator defined,      &
			Z$ = ""			!    don't use separator      &
\			Z% = LEN(ITEM$)		!    re-compute string length &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(CUR.POS%); Z$; ITEM$;			      &
						!display separator + item     &
						!			      &
\	Z% = ZONE.WID% * (1% + (Z% / ZONE.WID%))!compute start of next zone   &
		IF ZONE.WID%			!  if using print zones	      &
						!			      &
\	FN.LIST%,CUR.POS% = CUR.POS% + Z%	!return next cursor position  &
\	FNEND					!end FN.LIST% function	      &

15200	!	f n . m a t c h . n a m e $ ( NAM.1$ , NAM.2$ )		      &
	!								      &
	!								      &
	!inputs:	NAM.1$		-	server name string	      &
	!		NAM.2$		-	name string to match	      &
	!								      &
	!outputs:	FN.MATCH.NAME%	-	returned match status:	      &
	!					   TRUE% = names match	      &
	!					  FALSE% = names don't match  &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		NAM.1%()	-	work table for server name    &
	!		NAM.2%()	-	work table for match name     &
	!								      &
	!notes:		This function compares a server name string	      &
	!		(NAM.1$) against a match name string (NAM.2$). The    &
	!		match name string may contain a '*' or multiple '?'   &
	!		wildcard characters (always match).		      &
	!								      &
	!		If the match name string is null or *, then the	      &
	!		function returns TRUE% (match), regardless of the     &
	!		server name string.				      &
	!								      &
	!		If the match string contains a trailing *, then	      &
	!		the * is replaced with enough ?'s to fill the string  &
	!		to a length of nine characters.			      &
	!								      &
	!								      &
	DEF FN.MATCH.NAME% (NAM.1$,NAM.2$)				      &
\	IF LEN(NAM.2$) = 0%			!if null match name	      &
	   OR NAM.2$ = "*" THEN			! or wildcard match name,     &
		FN.MATCH.NAME% = TRUE%		!  return match		      &
\		FNEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	Z0% = POS(NAM.2$,"*",LEN(NAM.2$))	!look for trailing * char     &
\	IF Z0% > 0% THEN			!if any found,		      &
		NAM.2$ = SEG$(NAM.2$,1%,Z0%-1%) +			      &
			 STRING$(9%-Z0%+1%,ASCII("?"))			      &
						!  replace * with ?'s	      &

15210	CHANGE EDIT$(NAM.1$,2%+4%) TO NAM.1%	!move server name into array  &
\	CHANGE EDIT$(NAM.2$,2%+4%) TO NAM.2%	!move match name into array   &
\	FN.MATCH.NAME% = FALSE%			!init fn value as no match    &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(0%) > NAM.2%(0%)	!  if server name is longer   &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(Z0%) <> NAM.2%(Z0%)	!  if chars don't match	      &
			IF NAM.2%(Z0%) <> ASCII("?")			      &
						!    if not wildcard char     &
				FOR Z0% = 1% TO NAM.1%(0%)		      &
						!      for each char	      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.2%(Z0%) <> ASCII("?")	!  if next char not wild      &
			FOR Z0% = NAM.1%(0%)+1% TO NAM.2%(0%)		      &
						!    for remaining chars      &
						!			      &
\	FN.MATCH.NAME% = TRUE%			!match if loops complete      &
\	FNEND					!end FN.MATCH.NAME% function  &

15300	!	f n . t i m e % ( TI.ME% )				      &
	!								      &
	!								      &
	!inputs:	TI.ME%		-	minutes until/since midnight  &
	!								      &
	!outputs:	FN.TIME%	-	inverted time integer	      &
	!								      &
	!uses:		none.						      &
	!								      &
	!notes:		The standard RSTS time integer is defined as minutes  &
	!		until midnight.  However, time integers	are defined   &
	!		in the spooling package as minutes since midnight.    &
	!		This function will "invert" a time integer, allowing  &
	!		its use for both encoding and decoding spooler/RSTS   &
	!		time integers.					      &
	!								      &
	!								      &
	DEF FN.TIME% (TI.ME%) =						      &
		1440% - TI.ME%			!invert time value	      &

15400	!	f n . e n t r y . i d $					      &
	!								      &
	!								      &
	!inputs:	PKT.QNM$	-	entry's queue name	      &
	!		PKT.QNL$	-	entry's queue name length     &
	!		PKT.JB.PPN%	-	entry's PPN		      &
	!		PKT.JB.NAM$	-	entry's name		      &
	!		PKT.JB.NML$	-	entry's name length	      &
	!								      &
	!outputs:	FN.ENTRY.ID$	-	entry ID string in the form   &
	!					  "n queue:[ppn]name"	      &
	!								      &
	DEF FN.ENTRY.ID$ = ENT.NO$ + " "	!entry no.		      &
		+ SEG$(PKT.QNM$,1%,ASCII(PKT.QNL$)) + ":"		      &
						!append queue name	      &
		+ FN.PPN$(PKT.JB.PPN%)		!append PPN		      &
		+ SEG$(PKT.JB.NAM$,1%,ASCII(PKT.JB.NML$))		      &
						!append entry name	      &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

15700	!	f n . s e r v e r $  ( SRV$ )				      &
	!								      &
	!								      &
	!inputs:	SRV$		-	server name to standardize    &
	!								      &
	!outputs:	FN.SERVER$	-	standardized server name      &
	!								      &
	!uses:		Z0%,Z1%		-	work integers		      &
	!								      &
	!notes:	This function standardizes a server name as follows:	      &
	!								      &
	!		1) trims the server string			      &
	!		2) strips leading underscore			      &
	!		3) strips trailing colon			      &
	!		4) converts wildcard (*) server to null string	      &
	!		5) converts wildcard (*) unit no. to ???	      &
	!								      &
	!								      &
	DEF FN.SERVER$ (SRV$)						      &
\	SRV$ = EDIT$(SRV$,-2%)			!trim name string	      &
\	Z0% = 1%				!init start pos		      &
\	Z1% = LEN(SRV$)				!init end pos		      &
\	Z0% = Z0% + 1%				!strip leading underscore     &
		IF SEG$(SRV$,Z0%,Z0%) = "_"	!  if any		      &
\	Z1% = Z1% - 1%				!strip trailing colon	      &
		IF SEG$(SRV$,Z1%,Z1%) = ":"	!  if any		      &
\	SRV$ = SEG$(SRV$,Z0%,Z1%)		!save remaining chars	      &
\	SRV$ = "" IF SRV$ = "*"			!use null if wildcard char    &
\	SRV$ = SEG$(SRV$,1%,2%) + "???"		!convert unit no. to ???      &
		IF SEG$(SRV$,3%,3%) = "*"	!  if the unit no. is *	      &
\	FN.SERVER$ = SRV$			!return server name	      &
						!			      &
\	FNEND					!end FN.SERVER$ function      &

15800	!	f n . u n s i g n e d ( VALUE% )			      &
	!								      &
	!								      &
	!inputs:	VALUE%		-	16-bit unsigned integer	      &
	!								      &
	!outputs:	FN.UNSIGNED	-	corresponding FL-PT value     &
	!								      &
	!uses:		Z		-	work FL-PT		      &
	!								      &
	!								      &
	DEF FN.UNSIGNED (VALUE%)					      &
\	Z = VALUE%				!move to fl-pt variable	      &
\	Z = Z + 65536.				!normalize to 0		      &
		IF Z < 0.			!  if negative		      &
\	FN.UNSIGNED = Z				!  return fl-pt value	      &
\	FNEND					!end FN.UNSIGNED function     &

16200	!	f n . g e t . s e r v e r % ( GET.MODE% )		      &
	!								      &
	!								      &
	!inputs:	GET.MODE%	-	initial GET mode (0-3)	      &
	!		STYP%		-	server type to select	      &
	!		SRV$		-	server name to select	      &
	!								      &
	!outputs:	FN.GET.SERVER%	-	selected server status:	      &
	!					   TRUE% = server selected    &
	!					  FALSE% = no server selected &
	!		ERRSTS%		-	error status:		      &
	!					  0 = no error (rec found)    &
	!					  n = error (rec not found)   &
	!		SER.TYP%	-	selected server's type	      &
	!		SER.NAM$	-	selected server's name	      &
	!								      &
	!uses:		Z%		-	local work integer	      &
	!		Z$		-	local work string	      &
	!								      &
	!notes:								      &
	!								      &
	! This routine is called to return the next server definition record  &
	! (SDR),  based  on  the selection values specified above.  The value &
	! GET.MODE% (0-3) is used by this function in  its  initial  call  to &
	! GETREC, to allow the caller to decide how to get the initial server &
	! record.  Mode 0 (GET NEXT) should be specified if at least one  SDR &
	! has  been  read and no other non-SDRs have been read since the last &
	! call; otherwise, mode 3 (GET GT) should be specified, with SER.TYP% &
	! set  accordingly.  Once the initial GET is performed, the record is &
	! tested to  ensure that it is actually a SDR;  if not,  the function &
	! exits  with status  ERR.NOTFND%.  Otherwise, a check is made to see &
	! if the SDR  should be  selected,  based  on  the  selection values. &
	! If the SDR is selected, the function exits with success status (0); &
	! otherwise, a GET NEXT is  performed  and  the  process repeats.     &
	!								      &
	!								      &
	DEF FN.GET.SERVER% (GET.MODE%)					      &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	Z$ = CHR$(STYP% OR SRV.DEF%) + STRING$(5%,0%)			      &
		IF GET.MODE%			!build key unless get next    &
\	FN.GET.SERVER% = FALSE%			!set fn value = rec not found &

16210	CALL GETREC (GET.MODE%,1%,Z$)		!get initial server record    &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	SER.TYP% = ASCII(PKT.QUE$)		!save server type	      &
\	ERRSTS% = ERR.NOTFND%			!return not-found error	      &
		UNLESS (SER.TYP% AND NOT 15%) = SRV.DEF%		      &
						!  unless a server def record &
			UNLESS ERRSTS%		!    unless a pending error   &
\	FNEXIT IF ERRSTS%			!exit if any error	      &
						!			      &
\	GET.MODE% = 0%				!use GET NEXT mode now	      &
\	SER.TYP% = SER.TYP% AND 15%		!return minor server type     &
						!			      &
\	GOTO 16210				!skip this server	      &
		IF SER.TYP% <> STYP%		!  if types don't match	      &
			IF STYP%		!    if single type	      &
						!			      &
\	SER.NAM$ = SEG$(PKT.ID.DEV$,1%,ASCII(PKT.ID.DVL$))		      &
						!extract server name	      &
\	GOTO 16210				!skip this server	      &
		UNLESS FN.MATCH.NAME%(FN.SERVER$(SER.NAM$),SRV$)	      &
						!  unless server names match  &
						!			      &
\	FN.GET.SERVER% = TRUE%			!set fn value = rec found     &
\	FNEND					!end FN.GET.SERVER% function  &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
