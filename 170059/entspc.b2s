1	SUB ENTSPC ( ESPEC$,EFLAG%,EQNAM$,EPPN%,ENAM$ )			      &
\	MODULE$ = "ENTSPC"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : ENTSPC.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : PRL/DRP					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1982, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL ENTSPC (ESPEC$,EFLAG%,EQNAM$,EPPN%,ENAM$)		      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ESPEC$		I	entry-spec string		      &
	!	U.POS% (G)	I	positon of entry-spec (0 if none)     &
	!	EFLAG%		I	entry-spec flag bits:		      &
	!				  1 = allow null queue-name	      &
	!				  2 = allow wildcard queue-name	      &
	!				  4 = allow null PPN		      &
	!				  8 = allow wildcard PPN	      &
	!				 16 = allow null entry-name	      &
	!				 32 = allow wildcard entry-name	      &
	!				 64 = allow other than own PPN	      &
	!	EQNAM$		I	default print q-name		      &
	!	EPPN%		I	default PPN			      &
	!	ENAM$		I	default entry-name		      &
	!								      &
	!	ERRSTS% (G)	O	error status code:		      &
	!				   0 = valid entry-spec		      &
	!				 <>0 = invalid entry-spec	      &
	!	ESPEC$		O	full entry-spec (with defaults)	      &
	!	EFLAG%		O	entry-spec flag bits:		      &
	!				  1 = queue-name was null	      &
	!				  2 = queue-name contained wildcards  &
	!				  4 = PPN was null		      &
	!				  8 = PPN contained wildcards	      &
	!				 16 = entry-name was null	      &
	!				 32 = entry-name contained wildcards  &
	!				 64 = other than own PPN found	      &
	!	EQNAM$		O	queue-name specified (or default)     &
	!	EPPN%		O	PPN specified (or default)	      &
	!	ENAM$		O	entry-name specified (or default)     &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	07-Jul-83	(PRL) Update for V9.0		      &
	! V9.0-07	16-Jun-84	(PRL) Rename ENTSPC, general cleanup  &
	! V10.1-J	16-MAR-92	(PRL) Allow 'xxx*' wildcard construct &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	This subprogram is called to parse an entry-spec and return   &
	!	the necessary tokens from the string.  The entry-spec flag    &
	!	word (EFLAG%) on input is used to determine what syntax is    &
	!	permitted.  On output, the entry-spec flag word can be used   &
	!	to determine the syntax specified.  Error messages are	      &
	!	displayed when illegal or not-allowed syntax is detected.     &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	10000			parse queue-name		      &
	!	11000			parse PPN			      &
	!	12000			parse entry-name		      &
	!	CHKNAM BY REF		validate queue/entry name	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!	15000	FN.PPN$		return [proj,prog] string	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	700	PBSCMN	QUEUE common data (%INCLUDE PBSCMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

800	!	d e c l a r e   s u b p r o g r a m   c o n s t a n t s	      &
	!								      &
	!								      &
	SPEC.PPN$ = "$!%&#@"			!define "special" PPN set     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	FLAG% = EFLAG% 				!save input flag word	      &
\	EFLAG% = 0%				!init output flag word	      &
\	PTR% = 1%				!init scan pointer	      &
\	ES.POS% = U.POS%			!save pos of ent-spec in cmd  &
						!			      &
\	GOSUB 10000				!gosub to parse queue-name    &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	GOSUB 11000				!gosub to parse PPN	      &
\	SUBEXIT IF ERRSTS%			!exit if invalid	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	GOSUB 12000				!gosub to parse entry-name    &
\	SUBEXIT IF ERRSTS%			!exit if invalid	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	ESPEC$ = FN.PPN$(EPPN%) + ENAM$		!return full entry-spec	      &
\	ESPEC$ = EQNAM$ + ":" + ESPEC$		!prefix with queue name	      &
		IF LEN(EQNAM$)			!  if any queue name	      &
\	ERRSTS% = 0%				!return valid status	      &
\	SUBEXIT					!and exit		      &

10000	!	p a r s e   q u e u e - n a m e				      &
	!								      &
	!								      &
	!inputs:	ESPEC$		-	entry-spec		      &
	!		EQNAM$		-	default queue-name (if any)   &
	!		PTR%		-	scan pointer		      &
	!		FLAG%		-	restriction flag word	      &
	!								      &
	!outputs:	PTR%		-	updated scan pointer	      &
	!		EQNAM$		-	queue-name (if any)	      &
	!		ERRSTS%		-	error status:		      &
	!					   0 = valid q-name	      &
	!					 <>0 = invalid		      &
	!								      &
	!uses:		Z$		-	work string		      &
	!								      &
	!								      &
	Z% = POS(ESPEC$,":",PTR%)		!scan for q-name delimiter    &
\	IF Z% > PTR% THEN			!if any q-name found,	      &
		QUE.POS% = ES.POS% + PTR% - 1%	!  set queue pos to next pos  &
\		EQNAM$ = SEG$(ESPEC$,PTR%,Z%-1%)!  save queue-name (less :)   &
\		PTR% = Z% + 1%			!  update scan pointer	      &

10010	IF LEN(EQNAM$) = 0% THEN		!if null queue name,	      &
		EFLAG% = EFLAG% OR 1%		!  set null queue-name bit    &
\		IF (FLAG% AND 1%) = 0% THEN	!  if queue-name required,    &
			U.POS% = 1%		!    set cmd line pointer     &
\			CALL DISPLY ("?Command requires queue name")	      &
						!    print error msg	      &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &
\			RETURN			!    and exit		      &

10020	U.POS% = QUE.POS%			!point at queue name pos      &
\	CALL CHKNAM BY REF (EQNAM$,LEN(EQNAM$),1%+2%+4%)		      &
						!validate queue-name	      &
\	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	IF ERRSTS% THEN				!if queue-name invalid,	      &
		CALL DISPLY ("?Invalid queue name")			      &
						!  display invalid err	      &
\		RETURN				!  and exit		      &

10030	EQNAM$ = SEG$(EQNAM$,1%,9%)		!ensure max of 9 chars	      &
						!			      &
\	IF (POS(EQNAM$,"*",1%) > 0%) OR (POS(EQNAM$,"?",1%) > 0%) THEN	      &
						!if any wildcards,	      &
		EFLAG% = EFLAG% OR 2%		!  set wildcard bit	      &
\		IF (FLAG% AND 2%) = 0% THEN	!  if wildcards not allowed,  &
			CALL DISPLY ("?Wildcard queue name not allowed")      &
						!    print err msg	      &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &
\			RETURN			!    and exit		      &

10040	ERRSTS% = 0%				!clear error code (success)   &
\	RETURN					!and exit		      &

11000	!	p a r s e   P P N					      &
	!								      &
	!								      &
	!inputs:	ESPEC$		-	entry-spec		      &
	!		EPPN%		-	default PPN (if any)	      &
	!		PTR%		-	scan pointer		      &
	!		FLAG%		-	restriction flag word	      &
	!								      &
	!outputs:	PTR%		-	updated scan pointer	      &
	!		EPPN%		-	entry-sepec PPN (if any)      &
	!		ERRSTS%		-	error status:		      &
	!					   0 = valid PPN	      &
	!					 <>0 = invalid		      &
	!								      &
	!uses:		Z$		-	work string		      &
	!								      &
	!								      &
	ON ERROR GOTO 11050			!trap own errors	      &
\	ERRSTS% = 0%				!init error status	      &
\	Z$ = SEG$(ESPEC$,PTR%,PTR%)		!save next char		      &
\	IF POS(SPEC.PPN$,Z$,1%) = 0% THEN	!if not a special PPN,	      &
		Z% = POS(ESPEC$,"]",PTR%)	!  look for PPN end	      &
\		Z$ = SEG$(ESPEC$,PTR%,Z%)	!  extract PPN field	      &

11010	IF LEN(Z$) THEN				!if a PPN found,	      &
		OWN.POS% = ES.POS% + PTR% - 1%	!  point to PPN in entry-spec &
\		PTR% = PTR% + LEN(Z$)		!  update scan pointer	      &
\		U.POS% = OWN.POS%		!  point to PPN position      &
\		CHANGE FSS$(Z$,1%) TO FIRQB%	!  do FSS on PPN (if any)     &
\		EPPN% = SWAP%(FIRQB%(6%)) OR FIRQB%(5%)			      &
						!  build PPN word	      &

11020	IF EPPN% = 0% THEN			!if no owner PPN,	      &
		EFLAG% = EFLAG% OR 4%		!  set null PPN bit	      &
\		IF (FLAG% AND 4%) = 0% THEN	!  if PPN required,	      &
			U.POS% = 1%		!    set cmd line pointer     &
\			CALL DISPLY ("?Command requires PPN")		      &
						!    print required msg	      &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &
\			GOTO 11040		!    and skip to exit	      &

11030	IF Z% AND (256% OR 512%) THEN		!if PPN contains wildcards,   &
		EFLAG% = EFLAG% OR 8%		!  set wildcard bit	      &
\		IF (FLAG% AND 8%) = 0% THEN	!  if wildcards not allowed,  &
			U.POS% = OWN.POS%	!    point to PPN position    &
\			CALL DISPLY ("?Wildcard PPN not allowed")	      &
						!    print no wildcard msg    &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &

11040	ON ERROR GOTO 19000			!restore standard error trap  &
\	RETURN					!and exit		      &

11050	CALL DISPLY ("?Invalid PPN")		!print error msg	      &
\	ERRSTS% = ERR.BADNAM%			!return error status	      &
\	RESUME 11040				!resume to exit		      &

12000	!	p a r s e   e n t r y - n a m e				      &
	!								      &
	!								      &
	!inputs:	ESPEC$		-	entry-spec		      &
	!		ENAM$		-	default entry-name (if any)   &
	!		PTR%		-	scan pointer		      &
	!		FLAG%		-	restriction flag word	      &
	!								      &
	!outputs:	ENAM$		-	entry-name (if any)	      &
	!		ERRSTS%		-	error status:		      &
	!					   0 = valid q-name	      &
	!					 <>0 = invalid		      &
	!								      &
	!uses:		Z$		-	work string		      &
	!								      &
	!								      &
	IF PTR% <= LEN(ESPEC$) THEN		!if any more chars,	      &
		NAM.POS% = ES.POS% + PTR% - 1%	!  point to name in ent-spec  &
\		ENAM$ = SEG$(ESPEC$,PTR%,MAXINT%)			      &
						!  get entry-name	      &

12010	IF LEN(ENAM$) = 0% THEN			!if no entry name,	      &
		EFLAG% = EFLAG% OR 16%		!  set null bit		      &
\		IF (FLAG% AND 16%) = 0% THEN	!  if entry-name required,    &
			U.POS% = 1%		!    set cmd line pointer     &
\			CALL DISPLY ("?Command requires entry name")	      &
						!    print error msg	      &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &
\			RETURN			!    and exit		      &

12020	U.POS% = NAM.POS%			!point to name position	      &
\	CALL CHKNAM BY REF (ENAM$,LEN(ENAM$),1%)!validate entry-name	      &
\	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	IF ERRSTS% THEN				!if entry-name invalid,	      &
		CALL DISPLY ("?Invalid entry name")			      &
						!  display invalid err	      &
\		RETURN				!  and exit		      &

12030	ENAM$ = SEG$(ENAM$,1%,9%)		!ensure max of 9 chars	      &
						!			      &
\	IF (POS(ENAM$,"*",1%) > 0%) OR (POS(ENAM$,"?",1%) > 0%) THEN	      &
						!if any wildcards,	      &
		EFLAG% = EFLAG% OR 32%		!  set wildcard bit	      &
\		IF (FLAG% AND 32%) = 0% THEN	!  if wildcards not allowed,  &
			CALL DISPLY ("?Wildcard entry name not allowed")      &
						!    print err msg	      &
\			ERRSTS% = ERR.BADNAM%	!    return error status      &
\			RETURN			!    and exit		      &

12040	ERRSTS% = 0%				!clear error status (success) &
\	RETURN					!and exit		      &

15000	!	f n . p p n $ ( PPN% )					      &
	!								      &
	!inputs:	PPN%		-	PPN word		      &
	!								      &
	!outputs:	FN.PPN$		-	PPN string "[proj,prog]"      &
	!								      &
	!uses:		Z%		-	work integer		      &
	!		Z1$, Z2$	-	work strings		      &
	!								      &
	!								      &
	DEF FN.PPN$ (PPN%)						      &
\	Z1$, Z2$ = "*"				!init proj,prog strings	      &
\	Z% = SWAP%(PPN%) AND 255%		!get project no.	      &
\	Z1$ = NUM1$(Z%)				!build project string	      &
		UNLESS Z% = 255%		!  unless wild		      &
\	Z% = PPN% AND 255%			!get programmer no.	      &
\	Z2$ = NUM1$(Z%)				!build programmer string      &
		UNLESS Z% = 255%		!  unless wild		      &
\	FN.PPN$ = "[" + Z1$ + "," + Z2$ + "]"	!return PPN string	      &
\	FNEND					!end FN.PPN$ function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
