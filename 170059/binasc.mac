.INCLUDE	%CMN:COMMON%
TITLE	BINASC,<Convert Binary to ASCII string>,0A,10-MAY-91,PRL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	BINASC Edit History
;+
; EDIT	BY	DATE		REASON
; 001	PRL	01-Apr-85	Creation
;
;-

.SBTTL	Define and order the PSECTS

	DEFORG	BINASC

.SBTTL	Description

;+
; This routine can be called from a BP2 program to convert a binary value
; to a formatted ascii string.  The following binary types can be converted:
;
;		Type	Meaning
;		----	-------
;		"UB"	Unsigned byte
;		"UW"	Unsigned 16-bit integer (word)
;		"UL"	Unsigned 32-bit integer (longword)
;		"SB"	Signed byte
;		"SW"	Signed 16-bit integer (word)
;		"SL"	Signed 32-bit integer (longword)
;		"OW"	Octal word
;		"RW"	RAD50 word
;
; CALL:
;
;	BINASC BY REF (VALUE%,TYPE$,BUFFER$,BUFFER.LEN%)
;
; ARGUMENT LIST:
;
;	   (R5)	=	4		number of arguments
;	@ 2(R5) =	VALUE%		binary value to convert
;	  4(R5) ->	TYPE$		2-char conversion type code
;					  (as listed above)
;	  6(R5) ->	BUFFER$		address of output buffer string
;					(be sure to pre-allocate string)
;	@10(R5) =	BUFFER.LEN%	length of output buffer string
;
; RETURNED:
;
;	BUFFER$ contains converted formatted ASCII value.
;	BUFFER.LEN% contains number of characters written to buffer.
;	ERRSTS% contains success/error status:
;			0 if success
;			FIELDE (63.) if output overflows buffer
;
;	Note:	This routine does not check the number or type of arguments
;		passed, or the 2-character conversion string passed.  If
;		you do not pass the correct number or type of arguments, or
;		pass a conversion type string other than those listed above,
;		then this routine will fail with unpredictable results.
;-

.SBTTL	Define MACROs needed

.LIBRARY	%CUI:CUIMLB%

	.MCALL	$FAO

.SBTTL	Main program logic

BINASC::CLR	ERRSTS		;init success status
	TST	(R5)+		;skip no. arguments passed
	MOV	(R5)+,R4	;R4 -> binary value to convert
	MOV	(R5)+,R2	;R2 -> conversion type string
	MOVB	(R2)+,CNVTYP	;load 1st char into ASCIC field
	MOVB	(R2),CNVTYP+1	;load 2nd char into ASCIC field
	MOV	(R5)+,R2	;R2 -> output buffer
	MOV	@(R5),R1	;R1 = length of output buffer
	$FAO	#CTLSTR,#BUFLEN,R1,R2,R4 ;call the routine to do it all
	MOV	BUFLEN,@(R5)+	;return no. of characters written
	TST	R0		;any errors?
	BEQ	10$		;no, so exit
	MOV	#FIELDE,ERRSTS	;yes, return FIELDE error
10$:	RETURN			;exit

GLOBAL	<FIELDE,ERRSTS>

; Define ASCIC (counted ASCII) string for $FAO routine

CTLSTR:	.BYTE	3		;length of control string
	.ASCII	"!"		;introducer for control string
CNVTYP:	.BLKW			;2-char type code (supplied by caller)

; Define word to hold length of buffer written by $FAO

BUFLEN:	.WORD	0		;no. chars written to buffer by $FAO

.END
