1	SUB RECV ( WAIT.SECS% )						      &
\	MODULE$ = "RECV"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : RECV					      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : PRL/ACT/DBM				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1982, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL RECV ( WAIT.SECS% )				      &
	!								      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	WAIT.SECS%	I	no. secs to wait for a message	      &
	!	ERRSTS%		O	error status:			      &
	!				   0 = success			      &
	!				   n = ERR value		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	20-Jun-83	(PRL) Update for V9.0		      &
	! V9.0-07	25-Jun-84	(PRL) Update to use SYS calls	      &
	! V9.0-12	17-Feb-85	(PRL) Update DEBUG packet display     &
	!===================================================================== &
	! V9.4-01	06-Feb-87	(DBM) Add receiver wait notify timer  &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	The RECV subprogram is called to receive a packet of data     &
	!	from the PBS queue manager.				      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name		description				      &
	!	====		===========				      &
						!			      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	DISPLY			display error text at user's KB	      &
	!	RCVPKT BY REF		receive ACK/NACK packet from PBS      &
	!	10000			display packet data if debug mode     &
	!								      &
	!******************************************************************** &
	!								      &
	!	f u n c t i o n s   u s e d				      &
	!								      &
	!	line #	name		description			      &
	!	======	====		===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	QUEUE common data (%INCLUDE PBSCMN.B2S)	      &
	!	   700	PBSMAP	Send/Recv/Record fields (%INCLUDE PBSMAP.B2S) &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	r e c e i v e   n e x t   l o c a l   m e s s a g e	      &
	!								      &
	!								      &
	TEMP.SECS% = WAIT.SECS%			!init work copy of wait secs  &
\	TEMP.NOTIFY% = NOTIFY.WAIT%		!and work copy of notify secs &

1100	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	IF (TEMP.NOTIFY% <= 0%) THEN		!if notify timer expired,     &
		IF (TEMP.SECS% > 0%) THEN	! if there's still time left  &
			U.POS% = 0%		!  don't repaint command      &
\			CALL DISPLY ("Waiting for acknowledgement...")	      &
						!  tell user we're waiting    &
\			TEMP.NOTIFY% = NOTIFY.WAIT%			      &
						!  reset notify timer	      &
\		END IF				! end if		      &
\	END IF					!end if			      &
\	RECV.SLEEP% = (TEMP.SECS% > 0%) AND 2%	!sleep at most 2 secs	      &
\	CALL RCVPKT BY REF (PKT.HDR$,512%,RECV.SLEEP%)			      &
						!call subr to receive packet  &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C detected      &
\	IF ERRSTS% = ERR.NOSUCH% THEN		!if no msg queued,	      &
		IF TEMP.SECS% > 0% THEN		!  if any wait time,	      &
			TEMP.SECS% = TEMP.SECS% - 2%			      &
						!    decr wait time	      &
\			TEMP.NOTIFY% = TEMP.NOTIFY% - 2%		      &
						!    and notify time	      &
\			GOTO 1100		!    then try again	      &
		ELSE	U.POS% = 0%		!  else dsabl repainting cmd  &
\			CALL DISPLY ("%No acknowledgement received")	      &
						!    display error msg	      &
\			SUBEXIT			!    and exit		      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	IF ERRSTS% <> 0% THEN			!if any other error,	      &
		FATAL% = TRUE%			!  set fatal flag	      &
\		ERRLIN% = 1100%			!  return error line no.      &
\		ERRNAM$ = MODULE$		!  return bad module name     &
\		SUBEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	GOSUB 10000				!display packet data	      &
		IF DEBUG%			!  if debug flag set	      &
\	IF (RCV.REM% <> 0%) OR			!if msg not complete, or      &
	   (ASCII(PKT.VER$) <> PBS.VER%) OR	!wrong PBS version, or	      &
	   (PKT.CTX% <> SEND.ID%) THEN		!wrong sender ID,	      &
		IF DEBUG% THEN			!  if debugging on,	      &
			U.POS% = 0%		!    disable repainting cmd   &
\			CALL DISPLY ("%Invalid message received - ignored")   &
						!    display error msg	      &
\		END IF				!  end if		      &
\		GOTO 1000			!  ignore ACK & wait again    &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit			      &

10000	!	d i s p l a y   r c v r   p a c k e t   d a t a		      &
	!								      &
	!								      &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	PRINT #KB.CHNL%				!skip a line		      &
\	PRINT #KB.CHNL%, "From:";		!display heading	      &
\	PRINT #KB.CHNL%, ,"Job"; ASCII(RCV.JOB$) / 2%			      &
						!display sender's job no.     &
\	PRINT #KB.CHNL%, ,"PPN ["; NUM1$(SWAP%(RCV.PPN%) AND 255%);	      &
			       ","; NUM1$(RCV.PPN% AND 255%); "]"	      &
						!display sender's PPN	      &
\	PRINT #KB.CHNL%, "RCVR packet header (14 bytes):"		      &
						!display packet heading	      &
\	FOR Z% = 1% TO 14%			!for each header byte:	      &
\		Z1% = ASCII(SEG$(PKT.HDR$,Z%,Z%))			      &
						!  save byte value	      &
\		GOSUB 10100			!  gosub to display it	      &
\	NEXT Z%					!next (header byte)	      &
\	PRINT #KB.CHNL%				!start new line		      &
\	PRINT #KB.CHNL%, "RCVR packet data ("; NUM1$(RCV.LEN%-14%);	      &
			 " bytes):"		!display data header line     &
\	FOR Z% = 1% TO RCV.LEN% - 14%		!for each (data) byte:	      &
\		Z1% = ASCII(SEG$(PKT.DAT$,Z%,Z%))			      &
						!  save byte value	      &
\		GOSUB 10100			!  gosub to display it	      &
\	NEXT Z%					!next byte		      &
\	PRINT #KB.CHNL%				!start a new line	      &
\	RETURN					!and exit		      &

10100	!	d i s p l a y   n e x t   b y t e   i n   p a c k e t	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	Z$ = "  " + FN.DIGIT$(Z%,3%) + "=" + FN.DIGIT$(Z1%,3%) + " "	      &
						!build offset/value string    &
\	IF Z1% >= 32% AND Z1% < 128% THEN	!if printable char,	      &
		Z$ = Z$ + '"' + CHR$(Z1%) + '"'	!  add character in quotes    &
	ELSE	Z$ = Z$ + "   "			!else add trailing blanks     &
\	END IF					!end if			      &
						!			      &
\	PRINT #KB.CHNL%				!skip to new line	      &
		IF CCPOS(KB.CHNL%)+LEN(Z$) >= KB.WIDTH%			      &
						!  if next zone won't fit     &
\	PRINT #KB.CHNL%, Z$;			!display byte string	      &
\	RETURN					!and exit		      &

15000	!	f n . d i g i t $ ( number% , digits% )			      &
	!								      &
	!								      &
	!inputs:	NUMBER%		-	integer to convert to string  &
	!		DIGITS%		-	maximum number of digits      &
	!								      &
	!outputs:	FN.DIGIT$	-	string w leading blanks	      &
	!								      &
	!uses:		Z$		-	work string		      &
	!								      &
	DEF FN.DIGIT$ (NUMBER%,DIGITS%)					      &
\	Z$ = NUM1$(NUMBER%)			!convert number to string     &
\	FN.DIGIT$ = SEG$(SPACE$(DIGITS%)+Z$,LEN(Z$)+1%,MAXINT%)		      &
						!prefix leading blanks	      &
\	FNEND					!end FN.DIGIT$ function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
