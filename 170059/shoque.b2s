1	SUB SHOQUE							      &
\	MODULE$ = "SHOQUE"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : SHOQUE.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : ACT/PRL/DBM/SEL				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL SHOQUE 	(arguments passed via PBSCMN common section)  &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		I	Error status			      &
	!				   0 = no error			      &
	!				   n = ERR value		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	09-Jul-83	(PRL) Update for V9.0		      &
	! V9.0-07	16-Jun-84	(PRL) General cleanup		      &
	! V9.0-10	14-Jan-85	(PRL) Increase server field size      &
	! V9.0-14	01-Apr-85	(PRL) Use BINASC for page limits      &
	! =================================================================== &
	! V9.1-05	09-Aug-85	(PRL) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V9.5-01	10-Jun-87	(DBM) Fix FN.KBX.TO.KB$ function      &
	! =================================================================== &
	! V10.0-A	08-Jul-89	(PRL) Support /OUTPUT		      &
	! =================================================================== &
	! V10.1-J	19-Mar-92	(PRL) Support 'xxx*' wildcards	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSKEY	PBS CUI keywords (%INCLUDE PBSKEY.B2S)	      &
	!	   700	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	d i m e n s i o n   d e c l a r a t i o n s		      &
	!								      &
	!	line #	variable		description		      &
	!	======	========		===========		      &
	!	   900	NAM.1%(30)		work table for FN.MATCH.NAME% &
	!		NAM.2%(30)		work table for FN.MATCH.NAME% &
	!		QUEUE$(10)		select queue names table      &
	!		ASB%(99,1)		ASB queue/server seq nos.     &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

900	!	D I M E N S I O N   d e c l a r a t i o n s		      &
	!								      &
	!								      &
	DIM	NAM.1%(10),			!table for FN.MATCH.NAME%     &
		NAM.2%(10),			!table for FN.MATCH.NAME%     &
		QUEUE$(10),			!table for default queues     &
		ASB%(99,1)			!table for ASB entries	      &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	IF SHO.CHNL% THEN						      &
	   SHO.WIDTH% = 80%			!init to 80 if output to file &
\	ELSE								      &
	   SHO.WIDTH% = KB.WIDTH% 		!init to kb's width if output &
\	END IF					! is to channel 0 (_KB0:)     &
\	QTYP% = 0%				!show no queue type	      &
\	QNAM$ = "*"				!show wildcard queue name     &
\	QUE.POS% = 0%				!show no queue parameter      &
						!			      &
\	CALL FET$P BY REF (QUE.T%)		!fetch queue parameter	      &
\	IF U.PRES% THEN				!if present,		      &
		QUE.POS% = U.POS%		!  save position in cmd	      &
\		QNAM$ = SEG$(U.STR$,1%,U.LEN%)	!  save queue name string     &
\		CALL CHKQUE (QNAM$,TRUE%) 	!  validate queue name	      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!  exit if error or CTRL/C    &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (ALL.Q%)		!fetch /ALL qualifier	      &
\	ALL.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$CQ BY REF (FUL.Q%)		!fetch /FULL qualifier	      &
\	FUL.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$CQ BY REF (BRF.Q%)		!fetch /BRIEF qualifier	      &
\	BRF.FLG% = U.PRES%			!set flag if present	      &
						!			      &
\	CALL FET$CQ BY REF (PRT.Q%)		!fetch /PRINT qualifier	      &
\	PRT.FLG% = U.PRES%			!set/clear present flag	      &
\	IF U.PRES% THEN				!if present,		      &
		QTYP% = PRT.TYP%		!  set type to print	      &
\	END IF					!end if			      &
						!			      &
\	CALL FET$CQ BY REF (BAT.Q%)		!fetch /BATCH qualifier	      &
\	BAT.FLG% = U.PRES%			!set/clear present flag	      &
\	IF U.PRES% THEN				!if present,		      &
		QTYP% = BAT.TYP%		!  set type to batch	      &
\	END IF					!end if			      &

2000	!	p r o c e s s   q u e u e   r e c o r d s		      &
	!								      &
	!								      &
	QUE.FLG% = FALSE%			!clear queue-selected flag    &
\	ASB.END% = -1%				!show no ASB table entries    &
\	STR.POS% = 24%				!init indent column	      &
\	Z% = FN.GET.QUEUE%(3%)			!get 1st queue rec	      &
\	UNTIL ERRSTS% OR CC.FLG%		!until no queues or CTRL/C:   &
\		QUE.KEY$ = PKT.KEY.1$		!  save this rec's key no. 1  &
\		QUE.SEQ% = PKT.SEQ%		!  save this rec's seq no.    &
\		GOSUB 10000			!  display this queue record  &
\		CALL GETREC (1%,1%,QUE.KEY$)	!  re-get queue record	      &
			IF QUE.KEY$ <> PKT.KEY.1$			      &
						!    if record changed	      &
\		Z% = FN.GET.QUEUE%(0%)		!  get next queue	      &
\	NEXT					!next (queue record)	      &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
						!			      &
\	IF QUE.FLG% THEN			!if any queues selected,      &
		ERRSTS% = 0%			!  show no error	      &
						!			      &
	ELSE	ERRSTS% = ERR.NOTFND%		!else return not found status &
\		Z0$ = ""			!  init queue type text	      &
\		Z0$ = "print "			!  build 'print'	      &
			IF PRT.FLG%		!    if print queues	      &
\		Z0$ = "batch "			!  build 'batch'	      &
			IF BAT.FLG%		!    if batch queues	      &
\		U.POS% = 0%			!  no repainting of cmd	      &
\		CALL DISPLY ("%No "+Z0$+"queue "+QNAM$+" found")	      &
						!  display error msg	      &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit SHOQUE subprogram	      &

10000	!	d i s p l a y   c u r r e n t   q u e u e   r e c o r d	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure left margin	      &
\	PRINT #SHO.CHNL%			!skip a line		      &
		IF FUL.FLG%			!  if full format	      &
			IF QUE.FLG%		!    if not 1st queue	      &
						!			      &
\	Z$ = ""					!init type text		      &
\	Z$ = "Print "				!show print		      &
		IF QUE.TYP% = PRT.TYP%		! if print queues	      &
\	Z$ = "Batch "				!show batch		      &
		IF QUE.TYP% = BAT.TYP%		! if batch queues	      &
\	PRINT #SHO.CHNL%, Z$; "queue "; QUE.NAM$;			      &
						!display queue name	      &
\	PRINT #SHO.CHNL%, TAB(STR.POS%); "Status: "; FN.STATUS$		      &
						!display queue's status	      &
\	GOSUB 10100				!display full job data	      &
		IF FUL.FLG%			!  if /FULL specified	      &
\	QUE.FLG% = TRUE%			!show we've seen a queue      &
\	RETURN					!exit			      &

10100	!	d i s p l a y   f u l l   q u e u e   d a t a		      &
	!								      &
	!								      &
	PRINT #SHO.CHNL%, "      Priority:"; TAB(STR.POS%);		      &
			"Default "; NUM1$(ASCII(PKT.IQ.DPR$));		      &
			", Maximum "; NUM1$(ASCII(PKT.IQ.MPR$))		      &
						!display the priorities	      &
						!			      &
\	GOSUB 10500				!display required privileges  &
						!			      &
\	IF QUE.TYP% = PRT.TYP% THEN		!if this is a print queue     &
\		Z% = ASCII(PKT.IQ.FML$)		!  get default form name len  &
\		IF Z% THEN			!  if any default form,	      &
			Z1$ = SEG$(PKT.IQ.FRM$,1%,Z%)			      &
						!    use form name	      &
		ELSE	Z1$ = "None"		!  else use 'none'	      &
\		END IF				!  end if		      &
\		PRINT #SHO.CHNL%, "  Default form:"; TAB(STR.POS%); Z1$	      &
						!  disply default form	      &
						!			      &
\		IF (PKT.IQ.DP1% = -1%) AND (PKT.IQ.DP0% = -1%) THEN	      &
						!  if unlimited default,      &
			Z1$ = "UNLIMITED"	!    set text to 'unlimited'  &
		ELSE	U.LEN% = 255%		!  else init max buffer len   &
\			CALL BINASC BY REF (PKT.IQ.DP0%,"UL",U.STR$,U.LEN%)   &
						!  convert longword to string &
\			Z1$ = SEG$(U.STR$,1%,U.LEN%)			      &
						!  and save numeric string    &
\		END IF				!  end if		      &
						!			      &
\		IF (PKT.IQ.MP1% = -1%) AND (PKT.IQ.MP0% = -1%) THEN	      &
						!  if unlimited maximum,      &
			Z2$ = "UNLIMITED"	!    set text to 'unlimited'  &
		ELSE	U.LEN% = 255%		!  else init max buffer len   &
\			CALL BINASC BY REF (PKT.IQ.MP0%,"UL",U.STR$,U.LEN%)   &
						!  convert longword to string &
\			Z2$ = SEG$(U.STR$,1%,U.LEN%)			      &
						!  and save numeric string    &
\		END IF				!  end if		      &
						!			      &
\		PRINT #SHO.CHNL%, "    Page limit:"; TAB(STR.POS%);	      &
						!  display page limit text    &
			"Default "; Z1$;	!  display default page limit &
			", Maximum "; Z2$	!  display maximum page limit &
\	END IF					!end if			      &
						!			      &
\	IF QUE.TYP% = BAT.TYP% THEN		!if batch queue,	      &
		IF (PKT.IQ.DCP%) = -1% THEN	!  if unlimited default CPU,  &
			Z1$ = "UNLIMITED"	!    show 'unlimited'	      &
		ELSE	Z1$ = NUM1$(FN.UNSIGNED(PKT.IQ.DCP%))		      &
						!  else show actual value     &
\		END IF				!  end if		      &
						!			      &
\		IF (PKT.IQ.MCP%) = -1% THEN 	!  if unlimited CPU max,      &
			Z2$ = "UNLIMITED"	!    show 'unlimited'	      &
		ELSE	Z2$ = NUM1$(FN.UNSIGNED(PKT.IQ.MCP%))		      &
						!  else show actual value     &
\		END IF				!  end if		      &
						!			      &
\		PRINT #SHO.CHNL%, "     CPU limit:"; TAB(STR.POS%);	      &
						!  display CPU limit text     &
			"Default "; Z1$;	!  display default CPU limit  &
			", Maximum "; Z2$	!  display max CPU limit      &
						!			      &
\		IF (PKT.IQ.DTM%) = -1% THEN	!  if unlimited time default, &
			Z1$ = "UNLIMITED"	!    show 'unlimited'	      &
		ELSE	Z1$ = NUM1$(FN.UNSIGNED(PKT.IQ.DTM%))		      &
						!  else show actual value     &
\		END IF				!  end if		      &
						!			      &
\		IF (PKT.IQ.MTM%) = -1% THEN 	!  if unlimited time max,     &
			Z2$ = "UNLIMITED"	!    show 'unlimited'	      &
		ELSE	Z2$ = NUM1$(FN.UNSIGNED(PKT.IQ.MTM%))		      &
						!  else show actual value     &
\		END IF				!  end if		      &
						!			      &
\		PRINT #SHO.CHNL%, "    Time limit:"; TAB(STR.POS%);	      &
						!  display time limit text    &
			"Default "; Z1$;	!  display default time limit &
			", Maximum "; Z2$	!  display max time limit     &
\	END IF					!end if			      &
						!			      &
\	GOSUB 10200				!gosub to display servers     &
						!			      &
\	RETURN					!and exit		      &

10200	!	d i s p l a y   s e r v e r s				      &
	!								      &
	!								      &
	IF ASB.END% < 0% THEN			!if no ASB table yet,	      &
		GOSUB 10300			!  build ASB table	      &
\		RETURN IF CC.FLG%		!  exit if CTRL/C	      &
\	END IF					!end if			      &
						!			      &
\	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	PRINT #SHO.CHNL%, "       Servers:";	!display line header	      &
						!			      &
\	CUR.POS% = STR.POS%			!init 1st tab stop	      &
\	SER.FLG% = FALSE%			!show no servers found	      &
\	ERRSTS% = 0%				!show no errors		      &
\	FOR IDX% = 0% TO ASB.END%		!for each ASB entry,	      &
\		IF ASB%(IDX%,0%) = QUE.SEQ% THEN!  if ASB belongs to queue,   &
			SER.SEQ$ = CVT%$(SWAP%(ASB%(IDX%,1%)))		      &
						!    build server's seq no.   &
\			GOSUB 10400		!    get/display server	      &
\			RETURN IF ERRSTS% OR CC.FLG%			      &
						!    exit if error or CTRL/C  &
\		END IF				!  end if		      &
						!			      &
\	NEXT IDX%				!for all ASB entries	      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(CUR.POS%); "None";!display none		      &
		UNLESS SER.FLG%			!  unless any servers found   &
\	PRINT #SHO.CHNL%			!skip to next line	      &
						!			      &
\	RETURN					!exit			      &

10300	!	b u i l d   A S B   q u e u e / s e r v e r   t a b l e	      &
	!								      &
	!								      &
	!	This routine loads a 2-col ASB table.  The ASB entries start  &
	!	at row 0 and end at row ASB.END%.  If no ASB records exist,   &
	!	then ASB.END% is returned as -1. Column 0 contains the queue  &
	!	sequence no.; column 1 contains the server sequence no.	      &
	!								      &
	!								      &
	ASB.END% = -1%				!init table index	      &
\	Z0$ = CHR$(QTYP% OR ASN.DEF%) + STRING$(5%,0%)			      &
						!build initial key	      &
									      &
\	CALL GETREC(3%,1%,Z0$)			!get initial ASB record	      &
\	UNTIL ERRSTS% OR CC.FLG%		!until error or CTRL/C:	      &
\		Z0% = ASCII(PKT.QUE$)		!  get queue type	      &
\		ERRSTS% = ERR.NOTFND%		!  return not-found error     &
			UNLESS (Z0% AND NOT 15%) = ASN.DEF%		      &
						!    unless an ASB record     &
				UNLESS ERRSTS%	!      unless a pending error &
\		RETURN IF ERRSTS%		!  exit if any error	      &
						!			      &
\		ASB.END% = ASB.END% + 1%	!  incr table index	      &
\		ASB%(ASB.END%,0%) = PKT.AB.QSQ%	!  save queue seq no.	      &
\		ASB%(ASB.END%,1%) = PKT.AB.SSQ%	!  save server seq no.	      &
						!			      &
\		CALL GETREC (0%,1%,"")		!  get next ASB record	      &
			UNLESS ERRSTS%		!    unless pending error     &
\	NEXT					!do for all ASB records	      &
\	ERRSTS% = 0%				!clear error status	      &
\	RETURN					!exit			      &

10400	!	g e t   a n d   d i s p l a y   s e r v e r		      &
	!								      &
	!								      &
	CALL GETREC (1%,0%,SER.SEQ$)		!get server record	      &
\	RETURN IF ERRSTS%			!exit if any errors	      &
						!			      &
\	SNAM$ = FN.KBX.TO.KB$(SEG$(PKT.ID.DEV$,1%,ASCII(PKT.ID.DVL$)))	      &
						!get server name	      &
\	Z% = FN.LIST%(SNAM$,10%)		!display server name	      &
\	SER.FLG% = TRUE%			!show we've seen a server     &
						!			      &
\	RETURN					!exit			      &

10500	!	d i s p l a y   r e q u i r e d   p r i v i l e g e s	      &
	!								      &
	!								      &
	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	PRINT #SHO.CHNL%, "    Privileges:";	!display line header	      &
						!			      &
\	CUR.POS% = STR.POS%			!init 1st tab stop	      &
\	PRV.FLG% = FALSE%			!show no privs found	      &
\	ERRSTS% = 0%				!show no errors		      &
\	PRV.MSK$ = PKT.IQ.PRV$			!save copy of priv mask	      &
						!			      &
\	GOSUB 10600				!get 1st priv name	      &
\	UNTIL ERRSTS% OR CC.FLG%		!do until no more or CTRL/C   &
\		Z% = FN.LIST%(PRV.NAM$,8%)	!  display priv name	      &
\		PRV.FLG% = TRUE%		!  show name displayed	      &
\		GOSUB 10600			!  get next priv name	      &
\	NEXT					!for all priv bits on	      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(CUR.POS%); "None"	!  display 'none'	      &
		UNLESS PRV.FLG%			!  unless any priv bits on    &
						!			      &
\	PRINT #SHO.CHNL% IF CCPOS(SHO.CHNL%)	!ensure at left margin	      &
\	RETURN					!exit			      &

10600	!	g e t   n e x t   p r i v i l e g e   n a m e		      &
	!								      &
	!								      &
	ON ERROR GOTO 10610			!trap local errors	      &
\	ERRSTS% = 0%				!init error status	      &
						!			      &
\	Z$ = SYS(				!cvt mask to name SYS call:   &
			CHR.6$ +		!  FIP call		      &
			CHR$(32%) +		!  check access function      &
			CHR$(2%) +		!  convert mask to name	      &
			CHR.0$ +		!  reserved		      &
			CHR.00$ +		!  reserved		      &
			PRV.MSK$		!  priv mask		      &
		)				!end of SYS call	      &
						!			      &
\	PRV.MSK$ = SEG$(Z$,7%,14%)		!save returned mask	      &
\	PRV.NAM$ = EDIT$(SEG$(Z$,15%,20%),128%)	!save trimmed priv name	      &
\	GOTO 10690				!skip to exit		      &

10610	ERRSTS% = ERR				!return ERR value	      &
\	RESUME 10690				!resume to exit		      &

10690	ON ERROR GOTO 19000			!restore standard error trap  &
\	RETURN					!exit			      &

15100	!	f n . l i s t % ( ITEM$ , ZONE.WID% )			      &
	!								      &
	!								      &
	!inputs:	ITEM$		-	list item to display	      &
	!		ZONE.WID%	-	width of print zone, or 0     &
	!		CUR.POS% (G)	-	cursor pos to begin display   &
	!		STR.POS% (G)	-	leftmost display position     &
	!		SHO.WIDTH%	-	width of output device	      &
	!								      &
	!outputs:	FN.LIST%	-	ending cursor position	      &
	!		CUR.POS%	-	same as FN.LIST%	      &
	!								      &
	!uses:		Z%		-	work integer		      &
	!		Z$		-	work string		      &
	!								      &
	!notes:	This function will display the string ITEM$ starting at print &
	!	position CUR.POS%.  If the string will not fit on the current &
	!	line, then a <cr><lf> is inserted and the string is displayed &
	!	starting at position STR.POS%.  ZONE.WID% controls the format &
	!	of the display.  If 0, then items are separated by a <comma>  &
	!	<space>.  If non-zero, then item are displayed at the start   &
	!	of the next print zone, where ZONE.WID% defines the width of  &
	!	the zone.						      &
	!								      &
	!								      &
	DEF FN.LIST% (ITEM$,ZONE.WID%)					      &
\	Z$ = ""					!show no separator string     &
\	Z$ = ", "				!use separator string	      &
		IF CUR.POS% <> STR.POS%		!  if not at leftmost pos     &
			UNLESS ZONE.WID%	!    unless using print zones &
						!			      &
\	Z% = LEN(ITEM$) + LEN(Z$)		!compute len of strings	      &
\	IF CUR.POS% + Z% >= SHO.WIDTH% THEN	!if item won't fit on line,   &
		PRINT #SHO.CHNL%		!  skip to new line	      &
\		CUR.POS% = STR.POS%		!  start at left position     &
\		IF LEN(Z$) THEN			!  if separator defined,      &
			Z$ = ""			!    don't use separator      &
\			Z% = LEN(ITEM$)		!    re-compute string length &
\		END IF				!  end if		      &
\	END IF					!end if			      &
						!			      &
\	PRINT #SHO.CHNL%, TAB(CUR.POS%); Z$; ITEM$;			      &
						!display separator + item     &
						!			      &
\	Z% = ZONE.WID% * (1% + (Z% / ZONE.WID%))!compute start of next zone   &
		IF ZONE.WID%			!  if using print zones	      &
						!			      &
\	FN.LIST%,CUR.POS% = CUR.POS% + Z%	!return next cursor position  &
\	FNEND					!end FN.LIST% function	      &

15200	!	f n . m a t c h . n a m e $ ( NAM.1$ , NAM.2$ )		      &
	!								      &
	!								      &
	!inputs:	NAM.1$		-	queue name string	      &
	!		NAM.2$		-	name string to match	      &
	!								      &
	!outputs:	FN.MATCH.NAME%	-	returned match status:	      &
	!					   TRUE% = names match	      &
	!					  FALSE% = names don't match  &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		NAM.1%()	-	work table for queue name     &
	!		NAM.2%()	-	work table for match name     &
	!								      &
	!notes:		This function compares a queue name string	      &
	!		(NAM.1$) against a match name string (NAM.2$). The    &
	!		match name string may contain a '*' or multiple '?'   &
	!		wildcard characters (always match).		      &
	!								      &
	!		If the match name string is null or *, then the	      &
	!		function returns TRUE% (match), regardless of the     &
	!		queue name string.				      &
	!								      &
	!		If the match string contains a trailing *, then	      &
	!		the * is replaced with enough ?'s to fill the string  &
	!		to a length of nine characters.			      &
	!								      &
	!								      &
	DEF FN.MATCH.NAME% (NAM.1$,NAM.2$)				      &
\	IF LEN(NAM.2$) = 0%			!if null match name	      &
	   OR NAM.2$ = "*" THEN			! or wildcard match name,     &
		FN.MATCH.NAME% = TRUE%		!  return match		      &
\		FNEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	Z0% = POS(NAM.2$,"*",LEN(NAM.2$))	!look for trailing * char     &
\	IF Z0% > 0% THEN			!if any found,		      &
		NAM.2$ = SEG$(NAM.2$,1%,Z0%-1%) +			      &
			 STRING$(9%-Z0%+1%,ASCII("?"))			      &
						!  replace * with ?'s	      &

15210	CHANGE EDIT$(NAM.1$,2%+4%) TO NAM.1%	!move queue name into array   &
\	CHANGE EDIT$(NAM.2$,2%+4%) TO NAM.2%	!move match name into array   &
\	FN.MATCH.NAME% = FALSE%			!init fn value as no match    &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(0%) > NAM.2%(0%)	!  if queue name is longer    &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(Z0%) <> NAM.2%(Z0%)	!  if chars don't match	      &
			IF NAM.2%(Z0%) <> ASCII("?")			      &
						!    if not wildcard char     &
				FOR Z0% = 1% TO NAM.1%(0%)		      &
						!      for each char	      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.2%(Z0%) <> ASCII("?")	!  if next char not wild      &
			FOR Z0% = NAM.1%(0%)+1% TO NAM.2%(0%)		      &
						!    for remaining chars      &
						!			      &
\	FN.MATCH.NAME% = TRUE%			!match if loops complete      &
\	FNEND					!end FN.MATCH.NAME% function  &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

15600	!	f n . s t a t u s $					      &
	!								      &
	!								      &
	!inputs:	PKT.STS%	-	current job's status code     &
	!								      &
	!outputs:	FN.STATUS$	-	job status description	      &
	!								      &
	!uses:		None.						      &
	!								      &
	!								      &
	DEF FN.STATUS$							      &
\	Z0$ = ""				!start status string	      &
						!			      &
\	Z0$ = Z0$ + "Default, "			!show default queue	      &
		IF PKT.STS% AND IQF.DFL%	! if it's a default queue     &
						!			      &
\	IF PKT.STS% AND IQF.CLS% THEN	 	!if closed bit set,	      &
		Z0$ = Z0$ + "Closed, "		! show closed		      &
	ELSE	Z0$ = Z0$ + "Open, "		! else show open	      &
\	END IF					!end if			      &
						!			      &
\	IF PKT.STS% AND IQF.STP% THEN	 	!if stop bit set,	      &
		Z0$ = Z0$ + "Stopped"		! show stopped		      &
	ELSE	Z0$ = Z0$ + "Started"		! else show started	      &
\	END IF					!end if			      &
						!			      &
\	Z0$ = Z0$ + ", Marked for deletion " 	!show marked for deletion     &
		IF PKT.STS% AND IQF.MDL% 	! if status bit set	      &
						!			      &
\	FN.STATUS$ = Z0$			!close out status string      &
\	FNEND					!end FN.STATUS$ function      &

15800	!	f n . u n s i g n e d ( VALUE% )			      &
	!								      &
	!								      &
	!inputs:	VALUE%		-	16-bit unsigned integer	      &
	!								      &
	!outputs:	FN.UNSIGNED	-	corresponding FL-PT value     &
	!								      &
	!uses:		Z		-	work FL-PT		      &
	!								      &
	!								      &
	DEF FN.UNSIGNED (VALUE%)					      &
\	Z = VALUE%				!move to fl-pt variable	      &
\	Z = Z + 65536.				!normalize to 0		      &
		IF Z < 0.			!  if negative		      &
\	FN.UNSIGNED = Z				!  return fl-pt value	      &
\	FNEND					!end FN.UNSIGNED function     &

16200	!	f n . g e t . q u e u e % ( GET.MODE% )			      &
	!								      &
	!								      &
	!inputs:	GET.MODE%	-	initial GET mode (0-3)	      &
	!		QTYP%		-	queue type to select	      &
	!		QNAM$		-	name of queue to select	      &
	!								      &
	!outputs:	FN.GET.QUEUE%	-	selected queue status:	      &
	!					   TRUE% = queue selected     &
	!					  FALSE% = no queue selected  &
	!		ERRSTS%		-	error status:		      &
	!					  0 = no error (rec found)    &
	!					  n = error (rec nout found)  &
	!		QUE.TYP%	-	selected queue's type	      &
	!		QUE.NAM$	-	selected queue's name	      &
	!								      &
	!uses:		Z%		-	work integer		      &
	!		Z$		-	work string		      &
	!								      &
	!notes:								      &
	!								      &
	! This routine is called to return the next job definition record     &
	! (JDR), based on the selection values specified above.  The value    &
	! GET.MODE% (0-3) is used by this function in its initial call to     &
	! GETREC, to allow the caller to decide how to get the initial queue  &
	! record.  Mode 0 (GET NEXT) should be specified if at least one QDR  &
	! has been read and no other non-QDRs have been read since the last   &
	! call; otherwise, mode 3 (GET GT) should be specified, with QTYP%    &
	! set accordingly.  Once the initial GET is performed, the record is  &
	! tested to ensure that it is actually a QDR; if not the function     &
	! exits with status ERR.NOTFND%.  Otherwise, a check is made to see   &
	! if the QDR should be selected, based on the selection values.	      &
	! If the QDR is selected, the function exits with success status (0); &
	! otherwise, a GET NEXT is performed and the process repeats.	      &
	!								      &
	!								      &
	DEF FN.GET.QUEUE% (GET.MODE%)					      &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	Z$ = CHR$(QTYP% OR QUE.DEF%) + STRING$(5%,0%)			      &
		IF GET.MODE%			!  build key except get-next  &
\	FN.GET.QUEUE% = FALSE%			!set fn val = rec not found   &

16210	CALL GETREC (GET.MODE%,1%,Z$)		!get initial queue record     &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	QUE.TYP% = ASCII(PKT.QUE$)		!save queue type	      &
\	ERRSTS% = ERR.NOTFND%			!return not-found error	      &
		UNLESS (QUE.TYP% AND NOT 15%) = QUE.DEF%		      &
						!  unless a queue def record  &
			UNLESS ERRSTS%		!    unless a pending error   &
\	FNEXIT IF ERRSTS%			!exit if any error	      &
						!			      &
\	GET.MODE% = 0%				!use GET NEXT mode now	      &
\	QUE.TYP% = QUE.TYP% AND 15%		!return minor queue type      &
						!			      &
\	GOTO 16210				!skip this queue	      &
		IF QUE.TYP% <> QTYP%		!  if not type selected	      &
			IF QTYP%		!    if specific type	      &
						!			      &
\	QUE.NAM$ = SEG$(PKT.IQ.QNM$,1%,ASCII(PKT.IQ.QNL$))		      &
						!extract queue name	      &
\	GOTO 16210				!skip this queue	      &
		UNLESS FN.MATCH.NAME%(QUE.NAM$,QNAM$)			      &
						!  unless queue names match   &
						!			      &
\	FN.GET.QUEUE% = TRUE%			!set fn val = rec found	      &
\	FNEND					!end FN.GET.QUEUE% function   &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
