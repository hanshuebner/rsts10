1	SUB CHKSER ( SRV$ , SRV.TYP% , SRV.FLG% )			      &
\	MODULE$ = "CHKSER"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : CHKSER.B2S				      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : ACT/PRL/DBM				      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL CHKSER (SRV$,SRV.TYP%,SRV.FLG%)			      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	SRV$		I	server name			      &
	!								      &
	!	SRV.FLG%	I	server flag bits:		      &
	!				   1 = allow wildcard server name     &
	!				   2 = allow unmapped logical name    &
	!				   4 = allow null server name	      &
	!								      &
	!	SRV$		O	complete server name (_DDxx:)	      &
	!								      &
	!	SRV.TYP%	O	server type (0=unknown, 1=print, etc) &
	!								      &
	!	SRV.FLG%	O	server flag bits:		      &
	!				   1 = wildcard server name found     &
	!				   2 = unmapped logical name found    &
	!				   4 = null server name found	      &
	!								      &
	!	ERRSTS%		O	valid device status:		      &
	!					  0 = valid name	      &
	!					<>0 = invalid name	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-00	09-Mar-84	(ACT) Creation for V9.0		      &
	! V9.0-00	15-Jun-84	(PRL) General cleanup		      &
	! V9.0-08	17-Oct-84	(PRL) Add SER.FLG% argument	      &
	! V9.0-10	14-Jan-85	(PRL) Convert KBn: to KBcn: syntax    &
	!==================================================================== &
	! V9.1-05	05-Aug-85	(PRL) Fix check for max KB no.	      &
	!==================================================================== &
	! V9.5-01	09-Jun-87	(PRL) Fix SYS call to get max KB no.  &
	! V9.5-01	10-Jun-87	(DBM) Parse KBcn: logical syntax      &
	!==================================================================== &
	! V9.6-07	15-Feb-88	(DBM) Disallow PK and LAT lines	      &
	!==================================================================== &
	! V10.0-I	26-Jan-90	(DBM) Outbound LAT support	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	DISPLY			display text at user's KB	      &
	!	CHKNAM			validate server name		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	PBS common data (%INCLUDE PBSCMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	ALW.FLG% = SRV.FLG%			!save allow flag bits	      &
\	SRV.FLG% = 0%				!clear return flag	      &
\	SRV.TYP% = 0%				!init no server type	      &
\	ERRSTS% = 0%				!show succes status for now   &
\	CTRL.TYP$ = "AABCDEFGHI"		!Controller syntax types      &
\	CTRL.MAX$ =				!Controller subline maximums: &
			CHR$(15%) +		!     16 DL11A, DL11B's	      &
			CHR.0$ +		!        Reserved	      &
			CHR$(31%) +		!     32 DL11C, DL11E's	      &
			CHR$(31%) +		!     32 DL11E, DLV11E's      &
			CHR$(126%) +		!    127 Pseudo Keyboards     &
			CHR$(126%) +		!    127 DJ11 Keyboards	      &
			CHR$(126%) +		!    127 DH11 Keyboards	      &
			CHR$(126%) +		!    127 DZ11 Keyboards	      &
			CHR$(126%) +		!    127 DHU/V11 Keyboards    &
			CHR$(126%)		!    127 LAT11 Keyboards      &
						!			      &
\	SRV$ = EDIT$(SRV$,-2%)			!trim the server name	      &
\	IF LEN(SRV$) = 0% THEN			!if null server name,	      &
		SRV.FLG% = SER.FLG% OR 4%	!  show null name found	      &
\		IF (ALW.FLG% AND 4%) = 0% THEN	!  if null name not allowed,  &
			ERRSTS% = ERR.BADNAM%	!    return BADNAM error      &
\			CALL DISPLY ("?Server name required")		      &
						!    display error msg	      &
\		END IF				!  end if		      &
\		SUBEXIT				!  exit			      &
\	END IF					!end if			      &
						!			      &
\	SRV$ = SRV$ + ":"			!append colon to name	      &
		UNLESS POS(SRV$,":",1%)		!  unless already present     &
						!			      &
\	IF POS(SRV$,"*",1%) THEN		!if any wildcards in name,    &
		SRV.FLG% = 1% + 2%		!  return wldcrd,logical name &
\		GOSUB 10000			!  gosub to process name      &
\		GOTO 1100			!  skip to exit		      &
\	END IF					!end if			      &
						!			      &
\	CHANGE FSS$(SRV$,1%) TO FIRQB%		!FSS the server-name	      &
\	Z% = FIRQB%(29%) + SWAP%(FIRQB%(30%))	!get flag word 2	      &
\	IF Z% < 0% THEN				!if not a real device name,   &
		SRV.FLG% = 2%			!show logical name found      &
\		GOSUB 10000			!  process the name	      &
\		GOTO 1100			!  skip to return name	      &
\	END IF					!end if			      &
						!			      &
						!real device name found:      &
\	SRV.TYP% = PRT.TYP%			!return print server type     &
\	IDX% = STATUS AND 255%			!get handler index	      &
\	SELECT IDX%				!select via handler index:    &
\	CASE = 2%				!case = KB device,	      &
\		DEV.NAM$ = "KB"			!  use KB device name	      &
\		IF FIRQB%(26%) THEN		!  if unit no. real,	      &
			DEV.UNT% = FIRQB%(25%)	!    use actual unit no.      &
		ELSE	DEV.UNT% = KB.NO%	!  else user user's KB no.    &
\		END IF				!  end if		      &
\		GOSUB 11000			!  convert to KBcs: syntax    &
\	CASE = 6%				!case = LP device,	      &
\		DEV.NAM$ = "LP"			!  use LP device name	      &
\		IF FIRQB%(26%) THEN		!  if unit no. real,	      &
			DEV.UNT% = FIRQB%(25%)	!    use actual unit no.      &
		ELSE	DEV.UNT% = 0%		!  else user unit 0	      &
\		END IF				!  end if		      &
\	CASE ELSE				!case else,		      &
\		ERRSTS% = ERR.NOSUCH%		!  return NOSUCH error	      &
\	END SELECT				!end select		      &

1100	IF ERRSTS% = 0% THEN			!if no error,		      &
		SRV$ = "_" + DEV.NAM$		!  build server device name   &
\		IF DEV.UNT% >= 0% THEN		!  if non-wild unit no.	      &
			Z$ = NUM1$(DEV.UNT%)	!    use unit no.	      &
		ELSE	Z$ = "*"		!  else use wildcard unit no. &
\		END IF				!  end if		      &
\		SRV$ = SRV$ + Z$ + ":"		!  append unit no. to name    &
\		SRV$ = "*"			!  use single * name	      &
			IF SRV$ = "_**:"	!    if name and unit wild    &
						!			      &
	ELSE	SELECT ERRSTS%			!else select via error code:  &
\		CASE = ERR.NOSUCH%		!  case = NOSUCH error,	      &
\			Z$ = "?Invalid server device"			      &
						!    use bad device text      &
\		CASE = ERR.PRVIOL%		!  case = PRVIOL error,	      &
\			Z$ = "?Wildcard server not allowed"		      &
						!    use no wildcard text     &
\		CASE ELSE			!  case else,		      &
\			Z$ = "?Invalid server name"			      &
						!    use bad name text	      &
\		END SELECT			!  end select		      &
\		CALL DISPLY (Z$)		!  display error message      &
\	END IF					!end if			      &
 						!			      &
\	SUBEXIT					!and exit		      &

10000	!	p r o c e s s   u n m a p p e d   l o g i c a l   n a m e     &
	!								      &
	!								      &
	SRV$ = EDIT$(SRV$,32%)			!convert l/c to u/c	      &
\	Z1% = 1%				!init start pos pointer	      &
\	Z1% = Z1% + 1%				!strip leading underscore     &
		IF POS(SRV$,"_",1%) = 1%	!  if any found at front      &
\	Z2% = LEN(SRV$)				!init end pos pointer	      &
\	Z2% = Z2% - 1%				!strip trailing colon	      &
		IF POS(SRV$,":",Z2%) = Z2%	!  if any found at end	      &
\	SRV$ = SEG$(SRV$,Z1%,Z2%)		!strip possible _ and : chars &
\	DEV.NAM$ = SEG$(SRV$,1%,2%)		!save 1st 2 chars of name     &
\	POS.UNT% = 3%				!assume unit no. starts here  &
						!			      &
\	IF DEV.NAM$ = "BA" THEN			!if BA server name,	      &
		DEV.UNT% = FN.UNIT%(SRV$,POS.UNT%,0%,31%)		      &
						!  get unit no. for server    &
\		SRV.TYP% = BAT.TYP%		!  set type to batch server   &
			UNLESS ERRSTS%		!    unless invalid name      &
\		RETURN				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	IF DEV.NAM$ = "LP" THEN			!if LP server name,	      &
		SRV.TYP% = PRT.TYP%		!  set print server type      &
\		DEV.UNT% = FN.UNIT%(SRV$,POS.UNT%,0%,7%)		      &
						!  get server's unit no.      &
\		ERRSTS% = ERR.NOSUCH%		!  return NOSUCH error	      &
			UNLESS ALW.FLG% AND 2%	!    if real device required  &
				UNLESS ERRSTS%	!      unless pending error   &
\		RETURN				!  exit			      &
\	END IF					!end if			      &
						!			      &
\	IF DEV.NAM$ = "KB" OR			!if KB server name,	      &
	   DEV.NAM$ = "TT" OR			!or TT server name,	      &
	   DEV.NAM$ = "TI" THEN			!or TI server name,	      &
		SRV.TYP% = PRT.TYP%		!  set print server type      &
\		DEV.NAM$ = "KB"			!  use name KB		      &
\		MAX.KB% = ASCII(MID(SYS(CHR.6$+CHR$(-3%)),3%,1%))	      &
						!  get max kb no. for system  &
\		DEV.CTRL$ = SEG$(SRV$,3%,3%)	!  Check for KBcs syntax      &
\		IF LEN(DEV.CTRL$) THEN		!  Nothing there, don't worry &
		    DEV.CTRL% = POS(CTRL.TYP$,DEV.CTRL$,1%)		      &
				 		!  Check for controller type  &
\		    IF DEV.CTRL% THEN		!  If controller type found   &
			DEF.UNT% = 0%		!   default number is 0	      &
\			MAX.UNT% = ASCII(SEG$(CTRL.MAX$,DEV.CTRL%,DEV.CTRL%)) &
						!   max subline # for ctrl    &
\			POS.UNT% = 4%		!   subline no. starts here   &
\			ALW.FLG% = ALW.FLG% AND (NOT 1%)		      &
						!    Don't allow KBc*:	      &
 		    ELSE			!  Else it's not a controller &
			DEV.CTRL$ = ""		!   So remember that...	      &
\			DEF.UNT% = KB.NO%  	!   And default is users kb # &
\			MAX.UNT% = MAX.KB%	!   maximum is system maximum &
\		    END IF			!  Endif.  Got what we need   &
\		END IF				!  Endif. [LEN(DEV.CTRL$)]    &
\		DEV.NAM$ = DEV.NAM$ + DEV.CTRL$	!  Update device name	      &
\		DEV.UNT% = FN.UNIT%(SRV$,POS.UNT%,DEF.UNT%,MAX.UNT%)	      &
						!  get server's unit no.      &
\		ERRSTS% = ERR.NOSUCH%		!  return NOSUCH error	      &
			UNLESS ALW.FLG% AND 2%	!    if real device required  &
				UNLESS ERRSTS%	!      unless pending error   &
\		RETURN				!  exit			      &
\	END IF					!end if			      &
						!			      &
\	IF DEV.NAM$ = "*" THEN			!if wildcard specified,	      &
		IF ALW.FLG% AND 1% THEN		!  if wildcards allowed,      &
			SRV.TYP% = 0%		!    set no type	      &
\			DEV.UNT% = -1%		!    set wildcard unit no.    &
		ELSE	ERRSTS% = ERR.PRVIOL%	!  else return PRVIOL error   &
\		END IF				!  end if		      &
\		RETURN				!  exit			      &
\	END IF					!end if			      &
						!			      &
\	ERRSTS% = ERR.BADNAM%			!return BADNAM error	      &
\	RETURN			 		!exit			      &

11000	!	c o n v e r t   K B   n o .   t o   c o n t r o l l e r	      &
	!								      &
	!								      &
	! input:	DEV.UNT%	-	KB unit no. to convert	      &
	!								      &
	! output:	DEV.NAM$	-	controller name (KBA, etc.)   &
 	!		DEV.UNT%	-	controller sub-line no.	      &
	!								      &
	! uses:								      &
	!								      &
	! Note:	This routine converts a KB no. to the new KB controller	      &
	!	syntax KBcs:, where 'c' is the controller type (A-H) and      &
	!	's' is the sub-line no. on the controller.  This routine      &
	!	should be replaced if and when monitor support is added	      &
	!	to provide this conversion via a SYS call.		      &
	!								      &
	!	This routine will return an error if the subline	      &
	!	specified is a PK, LAT or unknown line and logical	      &
	!	device names are not allowed.  This allows V9.6		      &
	!	PBSMGR to delete PK lines created by earlier versions.	      &
	!								      &
	DIM EXTFQB%(40%)			!Large FIRQB for .MESAG calls &
\	ON ERROR GOTO 11025			!Local error trap	      &
\	JUNK$ = SYS(PRIV.ON$)			!We need privs for this	      &
\	CHANGE SYS(CHR.6$ + CHR$(16%) + CHR.0$	!Get TTY char, part I	      &
		+ CHR$(DEV.UNT%)) TO FIRQB%	!  on the specified KB #      &
\	JUNK$ = SYS(PRIV.OFF$)			!Okay boys, back 'em down     &
									      &
\	DEV.CTRL% = FIRQB%(19%) / 2% + 1%	!Get the interface type	      &
									      &
\	IF DEV.CTRL% <= 10% THEN		!If we know about it,	      &
		DEV.NAM$ = "KB" +  SEG$(CTRL.TYP$, DEV.CTRL%, DEV.CTRL%)      &
						!  Return controller name     &
\		CHANGE FSS$("_" + DEV.NAM$ + "0:", 1%) TO FIRQB%	      &
						!  FSS _KBc0: (c=controller)  &
\		DEV.UNT% = DEV.UNT%-FIRQB%(25%)	!  Return sub-line no.	      &
\	END IF					!End If (Non-LAT)	      &
									      &
\	GOTO 11050 IF (DEV.CTRL% = 5%)		!Return NOSUCH error on PK's  &
		   OR (DEV.CTRL% > 10%)		!  or unknown interface types &
\	GOTO 11075 IF (DEV.CTRL% <> 10%)	!Done unless LAT line	      &
									      &
\	CHANGE SYS(CHR.6$ + CHR$(22%)		!.MESAG hook into DECnet      &
		+ CHR$(12%) + CHR$(7%)		!Show port status	      &
		+ CHR$(0%) + CHR$(1%)		!Get status on this port      &
		+ STRING$(26%, 0%)		!Reserved bytes		      &
		+ "KB"				!KB device		      &
		+ CHR$(FIRQB%(25%) + DEV.UNT%)	!Reconstruct unit number      &
		+ CHR$(-1%)) TO EXTFQB%		!Unit real flag		      &
									      &
\	IF (EXTFQB%(5%) AND 2%)			!If it's an interactive port  &
	THEN	11050				!Then we can't use it	      &
	ELSE	11075				!Otherwise we're done	      &
\	END IF								      &

11025	RESUME 11050				!Not a real device	      &

11050	SRV.FLG% = 2%				!Show logical name found      &
\	ERRSTS% = ERR.NOSUCH%			!Return NOSUCH error	      &
		UNLESS ALW.FLG% AND 2%		!  if real device required    &
			UNLESS ERRSTS%		!    unless pending error     &

11075	RETURN					!exit			      &

15000	!	f n . u n i t % ( SER.NAM$ , POS.UNT%, DFL.UNT% , MAX.UNT% )  &
	!								      &
	!								      &
	! input:	SER.NAM$	-	server name		      &
	!		POS.UNT%	-	starting pos. of # in string  &
	!		DFL.UNT%	-	default unit no.	      &
	!		MAX.UNT%	-	maximum unit no.	      &
	!		ALW.FLG%	-	allow flags		      &
	!								      &
	! output:	FN.UNIT%	-	specified unit no. or default &
	!				-	(-1 for wildcard unit no.)    &
	!		ERRSTS%		-	error status:		      &
	!						0 = valid unit no.    &
	!					   NOSUCH = invalid unit no.  &
	!					   PRVIOL = no wildcard allwd &
	!								      &
	! uses:		Z%		-	work integer		      &
	!		Z$		-	work string		      &
	!								      &
	!								      &
	DEF FN.UNIT% (SER.NAM$,POS.UNT%,DFL.UNT%,MAX.UNT%)		      &
\	ON ERROR GOTO 15010			!trap own errors	      &
\	ERRSTS% = 0%				!show success initially	      &
\	Z% = DFL.UNT%				!set unit no. to default      &
\	Z$ = SEG$(SRV$,POS.UNT%,MAXINT%)	!get unit no. string	      &
\	IF LEN(Z$) > 0% THEN			!if unit no. specified,	      &
		Z% = VAL(Z$)			!  get unit no.		      &
\		IF Z% < 0% OR Z% > MAX.UNT% THEN!  if no. out of range,	      &
			ERRSTS% = ERR.NOSUCH%	!    return NOSUCH error      &
\		END IF				!  end if		      &
\	END IF					!end if			      &
\	GOTO 15020				!skip to exit		      &

15010	IF Z$ = "*" THEN			!if wildcard unit no.,	      &
		IF ALW.FLG% AND 1% THEN		!  if wildcards allowed,      &
			Z% = -1%		!    set unit no. to -1	      &
\		ELSE	ERRSTS% = ERR.PRVIOL%	!  else return PRVIOL error   &
\		END IF				!  end if		      &
\		RESUME 15020			!  resume to exit	      &
\	END IF					!end if			      &
						!			      &
\	ERRSTS% = ERR.BADNAM%			!return BADNAM error	      &
\	RESUME 15020				!resume to exit		      &

15020	FN.UNIT% = Z%				!return unit no.	      &
\	FNEND					!end FN.UNIT% function	      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	IF ERL = 1000% THEN			!if FSS error,		      &
		ERRSTS% = ERR.BADNAM%		!  return BADNAM error	      &
\		RESUME 1100			!  resume to display error    &
\	END IF					!end if			      &
						!			      &
\	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND								      &

