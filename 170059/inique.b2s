1	SUB INIQUE							      &
\	MODULE$ = "INIQUE"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : INIQUE.B2S				      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : PRL/ACT					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1983, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL INIQUE						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		O	error status			      &
	!				  0 = no error			      &
	!				  n = ERR value n		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.0-02	04-Jul-83	(PRL) Update for V9.0		      &
	! V9.0-07	13-Jun-84	(PRL) General cleanup		      &
	! V9.0-08	05-Oct-84	(PRL) Use 1st form in FDF if no qual  &
	! V9.0-14	01-Apr-84	(PRL) Fix bug in /PRIORITY=(MAX=n)    &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!	This subprogram is called to process the command	      &
	!								      &
	!		INITIALIZE/QUEUE queue-name[:]			      &
	!								      &
	!	Qualifiers for this command are:			      &
	!								      &
	!		/BATCH						      &
	!		/CLOSE						      &
	!		/CPU_LIMIT=(DEFAULT=n,MAXIMUM=n)		      &
	!		/DEFAULT					      &
	!		/FORMS=default form-name			      &
	!		/PAGE_LIMIT=(DEFAULT=n,MAXIMUM=n)		      &
	!		/PRINT						      &
	!		/PRIORITY=(DEFAULT=n,MAXIMUM=n)			      &
	!		/PRIVILEGES=(priv-name,...)			      &
	!		/TIME_LIMIT=(DEFAULT=n,MAXIMUM=n)		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name			description			      &
	!	====			===========			      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b r o u t i n e s   u s e d				      &
	!								      &
	!	line #/name		description			      &
	!	===========		===========			      &
	!	CHKQUE			validate queue name		      &
	!	GETFRM			lookup form name in FDF		      &
	!	DISPLY			display text at user's KB:	      &
	!	INIPKT			initialize send packet		      &
	!	RECV			receive packet from queue manager     &
	!	SEND			send packet to queue manager	      &
	!								      &
	!	FET$A			(CUI) fetch argument		      &
	!	FET$CQ			(CUI) fetch command qualifier	      &
	!	FET$P			(CUI) fetch parameter		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m a p   d e c l a r a t i o n s				      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   700	PBSCMN	QUEUE common data (%INCLUDE PBSCMN.B2S)	      &
	!	   710	PBSMAP	Send/Recv/Record fields (%INCLUDE PBSMAP.B2S) &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   800	PBSKEY	CUI constants (%INCLUDE PBSKEY.B2S)	      &
	!	   890	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

900	!	D I M E N S I O N   d e c l a r a t i o n s		      &
	!								      &
	!								      &
	DIM	PRV.1%(8),			!array for FN.PRIV.MASK$      &
		PRV.2%(8)			!array for FN.PRIV.MASK$      &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	CALL INIPKT				!initialize send packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	CALL FET$P BY REF (QUE.T%)		!fetch queue parameter	      &
\	QUE.POS% = U.POS%			!save pos of queue in cmd     &
\	QUE$ = SEG$(U.STR$,1%,U.LEN%)		!get queue specified	      &
\	CALL CHKQUE (QUE$,FALSE%)		!validate queue name	      &
\	SUBEXIT IF ERRSTS%			!exit if invalid queue name   &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	CALL FET$CQ BY REF (BAT.Q%)		!fetch /BATCH qual	      &
\	BAT.FLG% = U.PRES%			!set batch flag if present    &
						!			      &
\	CALL FET$CQ BY REF (CPU.Q%)		!fetch /CPU_LIMIT qual	      &
\	BAT.FLG% = BAT.FLG% OR U.PRES%		!set batch flag if present    &
						!			      &
\	CALL FET$CQ BY REF (TIM.Q%)		!fetch /TIME_LIMIT qual	      &
\	BAT.FLG% = BAT.FLG% OR U.PRES%		!set batch flag if present    &
						!			      &
\	IF BAT.FLG% THEN			!if any batch qualifiers,     &
		QUE.TYP% = BAT.TYP%		!  set type to batch queue    &
\		GOSUB 10100			!    process /CPU_LIMIT qual  &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!    exit if errors or CTRL/C &
\		GOSUB 10700			!    process /TIME_LIMIT qual &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!    exit if errors or CTRL/C &
	ELSE	QUE.TYP% = PRT.TYP%		!else set type to print queue &
\		GOSUB 10300			!    process /FORMS qual      &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!    exit if errors or CTRL/C &
\		GOSUB 10400			!    process /PAGE_LIMIT qual &
\		SUBEXIT IF ERRSTS% OR CC.FLG%	!    exit if errors or CTRL/C &
\	END IF					!end if			      &
						!			      &
\	GOSUB 10000				!process /CLOSE qual	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
\	GOSUB 10200				!process /DEFAULT qual	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
\	GOSUB 10500				!process /PRIORITY qual	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
\	GOSUB 10600				!process /PRIVILEGES qual     &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!exit if errors or CTRL/C     &
						!			      &
\	PKT.QUE$ = CHR$(QUE.TYP%)		!load type into packet	      &
\	PKT.CMD$ = CHR$(IQ.CMD%)		!load INIT QUEUE cmd code     &
\	PKT.RTQ$ = CHR$(AK.FLG%)		!load ACK request flag	      &
\	PKT.IQ.QNL$ = CHR$(LEN(QUE$)) 		!load queue name length	      &
\	PKT.IQ.QNM$ = QUE$			!load queue name	      &
						!			      &
\	CALL SEND (IQ.LEN%,SEND.RETRY%)		!send the init packet	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
			OR NOSEND%		!    or NOSEND flag set	      &
						!			      &
\	CALL RECV (RECV.WAIT%)			!wait for ACK/NACK	      &
\	SUBEXIT IF ERRSTS%			!exit if any errors	      &
		   OR CC.FLG%			!  or CTRL/C		      &
						!			      &
\	IF ASCII(PKT.CMD$) = AK.CMD% THEN	!if ACK received,	      &
		ERRSTS% = 0%			!  return success status      &
\		Z$ = ""				!  init msg text	      &
\		Z$ = "default "			!  prefix with 'default'      &
			IF DFL.FLG%		!  if this is a default queue &
\		Z$ = Z$ + "print"		!  append 'print'	      &
			IF QUE.TYP% = PRT.TYP%	!    if print queue	      &
\		Z$ = Z$ + "batch"		!  append 'batch'	      &
			IF QUE.TYP% = BAT.TYP%	!    if batch queue	      &
\		Z$ = Z$ + " queue " + QUE$ + " initialized"		      &
						!  set up confirmation msg    &
						!			      &
\		IF QUE.TYP% = PRT.TYP% THEN	!  if print queue,	      &
				Z$ = Z$ + " with default forms " + FORM$      &
						!      append dflt form name  &
\		END IF				!  end if		      &
						!			      &
\		U.POS% = 0%			!  disable repainting of cmd  &
\		CALL DISPLY (FN.CAP$(Z$))	!  and display it	      &
						!			      &
	ELSE					! else NACK received:	      &
\		ERRSTS% = PKT.STS%		!  save error status code     &
\		Z$ = "?Default exceeds maximum"	!  init error msg text	      &
						!			      &
\		SELECT ERRSTS%			!  select on error code:      &
\		CASE = RMS.FEX%			!  case = queue exists,	      &
\			U.POS% = QUE.POS%	!    point at the queue name  &
\			Z$ = "?Queue already exists"			      &
						!    change error msg	      &
\		CASE = RMS.IOP%			!  case = dflt exceeds max,   &
\			U.POS% = PRI.POS%	!    point at /PRIORITY	      &
\		CASE = RMS.PLG%			!  case = dflt exceeds max,   &
\			U.POS% = PGL.POS%	!    point at /PAGE_LIMIT     &
\		CASE = RMS.ISI%			!  case = dflt exceeds max,   &
\			U.POS% = CPU.POS%	!    point at /CPU_LIMIT      &
\		CASE = RMS.IRC%			!  case = dflt exceeds max,   &
\			U.POS% = TIM.POS%	!    point at /TIME_LIMIT     &
\		CASE ELSE			!  case else,		      &
\			FATAL% = TRUE%		!  else set fatal error flag  &
\			ERRNAM$ = MODULE$	!    return bad module name   &
\		END SELECT			!  end select		      &
						!			      &
\		CALL DISPLY (Z$)		!  display error message      &
			UNLESS FATAL%		!    unless fatal error	      &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit			      &

10000	!	p r o c e s s   / C L O S E   q u a l i f i e r		      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	CALL FET$CQ BY REF (CLS.Q%)		!fetch /CLOSE qualifier	      &
\	IF U.PRES% THEN				!if present,		      &
		CLS.POS% = U.POS%		!  save qual position	      &
\		PKT.STS% = PKT.STS% OR IQF.CLS%	!  set closed bit in packet   &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10100	!	p r o c e s s   / C P U _ L I M I T   q u a l i f i e r	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	PKT.IQ.DCP% = -1%			!load default CPU_limit	      &
\	PKT.IQ.MCP% = -1%			!load maximum CPU_limit	      &
						!			      &
\	CALL FET$CQ BY REF (CPU.Q%)		!/CPU_LIMIT specified?	      &
\	RETURN UNLESS U.PRES%			!exit if not present	      &
						!			      &
\	CPU.POS% = U.POS%			!save qual position	      &
\	KWD.FLG% = FALSE%			!show no keywords seen	      &
						!			      &
\	CALL FET$KA BY REF (MAX.K%)		!fetch MAXIMUM keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MCP% = U.LOW%		!  load value		      &
\		PKT.IQ.DCP% = PKT.IQ.MCP%	!  init default to maximum    &
\	END IF					!end if			      &
						!			      &
\	CALL FET$KA BY REF (DFL.K%)		!fetch DEFAULT keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DCP% = U.LOW%		!  load value		      &
\	END IF					!end if			      &
						!			      &
\	IF NOT KWD.FLG% THEN			!if no keywords found,	      &
		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DCP% = U.LOW%		!  load default value	      &
\		PKT.IQ.MCP% = U.LOW%		!  load maximum value	      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10200	!	p r o c e s s   / D E F A U L T   q u a l i f i e r	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
						!			      &
\	CALL FET$CQ BY REF (DFL.Q%)		!fetch /DEFAULT qualifier     &
\	DFL.FLG% = U.PRES%			!set/clear present flag	      &
\	IF U.PRES% THEN				!if present,		      &
		DFL.POS% = U.POS%		!  save qual position	      &
\		PKT.STS% = PKT.STS% OR IQF.DFL%	!set default bit in flag      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10300	!	p r o c e s s   / F O R M S   q u a l i f i e r		      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	FORM$ = ""				!init null form name	      &
\	U.POS% = 0%				!clear repaint flag	      &
						!			      &
\	CALL FET$CQ BY REF (FRM.Q%)		!fetch the /FORMS qualifier   &
\	FRM.FLG% = U.PRES%			!set flag if present	      &
\	IF U.PRES% THEN				!if qualifier is present,     &
\		CALL FET$A BY REF		!  fetch the argument	      &
\		FORM$ = SEG$(U.STR$,1%,U.LEN%)  !  save form name	      &
\	END IF					!end if			      &
						!			      &
\	CALL GETFRM (FORM$,"",FALSE%)		!lookup form name	      &
\	RETURN IF ERRSTS% OR CC.FLG%		!exit if error or CTRL/C      &
\	PKT.IQ.FML$ = CHR$(LEN(FORM$))		!load form name length	      &
\	PKT.IQ.FRM$ = FORM$			!load default form name	      &
						!			      &
\	RETURN					!exit			      &

10400	!	p r o c e s s   / P A G E _ L I M I T   q u a l i f i e r     &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	PKT.IQ.MP0%,PKT.IQ.MP1% = -1%		!init maximum page_limit      &
\	PKT.IQ.DP0%,PKT.IQ.DP1% = -1%		!init default page_limit      &
						!			      &
\	CALL FET$CQ BY REF (PGL.Q%)		!fetch /PAGE_LIMIT qual	      &
\	RETURN UNLESS U.PRES% 			!exit if not present	      &
						!			      &
\	PGL.POS% = U.POS%			!save qual position	      &
\	KWD.FLG% = FALSE%			!show no keywords seen	      &
						!			      &
\	CALL FET$KA BY REF (MAX.K%)		!fetch MAXIMUM keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW%,U.HIGH% = -1%	!    force values to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MP0% = U.LOW%		!  load maximum lsb value     &
\		PKT.IQ.MP1% = U.HIGH%		!  load maximum msb value     &
\		PKT.IQ.DP0% = PKT.IQ.MP0%	!  init default lsb to max    &
\		PKT.IQ.DP1% = PKT.IQ.MP1%	!  init default msb to max    &
\	END IF					!end if			      &
						!			      &
\	CALL FET$KA BY REF (DFL.K%)		!fetch DEFAULT keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW%,U.HIGH% = -1%	!    force values to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DP0% = U.LOW%		!  load lsb default value     &
\		PKT.IQ.DP1% = U.HIGH%		!  load msb default value     &
\	END IF					!end if			      &
						!			      &
\	IF NOT KWD.FLG% THEN			!if no keywords found,	      &
		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW%,U.HIGH% = -1%	!    force values to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MP0%,PKT.IQ.DP0% = U.LOW%!  load max,dflt lsb values   &
\		PKT.IQ.MP1%,PKT.IQ.DP1% = U.HIGH%			      &
						!  load max,dflt msb values   &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10500	!	p r o c e s s   / P R I O R I T Y   q u a l i f i e r	      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	PKT.IQ.MPR$,PKT.IQ.DPR$ = CHR$(255%)	!init max,default priority    &
						!			      &
\	CALL FET$CQ BY REF (PTY.Q%)		!fetch /PRIORITY qualifier    &
\	RETURN UNLESS U.PRES%			!exit if not present	      &
						!			      &
\	PRI.POS% = U.POS%			!save qual position	      &
\	KWD.FLG% = FALSE%			!show no keywords seen	      &
						!			      &
\	CALL FET$KA BY REF (MAX.K%)		!fetch MAXIMUM keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MPR$ = CHR$(U.LOW%)	!  load value		      &
\		PKT.IQ.DPR$ = PKT.IQ.MPR$	!  init default to maximum    &
\	END IF					!end if			      &
						!			      &
\	CALL FET$KA BY REF (DFL.K%)		!fetch DEFAULT keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DPR$ = CHR$(U.LOW%)	!  load value		      &
\	END IF					!end if			      &
						!			      &
\	IF NOT KWD.FLG% THEN			!if no keywords found,	      &
		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MPR$,PKT.IQ.DPR$ = CHR$(U.LOW%)			      &
						!  load max,default values    &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

10600	!	p r o c e s s   / P R I V I L E G E S   q u a l i f i e r     &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	CALL FET$CQ BY REF (PRV.Q%)		!fetch /PRIVILEGE qualifier   &
\	RETURN UNLESS U.PRES%			!exit unless present	      &
						!			      &
\	PRIV$ = STRING$(8%,0%)			!init null priv mask	      &
\	CALL FET$A BY REF			!get the 1st argument	      &
\	WHILE U.PRES%				!do for all privileges:	      &
\		PNAM$ = SEG$(U.STR$,1%,U.LEN%)  !  save PRIVILEGE name	      &
\		PRIV$ = FN.PRIV.MASK$(PRIV$,PNAM$)			      &
						!  update priv mask	      &
\		RETURN IF ERRSTS% OR CC.FLG%	!  exit if errors or CTRL/C   &
\		CALL FET$A BY REF		!get next privilege	      &
\	NEXT					!continue for all privs	      &
						!			      &
\	PKT.IQ.PRV$ = PRIV$			!load priv mask		      &
\	RETURN					!and exit		      &

10700	!	p r o c e s s   / T I M E _ L I M I T   q u a l i f i e r     &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
\	ERRSTS% = 0%				!init error status	      &
\	PKT.IQ.DTM% = -1%			!load default time limit      &
\	PKT.IQ.MTM% = -1%			!load maximum time limit      &
						!			      &
\	CALL FET$CQ BY REF (TIM.Q%)		!fetch /TIME_LIMIT qualifier  &
\	RETURN UNLESS U.PRES%			!exit unless present	      &
						!			      &
\	TIM.POS% = U.POS%			!save qual position	      &
\	KWD.FLG% = FALSE%			!show no keywords seen	      &
						!			      &
\	CALL FET$KA BY REF (MAX.K%)		!fetch MAXIMUM keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.MTM% = U.LOW%		!  load value		      &
\		PKT.IQ.DTM% = U.LOW%		!  init default to maximum    &
\	END IF					!end if			      &
						!			      &
\	CALL FET$KA BY REF (DFL.K%)		!fetch DEFAULT keyword	      &
\	IF U.PRES% THEN				!if present,		      &
		KWD.FLG% = TRUE%		!  show keyword seen	      &
\		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DTM% = U.LOW%		!  load value		      &
\	END IF					!end if			      &
						!			      &
\	IF NOT KWD.FLG% THEN			!if no keywords found,	      &
		CALL FET$KA BY REF (UNL.K%)	!  fetch UNLIMITED keyword    &
\		IF U.PRES% THEN			!  if present,		      &
			U.LOW% = -1%		!    force value to -1	      &
		ELSE	CALL FET$A BY REF	!  else fetch the argument    &
\		END IF				!  end if		      &
\		PKT.IQ.DTM% = U.LOW%		!  load default value	      &
\		PKT.IQ.MTM% = U.LOW%		!  load maximum value	      &
\	END IF					!end if			      &
						!			      &
\	RETURN					!exit			      &

15000	!	f n . p r i v . m a s k $ ( PRV.MSK% , PRV.NAM$ )	      &
	!								      &
	!								      &
	!inputs:	PRV.MSK$	-	privilege mask to update      &
	!		PRV.NAM$	-	privilege name to add	      &
	!								      &
	!outputs:	FN.PRIV.MASK$	-	updated privilege mask	      &
	!								      &
	!uses:		PRV.1%()	-	8-byte work array	      &
	!		PRV.2%()	-	8-byte work array	      &
	!		Z%		-	work integer		      &
	!		Z$		-	work string		      &
	!								      &
	!								      &
	DEF FN.PRIV.MASK$ (PRV.MSK$,PRV.NAM$)				      &
\	ERRSTS% = 0%				!show no error		      &
\	ON ERROR GOTO 15050			!trap own errors	      &
\	CHANGE PRV.MSK$ TO PRV.1%		!convert mask to array	      &
\	PRV.NAM$ = EDIT$(PRV.NAM$,-2%)		!trim the priv name	      &
									      &
\	IF PRV.NAM$ = "NONE" THEN		!if "none",		      &
		PRV.1%(Z%) = 0%			!  clear all priv bits	      &
			FOR Z% = 1% TO 8%	!    for all bytes in mask    &
\		GOTO 15090			!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	Z$ = SYS(				!cvt name to mask SYS call:   &
			CHR.6$ +		!  FIP call		      &
			CHR$(32%) +		!  check access		      &
			CHR$(1%) +		!  cvt name to mask	      &
			CHR.0$ +		!    reserved		      &
			CHR.00$ +		!    reserved		      &
			PRV.NAM$		!  priv name to convert	      &
		)				!end of SYS call	      &
						!			      &
\	CHANGE SEG$(Z$,7%,14%) TO PRV.2%	!save returned mask	      &
						!			      &
\	PRV.1%(Z%) = PRV.1%(Z%) OR PRV.2%(Z%)	!OR the returned priv bit     &
		FOR Z% = 1% TO 8%		!  into current mask	      &
\	GOTO 15090				!skip to exit		      &

15050	ERRSTS% = ERR				!return error code	      &
\	RESUME 15090				!resume to exit		      &

15090	CHANGE PRV.1% TO Z$			!convert mask array to string &
\	FN.PRIV.MASK$ = Z$			!and return as fn value	      &
\	CALL DISPLY ("?Invalid privilege name")	!display error message	      &
		IF ERRSTS%			!  if error		      &
\	FNEND					!end FN.PRIV.MASK$ function   &

15100	!	f n . u n s i g n e d ( VALUE% )			      &
	!								      &
	!								      &
	!inputs:	VALUE%		-	16-bit unsigned integer	      &
	!								      &
	!outputs:	FN.UNSIGNED	-	corresponding FL-PT value     &
	!								      &
	!uses:		Z		-	work FL-PT		      &
	!								      &
	!								      &
	DEF FN.UNSIGNED (VALUE%)					      &
\	Z = VALUE%				!move to fl-pt variable	      &
\	Z = Z + 65536.				!normalize to 0		      &
		IF Z < 0.			!  if negative		      &
\	FN.UNSIGNED = Z				!  return fl-pt value	      &
\	FNEND					!end FN.UNSIGNED function     &

15200	!	f n . c a p $ ( TEXT$ )					      &
	!								      &
	!								      &
	!inputs:	TEXT$		-	text string to capitalize     &
	!								      &
	!outputs:	FN.CAP$		-	text string with u/c 1st char &
	!								      &
	!								      &
	DEF FN.CAP$(TEXT$) =						      &
		EDIT$(SEG$(TEXT$,1%,1%),32%) + SEG$(TEXT$,2%,MAXINT%)	      &
						!return converted string      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
