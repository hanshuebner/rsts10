1	SUB SYNCHR							      &
\	MODULE$ = "SYNCHR"						      &
\	ON ERROR GOTO 19000						      &
\	SUBEXIT IF CC.FLG%						      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : SYNCHR.B2S				      &
	!	     version : V10.1					      &
	!	        edit : J					      &
	!	   edit date : 27-MAR-92				      &
	!	   author(s) : BGN/PRL					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1988, 1992 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL SYNCR 	(arguments passed via PBSCMN common section)  &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!	ERRSTS%		I	Error status			      &
	!				   0 = no error			      &
	!				   n = ERR value		      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.6-08	26-Feb-88	(BGN) Creation, some code from SHOENT &
	!				Add hooks for future $SYNCHRONIZE     &
	!				command.			      &
	! =================================================================== &
	! V10.1-J	19-Mar-92	(PRL) Support 'xxx*' wildcards	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	c o m m o n   d e c l a r a t i o n s			      &
	!								      &
	!	line #	name	description				      &
	!	======	====	===========				      &
	!	   800	PBSKEY	CUI program constants (%INCLUDE PBSKEY.B2S)   &
	!	   890	CUICMN	CUI common data (%INCLUDE CUICMN.B2S)	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	d i m e n s i o n   d e c l a r a t i o n s		      &
	!								      &
	!	line #	variable		description		      &
	!	======	========		===========		      &
	!	   900	NAM.1%(30)		work table for FN.MATCH.NAME% &
	!		NAM.2%(30)		work table for FN.MATCH.NAME% &
	!								      &
	!******************************************************************** &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "SYSTEM:PBSCMN.B2S"		!include QUEUE data section   &
	%INCLUDE "SYSTEM:PBSMAP.B2S"		!include QUEUE map sections   &
	%INCLUDE "SYSTEM:PBSKEY.B2S"		!include CUI keywords	      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &

900	!	D I M E N S I O N   d e c l a r a t i o n s		      &
	!								      &
	!								      &
	DIM	NAM.1%(10),			!table for FN.MATCH.NAME%     &
		NAM.2%(10)			!table for FN.MATCH.NAME%     &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
	!This command is not supported as of yet.			      &
	!								      &
	!Work that remains before it will be supported:			      &
	!	o PBS must pass back the status of the job that we issue the  &
	!	  $SYNCHRONIZE on.					      &
	!	o Dont' default to SYS$BATCH but rather the default QUEUE for &
	!	  BATCH.						      &
	!								      &
	!								      &
	! The /ENTRY qualifier will cause /QUEUE and any parameter	      &
	! to be ignored.						      &
	QTYP% = 0%				!select all queues	      &
\	CALL FET$CQ BY REF (ENT.Q%)		!/ENTRY=		      &
\	IF U.PRES% THEN 			!if present		      &
	   ENT.POS% = U.POS%			!  save position in cmd line  &
\      	   CALL FET$A BY REF			!  get the argument	      &
\	   ENT.NO% = VAL(SEG$(U.STR$,1%,U.LEN%))!  get the entry num	      &
	ELSE                                    !else check parameter	      &
	   CALL FET$P BY REF (ENT.T%)		!  fetch entry-name parameter &
\	   IF U.PRES% THEN			!  if present,		      &
	      ENT.POS% = U.POS%			!    save position in cmd line &
\	      ENTRY$ = SEG$(U.STR$,1%,U.LEN%)	!    save entry string	      &
	   ELSE								      &
	      U.POS% = 0%	      		!  disable repainting cmd     &
\	      CALL DISPLY ("?Missing required parameter")		      &
\	      SUBEXIT							      &
\	   END IF				!  end if		      &
\	   CALL FET$CQ BY REF (QUE.Q%)		!  was /QUEUE specified	      &
\	   IF U.PRES% THEN			!  if present		      &
	      ENT.POS% = U.POS%			!    save position in line    &
\ 	      CPOS% = POS(ENTRY$,":",1)		!    is there already a queue? &
\	      IF CPOS%>1% THEN			!      yes, error	      &
		CALL DISPLY("?Queue already specified in entry-specification") &
\		SUBEXIT				!			      &
\	      END IF				!    end if		      &
\	      ES.QUE$ = SEG$(U.STR$,1%,U.LEN%)	!    get the QUEUE name	      &
	   ELSE            			!  else			      &
	      ES.QUE$ = "SYS$BATCH"		!    select SYS$BATCH as the  &
						!    default.  This should    &
						!    change to default batch  &
						!    queue (if any).	      &
\	   END IF				!  end if		      &
\	   ENT.NO% = FN.ENTRY% (ENTRY$)		!  set/clear entry-no. flag   &
\	END IF					!end if			      &
									      &
\	IF ENT.NO% THEN				!if entry-number parm,	      &
		GOSUB 10000			!  sync via entry-number      &
	ELSE	GOSUB 11000			!else sync via entry-spec     &
\	END IF					!end if			      &
						!			      &
\	SUBEXIT					!exit			      &

10000	!	s y n c h r o n i z e   v i a   n u m b e r		      &
	!								      &
	!								      &
	RETURN IF CC.FLG%			!exit if CTRL/C		      &
						!			      &
\	ES.PPN% = -1%				!select any PPN		      &
\	ES.NAM$ = ""				!select any name	      &
\	ENT.SEQ% = FN.UNSIGNED%(ENT.NO%)	!select entry number	      &
\	CUR.TYP% = -1%				!show no current type	      &
\	Z% = FN.GET.ENTRY%(3%)			!get entry record	      &
\	IF ERRSTS% THEN				!if any errors,		      &
		U.POS% = 0%			!  disable repainting cmd     &
\		CALL DISPLY ("?No entry "+ENTRY$+" found")		      &
	ELSE								      &
		GOSUB 12000			!wait for completion	      &
\	END IF					!end if			      &
\	RETURN					!exit			      &

11000	!	s y n c h r o n i z e   v i a   e n t r y - s p e c	      &
	!								      &
	!								      &
	ENT.SEQ% = 0%				!no select via entry seq no.  &
\	ES.NAM$ = "*"				!select all entries	      &
\	ES.PPN% = PPN% 				!select users ppn	      &
\	ES.SPEC$ = ENTRY$			!  save entry-spec string     &
\	ES.FLG%% = 1%+2%+4%+8%+64%		!  set entry-spec options:    &
						!    1  = allow null que name &
						!    2  = allow wild que name &
						!    4  = allow null PPN      &
						!    8  = allow wild PPN      &
						!   ~16 = allow null ent name &
						!   ~32 = allow wild ent name &
						!    64 = allow not own PPN   &
\	QUE.POS%,OWN.POS%,NAM.POS% = 0%		!  init entry-spec pointers   &
\	U.POS% = ENT.POS%     			!  point to entry spec	      &
\	CALL ENTSPC (ES.SPEC$,ES.FLG%,ES.QUE$,ES.PPN%,ES.NAM$)		      &
						!  parse entry-spec	      &
\	SUBEXIT IF ERRSTS% OR CC.FLG%		!  exit if error or CTRL/C    &
						!			      &
\	ENT.FLG% = FALSE%			!clear entry-selected flag    &
\	CUR.TYP% = -1%				!show no current entry type   &
\	Z% = FN.GET.ENTRY%(3%)			!get 1st entry rec	      &
\	SUBEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	IF ERRSTS%=0% THEN			!was an entry found	      &
		GOSUB 12000 			!wait for it to complete      &
	ELSE					!			      &
		U.POS% = 0%			!  disable repainting cmd     &
\		CALL DISPLY ("?No entry "+ES.SPEC$+" found")		      &
\	END IF					!end if			      &
\	RETURN					!exit			      &

12000	!								      &
	!								      &
	! 	w a i t   f o r   e n t r y   t o   c o m p l e t e	      &
	!								      &
	!								      &
SLEEP_LOOP:								      &
	RETURN IF CC.FLG% OR ERRSTS%		!when the waiting is over...  &
\	SLEEP 4%				!wait a bit		      &
\	RETURN IF CC.FLG%			!check for control/C	      &
\	SLEEP 4%				!wait a bit		      &
\	Z% = FN.GET.ENTRY%(3%)			!get the entry		      &
\	GOTO SLEEP_LOOP				!wait some more		      &

15000	!	f n . g e t . e n t r y %				      &
	!								      &
	!								      &
	!inputs:	GET.MODE%	-	initial GET mode to use	      &
	!		QTYP%		-	entry's queue type to select  &
	!		ES.NAM$		-	entry's name to select	      &
	!		ES.PPN%		-	entry's PPN to select	      &
	!		ENT.SEQ%	-	entry's seq no. to select     &
	!		ENT.POS		-	last entry's position	      &
	!								      &
	!outputs:	FN.GET.ENTRY%	-	select-entry status:	      &
	!					   TRUE% - entry selected     &
	!					  FALSE% - no entry selected  &
	!		ERRSTS%		-	error status:		      &
	!					  0 = no error (rec found)    &
	!					  n = error (rec not found)   &
	!		ENT.POS		-	entry's relative position     &
	!		ENT.QUE$	-	entry's queue name	      &
	!		ENT.NAM$	-	entry's name		      &
	!								      &
	!uses:		Z$		-	local work string	      &
	!								      &
	!notes:								      &
	!								      &
	! This function is called to return the next entry definition  record &
	! (EDR),  based  on  the selection values specified above.  The value &
	! GET.MODE% (0-3) is used by this function in  its  initial  call  to &
	! GETREC, to allow the caller to decide how to get the initial entry  &
	! record.  Mode 0 (GET NEXT) should be specified if at least one  EDR &
	! has  been  read and no other non-EDRs have been read since the last &
	! call; otherwise, mode 1 (GET EQ) should be specified, with QUE.TYP% &
	! set accordingly.  Once the  initial GET is performed, the record is &
	! tested  to ensure that it is actually a EDR;  if  not  the function &
	! exits with status ERR.NOTFND%. Otherwise, a check is made to see if &
	! the EDR should  be selected, based on the selection values.  If the &
	! EDR  is  selected,  the  function  exits  with  success status (0); &
	! otherwise, a GET NEXT is performed and the process repeats.	      &
	!								      &
	!								      &
	DEF FN.GET.ENTRY% (GET.MODE%)					      &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	Z$ = CHR$(QTYP%) + STRING$(5%,0%)	!build search key	      &
		IF GET.MODE%			!  if non-zero GET mode	      &
\	FN.GET.ENTRY% = FALSE%			!set fn value = rec not found &

15010	CALL GETREC (GET.MODE%,1%,Z$)		!get initial entry record     &
\	FNEXIT IF CC.FLG%			!exit if CTRL/C		      &
\	QUE.TYP% = ASCII(PKT.QUE$)		!get queue type		      &
\	ENT.POS = 0.				!zero entry's rel position    &
		IF QUE.TYP% <> CUR.TYP%		!  if different queue type    &
\	ENT.POS = ENT.POS + 1.			!incr queue pos counter	      &
\	CUR.TYP% = QUE.TYP%			!show this type as current    &
\	ERRSTS% = ERR.NOTFND%			!return not-found error	      &
		IF QUE.TYP% AND (NOT 15%)	!  if not a entry record      &
			UNLESS ERRSTS%		!    unless pending error     &
\	FNEXIT IF ERRSTS%			!exit if any error	      &
						!			      &
\	GET.MODE% = 0%				!use GET NEXT mode now	      &
						!			      &
\	GOTO 15010				!skip this entry	      &
		IF PKT.SEQ% <> ENT.SEQ%		!  if seq nos. don't match    &
			IF ENT.SEQ%		!    if any seq no. to match  &
						!			      &
\	GOTO 15010				!skip this entry	      &
		IF QTYP% <> QUE.TYP%		!  if different types	      &
			IF QTYP%		!    if single queue type     &
\	GOTO 15010				!skip this entry	      &
		UNLESS FN.MATCH.PPN%(PKT.JB.PPN%,ES.PPN%)		      &
						!  unless PPN's match	      &
\	ENT.QUE$ = SEG$(PKT.QNM$,1%,ASCII(PKT.QNL$))			      &
						!return queue name	      &
\	GOTO 15010				!skip this entry	      &
		UNLESS FN.MATCH.NAME%(ENT.QUE$,ES.QUE$)			      &
						!  unless queue-names match   &
			IF LEN(ES.QUE$)		!    if select by queue-name  &
						!			      &
\	ENT.NAM$ = SEG$(PKT.JB.NAM$,1%,ASCII(PKT.JB.NML$))		      &
						!return entry name	      &
\	GOTO 15010				!skip this entry	      &
		UNLESS FN.MATCH.NAME%(ENT.NAM$,ES.NAM$)			      &
						!  unless entry-names match   &
			IF LEN(ES.NAM$)		!    if select by entry-name  &
						!			      &
\	FN.GET.ENTRY% = TRUE%			!set fn value = rec found     &
\	FNEND					!end FN.GET.ENTRY% function   &

15100	!	f n . m a t c h . p p n % ( PPN.1% , PPN.2% )		      &
	!								      &
	!								      &
	!inputs:	PPN.1%		-	queue rec PPN		      &
	!		PPN.2%		-	PPN word to match	      &
	!					  (255 = wildcard)	      &
	!								      &
	!outputs:	FN.MATCH.PPN%	-	returned match status:	      &
	!					  TRUE% = PPN's match	      &
	!					 FALSE% = PPN's don't match   &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		Z1%		-	1st PPN's byte value	      &
	!		Z2%		-	2nd PPN's byte value	      &
	!								      &
	!								      &
	DEF FN.MATCH.PPN% (PPN.1%,PPN.2%)				      &
\	FN.MATCH.PPN% = FALSE%			!init fn value as no match    &
\	FOR Z0%= 1% TO 2%			!do for each PPN byte:	      &
\		Z1% = PPN.1% AND 255%		!  get lo byte of 1st ppn     &
\		Z2% = PPN.2% AND 255%		!  get lo byte of 2nd ppn     &
\		FNEXIT				!  exit (no match)	      &
			IF Z1% <> Z2% 		!    if bytes don't match,    &
				IF Z2% <> 255%	!      if byte not wild	      &
\		PPN.1% = SWAP%(PPN.1%)		!  swap 1st ppn bytes	      &
\		PPN.2% = SWAP%(PPN.2%)		!  swap 2nd ppn bytes	      &
\	NEXT Z0%				!continue for hi bytes	      &
\	FN.MATCH.PPN% = TRUE%			!match if loop completes      &
\	FNEND					!end FN.MATCH.PPN% function   &

15200	!	f n . m a t c h . n a m e $ ( NAM.1$ , NAM.2$ )		      &
	!								      &
	!								      &
	!inputs:	NAM.1$		-	entry/queue name string	      &
	!		NAM.2$		-	name string to match	      &
	!								      &
	!outputs:	FN.MATCH.NAME%	-	returned match status:	      &
	!					   TRUE% = names match	      &
	!					  FALSE% = names don't match  &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		NAM.1%()	-	work table for ent/queue name &
	!		NAM.2%()	-	work table for match name     &
	!								      &
	!notes:		This function compares a entry or queue name string   &
	!		(NAM.1$) against a match name string (NAM.2$). The    &
	!		match name string may contain a '*' or multiple '?'   &
	!		wildcard characters (always match).		      &
	!								      &
	!		If the match name string is null or *, then the	      &
	!		function returns TRUE% (match), regardless of the     &
	!		entry/queue name string.			      &
	!								      &
	!		If the match string contains a trailing *, then	      &
	!		the * is replaced with enough ?'s to fill the string  &
	!		to a length of nine characters.			      &
	!								      &
	!								      &
	DEF FN.MATCH.NAME% (NAM.1$,NAM.2$)				      &
\	IF LEN(NAM.2$) = 0%			!if null match name	      &
	   OR NAM.2$ = "*" THEN			! or wildcard match name,     &
		FN.MATCH.NAME% = TRUE%		!  return match		      &
\		FNEXIT				!  and exit		      &
\	END IF					!end if			      &
						!			      &
\	Z0% = POS(NAM.2$,"*",LEN(NAM.2$))	!look for trailing * char     &
\	IF Z0% > 0% THEN			!if any found,		      &
		NAM.2$ = SEG$(NAM.2$,1%,Z0%-1%) +			      &
			 STRING$(9%-Z0%+1%,ASCII("?"))			      &
						!  replace * with ?'s	      &

15210	CHANGE EDIT$(NAM.1$,2%+4%) TO NAM.1%	!move ent/que name into array &
\	CHANGE EDIT$(NAM.2$,2%+4%) TO NAM.2%	!move match name into array   &
\	FN.MATCH.NAME% = FALSE%			!init fn value as no match    &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(0%) > NAM.2%(0%)	!  if entry/queue name longer &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(Z0%) <> NAM.2%(Z0%)	!  if chars don't match	      &
			IF NAM.2%(Z0%) <> ASCII("?")			      &
						!    if not wildcard char     &
				FOR Z0% = 1% TO NAM.1%(0%)		      &
						!      for each char	      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.2%(Z0%) <> ASCII("?")	!  if next char not wild      &
			FOR Z0% = NAM.1%(0%)+1% TO NAM.2%(0%)		      &
						!    for remaining chars      &
						!			      &
\	FN.MATCH.NAME% = TRUE%			!match if loops complete      &
\	FNEND					!end FN.MATCH.NAME% function  &

15300	!	f n . t i m e % ( TI.ME% )				      &
	!								      &
	!								      &
	!inputs:	TI.ME%		-	minutes until/since midnight  &
	!								      &
	!outputs:	FN.TIME%	-	inverted time integer	      &
	!								      &
	!uses:		none.						      &
	!								      &
	!notes:		The standard RSTS time integer is defined as minutes  &
	!		until midnight.  However, time integers	are defined   &
	!		in the spooling package as minutes since midnight.    &
	!		This function will "invert" a time integer, allowing  &
	!		its use for both encoding and decoding spooler/RSTS   &
	!		time integers.					      &
	!								      &
	!								      &
	DEF FN.TIME% (TI.ME%) =						      &
		1440% - TI.ME%			!invert time value	      &

15400	!	f n . f i l e . s p e c $ ( FSPEC$ )			      &
	!								      &
	!								      &
	!inputs:	FSPEC$		-	standard file spec	      &
	!								      &
	!outputs:	FN.FILE.SPEC$	-	returned file-spec with any   &
	!					network password field(s)     &
	!					replaced with "password"      &
	!								      &
	!uses:		Z%,Z1%,Z2%	-	work integers		      &
	!								      &
	!								      &
	DEF FN.FILE.SPEC$ (FSPEC$)					      &
\	FN.FILE.SPEC$ = FSPEC$			!return file-spec string      &
\	Z1% = POS(FSPEC$,'"',1%) + 1%		!find NET access field start  &
\	FNEXIT UNLESS Z1% > 1%			!exit unless one found	      &
\	Z2% = POS(FSPEC$,'"::',Z1%)		!find net access field end    &
\	FNEXIT UNLESS Z2% > 0%			!exit unless one found	      &
\	Z% = POS(FSPEC$," ",Z1%)		!find password start	      &
\	FNEXIT UNLESS (Z% > 0%) AND (Z% < Z2%)	!exit unless one found	      &
\	FN.FILE.SPEC$ = SEG$(FSPEC$,1%,Z%) + "password" +		      &
				SEG$(FSPEC$,Z2%,MAXINT%)		      &
						!replace any passwd fields    &
\	FNEND					!end FN.FILE.SPEC$ function   &

15500	!	f n . k b x . t o . k b $  ( SRV$ )			      &
	!								      &
	!								      &
	! inputs:	SRV$		-	server name in _KBcn: format  &
	!								      &
	! outputs:	FN.KBX.TO.KB$	-	server name in _KBn: format   &
	!								      &
	! uses:		FIRQB%()	-	sys call array		      &
	!								      &
	!								      &
	DEF FN.KBX.TO.KB$ (SRV$)					      &
\	IF LEFT(SRV$,3%) = "_KB" THEN		!if KB type server,	      &
		ON ERROR GOTO 15520		!else trap own errors	      &
\		CHANGE FSS$(SRV$,1%) TO FIRQB%	!  FSS the server name	      &
\		SRV$ = "_KB" + NUM1$(FIRQB%(25%)) + ":"			      &
						!  return full _KBn: name     &
			UNLESS (FIRQB%(30%) AND 128%)			      &
						!  unless invalid (removed)   &
\	END IF					!end if			      &
\	GOTO 15550				!skip to exit		      &

15520	RESUME 15550				!resume to exit		      &

15550	FN.KBX.TO.KB$ = SRV$			!return server name	      &
\	FNEND					!end FN.KBX.TO.KB$ function   &

15700	!	f n . u n s i g n e d % ( FL.PT )			      &
	!								      &
	!								      &
	!inputs:	VALUE		-	floating-pt value 0 to 65535  &
	!								      &
	!outputs:	FN.UNSIGNED%	-	unsigned 16-bit integer	      &
	!								      &
	!uses:		None.						      &
	!								      &
	!								      &
	DEF FN.UNSIGNED% (FL.PT)					      &
\	FL.PT = 0.				!force to 0		      &
		IF FL.PT < 0. OR FL.PT > 65535.	!  if not in range 0-65535    &
\	FL.PT = FL.PT - 65536.			!normalize (-32768,+32767)    &
		IF FL.PT > 32767.		!  if over max pos integer    &
\	FN.UNSIGNED% = FL.PT			!return unsigned integer      &
\	FNEND					!end FN.UNSIGNED% function    &

15800	!	f n . u n s i g n e d ( VALUE% )			      &
	!								      &
	!								      &
	!inputs:	VALUE%		-	16-bit unsigned integer	      &
	!								      &
	!outputs:	FN.UNSIGNED	-	corresponding FL-PT value     &
	!								      &
	!uses:		Z		-	work FL-PT		      &
	!								      &
	!								      &
	DEF FN.UNSIGNED (VALUE%)					      &
\	Z = VALUE%				!move to fl-pt variable	      &
\	Z = Z + 65536.				!normalize to 0		      &
		IF Z < 0.			!  if negative		      &
\	FN.UNSIGNED = Z				!  return fl-pt value	      &
\	FNEND					!end FN.UNSIGNED function     &

16000	!	f n . p p n $ ( PPN% , FIXED% )				      &
	!								      &
	!								      &
	!inputs:	PPN%		-	PPN word		      &
	!		FIXED%		-	fixed-length string flag      &
	!								      &
	!outputs:	FN.PPN$		-	PPN string "[ proj,prog ]"    &
	!								      &
	!uses:		Z1$, Z2$	-	work strings		      &
	!		Z%		-	work integer		      &
	!								      &
	!notes:	If FIXED% flag is set, then PPN is returned as a fixed-length &
	!	9-character string of the form "[aaa,bbb]", where aaa is the  &
	!	project no. with leading spaces, and bbb is the programmer    &
	!	no. with trailing spaces.  If FIXED% flag is zero, then the   &
	!	PPN string is returned with no leading/trailing spaces.	      &
	!								      &
	!								      &
	DEF FN.PPN$ (PPN%,FIXED%)					      &
\	Z1$, Z2$ = "*"				!init proj,prog strings	      &
\	Z% = SWAP%(PPN%) AND 255%		!get project no.	      &
\	Z1$ = NUM1$(Z%)				!build project string	      &
		UNLESS Z% = 255%		!  unless wild		      &
\	Z1$ = SPACE$(3%-LEN(Z1$)) + Z1$		!add leading spaces	      &
		IF FIXED%			!  if fixed-length flag set   &
\	Z% = PPN% AND 255%			!get programmer no.	      &
\	Z2$ = NUM1$(Z%)				!build programmer string      &
		UNLESS Z% = 255%		!  unless wild		      &
\	Z2$ = Z2$ + SPACE$(3%-LEN(Z2$))		!add trailing spaces	      &
		IF FIXED%			!  if fixed-length flag set   &
\	FN.PPN$ = "[" + Z1$ + "," + Z2$ + "]"	!return PPN string	      &
\	FNEND					!end FN.PPN$ function	      &

16300	!	f n . p r i v % ( P R I V $ )				      &
	!								      &
	!								      &
	!inputs:	PRIV$		-	priv name to check	      &
	!								      &
	!outputs:	FN.PRIV%	-	privilege status:	      &
	!					  TRUE  -> priv on	      &
	!					  FALSE -> priv off	      &
	!								      &
	!		ERRSTS%		-	0 if priv on		      &
	!					ERR.PRVIOL if priv off	      &
	!					ERR.BADNAM if invalid priv    &
	!								      &
	DEF FN.PRIV%(PRIV$)			!start definition	      &
\	ON ERROR GOTO 16310			!local error routine	      &
\	ERRSTS% = 0%				!clear ERRSTS		      &
\	PRIV$ = EDIT$(PRIV$,-1%)		!trim the priv name string    &
\	Z$ = SYS (				!do check priv SYS call:      &
		CHR.6$ +			!  FIP call		      &
		CHR$(32%) +			!  check access function      &
		CHR$(1%) +			!  check priv name subfun     &
		CHR.0$ +			!  reserved		      &
		CHR.00$ +			!  reserved		      &
		PRIV$				!  priv name to check	      &
		 )				!end of sys call	      &
\	Z%,FN.PRIV% = (ASCII(SEG$(Z$,3%,3%)) = 0%)			      &
						!return priv status	      &
\	IF NOT Z% THEN				!if priv not enabled,	      &
		CALL DISPLY ("?"+PRIV$+" privilege required")		      &
						!  display error message      &
\		ERRSTS% = ERR.PRVIOL%		!  and return PRVIOL error    &
\	END IF					!end if			      &
\	GOTO 16320				!skip to function exit	      &

16310	ERRSTS% = ERR.BADNAM%			!set bad priv name	      &
\	CALL DISPLY ("?Invalid privilege name")	!display error message	      &
\	FN.PRIV% = FALSE%			!return priv disabled	      &
\	RESUME 16320				!resume to function end	      &

16320	FNEND					!end FN.PRIV% function	      &

16400	!	f n . n u m e r i c % ( ENTRY$ )			      &
	!								      &
	!								      &
	!inputs:	ENTRY$		-	entry string		      &
	!								      &
	!outputs:	FN.NUMERIC%	-	numeric-entry flag:	      &
	!					  TRUE  -> entry is numeric   &
	!					  FALSE -> entry not numeric  &
	!								      &
	!uses:								      &
	!								      &
	!notes:	This function determines whether an entry string is numeric   &
	!	(indicating an entry number), or non-numeric (indicating an   &
	!	entry-spec).						      &
	!								      &
	!								      &
	DEF FN.NUMERIC% (ENTRY$)					      &
\	ON ERROR GOTO 16410			!trap own errors	      &
\	Z% = VAL(ENTRY$)			!try to convert to integer    &
\	FN.NUMERIC% = (	(POS(ENTRY$,"+",1%) +	!check for + sign	      &
			 POS(ENTRY$,"-",1%) +	!	   - sign	      &
			 POS(ENTRY$,".",1%))	!	   decimal point      &
				= 0% )		!numeric if none	      &
\	GOTO 16420				!skip to exit fn	      &

16410	FN.NUMERIC% = FALSE%			!return non-numeric flag      &
\	RESUME 16420				!resume to exit fn	      &

16420	FNEND					!end FN.NUMERIC% function     &

16500	!	f n . o w n . e n t r y % ( ACC.PPN% )			      &
	!								      &
	!inputs:	ACC.PPN%	-	entry's PPN to check	      &
	!		PPN%		-	user's PPN		      &
	!								      &
	!outputs:	FN.OWN.ENTRY%	-	ownership flag:		      &
	!					  TRUE  -> owner access	      &
	!					  FALSE -> no owner access    &
	!								      &
	!notes:	This function determines if the user has owner access to the  &
	!	current entry, based on the user's PPN and the entry's PPN.   &
	!								      &
	!	A user has ownership of an entry if:			      &
	!								      &
	!		1) The user has WACNT privilege			      &
	!	or	2) The user has GACNT privilege and the PPN's	      &
	!		   project number matches the user's		      &
	!		3) The entry's PPN matches the user's		      &
	!								      &
	!								      &
	DEF FN.OWN.ENTRY% (ACC.PPN%)					      &
\	IF ACC.PPN% = PPN% THEN			!if same ppn,		      &
		FN.OWN.ENTRY% = TRUE%		!  return TRUE		      &
	ELSE	CHANGE SYS (			!else do UU.CHK SYS call:     &
			CHR.6$ +		!    FIP call		      &
			CHR$(32%) +		!    check access function    &
			CHR.00$ +		!    reserved		      &
			CHR$(ACC.PPN%) +	!    prog no. to check	      &
			CHR$(SWAP%(ACC.PPN%))	!    proj no. to check	      &
			   ) TO FIRQB%		!  end of sys call	      &
						!			      &
\		FN.OWN.ENTRY% = ((FIRQB%(3%) AND 128%) <> 0%)		      &
						!  return ownership flag      &
\	END IF					!end if			      &
						!			      &
\	FNEND					!end FN.OWN.ENTRY% function   &

16700	!	f n . e n t r y % ( ENTRY$ )				      &
	!								      &
	!								      &
	!inputs:	ENTRY$		-	entry string		      &
	!								      &
	!outputs:	FN.ENTRY%	-	entry number in range 1-9999  &
	!					0 if not an entry number      &
	!		ERRSTS%		-	error status:		      &
	!					     0 = valid entry no. or 0 &
	!					   <>0 = invalid entry no.    &
	!								      &
	!uses:		Z		-	work fl-pt		      &
	!								      &
	!notes:	This function determines whether an entry string is numeric   &
	!	(indicating an entry number), or non-numeric (indicating an   &
	!	entry-spec).  If non-numeric, then 0 is returned.  If entry   &
	!	number, then ensures in range 1-9999.  If in range, then the  &
	!	entry number is returned with ERRSTS%=0.  If out of range,    &
	!	then entry number 0 is returned with ERRSTS% = ERR.BADNAM%.   &
	!								      &
	!								      &
	DEF FN.ENTRY% (ENTRY$)						      &
\	ON ERROR GOTO 16710			!trap own errors	      &
\	ERRSTS% = 0%				!init success		      &
\	Z = VAL(ENTRY$)				!try to convert to number     &
\	IF POS(ENTRY$,"+",1%) OR		!if includes + sign,	      &
	   POS(ENTRY$,"-",1%) OR		!or includes - sign,	      &
	   POS(ENTRY$,".",1%) THEN		!or includes decimal point,   &
		FN.ENTRY% = 0%			!  return entry no. = 0	      &
\		GOTO 16720			!  and skip to exit	      &
\	END IF					!end if			      &
						!			      &
\	IF (Z >= 1.) AND (Z <= 9999.) THEN	!if entry no. in range,	      &
		FN.ENTRY% = Z			!  return entry no.	      &
	ELSE	ERRSTS% = ERR.BADNAM%		!else return BADNAM error     &
\		FN.ENTRY% = 0%			!  return entry no. = 0	      &
\		CALL DISPLY ("?Number not in range 1 to 9999")		      &
						!  display error message      &
\	END IF					!end if			      &
\	GOTO 16720				!skip to exit		      &

16710	FN.ENTRY% = 0%				!return entry no. 0	      &
\	RESUME 16720				!resume to exit fn	      &

16720	FNEND					!end FN.NUMERIC% function     &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	FATAL% = TRUE%				!set fatal error flag	      &
\	ERRSTS% = ERR				!save error no.		      &
\	ERRLIN% = ERL				!save error line no.	      &
\	ERRNAM$ = ERN$				!save module name	      &
\	RESUME 32767				!resume to exit		      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND								      &

