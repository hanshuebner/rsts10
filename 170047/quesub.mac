	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.LIBRARY /CMN:NETDEF.SML/
TITLE	QUESUB,<DECNET QUEUE SUBROUTINES>,0A,10-MAY-91,GPK

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR QUESUB.MAC

;+
; EDIT  BY    DATE		REASON
;
;  00  GPK  29-Mar-81	Creation date -- moved from XMDINT.MAC module.
;
;-

.SBTTL	DEFINE THINGS

.MCALL	$CCB

	$CCB

	DEFORG	QUESUB

.SBTTL	POPQUE - DEQUEUE FIRST ENTRY ON A QUEUE

;+
; POPQUE - REMOVE AN ENTRY FROM A QUEUE
;
;	R0 -> FIRST WORD OF QUEUE HEAD
;
;	CALL	POPQUE
;
;	R5 -> CCB DEQUEUED
;
;	C=0 IF ENTRY PRESENT ON QUEUE
;	C=1 IF QUEUE IS EMPTY, AND R5 RANDOM
;
; NOTE:	THIS IS USED BY BOTH DECNET AND THE COMM DEVICE DRIVERS.
;
;-
	
POPQUE::SEC			;ASSUME NO BUFFER ON QUEUE
	MOV	(R0),R5		;GET THE FIRST ENTRY
	BEQ	20$		;IF EQ NO ENTRIES ON QUEUE
	MOV	(R5),(R0)	;SET ADDRESS OF NEW FIRST CCB
	BNE	10$		;IF NE NO NEW LAST
	MOV	R0,2(R0)	;CLOSE UP THE LIST
10$:	CLR	(R5)		;CLEAR LINK WORD AND C BIT
20$:	RETURN			;THEN EXIT

.SBTTL	RETURN BUFFER AND CCB TO MONITOR

;+
; RBFCCB - RETURN BUFFER AND CCB TO MONITOR
;
;	R5 ->	SOMEWHERE IN CCB
;
;	CALL	RBFCCB
;
;	R4 =	RANDOM
;	R5 =	0
;
;	BOTH THE BIG BUFFER (AT CC.BUF+BF.ADR(R5)) AND THE CCB ITSELF
;	ARE RELEASED
;
; NOTE:	THIS IS USED BY BOTH DECNET AND THE COMM DEVICE DRIVERS.
;
;-

RBFCCB::BIC	#37,R5		;POINT R5 TO TOP OF CCB
	MOV	CC.BUF+BF.ADR(R5),R4 ;GET THE BUFFER ADDRESS
	BEQ	10$		;UNLESS THERE IS NONE
	BUFFER	RETURN		;RETURN THE BUFFER
10$:	MOV	R5,R4		;PUT CCB ADDRESS HERE
	BUFFER	RETSML		;RETURN THE CCB
	CLR	R5		;ZAP BUFFER ADDRESS
	RETURN

.END
