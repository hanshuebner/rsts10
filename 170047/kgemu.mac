	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
TITLE	CRC,<CRC16 CALCULATOR>,0A,10-MAY-91,FEK

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR CRC
;+
;
;  000	FEK 12-SEP-83	Creation
;
;-

.SBTTL	CRC16 Tables

	DEFORG	KGEMU
	DEFORG	KG11
	DEFORG	KGTBL
	DEFORG	KGCTL
	ORG	KGTBL

	.IF	DF,CRC32W

	.WORD	     0, 140301, 140601,    500, 141401,   1700,   1200, 141101
	.WORD	143001,   3300,   3600, 143501,   2400, 142701, 142201,   2100
	.WORD	     0, 146001, 154001,  12000, 170001,  36000,  24000, 162001
	.WORD	120001,  66000,  74000, 132001,  50000, 116001, 104001,  42000

	.IFF

	.WORD	     0, 140301, 140601,    500, 141401,   1700,   1200, 141101
	.WORD	143001,   3300,   3600, 143501,   2400, 142701, 142201,   2100
	.WORD	146001,   6300,   6600, 146501,   7400, 147701, 147201,   7100
	.WORD	  5000, 145301, 145601,   5500, 144401,   4700,   4200, 144101
	.WORD	154001,  14300,  14600, 154501,  15400, 155701, 155201,  15100
	.WORD	 17000, 157301, 157601,  17500, 156401,  16700,  16200, 156101
	.WORD	 12000, 152301, 152601,  12500, 153401,  13700,  13200, 153101
	.WORD	151001,  11300,  11600, 151501,  10400, 150701, 150201,  10100
	.WORD	170001,  30300,  30600, 170501,  31400, 171701, 171201,  31100
	.WORD	 33000, 173301, 173601,  33500, 172401,  32700,  32200, 172101
	.WORD	 36000, 176301, 176601,  36500, 177401,  37700,  37200, 177101
	.WORD	175001,  35300,  35600, 175501,  34400, 174701, 174201,  34100
	.WORD	 24000, 164301, 164601,  24500, 165401,  25700,  25200, 165101
	.WORD	167001,  27300,  27600, 167501,  26400, 166701, 166201,  26100
	.WORD	162001,  22300,  22600, 162501,  23400, 163701, 163201,  23100
	.WORD	 21000, 161301, 161601,  21500, 160401,  20700,  20200, 160101

	.ENDC	;END OF THE 128 WORD TABLE

.SBTTL	CODE TO OVERLAY CODE IN TBL

	;There are equivalent globals in TBL which are the ones really
	;called, so if code in this psect (RJDISP) is changed, then
	;the corresponding code in TBL will also have to be changed.

	ORG	RJDISP

.ENABL LSB

RJMAPD:	BR	10$

DOKG11: TST	(SP)+		;DUMP THE RETURN ADDRESS
	JMP	@#KG11		;GO DO THE EMULATION

10$:	CMP	KISAR5,@#RJDAP5	;ARE WE MAPPED???
	RETURN			;LET THE CALLER CHECK

.DSABL LSB

GLOBAL	<RJDAP5>

.SBTTL	DO THE KG11 EMULATION

	ORG	KGCTL

KGSTA:	.WORD	0
KGCCR:	.WORD	0

	ORG	KG11

;+
;
;	THIS CODE IS JMPX'ed TO FROM RTI, AFTER SEVERAL VALIDITY CHECKS
;	HAVE BEEN PASSED
;
;	SP -> OLD R3, PC, PSW, ....
;	R3 =  OLD PC (-> CSR ADDRESS ACCESSED)
;	ALL OTHER REGS = SAME AS WHEN THE TRAP OCCURED
;
;	THIS CODE IS VERY DEPENDANT ON THE CURRENT RJ2780 CODE!!!
;	IF THAT CODE CHANGES, THIS CODE WILL PROBABLY HAVE TO
;	CHANGE ALSO!!!  NOTE: HOWEVER, SINCE NOBODY SEEMS TO HAVE
;	ANY INTREST IN DOING ANY WORK IN THAT CODE ANYWAY, THERE
;	SHOULD BE NO PROBLEM!
;-

KG11:	MOV	4(SP),@#PS	;RESET TO RJ2780'S CURRENT PRIORITY
	MOV	R1,-(SP)	;SAVE ANOTHER REGISTER
	MOV	(R3),R1		;GET THE KG CSR
	BIC	#177771,R1	; AND INTO AN OFFSET
	ADD	R1,PC		;LETS DO THE EMULATION FOR EACH CSR
	BR	DOR0		;FOR CSR = 170700
	BR	DOR2		;FOR CSR = 170702
	BR	DOR4		;FOR CSR = 170704
DIE:	CRASH			;NO CSR 170706	
;
;	NOW WE HAVE:
;		R1 = SCRATCH
;		R3 = OLD PC ( -> FAILING CRC REFERENCE )
;		SP -> OLD R1, OLD R3, PC, PSW, ....


.SBTTL	DO EMULATION FOR CSR 170704

DOR4:				;170704		KGDATA
	MOV	R0,-(SP)	;SAVE A WORKING REGISTER
	CMP	-(R3),#110037	;IS IT THE MOVB R0,@#KGDATA
	BEQ	10$		;YES
	CMP	(R3),#110537	;IS IT THE MOVB CBAX,@#KGDATA
	BNE	20$		;NO, CHECK FOR NEXT ONE
	MOV	R5,R0		;GET SET FOR THE CRC CALCULATION
10$:	MOV	KGSTA,R1	;GET THE STAUS WORD
	BIC	#177770,R1	;ISOLATE THE CRC TYPE
	CMP	R1,#1		;IS IT CRC 16??
	BNE	DIE		;SORRY, I CAN'T DO ANYOTHERS
	MOV	#KGCCR,R1	;SETUP THE POINTER TO THE CRC WORD
	CALL	DOCRC		;AND DO IT
	BR	50$		;ALL DONE FOR NOW.

20$:	CMP	(R3),#121	;MOVB ECH(R2),@#KGDATA
	BNE	30$		;NO, CHECK NEXT ONE
	CMP	-(R3),#116237	;REALLY MOVB ECH(R2),@#KGDATA
	BNE	DIE		;NO
	MOVB	121(R2),R0	;GET THE VALUE
	BR	10$		;AND GO DO IT.

30$:	CMP	(R3),#10	;MOVB CDLE(R1),@#KGDATA
	BNE	40$		;NO
	CMP	-(R3),#116137	;REALLY MOVB CDLE(R1),@#KGDATA
	BNE	DIE		;NOPE, SORRY.
	MOV	2(SP),R1	;GET THE ORIGINAL R1 BACK
	MOVB	10(R1),R0	;GET THE DATA
	BR	10$		;AND GO CRC IT.

40$:	CMP	(R3),#122	;MOV CBC(R2),@#KGDATA
	BNE	DIE		;SORRY, LAST CHANCE
	CMP	-(R3),#16237	;REALLY MOV CBC(R2),@#KGDATA
	BNE	DIE		;NOPE
	MOV	KGSTA,R1	;GET THE STATUS REGISTER
	BIC	#177770,R1	;GET THE CRC TYPE
	CMP	R1,#3		;IS IT LRC 16 TYPE
	BNE	DIE		;SORRY, CAN'T DO OTHERS.
	MOV	122(R2),KGCCR	;YES, STORE IT AWAY.
50$:	MOV	(SP)+,R0	;RESTORE RJ'S REAL R0
	BR	END		;ALL DONE

.SBTTL	DO EMULATION FOR CSR 170702

DOR2:				;170702		KGBCCR
	CMP	-(R3),#113700	;IS IT THE MOVB	@#KGBCCR+?,R0
	BNE	20$		;NO, SO CHECK THE OTHER ONE
	BIT	#1,2(R3)	;WAS IT +0, OR +1
	BNE	10$		;IT WAS +1
	MOVB	KGCCR,R0	;+0, SO PUT IT IN RJ'S R0
	BR	END		;DONE, SO RETURN TO RJ

10$:	MOVB	KGCCR+1,R0	;+1, SO PUT IT IN RJ'S R0
	BR	END		;AND ALL DONE FOR NOW

20$:	CMP	(R3),#13762	;IS THIS THE MOV @#KGBCCR,CBC(R2)
	BNE	DIE		;LAST CHANCE, SORRY
	CMP	4(R3),#122	;BETTER BE CBC(R2)
	BNE	DIE		;SORRY, IT'S NOT
	MOV	KGCCR,122(R2)	;RETURN IT TO THEM
	ADD	#2,4(SP)	;AND BUMP THE PC
	BR	END		;AND ALL DONE

.SBTTL	DO EMULATION FOR CSR 170700

DOR0:				;170700		KGSTAT
	CMP	-(R3),#133	;WAS THE PREVIOUS WORD 133?
	BEQ	10$		;YES, WE FOUND A 133
	CMP	(R3),#121	;HOW AROUT A 121?
	BNE	40$		;NO, NEITHER
10$:	CMP	-2(R3),#12737	;BETTER BE A MOV #nn,@#KGSTAT
20$:	BNE	DIE		;GO DIE (BNE 20$ BELOW HERE ALSO
				;        GO OFF TO DIE AS THEY SHOULD)
30$:	MOV	(R3),KGSTA	;YES, STORE THE STATUS
	BR	50$

40$:	CMP	(R3),#20	;LOOK FOR THE 20
	BNE	60$		;NOPE
	CMP	-(R3),#52737	;BETTER BE A BIS #20,@#KGSTAT
	BNE	DIE		;NO, SO GO DIE
	BR	54$		;DO THE CLEAR FOR THEM

50$:	BIT	#20,KGSTA	;SHOULD WE CLEAR IT
	BEQ	END		;NO, SO QUIT NOW
54$:	CLR	KGCCR		;CLEAR THE BCC REGISTER
	BIC	#20,KGSTA	;ONLY CLEAR IT ONCE
	BR	END		;ALL DONE WITH THESE

60$:	CMP	(R3),#34	;HOW ABOUT 34
	BNE	70$		;NO, CHECK FOR THE NEXT ONE
	CMP	-2(R3),#16137	;BETTER BE MOV KGC(R1),@#KGSTAT
	BNE	20$		;NOPE, SO SORRY, TIME TO DIE
	MOV	(SP),R3		;GET THE CALLERS OLD R1
	ADD	#34,R3		;NOW, POINT TO THE RIGHT PLACE
	BR	30$		;NOW, WERE POINT RIGHT, GO DO IT.

70$:	CMP	(R3),#105737	;IS IT THE TSTB @#KGSTAT
	BNE	20$		;SORRY, LAST CHANCE AT THIS REGISTER
	BIS	#10,6(SP)	;SET N, CAUSE WE'RE ALWAYS READY
END:	MOV	(SP)+,R1	;RESTORE RJ'S R1
	MOV	(SP)+,R3	;AND R3
	RTI			;AND NOW, CONTINUE


.SBTTL	DO THE CRC CALCULATION

	;INPUTS TO THIS ROUTINE ARE
	;
	;	R0 =  CHARACTER TO COMPUTE CRC ON
	;	R1 -> OLD CRC VALUE
	;

	.IF	DF,CRC32W

DOCRC:	MOV	R4,-(SP)	;SAVE THIS REGISTER
	MOV	(R1),R4		;GET THE OLD CRC
	XOR	R4,R0		;XOR OLD CRC WITH DATA CHARACTER
	MOV	R0,R4		;SAVE THIS VALUE
	BIC	#177760,R0	;CLEAR HIGH BYTE AND HIGH NIBBLE
	ASL	R0		;MAKE IT * 2
	MOV	KGTBL(R0),R0	;GET THE MODIDIER WORD
	BIC	#177417,R4	;CLEAR HIGH BYTE AND LOW NIBBLE
	ASH	#-3,R4		;MAKE INTO WORD INDEX
	MOV	KGTBL+32.(R4),R4 ;GET THE MODIFIER
	XOR	R4,R0		;TOTAL MODIFIER
	CLRB	(R1)		;CLEAR LOW BYTE OF OLD CRC
	SWAB	(R1)		;MOVE HIGH TO LOW POSITION
	XOR	R0,(R1)		;XOR MODIFIER AND OLD HIGH BYTE
	MOV	(SP)+,R4	;RESTORE THE WORKING REGISTER
	RETURN

	.IFF

DOCRC:	MOV	R4,-(SP)	;SAVE THIS REGISTER
	MOV	(R1),R4		;GET THE OLD CRC
	XOR	R4,R0		;XOR OLD CRC AND DATA CHARACTER
	BIC	#177400,R0	;CLEAR HIGH BYTE
	ASLB	R0		;MAKE INTO A WORD INDEX
	MOV	KGTBL(R0),R0	;GET THE MODIFIER WORD
	BCC	10$		;NO HIGH BIT FROM THE SHIFT
	MOV	#120001,R4	;GET THE POLY MODIFIER
	XOR	R4,R0		;XOR THE POLY INTO THE MODIFIER
10$:	CLRB	(R1)		;CLEAR LOW BYTE OF OLD CRC
	SWAB	(R1)		;MOVE HIGH BYTE TO THE LOW BYTE
	XOR	R0,(R1)		;XOR THE MODIFIER WITH OLD HIGH BYTE
	MOV	(SP)+,R4	;RESTORE REGISTER 4
	RETURN

	.ENDC

.END

