	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /CMN:FLDEF/
	.INCLUDE /CMN:MTDEF/
TITLE	RES,<RESIDENT CODE/DATA>,0K,23-JUN-92,MHB/ABC/MDS/JTC/SJM/MND/AJK/FEK/DRP/GPK/WJS/AWL/FEK/BGN/KPH/FRL/DBM/TPT/WRM

;
;		COPYRIGHT (c) 1974, 1992 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR RES

;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	TG   27-Jun-80	Added GEN phase stuff
;  002	RTW  09-Aug-80	Added global FIP entry for system jobs
;  003	RTW  09-Aug-80	Added Complex EMT handeling code
;  004	RTW  09-Aug-80	Added FBB's for DECnet system files
;  005	RTW  19-Aug-80	Took out 2 of decnets FBB's
;  006  TG   16-Mar-81	Fix for error recovery in OPEN/CLOSE code
;  007	JTC  16-May-81	Changes for SNAP/CRASH XBUF
;  008	JTC  18-May-81	Add DPAR5, DPAR6 Cells for I&D space
;  009	SJM  13-Jul-81	Add I&D space support
;  010	MND  05-Aug-81	Added CHRDL3 global for DSTAT
;  011	JTC  13-Oct-81	Changes for new FIP organization
;  012	JTC  20-Oct-81	Change SERSPC calling convention
;
;  000  CEK  07-Jan-81  CREATION - COPIED FROM V7.1
;  001  CEK  07-Jan-81  Added jam symbol for OVRBUF cell
;  002  AJK  21-MAR-82  Added MCPAP5 (MSCP disk handler APR5 storage)
;
;  000  DRP  22-JUL-82  CREATION - COPIED FROM V7.2
;  001	DRP  22-JUL-82	Set retry count to -2. if disk initializing
;  002	FEK  17-Aug-82	Add DIRPOS and GFD cells
;  003	DRP  08-Oct-82	Created a DSTAT psect for DSTAT to overlay over
;  004  AJK  19-OCT-82  Added bytes STLJOB and STLCNT to RESCTL area.
;  005	GPK  21-Oct-82	Added cells for Login changes
;  006	GPK  11-Nov-82	32K jobs, added another swap DSQ, removed unused DECnet file FBB's
;  007	WJS  25-Nov-82	Made RETCHN not mash R3;  Non-priv DETACH quota
;  008  AWL  05-Jan-83  Made NPDETQ a .WORD for use in MUL instruction
;  009	DRP  31-JAN-83	Added cells to retain current directory info when using
;			UU.PPN and UU.RAD
;
;				[RSTS V9.0]
;  010	GPK  04-Mar-83	Support routines for job headers
;  011	GPK  22-Apr-83	Multiple privileges
;  012	FEK  15-Jun-83	Add user I/D space support
;  013  JHC  08-Jul-83	Add BBRAP5 for new phase
;  014	GPK  21-Sep-83	Add PRMLST cell
;  015	DRP  03-OCT-83	Table changes to UNTCNT, UNTOWN/UNTOPT and UNTCLU/UNTERR
;  016	GPK  22-Nov-83	Add table for CHKACC in CTL
;  017  FRL  25-Oct-83  Added level three queue (L3Q) extension capability
;  018	GPK  29-Dec-83	Rename RGROUP etc.
;  019	DRP  13-Mar-84	Added QTPREV and QTCURR
;  020  BGN  14-Mar-84  Added FETPAT
;  021	KPH  21-Mar-84	Added FIPOVR
;  022  FRL  04-Apr-84  V9.0 logicals
;  023	GPK  18-May-84	Put in psects for PFBIO
;  024	KPH  26-Jun-84	Added FBNLSB and FBNMSB
;  025	KPH  17-Jul-84	Move disk stats to I-space
;  026	KPH  20-Jul-84	Disallow writes to dirty disks
;  027	KPH  09-Aug-84	Move date and time format cells to RESCTL (for UU.CFG)
;			Move magtape density and parity defaults to RESCTL
;  028	KPH  28-Aug-84	APR5 FIP Pool changes
;  030	GPK  30-Oct-84	Change file access check table for GACNT check
;			Add entry for .PFB subfunction BLK.PF
;  031	GPK  11-Feb-85	Bugfix in CHKACC tables
;  032	KPH  18-Mar-85	Change I&D Jam sequence so that user I&D can be
;			enabled with kernel I&D disabled
;
;			[RSTS V9.1]
;  033	KPH  14-May-85	6250 BPI tape support
;  034	TPT  18-May-85	TMSCP changes
;  035	TPT  22-May-85	Add JMPM, the phase to phase jumper
;
;			[RSTS V9.2]
;  036  KPH  12-Jul-85	Add job control region
;
;			[RSTS V9.3]
;  037  KPH  01-Oct-85	Changes for DECnet/E V4.0
;  038	JHC  30-Jan-86	Add FAKDDB cells for Ethernet DDB deallocation
;  039  KPH  22-Feb-86	Move SYDVR out of RSTS phase
;  040  KPH  11-Jul-86	Remove MTU buffer stall stuff
;			Remove CHECTL references
;
;			[RSTS V9.4]
;  041  KPH  23-Jan-87	Changes for MDEs
;  042	PJH  27-Feb-87	Add GPK symbol defines
;
;			[RSTS V9.6]
;  043	DRP  09-DEC-87	Add parity computation table required by terminal
;			service and the paper tape drivers.
;  044  KPH  24-Feb-88	Clean up interface to disk stats code
;			Move data for clock stats here
;  045  WRM  08-Mar-88	Add D-apr protection mask
;
;			[RSTS V9.7]
;  046  WRM  08-Oct-88	Add Dynamic Region memory quota
;  047	KCG  15-Nov-88	Add Read-only cells for OV2 phase.
;  048	KCG  15-Nov-88	Add Overlay Base table Read/write register.
;
;			[RSTS V10.0]
;  049  WRM  06-Nov-89	Add MAPHDR function for JOBHDR
;
;			[RSTS V10.1]
;  050	FEK  08-Jun-92	Add monitor name cells
;-

.SBTTL	Define and order the CSECT's

	DEFORG	RESISP

	DEFORG	RES

	DEFORG	RESCTL

	DEFORG	CRACTL

	DEFORG	PPNTBL

	DEFORG	PARTBL							;043

	DEFORG	FIPCTL

	DEFORG	MTUCTL

	DEFORG	CHEZAP

	DEFORG	CHEUUO

	DEFORG	PFBCTL							;023

	DEFORG	PFBTBL							;023

	ORG	RESISP

.SBTTL	Permanently resident (mapped) monitor data base

; Read/write cells shared by more than one module     

	TMPORG	RESCTL

FETPAT::.BLKW	2		; Monitor features			;020

FPPFEC::.BLKW	2		; Holds FEC and FEA on FPP exceptions

REGMAX::.word 0,0		;Holds dynamic region mem quota&tally	;046

APRMSK::.BLKW			; D-apr protection mask and flags	;045

; Note: The ordering of the next three items is depended upon by SCH.MAC
MAXHGH::.BLKW			; Address of start of job's RTS		;041

MAXLOW::.BLKW			; Address of last byte in user job (I AREA)

MAXDLO::.BLKW			; ADDRESS OF LAST BYTE IN USER D SPACE	;012
				;    OR LAST I BYTE IF NO D SPACE	;012

; End of ordering requirement

RESLST::.WORD	0		; List of things to be made resident

CCLLST::.WORD	0		; List of installed CCL commands

SWOCNT::.WORD	0		; Outgoing swap count

QUANT::	.WORD	0		; Running job's run burst timer

JOBQNT::.BLKW			; Free running residency quantum counter

JUNK::	.BLKW			; General read/write junk word

SWTBLK::.BLKB	30.		; .FSS switch buffer
SWTBKE::			;   and its end...
                                                      
			; !The following 2 bytes are order dependent!

STLJOB::.BYTE	0		; Stall-system requestor  job# * 2
STLCNT::.BYTE	0		; Stall-system count.  not yet implemented!
				; Will be set by disk drivers to prevent system
				;   from going down when disk goes away.

QTPREV::.WORD	0		; Previous QT buffer address
QTCURR::.WORD	0		; Current QT buffer address

$$CNVF	==	.	;**INIT** DATE AND TIME CONVERSION FORMATS	;027
DATCNV::.WORD	-1		;DATE CONVERSION FORMAT (1=>ISO, -1=>ALPHA) ;027
TIMCNV::.WORD	-1		;TIME CONVERSION FORMAT (1=>24, -1=>AM/PM) ;027

; CELLS FOR THE MAGTAPE LABEL HANDLER ("MTU")

$$TMUN	==	MTDDSP+MTTM02-1 ;**INIT** DDB OFFSET TO MASSBUS FORMATTER ;027
$$UMTM	==	MTDDSP+MTFQB+2	;**INIT** DDB offset to MU UMT entry	;034

;***** THE NEXT 2 ITEMS ARE GROUPED *****
$$MTLB	==	.	;**INIT** MAGTAPE LABEL DEFAULT			;027
MAGLBL::.WORD	0		;MAGTAPE LABELING DEFAULT		;027
TAPDEN::.WORD	800.		;Magtape density default		;033

JCRSIZ::.WORD	0		;**INIT** size of a JCR entry		;036

UDPAR0::.BLKW			;Address of user mode data space PAR0	;036

	UNORG

; Crash dumper read/write cells

	TMPORG	CRACTL                                

;
;	-	The order of this data must match the order of the
;	-	  mirror area in CRASH.MAC.
;

X.SWRP::.WORD	0.		; <>0 if SWR is volatile and we're power failing
				; = 0 otherwise (not in a power fail is wise)

$$XTAB	==	.	;** INIT **
X.TABS	==	XMSEGS
X.TAB::	.BLKW0	XMSEGS*XMTLEN/2	; Address/64., count/64. table of extended
$$XDCN	==	.	;** INIT **
X.DCN::	.BLKW0	1.		; Starting DCN of dump file (it's contiguous)
$$XSCS	==	.	;** INIT **
X.SCS::	.BLKW0	1		; System disk cluster size

;
; Data after here is not copied to the mirror area in the CRA phase
;

$$XMOS	==	.	;** INIT **
X.MONS::.BLKW0	1		; Set to $$EPMM by INIT is the place to check 
				;   for resident root monitor size
$$XCON	==	.	;** INIT **
X.CON::.BLKW0	1		; Contains configuration information
	UNORG

	TMPORG	PFBCTL							;023

PFDONQ::.WORD	0	;COMPLETION QUEUE				;023

	TMPORG	PFBTBL							;023

PFDNE::	.WORD	PFDONQ	;COMPLETION QUEUE				;023
	.L3Q	QPFB	;COMPLETION L3Q BIT				;023

	UNORG								;023

	TMPORG	MTUCTL

; BUFFER STALL QUEUE FOR MAGTAPE I/O

MTBSTQ::.WORD	0			;BUFFER STALL QUEUE ROOT FOR MTU

	UNORG

; READ-ONLY CELLS SHARED BY MORE THAN ONE MODULE

	TMPORG	PPNTBL

..PPN.	==	.	;**PATCH** TABLE OF PPN'S
PPNTBL:	.WORD	1.*400+	2.	;[  1,  2] FOR $
	.WORD	1.*400+	3.	;[  1,  3] FOR !
	.WORD	1.*400+	4.	;[  1,  4] FOR %
	.WORD	1.*400+	5.	;[  1,  5] FOR &

	TMPORG	PARTBL							;043

PTABLE::.BYTE   000,200,200,000 ;PARITY COMPUTATION TABLE FOR 4-BIT #'S	;043
	.BYTE	200,000,000,200						;043
	.BYTE	200,000,000,200						;043
	.BYTE	000,200,200,000						;043

	TMPORG	RES

;start of order dependency for INIT jamming (next 3 words)
$$SYSU	==	.	;**INIT** PUT SYSTEM DISK FUN'S HERE
SYSUNT::.BYTE	0		;FIP UNIT NUMBER OF SYSTEM DISK
SYSUN2::.BYTE	0*2		;FIP UNIT NUMBER TIMES 2 OF SYSTEM DISK

MONNAM::.WORD	0		;Two words for the monitors name	;050
	.WORD	0		;jammed here by INIT			;050
;end of order dependency

$$SWPM	==	.	;**INIT** SWAP MAXIMUM FILLED IN
SWPMAX::.WORD	34.		;SYSTEM-WIDE SWAP MAXIMUM		;050

..FCNT	==	.	;**PATCH** THE FAIRNESS COUNT MAXIMUM
FARCNT::.WORD	6.		;FAIRNESS COUNT MAXIMUM FOR DISK QUEUES

$$SFPP	==	.	;**INIT** CHANGED TO '$$RTSP' IF NO ASYNC FPP
SAVFPP::.WORD	FPPSAV		;ROUTINE TO SAVE ASYNC FPP CONTEXT

$$RFPP	==	.	;**INIT** CHANGED TO '$$RTSP' IF NO ASYNC FPP
RESFPP::.WORD	FPPRES		;ROUTINE TO RESTORE ASYNC FPP CONTEXT

$$SL	==	.	;**INIT** CHANGED TO '177774' IF STACK LIMIT
STKLMT::.WORD	JUNK		;ADDRESS OF STACK LIMIT OPTION

$$DREG	==	.	;**INIT** CHANGED TO '177570' IF DISPLAY REGISTER
DISPLY::.WORD	JUNK		;ADDRESS OF DISPLAY REGISTER

$$SREG	==	.	;**INIT** CHANGED TO '177570' IF SWITCH REGISTER
SWITCH::.WORD	MINUS1		;ADDRESS OF SWITCH REGISTER

$$M22W	==	.	;**INIT** CHANGED TO '172516' AND '0/20/60' IF MMUSR3
MMU22W::.WORD	JUNK		;ADDRESS OF MMUSR3
	.WORD	0		;VALUE FOR MMUSR3 (<4>=>22-BIT, <5>=>UNI-WIN)
				; (<2>=KERNEL D, <0>=USER D)			;012

MCPAP5::.WORD	1200	;**MERGE**
BBRAP5::.WORD	1200	;**MERGE**					;013
DSKAP5::.WORD	1200	;**MERGE**
EMTAP5::.WORD	1200	;**MERGE**
GPKAP5::.WORD	0	;**INIT** APR5 value for GPK phase, if any	;042
PTBAP6::.WORD	0	;**INIT** APR6 value for PTB phase, if any	;042
FIPAP6::.WORD	0	;**INIT** APR6 value for FIP phase filled in	;036
JCRAP6:	.WORD	0	;**INIT** APR6 value for JCR filled in		;036
$$JCR6	==:	.-2	;**INIT** Alternate for JCRAP6			;036

$$DSPA	==	.	;**INIT** CHANGED TO D-SPACE APR'S IF THEY EXIST
DPAR5::	.WORD	KISAR5		;ADDRESS IF D-SPACE PAR 5
DPAR6::	.WORD	KISAR6		;ADDRESS IF D-SPACE PAR 6
DPDR5::	.WORD	KISDR0+<5*2>	;ADDRESS IF D-SPACE PDR 5
DPAR5J::.WORD	JUNK		;Address of D-space APR 5 or junk	;028

$$BAEL	==	.	;**INIT** ADDRESS OF RH70 BAE OFFSET LIST GOES HERE
BAELST::.WORD	0		;ADDRESS OF RH70 BAE OFFSET LIST
	;.WORD	-> BAE IN THE RH70
	;.WORD	-> CSR OF RH70

..DIAB	==	.	;**PATCH** TO ADDRESS OF DIAMOND'S MAILBOX
DIABOX::.WORD	JUNK		;ADDRESS OF DIAMOND'S MAILBOX

; Fake DDB entry for disabled devices (if real DDB returned to buffer	;038
; pool)									;038

FAKDDB::.BYTE	-1,0		; DDIDX = -1 (crash if checked)		;038
	.BYTE	1,0		; DDJBNO = 1 (disabled by INIT)		;038

GLOBAL	<FPPSAV,FPPRES,MINUS1>

; CELLS FOR THE SCHEDULER ("SCH")

	TMPORG	RESCTL

$$PNEW	==	.	;**INIT** CHANGED TO 'P.CRAS' IF CRASH RECOVERY
P$NEW::	.WORD	P.STRT		;FOR THE FIRST INITIAL ENTRY

SCHTBL::			;SCHEDULER'S 'ROUND ROBIN' TABLE
.REPT	256.
.NLIST
	.BYTE	1*2
.LIST
.ENDR

; CELL FOR THE MEMORY MANAGER ("MEM")

	TMPORG	RESCTL

MEMADR::.WORD	0		;'ROUND ROBIN' MEMORY ADDRESS

; Cells for the swap manager ("SWM")

	TMPORG	RES

SWDNE::	.WORD	SWDONQ		; Queue for completion
	.L3Q	QSWAPC		; L3Q bit for completion		;017

	TMPORG	RESCTL

$$SWPB	==	.	; **INIT** swap base filled in
SWBASE::.BLKW0	FBBSIZ*4*2/2	; Description of the 4 swap files

SWDONQ::.WORD	0		; Swap completion queue

SWPDSQ::.BLKW0	DSQSIZ/2	; Swap reserved DSQ

SWPDS2::.BLKW0	DSQSIZ/2	; Another reserved DSQ (for long swaps)

$$SWMP	==	.	; **INIT** swap maps filled in
SWPMAP::.WORD	0,0,0,0		; Highest speed swap bit map
	.WORD	0,0,0,0		;  and the next
	.WORD	0,0,0,0		;   and the next
	.WORD	0,0,0,0		; Lowest speed goes here...                 
SWPMPE::			; End+2 of the maps

SWPUSE::.BLKW0	4/2		; Use counts for swap files

       
; Statistics data structures

	TMPORG	STSTBL,2						;044
	 .WORD	JSTCTL		;POINTER TO JOB STATISTICS TABLE	;044

	TMPORG	RESCTL

JSTCTL::.WORD	0		;CLOCK INTERRUPTS PER SECOND		;044
	.WORD	0,0		;UPTIME					;044
JSTATF::.WORD	177777		;SMALLEST FREE COUNT			;044
	.WORD	0,0		;LEVEL 3 ACCOUNTED			;044
	.WORD	0,0		;LOST TIME                              ;044  
	.WORD	0,0		;LEVEL 3 UNACCOUNTED                    ;044
	.WORD	0,0		;NULL TIME                              ;044
JSTATN::.WORD	0,0		;FIP NEEDED                             ;044
JSTATW::.WORD	0,0		;SYSTEM MODE                            ;044
	.WORD	0,0		;FIP WAITING                            ;044
	.WORD	0,0		;	FOR CODE                        ;044
	.WORD	0,0		;	FOR DISK INFO                   ;044
	.WORD	0,0		;	FOR SAT                         ;044
	.WORD	0,0		;	FOR OTHER                       ;044
JSTATP::.BLKW0	6*2		;PRIORITY COUNTERS (PR0 TO PR5 ONLY)    ;044
JSTATO::.WORD	0		;NUMBER OF KW11-P OVERRUNS              ;044
JSTATC::.BLKW0	6*2		;CACHE COUNTERS (PR0 TO PR5 ONLY)       ;044
JSTATH::.WORD	0		;# TIMES @ PR6 OR PR7                   ;044
JSTATD::.WORD	0,0,0		;DATE, TIME, TIMSEC OF LAST KW11-P OVERRUN ;044
JSTATK::.WORD	0,0,0,0		;TERMINAL INPUT AND OUTPUT COUNTERS     ;044
JSTATE::			;END OF JOB STATISTICS TABLE		;044

; FIP general read/write and control data

	TMPORG	FIPCTL

$$ERSZ	==	.	; **INIT** size of error message file goes here (8. or 16.)
ERSIZE::.WORD	8.		; Error message file size
ERBASU::.BLKW0	FBBSIZ/2	; Error message file unit/disk addr
	.BLKW0	FBBSIZ/2	; Error message file UFD FBN and N.E.

$$OVRC	==	.	; **INIT** size of overlay file goes here
	.WORD	32.		; Overlay file size
OVBASU::.BLKW0	FBBSIZ/2	; Overlay file unit/disk addr
	.BLKW0	FBBSIZ/2	; Overlay file UFD FBN and N.E.

$$N0SZ	==	.	; **INIT** size of DECnet NSP/TRN file 0 goes here (20.)
	.WORD	20.		; DECnet NSP 0 file size
N0BASE::.BLKW0	FBBSIZ/2	; DECnet NSP 0 file unit/disk addr
	.BLKW0	FBBSIZ/2	; DECnet NSP 0 file UFD FBN and N.E.

$$OVBF	==	.	; **INIT** MMU address of the overlay buffer
OVRBUF::.BLKW			; MMU address of the overlay buffer and start
				; of APR5 FIP pool

OVBTBL::.BLKW			; Overlay base table pointer.		;048
				; Points to current FBN table in use	;048
				; (i.e., OVBASE for OVR, O2BASE for OV2);048

FPLAP6::.BLKW			; MMU value to map FIPPOL APR 6 with

FIPFUN::.BLKW			; Current FIP function

FIPOVR::.BLKW			; Current FIP overlay			;021

FIPLSB::.BLKW			; LSB of memory address being read	;024
FIPMSB::.BLKB			; MSB of memory address being read	;024
	.BLKB			; Reserved				;024

FIPSP::	.BLKW			; Saved FIP SP stack value

FIPR6::	.BLKW			; Saved monitor SP stack value

FIPCLU::.BLKW			; Current file cluster size

FIPMUC::.BLKW			; Current MFD/UFD cluster size

FIPU0C::.BLKW			; UFD cluster size of the UFD on the system disk

FIPAR::	.BLKB	DSQSIZ		; FIP's private DSQ

FIPERX::.WORD	0		; Optional alternate error exit address
FIPESP::.WORD	0		; Saved stack pointer for above

FPDONQ::.BLKW			; Completion queue for FIP  (not always used)

R50WRK::.BLKW	2		; RAD50 -> ASCII conversion scratch buffer

; Work area for password encryption					;011
LOGICL::			;Work area for logicals from OVR	;022
;** NEXT TWO LABELS MUST FOLLOW	**					;022
L::	.BLKW	2		;Left half				;011
R::	.BLKW	2		;Right half				;011
.ASSUME	R EQ L+4							;011
RKEY::	.BLKB	8.		;Reduced key buffer			;011
F::	.BLKB	8.		;Work buffer				;011
SCTL::	.BLKW			;Shift control word			;011

PRMLST::.WORD	0		;Permanent file list head		;014

;***** THE NEXT 2 ITEMS ARE GROUPED *****
J::	.BLKB			;LINK OFFSET INTO CLUSTER	(0 -  17)
K::	.BLKB			;LINK OFFSET INTO MAP		(0 -   6)

;***** THE NEXT 3 ITEMS ARE GROUPED *****
SATFBN::.BLKB	FBBSIZ		;FBN OF BLOCK CURRENTLY IN 'SATBUF'
SATUNT::.BYTE	-1		;UNIT OF BLOCK CURRENTLY IN 'SATBUF'
SATMOD::.BYTE	0		;<>0 => 'SATBUF' NEEDS WRITING [MUST BE ODD ADDR]

FIPVBN::.WORD	0		;VIRTUAL BLOCK CURRENTLY IN 'OVRBUF'

;***** THE NEXT 3 ITEMS ARE GROUPED *****
FIBFBN::.BLKB	FBBSIZ		;FBN OF BLOCK CURRENTLY IN 'FIBUF'
FIBUNT::.BYTE	-1		;UNIT OF BLOCK CURRENTLY IN 'FIBUF'
FIBMOD::.BYTE	0		;<>0 => 'FIBUF' NEEDS WRITING [MUST BE ODD ADDR]

;***** THE NEXT 2 ITEMS ARE GROUPED *****
FIPUNT::.BLKB			;FIP'S CURRENT OPERATING UNIT
FIPGEN::.BLKB			;<>0 => PUBLIC STRUCTURE (NO EXPLICIT UNIT)

;***** A COUPLE OF WORDS FOR THE GFD/POSITIONED UFD CODE *****
TYPCRE::.RAD50	/UFD/		;WHAT WE ARE CREATING (UFD/GFD)
DIRPOS::.WORD	0		;DEFAULT POSITION TO MIDDLE

;***** THE NEXT 6 ITEMS ARE GROUPED AND MUST BE IN THIS ORDER *****	009
;
;***** CELLS TO RETAIN SAVED DIRECTORY INFO USED BY UU.PPN AND UU.RAD *****
LSTFUN::.BYTE	-1		;LAST FIP UNIT # LOOKUP WAS DONE ON	009
LSTFLG::.BYTE	0		;FLAG BYTE				009
GRPUSR::.WORD	0		;LAST PPN LOOKUP WAS DONE ON		009
NDXUSD::.WORD	0		;LAST INDEX COUNT USED			009
GRPPTR::.WORD	0		;NEXT GROUP -> INTO 'SATBUF'		009
USRPTR::.WORD	0		;LAST USER -> INTO 'FIBUF'		009

; FIP GENERAL READ-ONLY DATA

	TMPORG	RES

FPDNE::	.WORD	0		;NO COMPLETION QUEUE
	.L3Q	QFIP		;L3Q BIT FOR COMPLETION			;017

FPQDNE::.WORD	FPDONQ		;COMPLETION QUEUE
	.L3Q	QFIP		;L3Q BIT FOR COMPLETION			;017

$$OVRB	==	.	;**INIT** ADDRESS OF OVERLAY FILE FBN'S
OVBASE::.WORD	0		;ADDRESS OF OVERLAY FILE FBN'S

$$OV2B	==	.	;**INIT** Address of overlay {phase 2} file FBN's ;047
O2BASE::.WORD	0		;Address of overlay {phase 2} file FBN's  ;047

$$ERRB	==	.	;**INIT** ERROR MESSAGE BASE FROM INIT
ERBASE::.BLKW0	FBBSIZ/2	;ERROR MESSAGE FILE UNIT/DISK ADDR

$$BUFB	==	.	;**INIT** BUFFER FILE FBB FILLED IN
BFBASE::.BLKW0	FBBSIZ/2	;DECTAPE BUF FILE UNIT/DISK ADDR

$$LODB	==	.	;**INIT** LOAD BLOCK FBB FILLED IN
LBBASE::.BLKW0	FBBSIZ/2	;LOAD BLOCK UNIT/DISK ADDR

PRVMSK::.WORD	^C<..PRW0>	;Valid bits for each word of mask	;028
	.WORD	^C<..PRW1>						;028
	.WORD	^C<..PRW2>						;028
	.WORD	^C<..PRW3>						;028

	UNORG

.SBTTL	FIP ENTRY POINTS FOR QUEUING A REQUEST

;+
; FIPSTL - STALL JOB AND QUEUE A FIP REQUEST.
;
;	R4 -> FIRQB TO QUEUE
;	CALLING JOB IS "JOB"
;
;	JMP	FIPSTL
;-

FIPSTL::MOVB	JOB,R0		;GET CURRENT JOB NUMBER
	CLR	JBSTAT(R0)	;PUT THE JOB INTO A
	MOV	#JSFIP,JBWAIT(R0) ; FIP WAIT STATE
	CALLX	SAVJQX,R5	;DUMP JOB SAVING RESIDENCY QUANTUM
	.BR	FIPSYS		;NOW QUEUE THE REQUEST

;+
; FIPSYS - QUEUE A FIP REQUEST.
;
;	R4 -> FIRQB TO QUEUE
;
;	JMP	FIPSYS
;-

FIPSYS::MOV	#FIQUE,R5	;GET THE QUEUE ROOT
	CLR	(R4)		;CLEAR LINK WORD IN THE FIRQB
	TST	(R5)		;ANYTHING IN QUEUE?
	BEQ	30$		;NO, SO QUEUE IT AND START FIP
	MOVB	FQJOB(R4),R0	;GET JOB NUMBER TIMES 2
	MOV	JOBTBL(R0),R1	;NOW GET JOB'S JOB DATA BLOCK POINTER
10$:	SUB	#32.,JDRESQ(R1) ;PUNISH THE RESIDENCY QUANTUM
..FQNT	==	.-4	;**PATCH** FIP'S RESIDENCY QUANTUM PUNISH FACTOR
	BHI	20$		;STILL >=0
	CALLX	CLRRSQ		; ELSE ENSURE IT STAYS AT 0
20$:	MOV	(R5),R5		;GO TO NEXT IN QUEUE
	TST	(R5)		;THE END?
	BNE	10$		;NOT YET...
	MOV	R4,(R5)		;YES, PLACE REQUEST HERE
	JMPX	RTI3		; AND EXIT

30$:	MOV	R4,(R5)		;PUT FIRQB INTO QUEUE
	.BR	SJBFIP

;+
; SJBFIP - START FIP FOR A SYSTEM JOB REQUEST
;
; THIS ROUTINE STARTS FIP PROCESSING ITS QUEUE.  COME HERE AFTER PUTTING
; SOMETHING (LIKE A SYSTEM JOB WORK BLOCK) ON FIQUE IF IT IS THE FIRST
; ITEM ON THE QUEUE (YOU JUST MADE IT NON-EMPTY).  THE STACK AT THIS TIME
; MUST BE EMPTY (I.E., READY FOR A "JMPX RTI3").
;
;	JMP	SJBFIP
;-

SJBFIP::MAP	FIP,CODE,DATA	;MAP FIP SO WE CAN GO THERE
	JMP	@FIPGO		; NOW START UP FIP

GLOBAL	<JBSTAT,JBWAIT,FIQUE,JOBTBL,FIPGO>

.SBTTL	Return a (possibly) mapped buffer chain

;+
; RETCHN - Return a (possibly) mapped buffer chain.
;
;	R4 =  Buffer "address"
;
;	CALL	RETCHN
;
;	R4 =  Random
;-

RETCHN::PUSH	R3		; Save an innocent register
	MAP	PUSH,APR=6,DATA	; Save current PAR6 mapping value
10$:	CALLX	MAPBUF		; Map this buffer
	MOV	BF.LNK(R3),R3	; Save (possible) link to next buffer
	BUFFER	RETURN		; Now return the current buffer
	MOV	R3,R4		; Move next buffer "address" over here
	BNE	10$		;  and loop if more...
20$:	MAP	POP,APR=6,DATA	; Restore the PAR6 value
	POP	R3		;  restore R3
	RETURN			;  and exit


;+
;	CHKSWP - Dispatch to CHKSWP
;
;	JMP	CKSWP
;
;	Return is to 'RTI3'
;
;-

CHKSWP::MAP	GENAP5,APR=5,CODE,DATA	; Map the phase please
	JMP	@CKSWP			;   and go do it


GLOBAL	<CKSWP,GENAP5>							;039

.SBTTL	DEVICE OPEN/CLOSE DISPATCHER

;+
; OPNCLS - DEVICE OPEN/CLOSE DISPATCHER.
;
;	R0 =  DISPATCH ADDRESS
;	R1 -> FCB/DDB
;	R2 =  DRIVER INDEX
;	R4 -> FIRQB
;
;	CALL	OPNCLS
;
; CONDITIONS ON ACTUAL DISPATCHING:
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> FCB/DDB
;	R2 =  DRIVER INDEX
;	R3 =  SAME AS PASSED
;	R4 -> FIRQB
;	R5 =  SAME AS PASSED
;	Z=1 IF REAL CLOSE ( FQFUN(R4) = CLSFQ )
;	Z=0 IF NOT REAL CLOSE ( FQFUN(R4) <> CLSFQ )
;
; WHAT'S LEFT DEPENDS ON OPEN/CLOSE AND THE DRIVER CALLED.
;-

.ENABL	LSB

OPNCLS::MAP	PUSH,APR=6,CODE,DATA ;SAVE CURRENT PAR6 VALUE
	MOV	#20$,-(SP)	; AND SET RETURN TO RESTORE IT
	MAP	PUSH,APR=5,CODE,DATA ;SAVE CURRENT PAR5 VALUE
	MAP	@DVRAP5(R2),APR=5,CODE,DATA ;MAP THE DRIVER
	MOV	R0,-(SP)	;STACK THE DISPATCH ADDRESS
	MOVB	DDUNT(R1),R0	;NOW GET THE UNIT NUMBER
	ASL	R0		; TIMES 2
	TSTB	FQFUN(R4)	;SET Z=1 IF A REAL CLOSE
.ASSUME	CLSFQ	EQ	0
	BR	50$		;NOW GO DO IT

20$:	MAP	POP,APR=6,CODE,DATA ;RESTORE CURRENT PAR6 VALUE
	RETURN			;AND BACK WE GO


GLOBAL	<DVRAP5>

.SBTTL	Call a driver at any entry point

;+
; DVRDSP - Dispatch to a driver at any entry point
;
;	R1 ->	DDB
;
;	CALL	DVRDSP,R4,<Dispatch_Table_Address>
;
; All registers and "C" bit contents are passed to driver.
;
; Returned values depend on driver.
;-

DVRDSP::MAP	PUSH,APR=5,CODE,DATA ;Save current mapping		;037
	MOV	(R4)+,-(SP)	;Get address of dispatch table		;037
	INC	-(SP)		;Push a hole on the stack (carry unchanged) ;037
	MOV	10(SP),-(SP)	;Push saved R4				;037
	MOV	R4,12(SP)	;Put return address in for RTS PC	;037
	MOVB	(R1),R4		;Get handler index			;037
.ASSUME	DDIDX EQ 0
	MOV	@DVRAP5(R4),2(SP) ;Get driver's PAR5			;037
	ROL	-(SP)		;Save carry				;037
	ADD	6(SP),R4	;Index into dispatch table		;037
	ROR	(SP)+		;Restore carry				;037
	MOV	(R4),4(SP)	;Get the address			;037
	MOV	(SP)+,R4	;Restore R4				;037
	BR	CALLMX		;Now join up with CALLMX to map driver	;037

GLOBAL	<DVRAP5>

.SBTTL	HANDLE MAPPED CALLS

;+
; CALLMI - CALL INDIRECT MAPPED.
;
;	C-BIT IS PASSED TO "SUBR"
;
;	CALLMI	INDIRECT-SUBR,XXXAP5
;
;	C-BIT AND Z-BIT ARE PASSED FROM "SUBR"
;-

CALLMI::MAP	PUSH,APR=5,CODE,DATA ;SAVE CALLING APR5 VALUE
	MOV	@#PS,-(SP)	;Save caller's PS			;028
	BIC	#30000,@#PS	;And be sure previous = kernel		;028
	MFPI	(R5)+		;Get address of subroutine address from I-space	;028
	MOV	@(SP)+,-(SP)	;Now get address of subroutine from D-space ;028
	BR	30$		;NOW GO DO IT

;+
; CALLM - CALL MAPPED.
;
;	C-BIT IS PASSED TO "SUBR"
;
;	CALLM	SUBR,XXXAP5
;
;	C-BIT AND Z-BIT ARE PASSED FROM "SUBR"
;-

CALLM::	MAP	PUSH,APR=5,CODE,DATA	;SAVE CALLING APR5 VALUE
	MOV	@#PS,-(SP)	;Save caller's PS			;028
	BIC	#30000,@#PS	;Set previous mode = kernel		;028
	MFPI	(R5)+		;Pick up address to transfer to		;028
30$:	MFPI	(R5)+		;Pick up address of APR5 value to use	;028
40$:	MOV	@(SP)+,-(SP)	;Now get the APR5 value from D-space	;028
	MOV	4(SP),@#PS	;Restore caller's PS			;028
	MOV	2(SP),4(SP)	;Replace PS with subroutine address	;028
	MOV	(SP)+,(SP)	;Replace subroutine address with APR5 value ;028
45$:   	MOV	10(SP),-(SP)	;STACK CALLER'S R5 VALUE (FROM 'JSR R5,')
	MOV	R5,12(SP)	;REPLACE WITH THE FINAL RETURN ADDRESS
	MOV	(SP)+,R5	;NOW RESTORE THE CALLING R5
	.BR	CALLMX		; AND GO DO IT

;+
; CALLMX - CALL MAPPED (NON-STANDARD).
;      
;	SP -> NEW PAR5 VALUE, SUBR, OLD D-PAR5 VALUE,OLD I-PAR5 VALUE, RETURN ADDRESS, ...
;	C-BIT IS PASSED TO "SUBR"
;
;	JMP	CALLMX
;
;	SP -> ...
;      	C-BIT AND Z-BIT ARE PASSED FROM "SUBR"
;-

CALLMX::MAP	(SP),APR=5,CODE ;MAP INTO THE SUBROUTINE
	MAP	(SP)+,APR=5,DATA ; D SPACE TOO
50$:	CALL	@(SP)+		;CALL THE REQUESTED SUBROUTINE
	BEQ	60$		;EXITING Z-BIT=1
RETMX::	MAP	POP,APR=5,CODE,DATA ;RESTORE THE CALLER'S MAPPING	;044
	CLZ			;ENSURE Z-BIT=0
	RETURN			; AND BACK TO THE CALLER

60$:	MAP	POP,APR=5,CODE,DATA ;RESTORE THE CALLER'S MAPPING
	SEZ			;ENSURE Z-BIT=1
70$:	RETURN			; AND BACK TO THE CALLER

;+
; CALLMR - CALL MAPPED AND RETURN.
;
;	C-BIT IS PASSED TO "SUBR"
;
;	CALLMR	SUBR,XXXAP5
;
;	C-BIT AND Z-BIT ARE PASSED FROM "SUBR"
;-

CALLMR::MAP	PUSH,APR=5,CODE,DATA ;SAVE CALLING APR5 VALUE
	MOV	@#PS,-(SP)	;Save caller's PS			;028
	BIC	#30000,@#PS	;Set previous mode = kernel		;028
	MFPI	(R5)+		;Pick up address to transfer to		;028
	MFPI	(R5)+		;Pick up address of APR5 value to use	;028
	MOV	#70$,R5		;SET DUMMY RETURN TO A "RETURN"
	BR	40$		;GO CALL THAT SUBROUTINE

;+
; JMPM - JMP MAPPED AND DON'T COME BACK
;
; USE THIS WHEN YOU WANT TO DO A MAPPED JMP AND 
; ABSOLUTELY, POSITIVELY DON'T WANT TO RETURN (KIND 
; OF LIKE FEDERAL EXPRESS).
;
; FORMAT: CALLX	JMPM,R5,<xxxAP5,ROUTINE>
;
; WE LEAVE WITH R5 RESTORED, A CLEAN STACK AND A BRIGHTER OUTLOOK ON LIFE.
;-

JMPM::	MOV	@#PS,-(SP)	;Save old PS contents			;039
	BIC	#30000,@#PS	;Set previous mode = kernel		;039
	MFPI	(R5)+		;Get pointer to APR5 value		;039
	MOV	@(SP)+,-(SP)	;Now get the value itself		;039
	MFPI	(R5)+		;Get address to go to			;039
	MOV	6(SP),R5	;Restore R5				;039
	MOV	(SP)+,4(SP)	;Replace old R5 with destination	;039
	MAP	(SP),APR=5,CODE ;Map to routine				;035
	MAP	(SP)+,APR=5,DATA ;And data too!				;035
	MOV	(SP)+,@#PS	;Restore caller's PS			;039
	JMP	@(SP)+		;Off to see the wizard...		;035

;+
; CALLBB - CALL MAPPED USING A BRIDGE BLOCK.
;
;	R4 -> BB
;
;	CALLBB	BB-OFFSET
;
;	C-BIT AND Z-BIT ARE PASSED FROM THE SUBROUTINE
;-

CALLBB::MAP	PUSH,APR=5,CODE,DATA ;SAVE CALLING APR5 VALUE
	ADD	(R5)+,R4	;INDEX TO SUBROUTINE ADDRESS IN BB
	MOV	(R4),-(SP)	;STACK THE SUBROUTINE'S ADDRESS
	BIS	#6,R4		;INDEX TO PAR5 VALUE POINTER IN BB
.ASSUME	BBAAP5	EQ	BBGIRB!6
.ASSUME	BBAAP5	EQ	BBASND!6
.ASSUME	BBDAP5	EQ	BBDSTA!6
.ASSUME	BBDAP5	EQ	BBDINT!6
	MOV	@(R4)+,-(SP)	;STACK THE SUBROUTINE'S PAR5 VALUE
	BIC	#40-1,R4	;NOW BACK TO BB'S TOP
	BR	45$		;GO CALL THAT SUBROUTINE		;028

.DSABL	LSB

.SBTTL	SERVICE/SPECIAL FUNCTION DISPATCHER

;+
; SERSPC - SERVICE/SPECIAL FUNCTION DISPATCHER
;
;	R4 =  DRIVER INDEX
;	SP -> WORD TO SET CC'S BY, DISPATCH ADDRESS, ...
;
;	JMP	SERSPC
;
; CONDITIONS ON ACTUAL DISPATCHING:
;
;	R0 =  SAME AS PASSED
;	R1 =  SAME AS PASSED
;	R2 =  SAME AS PASSED
;	R3 =  SAME AS PASSED
;	R4 =  JOB NUMBER TIMES 2
;	R5 =  SAME AS PASSED
;
;	CC'S SET AS A "NEG (SP)+"
;-

SERSPC::MAP	@DVRAP5(R4),APR=5,CODE,DATA ;MAP THE DEVICE DRIVER
	MOVB	JOB,R4		;SET THE JOB NUMBER TIMES 2 AS PROMISED
	NEG	(SP)+		;SET Z=1 & C=0 ON FIRST TIME (SERVICE)
	RETURN			;THEN OFF TO THE ROUTINE...
				;(NOT RETURN TO CALLER!)

GLOBAL	<DVRAP5>							;039

.SBTTL	COMMON DISK FRONT-END

;+
; DISK - START UP A DISK REQUEST.
;
;	R4 -> DSQ
;		DSQJOB =  JOB NUMBER TIMES 2
;		DSQL3Q -> COMPLETION L3Q BIT(S)/QUEUE ROOT
;		DSQUNT =  FIP UNIT NUMBER
;		DSQFBM, DSQFBL = FIP BLOCK NUMBER
;		DSQMAM, DSQMAL = MEMORY ADDRESS BITS <21-0>
;		DSQCNT =  +(WORD COUNT)
;		DSQFUN =  LOGICAL FUNCTION (WFUN[.C]/RFUN[.C])
;		DSQFAR =  FAIRNESS COUNT (USUALLY 0)
;
;	CALL	DISK
;- 

DISK::	REGSCR			;SAVE ALL REGISTERS
	MOVB	#-9.,DSQERR(R4) ;SET THE RETRY COUNTER
	MOVB	DSQUNT(R4),R5	;GET THE FIP UNIT NUMBER
	ASL	R5		; TIMES 2 FOR WORD ADDRESSING
	BIT	#UO.CLN,UNTOPT(R5) ;Is this disk dirty?			;026
	BEQ	5$		;No, not this time			;026
	CMPB	DSQFUN(R4),#WFUN ;Is this a write request?		;026
	BHI	5$		;No, so let it go			;026
	SETERR	HNGDEV,DSQERR(R4) ;Yes, so say it is write locked	;026
	JMPX	DISKER		;And exit returning the error		;026

5$:	BIT	#UO.INI,UNTOPT(R5) ;DISK INITIALIZING?			;026
	BEQ	10$		;NO
	MOVB	#-2.,DSQERR(R4)	;YES, SET RETRY COUNTER TO 2 RETRIES
10$:	MAP	PUSH,APR=5,CODE,DATA ;Save mapping			;044
	MAP	RSTAP5,APR=5,CODE,DATA ;And map the entire RSTS phase	;044
	JMPX	DSKSTS		;Do disk statistics and check the cache	;044

IE	==	100		;GLOBALIZE INTERRUPT ENABLE

GLOBAL	<RSTAP5,UNTOPT>							;044

.SBTTL	DISK CACHE 'ZAP' SUBROUTINE

;+
; CHEZAP - ZAP CACHE INFORMATION ABOUT ALL BLOCKS ON A UNIT.
;
;	R1 =  THE FUN OF THE UNIT TO BE ZAPPED
;
;	CALL	CHEZAP
;-

	TMPORG	CHEZAP

CHEZAP:	RETURN			;NOTHING TO ZAP IF NOTHING IN CACHE

	UNORG

.SBTTL	DISK CACHE CLUSTER SIZE CHANGE SUBROUTINE

;+
; CHEUUO - DISK CACHE CLUSTER SIZE CHANGE SUBROUTINE.
;
;	R1 =  NEW DISK CACHE CLUSTER SIZE (1, 2, 4, OR 8)
;	R2 =  NEW DISK CACHE CLUSTER SHIFT (0, -1, -2, OR -3)
;
;	CALL	CHEUUO
;-

	TMPORG	CHEUUO

CHEUUO:	ERROR	ERRERR		;CAN'T DO IT IF NO DATA CACHER

	UNORG


.SBTTL	DOEMT - Do a simple RSTS/E monitor call and catch its completion

;+
; DOEMT - DO A SIMPLE RSTS/E MONITOR CALL AND CATCH ITS COMPLETION
;
; CALL:
;	CALL	DOEMT,R5
;	 .WORD	<EMT TO DO>
;
; BACK:
;
;	R0 -> FIRQB
;	R1 AS AS BEFORE CALL
;	R5 -> XRB
;	SP -> "RTI3",R0,R1,R2,R3,R4,R5,PC,PS,...
;					     !- "SYSTAK"
;
;	JOB IS "JOB"
;	JOB'S 1ST 4K IS MAPPED THROUGH PAR6
;
;	IF Z=1 THEN NO ERROR (FROM "FIRQB")
;	IF Z=0 THEN ERROR (IN "FIRQB")
;
; NOTE:
;	THIS ALLOWS COMPLEX EMTS. A COMPLEX EMT CAN CALL SEVERAL
;	SIMPLE EMTS TO BUILD UP ONE LOGICAL FUNCTION. THERE  ARE
;	SOME RULES. THEY ARE:
;		1. THE STACK IS RESET TO RIGHT AFTER EMT CALL
;		   LEVEL THIS MEANS THAT NO STACK CONTEXT IS
;		   SAVED.
;		2. NO REG'S ARE SAVED OTHER THAN R1 ARE SAVED.
;		3. ONLY SIMPLE EMTS CAN USE THIS.
;		4. APR6 IS NOT SAVED.
;
;	NOTE THAT THIS CODE CAN NOT BE CALLED FROM I-SPACE ONLY CODE
;	DUE TO THE CALLING SEQUENCE....
;	AND THUSLY, WE ONLY SAVE THE I-SPACE APR, BUT WE RESTORE IT
;	TO BOTH THE I&D SPACE APR'S....
;	It is assumed the caller knows what he's doing.  If the argument ;010
;	passed is not a valid EMT (or not an EMT at all) unpredictable	;010
;	things will happen.						;010
;-

DOEMT::	MOVB	(R5)+,R0		;GET CODE OF EMT TO DO
	INC	R5			; and skip the high byte	;010
	MOV	JOBJCR,R2		;Point to the JCR for this job	;036
	MAP	JOBJC6,APR=6,DATA	;And map the JCR through APR6	;036
	MOV	R1,JCCER1(R2)		;Save R1 for the caller		;036
	MOV	R5,JCCEPC(R2)		;Save the PC for the caller	;036
	MOV	@#KISAR5,JCCEAP(R2)	;Save the mapping for the user	;036
	BIS	#JFCEMT,@JOBF		;BE SURE WE CATCH COMPLETION
	MOV	(SP)+,R5		;RESTORE R5
	MOV	#<SYSTAK-<8.*2>>,SP	;ENSURE CORRECT SP STACK
	JMPX	CPLXMC			;NOW GO DO THE CALL
;+
; WE RETURN TO DOEAGN:: FROM POSTING CODE AFTER EMT CALL
;-

GLOBAL	<SYSTAK>							;036

.SBTTL	RESCNT - Set up a routine to continue at

;+									;010
; RESCNT - Set up a routine which will gain control when the scheduler	;010
;	selects this job						;010
;									;010
;	R0 =	Job number * 2						;010
;									;010
;	CALL	RESCNT,R5,<ADDRESS,PAR5 pointer>			;010
;									;010
;	R0	Random							;010
;									;010
;	On dispatch to the routine at "ADDRESS":			;010
;									;010
;	R0 ->	FIRQB (Mapped)						;010
;	R1	Same as on call to RESCNT				;010
;	R5 ->	XRB (Mapped)						;010
;	SP ->	"RTI3",R0,R1,R2,R3,R4,R5,PC,PS,...			;010
;					     !- "SYSTAK"		;010
;	Job is "JOB"							;010
;	Job's 1st 4K is mapped through PAR6				;010
;									;010
;	NOTE:								;010
;	This routine can be called only from simple EMTs that are not	;010
;	going to be invoked via the Complex EMT mechanism.		;010
;									;010
;-									;010

RESCNT::MAP	PUSH,APR=6,DATA	;Save caller's APR6 mapping		;036
	MOV	R1,-(SP)	;Save caller's R1 on the stack		;036
	CALL	MAPJCR		;Go map the JCR for this job		;036
	MOV	(SP),JCCER1(R1) ;Save caller's R1			;036
	MOV	(R5)+,JCCEPC(R1) ;Set up PC				;036
	MOV	@(R5)+,JCCEAP(R1) ; and PAR5 value			;036
	MOV	(SP)+,R1	;Restore caller's R1			;036
	MOV	JOBTBL(R0),R0	;Get JDB address			;010
	BIS	#JFCEMT,JDFLG(R0) ;Set up to enter DOEAGN later		;010
	MAP	POP,APR=6,DATA	;Restore mapping for our caller		;036
	RETURN	R5		;And we're done				;010

GLOBAL	<JOBTBL>							;036

.SBTTL	DOEAGN - Catch completion of simple monitor call

;+
; DOEAGN - CATCH COMPLETION OF SIMPLE MONITOR CALL (FROM "DOEMT")
;
;	SP -> "RTI3",R0,R1,R2,R3,R4,R5,PC,PS,...
;					     !- "SYSTAK"
;	JOB IS "JOB"
;
;	JMP	DOEAGN
;
; ON RETURN TO CODE THAT CALLED DOEMT
;
;	R0 -> FIRQB (Mapped)						;010
;	R1 SAME AS BEFORE CALL
;	R5 -> XRB (Mapped)						;010
;	SP -> "RTI3",R0,R1,R2,R3,R4,R5,PC,PS,...
;					     !- "SYSTAK"
;	JOB IS "JOB"
;	JOB'S 1ST 4K IS MAPPED THROUGH DPAR6				;010
;
;	IF Z=1 THEN NO ERROR (FROM "FIRQB")
;	IF Z=0 THEN ERROR (IN "FIRQB")
;-

DOEAGN::SPLC	3		;ENSURE LEVEL 3 AND PREVIOUS = USER	;036
	BIC	#JFCEMT,@JOBF	;BE SURE WE DON'T COME HERE AGAIN	;036
	MAP	JOBJC6,APR=6,DATA ;Map the job control region		;036
	MOV	JOBJCR,R1	;And point to this job's entry		;036
	MOV	JCCEPC(R1),-(SP) ;Pick up the return PC			;036
	MAP	JCCEAP(R1),APR=5,CODE,DATA ;Map the code for our caller	;036
	MOV	JCCER1(R1),R1	;Restore saved R1 for caller		;036
	MOV	#FIRQB+140000,R0 ;GET POINTER TO USERS FIRQB
	MOV	#XRB+140000,R5	;GET POINTER TO USERS XRB
	MAP	@UDPAR0,APR=6,DATA ;Map the user's first 4K		;036
	TST	(R0)			;SET Z=1 IF NO ERROR (FROM "FIRQB")
	RETURN				;AND CONTINUE FROM WERE CALLED

.SBTTL	Map FIP pool

;+
; MAPFIP - Map FIP code and FIP pool
; MAPFPL - Map FIP pool
;
;	CALL	MAPFIP
;	CALL	MAPFPL
;
; FIP pool is mapped with APR6. If system has I&D space, FIP pool is mapped
; with APR5 also.
;-

MAPFIP::MOV	FIPAP6,@#KISAR6		;Set APR6 I-mapping		;028
MAPFPL::MOV	OVRBUF,@DPAR5J		;Set up APR5 mapping if possible ;028
	MOV	FPLAP6,@DPAR6		;Then set up APR6 D-mapping	;028
	RETURN				;All done...			;028

.SBTTL	Calculate the JCR address for a job

;+
; GETJCR - Get JCR pointer for a job (APR6 biased)
;
;	R0 = Job # * 2
;
;	CALL	GETJCR
;
;	R1 -> JCR entry for specified job
;	R2 = MMU address for JCR entry
;
; Note: There is presently one JCR entry shared by all system jobs. To
;       access this JCR entry, pass a zero in R0.
;
;-

JCRMAX	=:	<<JCFXSZ*3>+77>/100 ;Assume JCR size won't ever exceed	;036
				;three times the size of the fixed part	;036
				;(change the "3" if you disagree	;036

GETJCR::MOV	JCRAP6,R2	;Set up the MMU address			;036
	MOV	R0,R1		;Copy job # * 2				;036
	MUL	JCRSIZ,R1	;Get the offset into the JCR		;036
10$:	CMP	R1,#<177-JCRMAX>*100 ;Is this offset too large?		;036
	BLO	20$		;No, so the address is OK		;036
	ADD	#177-JCRMAX,R2	;Yes, so update the MMU address		;036
	SUB	#<177-JCRMAX>*100,R1 ;And update the virtual address	;036
	BR	10$		;And try again				;036

20$:	ADD	#140000,R1	;Bias the address for APR6		;036
	RETURN			;And we're done				;036

.SBTTL	Map a job's JCR entry

;+
; MAPJCR - Map a job's JCR entry through DPAR6
;
;	R0 = Job # * 2
;
;	CALL	MAPJCR
;
;	R1 -> JCR entry for specified job
;
; Note: There is presently one JCR entry shared by all system jobs. To
;       access this JCR entry, pass a zero in R0.
;-

MAPJCR::MOV	R2,-(SP)	;Get a scratch register			;036
	CALL	GETJCR		;Get the JCR entry			;036
	MAP	R2,APR=6,DATA	;Map it please				;036
	MOV	(SP)+,R2	;Restore our register			;036
	RETURN			;And we're done				;036

.SBTTL	Map a job's Header

;+									;049+
; MAPHDR - Map a job's Header through DPAR6
;
;	R3 -> JOB# *2 of job header to map
;
;	CALL	MAPHDR
;
;	Header begins at virtual 140000 for specified job
;	C=1 if not resident  (can not map)
;-

.ENABL	LSB

MAPHDR:: MOV	R3,-(SP)		;save the job #
10$:	MOV	JOBTBL(R3),R3		;convert job# into JBD pointer
	SEC				;presume the job not resident
	MOV	JDMCTL+M.PHYA(R3),R3	;get job's base MMU address
	BEQ	20$			;if =0 exiit (not resident)
	CLC				;normal setting for exit
	MAP	R3,APR=6,DATA		;and map it to D-APR6
20$:	MOV	(SP)+,R3
	RETURN								;049-

.DSABL	LSB

	GLOBAL	<FIJOB>							;049

.SBTTL	Clear all condition codes

;+
; $$CCCR - Clear all condition codes and return
;
; This routine exists for INIT to re-vector code to for options which
; are not present.
;-

$$CCCR::		;**INIT** Address of the "clear all" routine
	CCC			;Clear the condition codes		;037
	RETURN			;And we're done				;037

.END
