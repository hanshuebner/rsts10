	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
TITLE	FPP,<ASYNC FPP CONTEXT SWITCH>,0A,10-MAY-91,MHB/ABC/SJM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR FPP
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	SJM  13-JUL-81	ADDED I&D SPACE SUPPORT
;
;-

	DEFORG	FPP

	DEFORG	FPPCTL

	DEFORG	FPPISP

.SBTTL	FPP CONTEXT SAVE

;+
; FPPSAV - SAVE FPP CONTEXT.
;
;	R0 -> (MAPPED) USER'S SP, [FPS], [FEC], [FEA], [F0-F5]
;	R1 -> JOB DATA BLOCK @ JDFLG
;
;	CALL	FPPSAV
;
;	R0 -> JUST BEYOND LAST THING STORED
;-

FPPSAV::BIT	#JFFPP,(R1)		;REALLY SAVE FPP CONTEXT?
	BEQ	30$			;NOT THIS TIME
	CMP	(R0)+,#FPPTXT+<6*4*2>	;WOULD WE CLOBBER USER'S STACK?
	BHIS	10$			;NO
	CALLX	STKOVF			;YES, SIGNAL A SP STACK OVERFLOW
10$:	STFPS	(R0)+			;NOW SAVE FPS
	LDFPS	#040200			;THEN SET DOUBLE & NO INT'S
	MOV	FPPFEC,(R0)+		;SAVE FEC AND
	MOV	FPPFEC+2,(R0)+		; SAVE FEA
	STD	%0,(R0)+		;STORE F0
	STD	%1,(R0)+		;STORE F1
	STD	%2,(R0)+		;STORE F2
	STD	%3,(R0)+		;STORE F3
	LDD	%4,%0			;MOVE F4 TO F0
	LDD	%5,%1			;MOVE F5 TO F1
	STD	%0,(R0)+		;STORE F4 (FROM F0)
	STD	%1,(R0)+		;STORE F5 (FROM F1)
20$:	LDFPS	#040000			;NO INTERRUPTS PLEASE
	CLR	FPPFEC			;AND CLEAR THE
	CLR	FPPFEC+2		; ERROR WORDS
	RETURN				;NOW EXIT

30$:	TST	(R0)+			;SKIP OVER SP STACK VALUE
	MOV	#040000,(R0)+		;SAVE DUMMY FPS
	CLR	(R0)+			;SAVE DUMMY FEC AND
	CLR	(R0)+			; SAVE DUMMY FEA
	BR	20$			;NOW EXIT

GLOBAL	<FPPFEC>

.SBTTL	RESTORE FPP CONTEXT

;+
; FPPRES - RESTORE FPP CONTEXT.
;
;	R0 -> (MAPPED) FPS, FEA, FEC, F0-F5
;	R1 -> JOB DATA BLOCK @ JDFLG
;
;	CALL	FPPRES
;-

FPPRES::LDFPS	#040200			;SET DOUBLE AND NO INTERRUPTS
	;CLR	FPPFEC			;ALREADY DONE BY 'FPPSAV'
	;CLR	FPPFEC+2		;ALREADY DONE BY 'FPPSAV'
	BIT	#JFFPP,(R1)		;RESTORE FPP CONTEXT?
	BEQ	10$			;NOT THIS TIME
	ADD	#<6*4*2>+<3*2>,R0	;INDEX TO SAVED INFORMATION
	LDD	-(R0),%1		;PUT F5 INTO F1
	LDD	-(R0),%0		;PUT F4 INTO F0
	STD	%1,%5			;RESTORE F5 (FROM F1)
	STD	%0,%4			;RESTORE F4 (FROM F0)
	LDD	-(R0),%3		;RESTORE F3
	LDD	-(R0),%2		;RESTORE F2
	LDD	-(R0),%1		;RESTORE F1
	LDD	-(R0),%0		;RESTORE F0
	MOV	-(R0),FPPFEC+2		;RESTORE FEA AND
	MOV	-(R0),FPPFEC		; FEC
	LDFPS	-(R0)			;RESTORE FPS
10$:	RETURN				;THEN EXIT

GLOBAL	<FPPFEC>

.SBTTL	FPP EXCEPTION TRAPS

;+
; FIELD A FPP EXCEPTION TRAP (TRAP TO 244).
;
; STORES THE FLOATING ERROR CODE (FEC) AND FLOATING ERROR
;	ADDRESS (FEA) THEN SIGNALS THAT A FPP AST IS REQUIRED.
;-

	VECTOR	244,,PR7	;FPP EXCEPTIONS COME HERE

	STST	FPPFEC		;;;SAVE FEC AND FEA OF ERROR
	BIS	#JFPPT,@JOBF	;;;INDICATE FPP AST NEEDED
	JMPX	RTI47		;;;NOW EXIT

GLOBAL	<FPPFEC>

.END

