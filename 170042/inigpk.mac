	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /INIT:INIPFX/
TITLE	INIGPK,<GPK display I/O support>,0A,10-MAY-91,GPK
 
;
;		COPYRIGHT (c) 1986 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

 
.SBTTL	EDIT HISTORY FOR INIPRO
 
;+
;
;  000	GPK  19-Sep-86	CREATION
;
;-

 
	DEFORG	GPK		;Order the Psects
	DEFORG	GPKCTL
	DEFORG	GPKTXT
 
	TMPORG	GPKTXT		;Defining some data...
 
	.NLIST	BEX
 
LKTBL:	.BYTE	177,177,177,177		;Rubout
	.BYTE	015,015,015,015		;Return
	.BYTE	011,011,011,011		;Tab
	.BYTE	140,176,036,036		;`~
	.BYTE	061,041,000,000		;1!
	.BYTE	161,121,021,021		;Q
	.BYTE	141,101,001,001		;A
	.BYTE	172,132,032,032		;Z
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	062,100,000,000		;2@
	.BYTE	167,127,027,027		;W
	.BYTE	163,123,023,023		;S
	.BYTE	170,130,030,030		;X
	.BYTE	074,076,000,000		;<>
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	063,043,033,033		;3#
	.BYTE	145,105,005,005		;E
	.BYTE	144,104,004,004		;D
	.BYTE	143,103,003,003		;C
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	064,044,034,034		;4$
	.BYTE	162,122,022,022		;R
	.BYTE	146,106,006,006		;F
	.BYTE	166,126,026,026		;V
	.BYTE	040,040,000,000		;Space
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	065,045,035,035		;5%
	.BYTE	164,124,024,024		;T
	.BYTE	147,107,007,007		;G
	.BYTE	142,102,002,002		;B
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	066,136,036,036		;6^
	.BYTE	171,131,031,031		;Y
	.BYTE	150,110,010,010		;H
	.BYTE	156,116,016,016		;N
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	067,046,037,037		;7&
	.BYTE	165,125,025,025		;U
	.BYTE	152,112,012,012		;J
	.BYTE	155,115,015,015		;M
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	070,052,177,177		;8*
	.BYTE	151,111,011,011		;I
	.BYTE	153,113,013,013		;K
	.BYTE	054,054,054,054		;,
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	071,050,000,000		;9(
	.BYTE	157,117,017,017		;O
	.BYTE	154,114,014,014		;L
	.BYTE	056,056,056,056		;.
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	060,051,000,000		;0)
	.BYTE	160,120,020,020		;P
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	073,072,000,000		;;:
	.BYTE	057,077,037,037		;/?
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	075,053,000,000		;=+
	.BYTE	135,175,035,035		;]}
	.BYTE	134,174,034,034		;\|
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	055,137,000,000		;-_
	.BYTE	133,173,033,033		;[{
	.BYTE	047,042,000,000		;'"
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	000,000,000,000		;(reserved)
	.BYTE	000,000,000,000		;(reserved)
.ASSUME	<<.-LKTBL>/4> EQ <400-274> ;Check table size
 
	.LIST	BEX
 
	TMPORG	GPKCTL
LSTKEY:	.BLKW0	1		;Last keycode (for autorepeat)
CTLSHF:	.BLKW0	1		;Bit 0 = shift, bit 1 = control

 
BPCHAR	=	12.			;Bits per character
EPCHAR	=	10.			;Number of char matrix entries per character
LEAD	=	10.			;Leading (scan lines per line)
BOTTOM	=	240.-LEAD		;Y coordinate of last text line
 
CR	=	15
LF	=	12
 
	TMPORG	GPKTXT
 
	.RADIX	10.
	.NLIST	BEX
 
BITMAP:	.WORD    0,   0,   0,   0,   0,   0,   0,   0,   0,   0  ; Space
	.WORD    0,  16,  16,  16,  16,  16,   0,  16,   0,   0  ; !
	.WORD    0, 136, 136, 136,   0,   0,   0,   0,   0,   0  ; "
	.WORD    0, 136, 136, 682, 136, 682, 136, 136,   0,   0  ; #
	.WORD    0,  32, 340,  34, 340, 544, 340,  32,   0,   0  ; $
	.WORD    0, 532, 290, 148,  32, 328, 548, 322,   0,   0  ; %
	.WORD    0,  84, 130, 130,  84,1154, 258, 596,   0,   0  ; &
	.WORD    0,  80,  16,   8,   0,   0,   0,   0,   0,   0  ; '
	.WORD    0,  64,  32,  16,  16,  16,  32,  64,   0,   0  ; (
	.WORD    0,  16,  32,  64,  64,  64,  32,  16,   0,   0  ; )
	.WORD    0,   0, 136,  80, 682,  80, 136,   0,   0,   0  ; *
	.WORD    0,   0,  32,  32, 682,  32,  32,   0,   0,   0  ; +
	.WORD    0,   0,   0,   0,   0,   0,  80,  16,   8,   0  ; ,
	.WORD    0,   0,   0,   0, 682,   0,   0,   0,   0,   0  ; -
	.WORD    0,   0,   0,   0,   0,   0,  80,  80,   0,   0  ; .
	.WORD    0, 256, 128,  64,  32,  16,   8,   4,   0,   0  ; /
	.WORD    0,  80, 260, 514, 514, 514, 260,  80,   0,   0  ; 0
	.WORD    0,  32,  40,  36,  32,  32,  32, 340,   0,   0  ; 1
	.WORD    0, 340, 514, 256,  64,  16,   4, 682,   0,   0  ; 2
	.WORD    0, 682, 256,  64, 336, 512, 514, 340,   0,   0  ; 3
	.WORD    0, 128, 160, 136, 130, 682, 128, 128,   0,   0  ; 4
	.WORD    0, 682,   2, 338, 522, 512, 514, 340,   0,   0  ; 5
	.WORD    0, 168,   4,   2, 170, 514, 514, 340,   0,   0  ; 6
	.WORD    0, 682, 512, 256,  64,  16,   4,   2,   0,   0  ; 7
	.WORD    0, 340, 514, 514, 340, 514, 514, 340,   0,   0  ; 8
	.WORD    0, 340, 514, 514, 680, 512, 256, 168,   0,   0  ; 9
	.WORD    0,   0,   0,  80,  80,   0,  80,  80,   0,   0  ; :
	.WORD    0,   0,   0,  80,  80,   0,  80,  16,   8,   0  ; ;
	.WORD    0, 256,  64,  16,   4,  16,  64, 256,   0,   0  ; <
	.WORD    0,   0,   0, 682,   0, 682,   0,   0,   0,   0  ; =
	.WORD    0,   4,  16,  64, 256,  64,  16,   4,   0,   0  ; >
	.WORD    0, 340, 514, 128,  32,  32,   0,  32,   0,   0  ; ?
	.WORD    0, 340, 514, 546, 594, 674,   2, 340,   0,   0  ; @
	.WORD    0,  80, 136, 260, 514, 682, 514, 514,   0,   0  ; A
	.WORD    0, 340, 516, 516, 340, 516, 516, 340,   0,   0  ; B
	.WORD    0, 168, 260,   2,   2,   2, 260, 168,   0,   0  ; C
	.WORD    0, 170, 258, 514, 514, 514, 258, 170,   0,   0  ; D
	.WORD    0, 682,   2,   2, 170,   2,   2, 682,   0,   0  ; E
	.WORD    0, 682,   2,   2, 170,   2,   2,   2,   0,   0  ; F
	.WORD    0, 168, 260,   2,   2, 322, 260, 168,   0,   0  ; G
	.WORD    0, 514, 514, 514, 682, 514, 514, 514,   0,   0  ; H
	.WORD    0, 340,  32,  32,  32,  32,  32, 340,   0,   0  ; I
	.WORD    0, 672, 128, 128, 128, 128, 130,  84,   0,   0  ; J
	.WORD    0, 514, 130,  34,  10,  34, 130, 514,   0,   0  ; K
	.WORD    0,   2,   2,   2,   2,   2,   2, 682,   0,   0  ; L
	.WORD    0, 514, 650, 594, 546, 514, 514, 514,   0,   0  ; M
	.WORD    0, 514, 522, 530, 546, 578, 642, 514,   0,   0  ; N
	.WORD    0, 340, 514, 514, 514, 514, 514, 340,   0,   0  ; O
	.WORD    0, 170, 258, 258, 170,   2,   2,   2,   0,   0  ; P
	.WORD    0, 340, 514, 514, 514, 578, 642, 340, 512,   0  ; Q
	.WORD    0, 170, 258, 258, 170,  66, 130, 258,   0,   0  ; R
	.WORD    0, 340, 514,   2, 340, 512, 514, 340,   0,   0  ; S
	.WORD    0, 682,  32,  32,  32,  32,  32,  32,   0,   0  ; T
	.WORD    0, 514, 514, 514, 514, 514, 514, 340,   0,   0  ; U
	.WORD    0, 514, 514, 514, 260, 136,  80,  32,   0,   0  ; V
	.WORD    0, 514, 514, 514, 546, 546, 340, 136,   0,   0  ; W
	.WORD    0, 514, 260, 136,  80, 136, 260, 514,   0,   0  ; X
	.WORD    0, 514, 260, 136,  80,  32,  32,  32,   0,   0  ; Y
	.WORD    0, 682, 512, 128,  32,   8,   2, 682,   0,   0  ; Z
	.WORD    0, 340,   4,   4,   4,   4,   4, 340,   0,   0  ; [
	.WORD    0,   4,   8,  16,  32,  64, 128, 256,   0,   0  ; \
	.WORD    0, 340, 256, 256, 256, 256, 256, 340,   0,   0  ; ]
	.WORD    0,  80, 136, 260, 514,   0,   0,   0,   0,   0  ; ^
	.WORD    0,   0,   0,   0,   0,   0,   0, 682,   0,   0  ; _
	.WORD    0,  80,  64, 128,   0,   0,   0,   0,   0,   0  ; `
	.WORD    0,   0,   0, 340, 512, 340, 514,1364,   0,   0  ; a
	.WORD    0,   2,   2, 170, 258, 514, 258, 170,   0,   0  ; b
	.WORD    0,   0,   0, 340,   2,   2,   2, 340,   0,   0  ; c
	.WORD    0, 512, 512, 680, 516, 514, 516, 680,   0,   0  ; d
	.WORD    0,   0,   0, 340, 514, 682,   2, 340,   0,   0  ; e
	.WORD    0, 336, 520,   8, 170,   8,   8,   8,   0,   0  ; f
	.WORD    0,   0,   0, 340, 258, 258, 340, 256, 260, 168  ; g
	.WORD    0,   2,   2, 338, 522, 514, 514, 514,   0,   0  ; h
	.WORD    0,  32,   0,  32,  32,  32,  32, 168,   0,   0  ; i
	.WORD    0, 256,   0, 256, 256, 256, 256, 256, 130,  84  ; j
	.WORD    0,   2,   2, 130,  66,  42,  66, 130,   0,   0  ; k
	.WORD    0,  40,  32,  32,  32,  32,  32, 168,   0,   0  ; l
	.WORD    0,   0,   0, 341, 546, 546, 546, 546,   0,   0  ; m
	.WORD    0,   0,   0, 341, 514, 514, 514, 514,   0,   0  ; n
	.WORD    0,   0,   0, 340, 514, 514, 514, 340,   0,   0  ; o
	.WORD    0,   0,   0, 170, 258, 258, 170,   2,   2,   2  ; p
	.WORD    0,   0,   0, 340, 258, 258, 340, 256, 256, 256  ; q
	.WORD    0,   0,   0, 338, 522,   2,   2,   2,   0,   0  ; r
	.WORD    0,   0,   0, 340,   2, 340, 512, 340,   0,   0  ; s
	.WORD    0,   8,   8, 170,   8,   8, 520, 336,   0,   0  ; t
	.WORD    0,   0,   0, 514, 514, 514, 514,1364,   0,   0  ; u
	.WORD    0,   0,   0, 514, 260, 136,  80,  32,   0,   0  ; v
	.WORD    0,   0,   0, 514, 546, 546, 340, 136,   0,   0  ; w
	.WORD    0,   0,   0, 514, 136,  80, 136, 514,   0,   0  ; x
	.WORD    0,   0,   0, 258, 258, 258, 340, 256, 260, 168  ; y
	.WORD    0,   0,   0, 682, 256,  80,   4, 682,   0,   0  ; z
	.WORD    0, 672,  16,  16,  10,  16,  16, 672,   0,   0  ; {
	.WORD    0,  32,  32,  32,  32,  32,  32,  32,   0,   0  ; |
	.WORD    0,  42,  64,  64, 640,  64,  64,  42,   0,   0  ; }
	.WORD    0, 532, 546, 322,   0,   0,   0,   0,   0,   0  ; ~
 
CURIMG:	.WORD 1365,1365,1365,1365,1365,1365,1365,1365,1365,1365  ; Cursor
 
	.RADIX	8.
	.LIST	BEX

 
.SBTTL	Keyboard input handler
 
	ORG	GPK
 
;+
; GPK LK201 keyboard input handler
;
;	CALL	GETLK
;
; On exit:
;	C = 0	Character was waiting
;	R0 =	ASCII character code
;
;	C = 1	No character waiting
;-
 
GETLK::	MOV	R1,-(SP)	;Save a register
	MOV	R3,-(SP)	; and another
	MOV	CSRTBL+LK.CSO,R3 ;Fetch CSR address into R3
	BEQ	5$		;No LK CSR, exit
	BIT	#PRRD,PRSTAT(R3) ;Data ready?
	BEQ	5$		;No, nothing to do
	BIT	#PRFE!PROE!PRPE,PRSTAT(R3) ;Any error bits on?
	BEQ	10$		;No, proceed
	BIS	#PRRE,PRCMD(R3)	;Yes, issue "reset error" command
	TST	(R3)		;Eat any pending character
	BR	40$		; and re-establish the keyboard state
 
5$:	JMP	190$		;Go exit
 
10$:	MOV	(R3),R0		;Get data
.ASSUME	PRDATA	EQ	0
	BIC	#^C<377>,R0	; only low byte
	CMP	R0,#77		;Part of a reset sequence?
	BHI	50$		;No, skip
	MOV	#3,R1		;Set up a counter
	CLR	R0		;Delay limiting counter
20$:	BIT	#PRRD,PRSTAT(R3) ;Next byte ready?
	BEQ	30$		;No
	TST	(R3)		;Yes, toss it
.ASSUME	PRDATA	EQ	0
	DEC	R1		;Count down
	BEQ	40$		;Done reading reset sequence
30$:	SOB	R0,20$		;Loop until done or waited too long
40$:	CALL	SENDKB,R5,<231>	;Issue "disable keyclick" command
	CALL	SENDKB,R5,<247>	;Beep the bell as a signal
	MOV	#'Q-100,R0	;Do an effective XON
	BR	160$		; and exit
 
50$:	CMP	R0,#263		;Start of special codes?
	BLO	100$		;No, normal code
	CMP	R0,#272		;In range?
	BHI	100$		;No, normal code
	SUB	#263,R0		;Form offset
	ASL	R0		;Make word offset
	ADD	R0,PC		; and dispatch
	 BR	60$		;All up
	 BR	70$		;Metronome code
	 BR	190$		;Output error -- ignore
	 BR	190$		;Input error -- ignore
	 BR	80$		;Keyboard lock (should not happen) -- undo it
	 BR	90$		;Test ack (should not happen) -- undo it
	 BR	190$		;Key down prefix, should not happen
	 BR	190$		;Mode change ack, should not happen
 
60$:	CLR	CTLSHF		;Clear control and shift flags
	BR	190$		; and exit
 
70$:	MOV	LSTKEY,R0	;Get last keycode
	BR	100$		; and process it
 
80$:	CALL	SENDKB,R5,<213>	;Issue "resume input" command
	BR	190$		; and exit
 
90$:	CALL	SENDKB,R5,<200>	;Ask KB to exit test mode
	BR	190$		; and exit -- it will send reset sequence
 
100$:	MOV	R0,LSTKEY	;Save last key code
	MOV	#1,R1		;Assume we'll get a shift
	CMP	R0,#256		;Shift code?
	BEQ	110$		;Yes, toggle flag
	ASL	R1		;Perhaps a control key
	CMP	R0,#257		;Is it?
	BNE	120$		;No
110$:	XOR	R1,CTLSHF	;Yes, toggle appropriate flag
	BR	190$		; and exit
 
120$:	CMP	R0,#126		;Hold (F1) key?
	BNE	130$		;No
	MOV	#'S-100,R0	;Yes, assume it's a Hold operation
	TST	STALL		;Currently stalled?
	BEQ	150$		;No, so it will be
	MOV	#'Q-100,R0	;Yes, so unstall
	BR	150$		; and exit with a character
 
130$:	CMP	R0,#130		;Break (F3) key?
	BNE	140$		;No
	CMP	HALTER,#BPT	;Do we have ODT?
	BNE	190$		;No, ignore Break
	BPT			;Go to ODT
	BR	190$		; and otherwise ignore this keystroke
 
140$:	SUB	#274,R0		;Adjust to table offset
	BLO	190$		;Too low, exit
	ASL	R0		;Shift...
	ASL	R0		; ... to build table offset
	BIS	CTLSHF,R0	;Add in shift/control flags
	MOVB	LKTBL(R0),R0	;Get a byte
	BEQ	190$		;Unused code, exit without a character
150$:	CALL	SENDKB,R5,<33>	;To do a keyclick, one must first enable it
	CALL	SENDKB,R5,<202>	; (volume level 5)
	CALL	SENDKB,R5,<237>	;Now we can click
	CALL	SENDKB,R5,<231>	;Disable it again -- what a pain!
	CMP	R0,#'S-100	;Holding the screen?
	BNE	160$		;No
	CALL	SENDKB,R5,<23>	;Yes, turn on LED
	BR	170$		; and go send the LED mask
 
160$:	CMP	R0,#'Q-100	;Releasing the screen?
	BNE	180$		;No, just exit
	CALL	SENDKB,R5,<21>	;Yes, turn off LED
170$:	CALL	SENDKB,R5,<210>	;Leftmost LED, that is
180$:	TST	(PC)+		;Skip SEC, clear carry
190$:	SEC			;Indicate no character
	MOV	(SP)+,R3	;Restore R3
	MOV	(SP)+,R1	; and R1
	RETURN			;Exit, perhaps with char in R0
 
GLOBAL	<CSRTBL,LK.CSO,STALL,HALTER>

 
.SBTTL	Send a command to the LK201 keyboard
 
;+
; Send a command or parameter to the LK201
;
;	CALL	SENDKB,R5,<code>
;
; This routine is used to send commands or parameters, one byte at
; a time, to the LK201 keyboard.  All registers are preserved.
;-
 
SENDKB::MOV	R3,-(SP)	;Save R3
	MOV	CSRTBL+LK.CSO,R3 ;Get LK CSR address
	BEQ	20$		;Not there
10$:	BIT	#PRTR,PRSTAT(R3) ;Transmitter ready?
	BEQ	10$		;No
	MOV	(R5),PRDATA(R3)	;Yes, output the byte
20$:	MOV	(SP)+,R3	;Restore R3
	TST	(R5)+		;Skip argument
	RETURN	R5		; and exit
 
GLOBAL	<CSRTBL,LK.CSO>

 
.SBTTL	GPK display output
 
;+
; Output a character to the GPK display
;
;	R2 =	character
;	CALL	OUTPI
;
;	C = 0	it worked
;	C = 1	display not available
;
; This routine emulates a "glass TTY" using the GPK display hardware.
 
; It handles carriage return, line feed, backspace, bell, and the
; 7-bit printable characters.  Any others are ignored.  Scroll is
; full screen, jump scroll only.
;-
 
OUTPI::	REGSCR			;Save registers
	MOV	CSRTBL+PI.CSO,R0 ;Get CSR pointer
	BEQ	120$		;No CSR?
	BIC	#^C<377>,R2	;Isolate low byte
10$:	TST	PICSR(R0)	;Done with previous operation?
	BPL	10$		;No
.ASSUME	PIDONE LT 0
	CMP	R2,#'G-100	;Bell?
	BNE	20$		;No
	CALL	SENDKB,R5,<247>	;Yes, beep the bell (on the keyboard)
	BR	110$		; and exit
 
20$:	CMP	R2,#'H-100	;Backspace?
	BNE	40$		;No
	CALL	CUROFF		;Turn cursor off
	SUB	#BPCHAR,PIX(R0)	;Back up
	BGE	100$		;Done if no underflow
30$:	CLR	PIX(R0)		;Underflow, make it zero (left margin)
	BR	100$		;Done
 
40$:	CMP	R2,#LF		;Line feed?
	BNE	70$		;No
	CALL	CUROFF		;Cursor off
	ADD	#LEAD,PIY(R0)	;Advance the Y coordinate
50$:	MOV	#PIWORD,PICSR(R0) ;Set word mode ops
	CALL	130$		;Set up the plane control registers
	CLR	PIPAT(R0)	;Pattern = 0
	MOV	#<1024./16.>*LEAD,PICNT(R0) ;Clear the next line's worth
	CMP	PIY(R0),#BOTTOM	;At last line?
	BLOS	100$		;No, so we're done now
	SUB	#LEAD,PIY(R0)	;Back up a line's worth again
60$:	TST	PICSR(R0)	;Wait for display done
	BPL	60$
.ASSUME	PIDONE	LT	0
	MOV	PISCL(R0),R2	;Get current scroll register contents
	ADD	#LEAD,R2	;Advance by interline spacing
	BIC	#^C<377>,R2	;Make sure no overflow into page number field
	MOV	R2,PISCL(R0)	; and update the scroll register
	BR	100$		; and leave
 
70$:	CMP	R2,#CR		;Carriage return?
	BNE	80$		;No
	CALL	CUROFF		;Cursor off
	BR	30$		; and reset to left margin
 
80$:	SUB	#40,R2		;Subtract start of printables
	BLO	110$		;Not printable, exit (NOP)
	CMP	R2,#176-40	;In range?
	BHI	110$		;No, ignore
	CMP	PIX(R0),#80.*BPCHAR ;Time to linewrap?
	BLO	90$		;No
	CALLX	TYPECR		;Yes, do it (recursive call, sort of)
90$:	CLR	CURFLG		;Cursor will be off when we overwrite it
	CLR	PICSR(R0)	;Ensure bit mode
	CALL	130$		;Set up plane control registers
	CALL	PLOTCH		;Plot a bitmap entry
	ADD	#BPCHAR,PIX(R0)	;Advance X by one char's worth
100$:	MOV	#3,CURTIC	;Turn cursor back on shortly
110$:	TST	(PC)+		;It worked, C=0
120$:	SEC			;No display, C=1
	RETURN			;Restore registers and exit
 
130$:	MOV	#PIMPAT,PIP1C(R0) ;Set operation = move pattern
	BIT	#PIBMAP,PICSR(R0) ;Bitmap there?
	BNE	140$		;No if bit is set (!)
	MOV	#<PIMPAT*400>+PIMPAT,PIP2C(R0) ;Set op for planes 2,3 also
140$:	RETURN			;Done
 
GLOBAL	<CSRTBL,PI.CSO>

 
;+
; Update cursor -- called from clock handler.
;
; Count down clock ticks, and toggle the state of the cursor if
; it's time to do so.
;
; All registers are preserved
;-
 
.ENABL	LSB
 
CURSOR::DEC	CURTIC		;Time to tweak the cursor?
	BNE	50$		;No, exit
	REGSCR			;Save registers
	BR	10$		; and toggle the cursor
 
CURON:	TST	CURFLG		;Is cursor already on?
	BNE	50$		;Yes, leave
	BR	10$		;Turn it on
 
CUROFF::TST	CURFLG		;Is cursor already off?
	BEQ	50$		;Yes, leave
10$:	MOV	CSRTBL+PI.CSO,R0 ;Get CSR address
	BEQ	50$		;No display, so no cursor
	MOV	#40.,CURTIC	;We'll leave it on for 40 ticks
	TST	CURFLG		;Cursor currently on?
	BEQ	15$		;No, so it will end up on
	ASR	CURTIC		;Yes, shorten off-time to 20 ticks
15$:	TST	PICSR(R0)	;Done with previous operation?
	BPL	15$		;Not yet
.ASSUME	PIDONE LT 0
	COM	CURFLG		;Toggle the flag
	CLR	PICSR(R0)	;Set byte mode
	MOV	#PIXOR,PIP1C(R0) ;Set operation = move pattern
	BIT	#PIBMAP,PICSR(R0) ;Bitmap there?
	BNE	20$		;No if bit is set (!)
	MOV	#<PIXOR*400>+PIXOR,PIP2C(R0) ;Set op for planes 2,3 also
20$:	MOV	#<CURIMG-BITMAP>/<EPCHAR*2>,R2 ;Set entry # for cursor
	.CALLR	PLOTCH
 
GLOBAL	<CSRTBL,PI.CSO>

 
;+
; Plot a bitmap entry
;
;	R0 ->	display CSR
;	R2 =	bitmap entry number
;
;	CALL	PLOTCH
;
;	R1,R3	munged
;-
 
PLOTCH:	MOV	#EPCHAR,R3	;# entries/character in bitmap
	MOV	R2,R1		;Copy entry number
	MUL	R3,R1		; times entries/char makes offset
	ASL	R1		;  but we need *2 since entries are words
	ADD	#BITMAP,R1	;Point to bitmap for this char
30$:	MOV	(R1)+,PIPAT(R0)	;Set pattern register
	MOV	#BPCHAR,PICNT(R0) ; and count to start the move
	INC	PIY(R0)		;Advance Y (can be done before DONE is set!)
40$:	TST	PICSR(R0)	;Done yet?
	BPL	40$		;No
.ASSUME	PIDONE LT 0
	SOB	R3,30$		;Loop through matrix entries
	SUB	#EPCHAR,PIY(R0)	;Fix Y back to what it was
50$:	RETURN
 
.DSABL	LSB
 
CURTIC:	.WORD	30.		;Ticks till next cursor change
CURFLG:	.WORD	0		;Current cursor state -- 0=off
 
.END
