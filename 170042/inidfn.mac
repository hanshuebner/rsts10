.IIF	NDF	L$$IST&ROOT$L,	.NLIST
.IIF	NDF	L$$IST&ROOT$L,	.DSABL CRF
TITLE	INIDFN,<PREFIX FILE DEFINITIONS>,0A,10-MAY-91,WBN/ABC/SHG/MND/GPK/WJS/DBM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;


.SBTTL	Edit history for INIDFN

;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	MND  16-Feb-81	Added DMP/DMV support
;  002	MND  01-Jul-81	Added DDCMP Name generator MACRO
;  003  SRM  05-Aug-81  Change SE.APR to SE.OFF for phase compression.
;
;				[RSTS V7.2]
;  000	MND  22-Mar-82	CREATION - COPIED FROM V7.1-11
;  001	MND  22-Mar-82	Added MCPHZ1 & MCPHZ2, Added MSCP region to load block
;
;				[RSTS V8.0]
;  002	GPK  07-Jun-82	New boot block layout
;  003	GPK  21-Jun-82	Changes to device packet layout
;  004	GPK  30-Jun-82	ODT phase
;  005	GPK  14-Jul-82	Removed GLOBALs
;  006	GPK  20-Sep-82	Stripped off old FLDEF, renamed to INIDFN
;  007	GPK  23-Sep-82	Added in FCB layout
;  008	GPK  26-Sep-82	Add "Top of INIT" symbol to phase layouts
;  009	GPK  27-Sep-82	Implement S^3 boot block standard
;
;				[RSTS V8.0-07]
;  001  TPT  20-Oct-83	Added 'VH' as device designator for DHV11/DHU11
;
;				[RSTS V9.0]
;  010	WJS  09-Sep-83	LTDS changes
;  011	JHC  11-Jul-83	Add BBRPHZ for BBR phase seperation
;  012	MND  14-Aug-83	Added CONFIG.SYS buffer to INIT phase layouts
;  013	MND  07-Nov-83	Back-out some of the changes made in 010
;  014	DBM  08-Mar-84	Add MS drive type definitions
;  015  DBM  10-Jun-84	Modify MS type definitions so TS05 = TSV05
;			and remove TSU05 definition
;
;				[RSTS V9.1]
;  016	DBM  24-Jan-84	Add MU to $TAPES macro
;  017	DBM  22-Sep-86	Add QNA phase APR definitions
;
;				[RSTS V9.4]
;  018	GPK  19-Aug-86	Add DZ, DW for GPK support
;  019	GPK  10-Sep-86	Update S^3 boot ID macro for GPK
;  020	GPK  16-Sep-86	Change phase rounding because of root growth
;  021	GPK  23-Sep-86	Replace ODT phase by Misc phase
;  022	GPK  07-Oct-86	Add "extra vector" flag
;  023	GPK  22-Jan-87	Add GPK terminal interface types
;
;				[RSTS V9.6]
;  024	JJT  17-Nov-87	Lower phase rounding again because of root growth
;  025  VAM  10-Dec-87	Add B.FLGS (flags in boot area).
;			Put CFGBUF in BBR$P2 instead of SATBF2.
;			Increase PHZRND because INIBOO was moved from root
;			to a memory-resident overlay.
;
;				[RSTS V9.7]
;  026  VAM  2-Jan-89	Add BF.AST (auto-START after boot) boot flag.
;			Remove CFGBUF from mapped area.
;
;				[RSTS V10.0]
;  027	FEK  25-Mar-90	Change PHZRND to make more room for TOY routines
;-


.SBTTL	Macros for INIT
.ENABL	LC

; GENTXT - GENERATE TEXT IN MESSAGE CSECT, LEAVE POINTER IN CURRENT CSECT
.MACRO	GENTXT	TEXT,TAG,II
.NLIST	BEX
	I.MESS
.IF NB	<TAG>
TAG:
.ENDC
.DSABL	CRF
$$$$$$	= .
UNORG
.NLIST
	 .WORD	$$$$$$
.LIST
	I.MESS
.ENABL	CRF
.IF NB	<TEXT>
.NLIST
.IF B	<II>
.ASCIZ	TEXT
.IFF
.ASCII	TEXT
.ENDC
.LIST
UNORG
.ENDC
.ENDM	GENTXT

; ERF - GENERATE FATAL TRAP
.MACRO	ERF	TEXT,I
.NLIST
	 TRAP
.IF IDN <I>,<INLINE>
	  .WORD	.+2
	  .ASCIZ TEXT
	  .EVEN
.IFF
.IIF NB	<I>,	.ERROR	;INVALID SECOND ARGUMENT
GENTXT	<TEXT>
.ENDC
.LIST
.ENDM	ERF

; MESSAG - PRINT A MESSAGE
.MACRO	MESSAG	TEXT,TAG,II,LABEL
.NLIST
	 CALLX	MESSAG,R5
.IF	NB	LABEL
	 .WORD	LABEL
.IFF
GENTXT	<TEXT>,<TAG>,<II>
.ENDC
.LIST
.ENDM	MESSAG


; TYPE - TYPE A CHARACTER
.MACRO	TYPE	C
.NLIST
.IF NB	<C>
	 MOV	#C,R2
.ENDC
	 CALLX	TYPE
.LIST
.ENDM	TYPE

; TYPE2 - TYPE 2 CHARACTERS
.MACRO	TYPE2	C
.NLIST
.IF NB	<C>
	 MOV	#C,R2
.ENDC
	 CALLX	TYPE2
.LIST
.ENDM	TYPE2

.MACRO	UNQTXT	TEXT
.NLIST
.DSABL	CRF
$$$$$$	= 0
.IRPC	X,<TEXT>
.IF EQ	''X-'\
$$$$$$	= 200
.IFF
	.BYTE	''X+$$$$$$
.ENDC
.ENDM
	.BYTE	377
.ENABL	CRF
.LIST
.ENDM	UNQTXT

.MACRO	RESETB
.NLIST
	 MOV	#PR7,@#PS	;SET PR7, REGSET 1
	 MOV	#I.STAK,SP	;RESET STACK
	 CALLX	I.CORE		;CLEAN UP VECTOR REGION
.LIST
.ENDM	RESETB

.MACRO	EXIT
	 JMPX	I.INI0
.ENDM	EXIT



.SBTTL	Map of INIT's phase layouts and MMU assignment of each phase.

				;INIT'S MAP.
				;APR0	000
				;APR1	200
				;APR2	400
				;APR3	600
				;APR4	1000
				;APR5 AND APR6 USED FOR DYNAMIC MAPPING
.DSECT	1200,NOCREF		;HIGH MEMORY ALLOCATION DEFINITIONS 
				;OVLY1 AND OVLY2 ARE PART OF NULL MAPPING
OVLY1:	.BLKB	200		;WHERE FIRST APR OF OVERLAY REGION BEGINS
OVLY2:	.BLKB	200		;WHERE SECOND APR OF OVERLAY REGION BEGINS
DSK$P1:	.BLKB	200		;WHERE FIRST APR OF DISK PHASE BEGINS
DSK$P2:	.BLKB	200		;WHERE SECOND APR OF DISK PHASE BEGINS
SATBF2:	.BLKB	200		;WHERE SECOND SATBUF RESIDES
QNA$P1:				;QNA diagnostic ROM for oneshot code	;017
IOBUF1:	.BLKB	200		;WHERE SAV/RES IOBUFF RESIDES
QNA$P2:				;QNA diagnostic ROM for oneshot code	;017
IOBUF2:	.BLKB	200		;WHERE REST OF SAV/RES IOBUFF RESIDES
MCP$P1:	.BLKB	200		;WHERE FIRST APR OF MSCP PHASE BEGINS
MCP$P2:	.BLKB	200		;WHERE SECOND APR OF MSCP PHASE BEGINS
BBR$P1:	.BLKB	200		;WHERE FIRST APR OF BBR/MSCP PHASE BEGINS
BBR$P2:	.BLKB	200		;WHERE SECOND APR OF BBR/MSCP PHASE BEGINS
MSC$P1:	.BLKB	200		;Where Misc phase begins (first APR)	;021
MSC$P2:	.BLKB	200		;Where Misc phase begins (second APR)	;021
ENDINI:				;MMU end address of INIT		;008
;-----------------------------------------------------------------------+
;	DISK, QNA and MCP ROUNDING FACTOR -- rounds phase to 120000(8)	| ;017
;	Use this value to tweak phase into alignment			|
;	The ODT phase also uses this value, plus 20000, to force itself	|
;	to 140000(8)							|
;	Note that so long as this number is large enough we're happy	|
;	(i.e. the 120000 or 140000 are lower limits, not mandatory	|
;	addresses)							|
PHZRND	==	6776		;DISK AND MCP PHASE ROUNDING FACTOR	| ;027
;-----------------------------------------------------------------------+
.MACRO	RNDAPR	R,PHS
.LIST

.SBTTL	Round PHS'RND to begin PHS phase at APR'R

;+
;	The PHZRND tweeking factor is used to pad out the PHS'RND CSECT
;	so that the proper part of this INIT phase links to APR'R
;
;	PHZRND's value is empirically determined, and defined in INIDFN.MAC.
;
;-

;	TMPORG	PHS'RND

.NLIST
	TMPORG	PHS'RND	; Real TMPORG not listed (we don't want the expansion)
.IF	DIF	<PHS>,<ODT>
.LIST
PHS'FCH::RTS	PC	; The root calls here to cause "RT11" to fetch
			; this "overlay".  The root will then relocate the
			; overlay proper to high memory.

.NLIST
.ENDC	;PHS
.IF	IDN	<R>,<5>
.LIST
	.BLKB	PHZRND-2	; Make the overlay proper link to APR5
.	=	.-2
	.WORD	PHZRNG		; Show use of RNDAPR here by a LINK .CRF entry
.NLIST
	.GLOBL	PHZRNG
.IFF
.LIST
	.BLKB	20000+PHZRND	; Make the overlay proper link to APR6
.	=	.-2
	.WORD	PHZRNG		; Show use of RNDAPR here by a LINK .CRF entry
.NLIST
	.GLOBL	PHZRNG
.ENDC	;R
.IF	IDN	<PHS>,<DSK>
.LIST
APR5CK::		; ROOT checks this symbol to verify PHZRND's effect
.NLIST
.IFF
.IF	IDN	<PHS>,<ODT>
.LIST
ODTBAS::		; ROOT checks this symbol to verify PHZRND's effect
.NLIST
.IFF
.LIST

;APR5CK::		; The root checks this symbol (defined by the DSK
			; overlay's invocation of the RNDAPR macro) to verify
			; that PHZRND has rounded the "phases" properly.

.NLIST
.ENDC	;ODT
.ENDC	;DSK
	UNORG
.ENDM	RNDAPR


.MACRO	ENDOVL	SECTS,PATSIZ
.DSABL	CRF
$$$$$$	=	0
.IRP	SECT,<SECTS>
.IF EQ	$$$$$$
$$$$$$	=	2
.MACRO	PATORG
	DEFORG	SECT'PAT
.ENDM	PATORG
.ENDC
	TMPORG	SECT
.EVEN
$$$$$$	=	$$$$$$+<.-SECT>
.ENDR
	PATORG
.IF NB	PATSIZ
	.BLKB	PATSIZ
$$$$$$	=	$$$$$$+PATSIZ
.ENDC
$$$$$$	=	$$$$$$&777
.IF NE	$$$$$$
	.BLKB	1000-$$$$$$
.ENDC
.ENABL	CRF
.ENDM	ENDOVL


.MACRO	$DISKS	Z
Z'.IRP	NAME,<DV,DF,DS,DK,DL,DM,DP,DB,DR,DZ,DW,DU>			;018
.ENDM	$DISKS

.MACRO	$KBS	Z
Z'.IRP	NAME,<KL,DC,DL,DE,PK,DJ,DH,DZ,VH,PI,PC,XT>			;023
.ENDM	$KBS

.MACRO	$TAPES	Z
Z'.IRP	NAME,<MU,MS,MT,MM>						;016
.ENDM	$TAPES

.MACRO	$DDCMP	Z
Z'.IRP	NAME,<XM,XD>
.ENDM	$DDCMP


.SBTTL	INIPFX - Definitions for INIT

.DSECT	,NOCREF
	$KBS
TT'NAME'11:	.BLKW		;NAME'11 INTERFACE TYPE
.ENDM

.DSECT	,NOCREF
	$DISKS
IDX$'NAME:	.BLKW
.ENDM
IDX$..	=	.		;MINI-DRIVER DISK INDEX, ALWAYS LAST+2
.	= ./2
DSKMAX:

.DSECT	-10,NOCREF							;016
TAPMIN:
	$TAPES
IDX$'NAME:	.BLKW
.ENDM
.IIF	NE,.	.ERROR	;WRONG NUMBER OF MAGTAPE TYPES


; DISK FILE CONTROL BLOCK

.DSECT	,NOCREF

DDIDX:	.BLKB		;DRIVER INDEX
DDSTS:	.BLKB		;STATUS BITS FOR FILE
FCPT:	.BLKB		;PENDING TRANSFER COUNT
DDUNT:	.BLKB		;FIP UNIT NUMBER
FCSIZ:	.BLKW		;SIZE OF FILE
FCNVB:	.BLKW		;NEXT VIRTUAL BLOCK TO READ/WRITE
FCFVB:	.BLKW		;FIRST VIRTUAL BLOCK IN WINDOW
FCLUS:	.BLKB		;FILE CLUSTER SIZE (MINUS 1)
FCFLG:	.BLKB		;FCB FLAG BITS
FCUFND:	.BLKB	FBBSIZ	;N.E. OFFSET (/2) AND FBN OF UFD BLOCK
FCWND:	.BLKW	10	;CURRENT RETRIEVAL WINDOW AND MORE FLAGS
FCBSIZ:			;SIZE OF THE FCB IN BYTES

.BSECT	HIGH,NOCREF	;IN DDSTS (AS A WORD)

DDNFS:	.BLKB	.	;IF 1, NON-FILE STRUCTURED
DDRLO:	.BLKB	.	;IF 1, USER MAY NOT READ FILE
DDWLO:	.BLKB	.	;IF 1, USER MAY NOT WRITE FILE
FCUPDT:	.BLKB	.	;IF 1, THE FILE IS OPEN FOR UPDATE
FCCTG:	.BLKB	.	;IF 1, THE FILE IS CONTIGUOUS
FCLOCK:	.BLKB	.	;IF 1, THE CURRENT BLOCK IS LOCKED
FCFUFD:	.BLKB	.	;IF 1, THE FILE IS A UFD
FCUSE:	.BLKB	.	;IF 1, THIS USER GOT THE WRITE PRIV'S

.DSECT	37,NOCREF	;IN FCFLG

FCLLCK:	.BLKB	1	;# BLOCKS OF CURRENT BLOCK LOCK
FCRR:	.BLKB	.	;IF 1, THE FILE IS OPEN 'READ REGARDLESS'
FCBFCB:	.BLKB	.	;IF 1, THE FCB IS AN EXTENDED FCB
FCDLW:	.BLKB	.	;IF 1, UPDATE FILE SIZE AND DATE OF LAST WRITE

.BSECT	,NOCREF		;IN FCWND

FCSPUP:	.BLKB	.	;IF 1, THE FILE IS OPEN IN SPECIAL UPDATE MODE
FCAEXT:	.BLKB	.	;IF 1, ALWAYS DO A REAL EXTEND
FCWCHK:	.BLKB	.	;IF 1, WRITE CHECK ALL WRITES
	.BLKB	.	;RESERVED


; INIT TABLE DEFINITIONS

.DSECT	FQBSIZ,NOCREF	;DEFINE FIRQB EXTENSIONS

FQSTAT:	.BLKW		;INIT STATUS BITS
FQSIZC:	.BLKW		;CURRENT FILE SIZE (BLOCKS)
FQTMP1:	.BLKW		;FOR REFRESH
FQPREF:	.BLKW		;PREFERRED START CLUSTER NUMBER
FQSIZN:	.BLKW		;NEW SIZE (IN BLOCKS)
FQALLC:	.BLKW		;START RP RETURNED BY TRYALC
FQNPCL:	.BLKW		;NUMBER OF PACK CLUSTERS REQUIRED @ PCS
FQTMP2:	.BLKW		;FOR REFRESH
FQFCB:			;START OF ASSOCIATED FCB (ONE PER FIRQB)

; BIT ASSIGNMENTS IN FQSTAT

.BSECT	,NOCREF

	.BLKB	.
FS.MKC:	.BLKB	.	;MARKED FOR CREATION
FS.MKD:	.BLKB	.	;MARKED FOR DELETION
	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
FS.OLD:	.BLKB	.	;OLD FOR THIS FILE
	.BLKB	.
FS.DSK:	.BLKB	.	;FILE EXISTS ON SWAP DISK
FS.EXT:	.BLKB	.	;FILE EXISTS
FS.OPN:	.BLKB	.
	.BLKB	.
	.BLKB	.
	.BLKB	.
FS.REQ:	.BLKB	.	;FILE IS REQUIRED

; OFFSETS INTO SAT CONTROL TABLES

.DSECT	,NOCREF

SEGS:	.BLKW		;NUMBER OF BLOCKS
BYTS:	.BLKW		;NUMBER OF BYTES
BITS:	.BLKW		;NUMBER OF BITS OR CLUSTERS @ PCS

.EQUATE	PARCSR,172100,NOCREF	;START OF UNIBUS PARITY CONTROL REGS

.EQUATE	MMUSR3,172516,NOCREF	;MMU CONTROL REGISTER 3


.DSECT	177740,NOCREF

CHEERL:	.BLKW			;CACHE ERROR ADDRESS (LSB)
CHEERM:	.BLKW			;CACHE ERROR ADDRESS (MSB)
CHEERR:	.BLKW			;CACHE ERROR STATUS
CHECTL:	.BLKW			;CACHE CONTROL
CHEMNT:	.BLKW			;CACHE MAINTENANCE REGISTER
CHEHIT:	.BLKW			;CACHE HIT REGISTER
	.BLKW
	.BLKW
CPUSZL:	.BLKW			;CPU SIZE REGISTER (LSB)
CPUSZM:	.BLKW			;CPU SIZE REGISTER (MSB)
CPUSID:	.BLKW			;CPU SYSTEM ID REGISTER
CPUERR:	.BLKW			;CPU ERROR REGISTER
CPUUPB:	.BLKW			;MICROPROGRAM BREAK REGISTER
CPUPIR:	.BLKW			;PIRQ
SL:	.BLKW			;STACK LIMIT
PS:	.BLKW			;PSW

.EQUATE	UNIWIN,170200,NOCREF	;11/70 UNIBUS WINDOW MAP

.EQUATE	MMTMOT,     1,NOCREF	;MAIN MEMORY TIMEOUT BIT IN CHEERR


.SBTTL	ROOT device table packet definitions

.DSECT	,NOCREF		; Define packet offsets

PK.MXU:	.BLKB		; One byte for maximum number of units possible
PK.FLG:	.BLKB		; Flags
PK.CSO:	.BLKW		; Offset into CSRTBL (or into SETTBL)
PK.SIZ:	.BLKB		; Size on the I/O page
PK.NUN:	.BLKB		; Maximum number of subunits
PK.OFF:	.BLKB		; Offset into registers of most common
PK.PRI:	.BLKB		;  priority (PRN & 340)
PK.NAM:	.BLKW		; Name in ASCII
PKTSIZ:			; Size of packet

.BSECT	,NOCREF		; Bits within PK.FLG byte

PS.2VC:	.BLKB	.	; Two vectors for this device
PS.PVC:	.BLKB	.	; Device with programmable vectors
PS.FIX:	.BLKB	.	; 1st CSR is fixed (else 1st CSR floats)
PS.FLT:	.BLKB	.	; 2nd-Nth CSRs float (else 2nd-Nth CSR's are fixed)
PS.GPK:	.BLKB	.	; Device is on GPK bus only			;018
PS.EVC:	.BLKB	.	; Extra vector (to same entry point)		;022
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved

.BSECT	,NOCREF		; Bits within PK.PRI byte

PS.NUW:	.BLKB	7	; Number of UNIBUS windows - 1
PS.UWN:	.BLKB	.	; 1 if device requires UNIBUS windows
PS.BAE:	.BLKB	120	; 1 if device is RH11 controller w/ BAE
PS.PRI:	.BLKB	40	; Mask for priority (2 bits)
PS.XBF:	.BLKB	.	; 1 if device requires mapped XBUF space

.DSECT	,NOCREF		; Start packets for installed SIL configuration

DS.DVN:	.BLKB		; Offset into DEVNAM table (even)
DS.UNT:	.BLKB		; First RSTS unit number controlled
DS.NUN:	.BLKB		; Number of units controlled
DS.NCS:	.BLKB		; Number of related CSR's (1 if disk, else DS.NUN)
DS.PKT:	.BLKB		; Packet number within DEVTBL in INIT
DS.CTL:	.BLKB		; Controller number within packet
DS.CSR:	.BLKW		; Value of 'CSR.??' = location to get CSR
DS.DCT:	.BLKW		; Value of '??DINT' = location to vector to
DS.XXX:			; End


.SBTTL	Bootstrap definitions

.DSECT	157000,NOCREF

B.BOOT:	.BLKW			;NOP - REQUIRED BY DEC STANDARD
	.BLKW			;BR XXSETU - BRANCH TO SETUP CODE
B.VE04:	.BLKW	2		;.WORD  6,0 - HALT AT  6 IF TRAP TO  4 OCCURS
B.VE10:	.BLKW	2		;.WORD 12,0 - HALT AT 12 IF TRAP TO 10 OCCURS
B.DCS:	.BLKW			;DEVICE CLUSTER SIZE (FIXED FOR DEVICE TYPE)
B.CSR:	.BLKW			;DEVICE CONTROL REGISTER BASE (USUALLY FIXED)
B.NAME:	.BLKW			;DEVICE NAME (2 CHARACTERS OF ASCII)
B.JMP:	.BLKW			;JMP @(PC)+  JUMP TO TRANSFER ADDRESS
B.XFER:	.BLKW			;TRANSFER ADDRESS (SET BY HOOK)
B.UNIT:	.BLKB			;BOOTED UNIT NUMBER IN BIT POSITIONS 0-2
B.FLGS:	.BLKB			;Flags (see definitions below).		;025
B.MMU:				;MMU address of bootstrap (for UDA etc.)
B.CSRU:	.BLKW			;BOOTED UNIT NUMBER SHIFTED FOR CONTROLLER
B.RFUN:	.BLKB			;BYTE CONTAINING CODE FOR READ FUNCTION
B.WFUN:	.BLKB			;BYTE CONTAINING CODE FOR WRITE FUNCTION
B.FUNC:	.BLKW			;WORD WITH FUNCTION CODE (INITIALLY READ)
B.SPFC:				;Special function subfunction code
B.BLKL:	.BLKW			;Low order block number
B.BLKH:	.BLKW			; and high order
B.MEML:	.BLKW			;Low order memory address
B.MEMH:	.BLKW			; and high order
B.PARM:				;Parameter for magtape special functions
B.TWC:	.BLKW			;Word count for this transfer
				; assembled in as bootstrap size in bytes
B.RSET:	.BLKW			;Device-specific reset
B.READ:	.BLKW			;Read/write subroutine
B.SPEC:	.BLKW			;Special function routine (tapes only)

.EQUATE	B.DATE,	B.BOOT+772	;SAVED DATE/TIME INFORMATION

;+									;025
; Definitions of bits in B.FLGS						;025
;-									;025

.BSECT	,NOCREF								;025

	.BLKB	.		;Reserved for future use.		;025
	.BLKB	.		;Reserved for future use.		;025
	.BLKB	.		;Reserved for future use.		;025
	.BLKB	.		;Reserved for future use.		;025
	.BLKB	.		;Reserved for future use.		;025
	.BLKB	.		;Reserved for future use.		;025
BF.AST:	.BLKB	.		;Do Auto-START after booting.		;026
BF.FSZ:	.BLKB	.		;Do a full autosize during this boot.	;025


; Macros for defining the Szeto boot block identification area:		;009

.MACRO	CHKBYT	LIST
$$$$$$	=	0
.IRP	BYT,<LIST>
$$$$$$	=	$$$$$$ + BYT
.ENDR
	 .BYTE	LIST,^C<$$$$$$>
.ENDM	CHKBYT

.MACRO	BOOTID	TAG,CTL=U
$$$$$0	=	0
$$$$$1	=	0
.IRP	X,<CTL>
.IF	IDN	<X>,<U>
$$$$$0	=	$$$$$0 ! 101
.ENDC
.IF	IDN	<X>,<Q>
$$$$$0	=	$$$$$0 ! 102
.ENDC
.IF	IDN	<X>,<GPK>						;019
$$$$$0	=	$$$$$0 ! 104						;019
.ENDC									;019
.IF	IDN	<X>,<UMSCP>
$$$$$0	=	$$$$$0 ! 110
.ENDC
.IF	IDN	<X>,<QMSCP>
$$$$$0	=	$$$$$0 ! 120
.ENDC
.IF	IDN	<X>,<TWOSIDES>
$$$$$1	=	1
.ENDC
.ENDR
	CHKBYT	<20,$$$$$0,30>	;PDP-11, controller type, RSTS filestructure
.IF	NB	<TAG>
TAG:
.ENDC
.IF	EQ	$$$$$1
	 .BYTE	0,1		;Boot standard V.1, one-sided
.IFF
	 .BYTE	0,201		;Boot standard V.1, two-sided
.ENDC
.ENDM	BOOTID

.SBTTL	MS DRIVE TYPE DEFINITIONS
;+
; These definitions are defined by us since the MS drives have no
; ID of their own.  These definitions also exist in the MS driver
; code, and if any changes are to be made, then they MUST be made
; in both places.
;-

.DSECT			;TS DRIVE IDENTIFIERS		;014
$TS11:	.BLKW		;TS11	- UNIBUS		;014
$TU80:	.BLKW		;TU80	- UNIBUS		;014
$TK25:	.BLKW		;TK25	- UNIBUS   OR	Q-BUS	;014
$TSV05:			;TSV05	-		Q-BUS	;015
$TSU05:			;TSU05	- UNIBUS		;015
$TS05:	.BLKW		;TS05	- UNIBUS   OR	Q-BUS	;015
$TSEND:			;INVALID TS TYPE		;014

.IIF	NDF	L$$IST&ROOT$L,	.ENABL CRF
.IIF	NDF	L$$IST&ROOT$L,	.LIST


