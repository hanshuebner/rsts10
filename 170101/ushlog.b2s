1	SUB USHLOG							      &
\	ON ERROR GOTO 19000						      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : USHLOG					      &
	!	     version : V10.1					      &
	!	     created : 21-SEP-89				      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : JJT,SEL					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1990, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL USHLOG						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	!								      &
	! 10.0-0D	21-SEP-89	(SEL) Combine UULOG.B2S and USLOG.B2S &
	! 10.0-0F	31-OCT-89	(SEL) Support extended logicals	      &
	! V10.0-H	22-Jan-90	(SEL) Logicals are 15 chars (not 21)  &
	! V10.0-I	31-Jan-90	(SEL) Correct list user logicals call &
	! V10.0-K+	18-MAY-90	(SEL) Byte 7=128 to list user logicals &
	! V10.0-K+	21-MAY-90	(SEL) Add "?" at start of error text  &
	! V10.0-L+	05-JUN-90	(SEL) Remove "long" from error text   &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name		description				      &
	!	====		===========				      &
	!								      &
	!******************************************************************** &


700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &
	%INCLUDE "SYSTEM:UTYKEY.B2S"		!include CUI common data      &

750	COMMON	(DSPCMN)	INDENT.COLUMN%				      &

760	MAP	(LOGICL)			!User Logicals buffer	      &
			BYTE PROG,		!Assigned Programmer Number   &
			BYTE PROJ,		!Assigned Project Number      &
			BYTE PROT.FLAG,		!Protection Code Flag	      &
			BYTE PROT,		!Protection Code	      &
			WORD LOG.ARRAY(3%,3%)	!Array of the Logical Names   &

910	DIM	FIRQB%(30%),			!SYScall array		      &
		NAM.1%(21%),			!table for FN.MATCH.NAME%     &
		NAM.2%(21%)			!table for FN.MATCH.NAME%     &

1000	U$ = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" 	!BUILD XLATE CONSTANT TO      &
\	L$ = "abcdefghijklmnopqrstuvwxyz"	! CONVERT UNDERSCORES TO      &
\	N$ = "0123456789" 			! PERIODS. ONLY ALPHANUMERICS &
\	T$ = STRING$(36,0%) + "$" + STRING$(9,0%) + "_" + STRING$(1,0%) +     &
		N$ + STRING$(7,0%) + U$ + STRING$(6,0%) + L$  + STRING$(5,0%) &


6800	!SHOW LOGICAL							      &
									      &
\	ALL% = -1% 				!DEFAULT TO /ALL	      &
\	WILD% = 0%				!DEFAULT TO NO WILDCARD CHARS &
\	CALL FET$P BY REF (LOG.T%)		!GET THE LOGICAL TO LIST      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		Z$ = SEG$(U.STR$,1%,U.LEN%)	!  EXTRACT IT		      &
\		Z$ = EDIT$(Z$,-2%)		!  REMOVE ALL JUNK	      &
\		Z$ = SEG$(Z$,1%,LEN(Z$)-1%)	!  REMOVE THE COLON	      &
		  IF SEG$(Z$,LEN(Z$),LEN(Z$)) = ":"! IF THERE IS ONE	      &
\		ALL% = 0%			!  CLEAR THE /ALL FLAG	      &
\		WILD% = -1% IF (INSTR(1%,Z$,"*") <> 0%) OR !SET WILD IF "*"   &
			       (INSTR(1%,Z$,"?") <> 0%)	   ! OR "?"	      &
\		LOG.POS% = U.POS%		!  SAVE THE POSITION	      &
\	END IF								      &
\	IF ALL% THEN				!ALL LOGICALS?		      &
		HEADING$ = "Logicals:"		! HEADING IF ALL LOGICALS     &
\	ELSE								      &
		HEADING$ = "Logical:"		! HEADING IF ONLY ONE LOGICAL &
\	END IF								      &
						!			      &
\	FOUND% = 0%				!INIT FLAG TO NONE FOUND      &
\	HEADING% = 0%				!CLEAR HEADING FLAG	      &
\	USER% = 0%				!CLEAR SYSCALL TYPE FLAG      &
						!			      &
\	CALL FET$CQ BY REF (SYS.K%)		!ONLY SHOW SYSTEM LOGICALS?   &
\	IF U.PRES% THEN				!YES, SO		      &
		LOGI_TYPE$ = "System "		! SET TYPE TO SYSTEM	      &
\		GOTO DO_SYS_LOGICALS 		! AND SKIP USER LOGICALS      &
\	END IF					!			      &
\	LOGI_TYPE$ = ""				!INIT TYPE OF LOGICALS	      &
\	CALL GETLOG				!GET THE USER LOGICALS	      &
						!			      &
\ USERLOG_LOOP:								      &
	FOR I% = 0% TO 3%			!FOR THE 4 USER LOGICALS      &
\		ITERATE USERLOG_LOOP IF LOG.ARRAY(I%,0%) = 0% !CONTINUE IF    &
						!	NO LOGICAL HERE	      &
\		EXIT USERLOG_LOOP IF LOG.ARRAY(I%,0%) = -1% AND I% = 3%	      &
						!  EXIT IF IN BLOCK OF PPN'S  &
\		M$ = RAD$(LOG.ARRAY(I%,0%)) +	!  GET THE LOGICAL	      &
		     RAD$(LOG.ARRAY(I%,1%))	!   NAME		      &
\		M$=EDIT$(M$,-2%)		!  REMOVE ALL JUNK	      &
\		ITERATE USERLOG_LOOP IF NOT(FN.MATCH.NAME%(M$,Z$)) IF NOT ALL% &
\		IF NOT HEADING% THEN		!  HEADING PRINTED YET?	      &
			PRINT #OUT.CHN%, 	!  NO, SO PRINT ONE	      &
\			PRINT #OUT.CHN%, "User " + HEADING$		      &
\			PRINT #OUT.CHN%, 	!			      &
\			HEADING% = -1%		!   AND SET HEADING FLAG      &
\		END IF							      &
\		PRINT #OUT.CHN%, TAB(2%); M$; TAB(24%); "= "; !PRINT LOGI NAME &
\		DEV$ = CHR$(LOG.ARRAY(I%,2%)) +	!  GET DEVICE		      &
			CHR$(SWAP%(LOG.ARRAY(I%,2%))) !NAME		      &
\		IF EDIT$(DEV$,-2%) <> "" THEN	! IF A DEVICE IS THERE	      &
			PRINT #OUT.CHN%, DEV$;	!  PRINT THE DEVICE NAME      &
\			PRINT #OUT.CHN%, NUM1$(LOG.ARRAY(I%,3%) AND 255%);!UNIT &
			 IF (SWAP%(LOG.ARRAY(I%,3%)) AND 255%) = 255% !IF VALID &
\			PRINT #OUT.CHN%, ":";	!  PRINT COLON FOR THE DEVICE &
\		END IF							      &
\		PRINT #OUT.CHN%, "[";NUM1$(SWAP%(LOG.ARRAY(3%,I%+1%)) AND 255%);","; &
			NUM1$(LOG.ARRAY(3%,I%+1%) AND 255%);"]"; ! PRINT PPN  &
			IF LOG.ARRAY(3%,0%) = -1% AND ! IF THERE ARE PPN'S AND &
			   LOG.ARRAY(3%,I%+1%) <> 0%  !  THIS PPN IS VALID AND &
			   IF I% < 3%		      !  NOT IN PPN BLOCK     &
\		PRINT #OUT.CHN%			!  BRING THE CURSOR BACK      &
\		FOUND% = -1%			!  FLAG THAT WE FOUND ONE     &
\		GOTO DONE_USER_LOGICALS IF NOT ALL% !STOP IF WE DON'T WANT ALL &
					IF NOT WILD% !IF NO WILDCARD CHARS    &
\	NEXT I%								      &
\	USER% = -1%				! SET FLAG FOR PRINT HEADINGS &
\	GOSUB DO_EXT_LOGICALS			! CHECK FOR EXT USER LOGICALS &
						!			      &
\ DONE_USER_LOGICALS:				!NO MORE USER LOGICALS FOUND  &
 	CALL FET$CQ BY REF (USR.Q%)		!ONLY SHOW USER LOGICALS?     &
\	IF U.PRES% THEN				!YES, SO		      &
		LOGI_TYPE$ = "User " 		! SET TYPE TO USER	      &
\		GOTO CHECK_IF_FOUND		! AND SKIP SYSTEM LOGICALS    &
\	END IF					!			      &
\	USER%    = 0% IF USER%			!CLEAR TYPE FLAG IF SET	      &
\	HEADING% = 0% IF HEADING%		!CLEAR HEADING FLAG IF SET    &

						!			      &
\ DO_SYS_LOGICALS:							      &
	USER% = 0%				! CLR FLAG FOR SYSCALL LOOKUP &
\ 	GOSUB DO_EXT_LOGICALS			! CHECK FOR EXTENDED LOGICALS &
						!			      &
\ CHECK_IF_FOUND:							      &
\	IF FOUND% = 0% THEN			!IF NO MATCHES FOUND	      &
	   IF ALL% = 0% THEN			!  IF WE WANTED A MATCH	      &
		NOT_FOUND$ = "?" + LOGI_TYPE$ + "Logical not found"	      &
\		U.POS% = LOG.POS%		!     RESTORE THE POSITION    &
\		CALL DISPLY (NOT_FOUND$)	!     PRINT ERROR AND EXIT    &
	   ELSE					!  IF WE WANTED ALL	      &
		NOT_FOUND$ = "%No " + LOGI_TYPE$ + "Logicals assigned"	      &
\		PRINT #OUT.CHN%, NOT_FOUND$ 	!     PRINT WARNING	      &
\	   END IF							      &
\	END IF								      &
\	SUBEXIT					!GO GET THE NEXT COMMAND      &
						!			      &

15200	!	f n . m a t c h . n a m e % ( NAM.1$ , NAM.2$ )		      &
	!								      &
	!								      &
	!inputs:	NAM.1$		-	queue file rec name to match  &
	!		NAM.2$		-	select name string to match   &
	!								      &
	!outputs:	FN.MATCH.NAME%	-	returned match status:	      &
	!					 -1% = names match	      &
	!					  0% = names don't match      &
	!								      &
	!uses:		Z0%		-	loop index		      &
	!		NAM.1%()	-	work table for 1st name	      &
	!		NAM.2%()	-	work table for 2nd name	      &
	!								      &
	!notes:		This function compares a queue file record's queue,   &
	!		job, form or font name string (NAM.1$) against a      &
	!		supplied name string (NAM.2$).  The supplied string   &
	!		may contain ?'s or a trailing * to indicate wildcard  &
	!		characters					      &
	!		(always match).					      &
	!								      &
	!								      &
	DEF FN.MATCH.NAME% (NAM.1$,NAM.2$)				      &
\	IF LEN(NAM.2$) = 0%			!if null 2nd name	      &
	   OR NAM.2$ = "*" THEN			! or wildcard 2nd name,	      &
		FN.MATCH.NAME% = -1%		!  return match		      &
\		FNEXIT				!  and exit		      &

15210	CHANGE EDIT$(NAM.1$,2%+4%) TO NAM.1%	!move 1st name into array     &
\	CHANGE EDIT$(NAM.2$,2%+4%) TO NAM.2%	!move 2nd name into array     &
\	FN.MATCH.NAME% = 0%			!init fn value as no match    &
						!			      &
\	IF NAM.2%(NAM.2%(0%)) = 42% THEN	!If a trailing asterisk "*"   &
		NAM.2$ = LEFT(NAM.2$,NAM.2%(0%)-1%) + !Strip off the asterisk &
			 STRING$(22%-NAM.2%(0%),63%)  !and pad with ?'s	      &
\		CHANGE NAM.2$ TO NAM.2%		! Re-move 2nd name into array &
\	END IF								      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(0%) > NAM.2%(0%)	!  if queue rec name longer   &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.1%(Z0%) <> NAM.2%(Z0%)	!  if chars don't match	      &
			IF NAM.2%(Z0%) <> ASCII("?")			      &
						!    if not wildcard char     &
				FOR Z0% = 1% TO NAM.1%(0%)		      &
						!      for each char	      &
						!			      &
\	FNEXIT					!exit with no match	      &
		IF NAM.2%(Z0%) <> ASCII("?")	!  if next char not wild      &
			FOR Z0% = NAM.1%(0%)+1% TO NAM.2%(0%)		      &
						!    for remaining chars      &
						!			      &
\	FN.MATCH.NAME% = -1%			!match if loops complete      &
\	FNEND					!end FN.MATCH.NAME% function  &

18000	!	s u b r o u t i n e s					      &
	!								      &
\ DO_EXT_LOGICALS:							      &
	ON ERROR GOTO DONE_EXT_LOGICALS		!SET LOCAL ERROR TRAP	      &
\	INDX% = 0%				!INIT SYS INDEX COUNTER	      &
\	WHILE 1% = 1%				!LOOP FOREVER		      &
\		FIRQB%(0%) = 30%		!30 BYTES		      &
\		FIRQB%(1%) = 6%			!SYS CALL TO FIP	      &
\		IF USER% THEN						      &
		   FIRQB%(2%) = 10%		!UU.ASS CALL - USER LOGICALS  &
\		   FIRQB%(3%) = INDX%+1		!LOWER HALF OF INDEX	      &
\		   FIRQB%(4%) = SWAP%(INDX%+1)	!UPPER HALF OF INDEX	      &
\		   FIRQB%(5%) = 0%		!RESERVED		      &
\		   FIRQB%(6%) = 0%		!RESERVED		      &
\		   FIRQB%(7%) = 128%		!LIST USER LOGICALS SUBFUNCTION &
\		ELSE							      &
		   FIRQB%(2%) = 21%		!UU.SLN CALL - SYSTEM LOGICALS &
\		   FIRQB%(3%) = 2%		!LIST SUBFUNCTION	      &
\		   FIRQB%(4%) = 0%		!RESERVED		      &
\		   FIRQB%(5%) = INDX%		!LOWER HALF OF INDEX	      &
\		   FIRQB%(6%) = SWAP%(INDX%)	!UPPER HALF OF INDEX	      &
\		   FIRQB%(7%) = 0%		!RESERVED		      &
\		END IF							      &
\		FIRQB%(I%) = 0% FOR I% = 8% TO 30% !CLEAR OUT THE REST	      &
\		CHANGE FIRQB% TO FIRQB$		!  CHANGE ARRAY TO A STRING   &
\		CHANGE SYS(FIRQB$) TO FIRQB%	!  DO THE SYS CALL	      &
\		GOTO NEXTLOOP IF FIRQB%(27%) +	!  CHECK FOR A MOUNTED DISK   &
			SWAP%(FIRQB%(28%)) = -1%!    BY FQCLUS = -1	      &
\		M$ = ""				!  INIT THE LOGICAL NAME VAR  &
\		M$ = M$+RAD$(FIRQB%(I%)+SWAP%(FIRQB%(I%+1%))) !FORM THE	      &
			FOR I% = 7% TO 16% STEP 2%	 !LOGICAL NAME	      &
\		M$ = EDIT$(M$,-2%)		!  REMOVE ALL JUNK	      &
\		M$ = XLATE$(M$,T$)		!CONVERT PERIODS TO UNDERSCORES &
\		GOTO NEXTLOOP IF NOT(FN.MATCH.NAME%(M$,Z$)) IF NOT ALL%	      &
						!  GET NEXT RECORD IF NO EXACT &
						!  MATCH AND WE DON'T WANT ALL &
\		F$ = ""				!  INIT THE FILE NAME VAR     &
\		IF FIRQB%(23%) <> 0% THEN	!  IF THERE IS A DEVICE	      &
			F$ = F$ + CHR$(FIRQB%(23%))+CHR$(FIRQB%(24%))	      &
						!	GET DEVICE NAME	      &
\			F$ = F$ + NUM1$(FIRQB%(25%)) IF FIRQB%(26%) <> 0%     &
						!      GET UNIT # IF IT EXISTS &
\			F$ = F$ + ":"		!	ADD THE COLON	      &
\		END IF							      &
\		IF FIRQB%(5%)+SWAP%(FIRQB%(6%)) <> 0% THEN !IF A VALID PPN    &
			F$ =F$+"["+NUM1$(FIRQB%(6%))+","+NUM1$(FIRQB%(5%))+"]" &
						!	ADD THE PPN	      &
\		END IF							      &
\		GOSUB PRINT_LOGICAL		!PRINT THE LOGICAL NAME	      &
\		RETURN IF NOT ALL% 		!STOP IF WE DON'T WANT ALL    &
			IF NOT WILD%		!IF NO WILDCARD CHARS	      &
\ NEXTLOOP:								      &
	INDX% = INDX% + 1%			!  BUMP THE COUNTER	      &
\	NEXT					!  GET NEXT SYSTEM LOGICAL    &
\ DONE_LOGICALS:							      &
	ON ERROR GOTO 19000			!RESET THE STD ERROR TRAP     &
\	RETURN					!GO BACK WHERE WE CAME FROM   &
\ DONE_EXT_LOGICALS:							      &
	RESUME DONE_LOGICALS IF ERR = 5		!ALL DONE		      &
\	PRINT "?Error listing logicals - "; ERT$(ERR) !PRINT ERROR	      &
\	RESUME 19000					   !AND EXIT	      &
						!			      &
\ PRINT_LOGICAL:							      &
	IF NOT HEADING% THEN			!  HEADING PRINTED YET?	      &
	   PRINT #OUT.CHN%, 			!  NO, SO PRINT ONE	      &
\	   IF USER% THEN						      &
		PRINT #OUT.CHN%, "User " + HEADING$			      &
\	   ELSE								      &
		PRINT #OUT.CHN%, "System " + HEADING$			      &
\	   END IF							      &
\	   PRINT #OUT.CHN%,						      &
\	   HEADING% = -1%			!   AND SET HEADING FLAG      &
\	END IF								      &
\	PRINT #OUT.CHN%, TAB(2%); m$; TAB(24%);"= ";F$		!  PRINT IT   &
\	FOUND% = -1% 				!  FLAG THAT WE FOUND ONE     &
\	RETURN								      &
									      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	ON ERROR GO BACK			!Let the Root error	      &
						! handler handle it	      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
