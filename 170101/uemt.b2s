1	SUB UEMT							      &
\	ON ERROR GOTO 19000						      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : UEMT					      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : JJT,SEL					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL UEMT						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	! V9.7-03	19-Dec-88	(JJT) Clean up display		      &
	! V9.7-06	15-Mar-89	(JJT) Check EMT support before display &
	! V10.0-01	13-Jul-89	(SEL) Print to OUT.CHN% (/OUTPUT)     &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name		description				      &
	!	====		===========				      &
	!								      &
	!******************************************************************** &


700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &
	%INCLUDE "SYSTEM:UTYKEY.B2S"		!include CUI common data      &

750	COMMON	(DSPCMN)	INDENT.COLUMN%				      &
									      &


900	dim FQFUN.Mnemonic$(20%),	! FQFUN mnemonics		      &
	    FQFUN.Description$(20%),	!         and descriptions	      &
	    UUO.Mnemonic$(75%),		! UUO mnemonics			      &
	    UUO.Description$(75%),	!         and descriptions	      &
	    FIRQB%(30%)			! SYScall array			      &
									      &
									      &
!	The data for FQFUN and UUO mnemonics and descriptions follow.	      &
!									      &
!	Note:  these captions are dependent upon the Monitor's FQFUN and      &
!	UUO values, which could change (or be added to) in future releases    &
!	of RSTS/E.							      &
									      &

910									      &
  Data	CLS, 'Close a channel',	OPN, 'Open a channel',	CRE, 'Create a file', &
	DLN, 'Delete a file',	REN, 'Rename a file',	DIR, 'Directory info', &
	rsv, 'reserved',	rsv, 'reserved',	RST, 'Reset channels', &
	LOK, 'File lookup',	ASS, 'ASSIGN a device',	DEA, 'DEASSIGN dvice', &
	DAL, 'DEASSIGN all',	CRT, 'Create .TMP',	CRB, 'Create cmpiled', &
	RUN, 'Run a program',	xxx, '',				      &
									      &
	rsv, 'reserved',	rsv, 'reserved',	rsv, 'reserved',      &
	rsv, 'reserved',	rsv, 'reserved',	rsv, 'reserved',      &
	TB3, 'Tables III',	SPL, 'SPOOL request',	DMP, 'Snapshot dump', &
	FIL, 'File utility',	ATR, 'File attributes',	rsv, 'reserved',      &
	rsv, 'reserved',	rsv, 'reserved',	rsv, 'reserved',      &
	rsv, 'reserved',	LOG, 'Set Logins',	RTS, 'RTS/reslib ctl', &
	NAM, 'Set RTS name',	rsv, 'reserved',	ACT, 'Acctng data',   &
	DAT, 'Date/time ctl',	PRI, 'Priority, etc.',	TB2, 'Tables II',     &
	BCK, 'File stats ctl',	rsv, 'reserved',	HNG, 'Hangup dataset', &
	FCB, 'FCB/DDB info',	rsv, 'reserved',	POK, 'Poke memory',   &
	rsv, 'reserved',	rsv, 'reserved',	TB1, 'Tables I',      &
	NLG, 'Logins <= 1',	YLG, 'Logins <= max',			      &
									      &
	000, 'offset zero', 	PAS, 'Create PPN',			      &
									      &
	DLU, 'Delete PPN',	rsv, 'reserved',	MNT, 'Mount/dismount', &
	LIN, 'Login   ',	BYE, 'Logout  ',	ATT, 'Attach  ',      &
	DET, 'Detach  ',	CHU, 'Password/quota',	rsv, 'reserved',      &
	ASS, 'ASSIGN  ',	DEA, 'DEASSIGN',	DAL, 'DEASSIGN all',  &
	ZER, 'Zero a device',	RAD, 'Read acctg data',	DIR, 'Directory data', &
	TRM, 'Terminal char',	LOK, 'Wildcard lookup',	rsv, 'reserved',      &
	CHE, 'Cache ctl',	CNV, 'Date => ascii',	rsv, 'reserved',      &
	rsv, 'reserved',	SWP, 'Swap+ files ctl',	JOB, 'Spawn a job',   &
	PPN, 'PPN lookup',	SYS, 'Job status',	KMC, 'Connect KMC',   &
	rsv, 'reserved',	STL, 'Stall system',	rsv, 'reserved',      &
	rsv, 'reserved',	rsv, 'reserved',	ONX,'Open next file', &
	CFG, 'Configure sys',	rsv, 'reserved',	rsv, 'reserved',      &
	rsv, 'reserved',	rsv, 'reserved',	rsv, 'reserved',      &
	xxx, ''								      &
									      &

									      &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
									      &

3999	!	p r o c e s s    c o m m a n d				      &
									      &


4800	!SET SYSTEM/EMT=						      &
	!SHOW SYSTEM/EMT						      &
									      &
	GOSUB 14000				!Load the data into arrays    &
\	SELECT U.CMDC%				!SELECT THE COMMAND AGAIN     &
\	CASE SYS.K%				!SET SYSTEM		      &
\	PRIV.NEED$ = "SWCTL"			!WE NEED SWCTL PRIV	      &
\	IF ASCII(SEG$(SYS(CHR$(6%)+CHR$(32%)+CHR$(1%)+ !IF WE DON'T HAVE      &
		STRING$(3%,0%)+PRIV.NEED$),3%,3%)) THEN !THE RIGHT PRIV	      &
		PRINT "?"+PRIV.NEED$ + " privilege required" !PRINT ERROR MSG &
\		SUBEXIT				! AND EXIT		      &
\	END IF								      &
									      &
\	CALL FET$CQ BY REF (LOG.Q%)		!/LOG specified?	      &
\	LOG% = ((U.PRES%=0%) OR (U.NO%=0%))	!Set flag accordingly	      &
\	CALL FET$CQ BY REF (EMT.Q%)		!Get /EMT again		      &
\	CALL FET$A BY REF			!Get the first argument	      &
\ ARG_LOOP:								      &
	Z$ = SEG$(U.STR$,1%,U.LEN%)		!Extract the argument	      &
\	Z$ = EDIT$(Z$,-2%)			!Strip off all junk	      &
\	GOTO DO_ALL IF Z$ = "ALL" OR Z$ = "NONE" !Special case ALL and NONE   &
\	ENA% = -1%				!Default to enable	      &
\	IF (LEN(Z$) = 5%) AND LEFT(Z$,2%) = "NO" !If it is "NOemt"	      &
	THEN	ENA% = 0%			!Set flag to disable	      &
\		Z$ = RIGHT(Z$,3%)		!Strip off "NO"		      &
\	END IF								      &
\	BIT.0% = 1%				!Default to a CALFIP function &
\	GOTO SET_IT IF FQFUN.Mnemonic$(I%) = Z$	!Continue if we have a match  &
		FOR I% = 0% TO MAXIMUM.FQFUN%	! Looping through all of them &
			UNLESS Z$ = "RSV"	!  Unless it's reserved	      &
\	BIT.0% = 0%				!It better be a UUO function  &
\	GOTO SET_IT IF UUO.Mnemonic$(I%) = Z$	!Continue if we have a match  &
		FOR I% = 1% TO 75%		! Looping through them all    &
			UNLESS Z$ = "RSV"	!  Unless it's reserved	      &
\	CALL DISPLY ("?Invalid EMT function")	!Print error		      &
\	SUBEXIT					! and go back		      &
									      &
\ SET_IT:								      &
	IF BIT.0% THEN				!If it's a CALFIP function    &
		C% = I% * 2%			! Calculate the offset	      &
	ELSE					!It's a UUO function	      &
		C% = I% - UUO.Zero.Offset%	! Calculate the offset	      &
\	END IF								      &
\	BIT.1% = 2%				!Flag that we want a change   &
\	BIT.2% = 4% IF ENA%			!Enable EMT logging if true   &
\	BIT.2% = 0% UNLESS ENA%			!Disable EMT logging if true  &
\	GOSUB 13000				!Go do it		      &
\	SUBEXIT IF DIS.OR.ENA% = -1%		!Exit if there was an error   &
\	GOTO END_LOOP				!Go get the next argument     &
									      &
\ DO_ALL:								      &
\	BIT.1% = 2%				!Flag that we want a change   &
\	BIT.2% = 4%				!Default to enabling ALL      &
\	BIT.2% = 0% IF Z$ = "NONE"		!Set to enabling NONE if true &
\	BIT.0% = 1%				!Start with CALFIP functions  &
\	FOR I% = 0% TO MAXIMUM.FQFUN%		! Looping through all of them &
\		Z$ = EDIT$(FQFUN.Mnemonic$(I%),-2%) ! Get the mnemonic	      &
\		IF Z$ <> "RSV" THEN		! If it's not reserved	      &
			C% = I% * 2%		! Calculate the offset	      &
\			GOSUB 13000		! Go do it		      &
\			SUBEXIT IF DIS.OR.ENA% = -1% ! Exit if error	      &
\		END IF							      &
\	NEXT I%								      &
\	BIT.0% = 0%				!Now for the UUO functions    &
\	FOR I% = 1% TO 75%			! Looping through all of them &
\		Z$ = EDIT$(UUO.Mnemonic$(I%),-2%) ! Get the mnemonic	      &
\		IF Z$ <> "RSV" THEN		! If it's not reserved	      &
			C% = I% - UUO.Zero.Offset% ! Calculate the offset     &
\			GOSUB 13000		!    Go do it		      &
\			SUBEXIT IF DIS.OR.ENA% = -1% ! Exit if error	      &
\		END IF							      &
\	NEXT I%								      &
									      &
\ END_LOOP:								      &
	CALL FET$A BY REF			!Get the next argument	      &
\	GOTO ARG_LOOP IF U.PRES%					      &
\	SUBEXIT					!That's all, go back	      &
									      &
\	CASE SHM.K%				!SHOW SYSTEM/EMT	      &
									      &
\	MAIN.HDR% = -1%				!Init display of main header  &
\	V$ = SYS(CHR$(6%)+CHR$(-21%)+CHR$(0%))	!Regain temp privs	      &
\	HDR$ = "CALFIP functions:"		!Set the header		      &
\	HDR% = -1%				!And the flag		      &
\	p% = 0%					!Init field position	      &
\	bit.0% = 1%				!Flag that it's CALFIP	      &
\	for i% = 0% to Maximum.FQFUN%		!For each CALFIP function     &
\		gosub 13100 unless (EDIT$(FQFUN.Mnemonic$(i%),-2%) = "RSV")   &
\		subexit if dis.or.ena% = -1%	! Exit if error		      &
\	next i%								      &
\	PRINT #OUT.CHN%							      &
\	HDR$ = "UUO functions:"			!Set the header		      &
\	HDR% = -1%				!And the flag		      &
\	p% = 0%					!Init field position	      &
\	bit.0% = 0%				!Flag that it's UUO	      &
\	for i% = 1% to 75%			!For each UUO function	      &
\		gosub 13100 unless (EDIT$(UUO.Mnemonic$(i%),-2%) = "RSV") or  &
				   (EDIT$(UUO.Mnemonic$(i%),-2%) = "")	      &
\		subexit if dis.or.ena% = -1%	! Exit if error		      &
\	next i%								      &
\	PRINT #OUT.CHN% if CCPOS(OUT.CHN%)				      &

5000	V$ = SYS(CHR$(6%)+CHR$(-7%))		! Re-enable CTRL/C trapping   &
\	V$ = SYS(CHR$(6%)+CHR$(-21%)+CHR$(255%))! Disable temp privs	      &
\	IF ANSI.TERM% THEN			! If ANSI		      &
		PRINT #OUT.CHN%, CHR$(155%)+"[r";	! Reset scrolling region &
\		PRINT #OUT.CHN%, CHR$(155%)+"[24;1H"; ! Go to bottom of screen &
\	END IF								      &

6000	END SELECT							      &
									      &
\	SUBEXIT								      &


13000	!								      &
	!	Subroutine to change the current logging setting of	      &
	!	the EMT function and to display a log message, if /LOG.	      &
	!								      &
	DIS.OR.ENA% = FNEMT.LOGGER%((BIT.0% OR BIT.1% OR BIT.2%),C%) !Do it   &
\	RETURN IF DIS.OR.ENA% = -1%		!Exit if error		      &
\	IF LOG% THEN				!If we are logging then	      &
		PRINT #OUT.CHN%, "EMT Logging for ";	! Print message header &
\		PRINT #OUT.CHN%, FQFUN.Mnemonic$(i%);" ";	!Print	      &
			EDIT$(FQFUN.Description$(i%),136%);" "; !description  &
				IF BIT.0%		!For CALFIP function  &
\		PRINT #OUT.CHN%, NUM1$(i%-UUO.Zero.Offset%);" ";UUO.Mnemonic$(i%);" "; &
			EDIT$(UUO.Description$(i%),136%);" ";	!Description  &
				UNLESS BIT.0%		!For UUO function     &
\		PRINT #OUT.CHN%, "enabled" IF DIS.OR.ENA% = 1% !Print "enabled" if true &
\		PRINT #OUT.CHN%, "disabled" IF DIS.OR.ENA% = 0% !Print "disabled" if true &
\	END IF								      &
\	RETURN								      &
									      &
									      &

13100	!								      &
	!	Subroutine to return the description and current	      &
	!	EMT logging status of a CALFIP or UUO function		      &
	!								      &
	if bit.0% then				!If it's a CALFIP function    &
		c% = i% * 2%			! Calculate the offset	      &
\		desc$ = num1$(i% * 2%)					      &
\		desc$ = space$(4%-len(desc$))+desc$+"   "+		      &
			FQFUN.Mnemonic$(i%)+"    "+			      &
			EDIT$(FQFUN.Description$(i%),136%)  !Get description  &
	else					!It's a UUO function	      &
		c% = i% - UUO.Zero.Offset%				      &
\		desc$ = num1$(i% - UUO.Zero.Offset%) !Get it		      &
\		desc$ = space$(4%-len(desc$))+desc$+"   "+		      &
			UUO.Mnemonic$(i%)+"    "+			      &
			EDIT$(UUO.Description$(i%),136%)		      &
\	end if								      &
\	bit.1%, bit.2% = 0%						      &
\	dis.or.ena% = FnEMT.Logger%(bit.0%,c%)				      &
\	return if dis.or.ena% = -1%		!Return if there's an error   &
\	if main.hdr% then			!If Main header needs displaying &
\		CHANGE SYS(CHR$(6%)+CHR$(16%)+CHR$(0%)+CHR$(255%)) TO FIRQB%  &
\		ANSI.TERM% = 0%			!Default to non-ANSI terminal &
\		ANSI.TERM% = -1% IF (FIRQB%(9%) = 255%)	!Set it to ANSI if XON &
				AND (FIRQB%(11%)= 255%)	! and SCOPE	      &
\		IF ANSI.TERM% THEN			!If ANSI so far	      &
			CHANGE SYS(CHR$(6%)+CHR$(16%)+CHR$(1%)+CHR$(255%))    &
				TO FIRQB%				      &
\			ANSI.TERM% = 0% UNLESS (FIRQB%(25%) AND 1%)= 1% !ANSI &
\		END IF							      &
\		IF ANSI.TERM% THEN			!If ANSI	      &
			PRINT #OUT.CHN%, CHR$(155%)+"[H"+CHR$(155%)+"[J"; !Clear screen &
\			PRINT #OUT.CHN%, CHR$(155%)+"[2;1H"+CHR$(13%); !Second line &
\		END IF							      &
\		PRINT #OUT.CHN%, "Code Mnemonic   Description     Status  "; !Print header &
			FOR I% = 1% TO 2%		!	   both halves &
\		PRINT #OUT.CHN%				!Bring the cursor back &
\		IF ANSI.TERM% THEN			!If really ANSI	      &
			V$ = SYS(CHR$(6%)+CHR$(-7%))	! Trap CTRL/C's	      &
\			PRINT #OUT.CHN%, CHR$(155%)+"[3r";	! Set scrolling region &
\			PRINT #OUT.CHN%, CHR$(155%)+"[3;1H"; ! Go to top of region &
\		END IF							      &
\		MAIN.HDR% = 0%			!Clear the flag		      &
\	END IF								      &
									      &
\	if hdr% then				!If we should print the header &
		PRINT #OUT.CHN%, hdr$		! then print it		      &
\		hdr% = 0%			! and clear the flag	      &
\	end if								      &
\	PRINT #OUT.CHN%, tab(p%*40%);desc$;tab((p%*40%)+31%);		      &
\	PRINT #OUT.CHN%, "Enabled"; if dis.or.ena% = 1%		!Is it enabled &
\	PRINT #OUT.CHN%, "Disabled"; if dis.or.ena% = 0%		! or disabled? &
\	if p% = 1% then							      &
		PRINT #OUT.CHN%						      &
\		p% = 0%							      &
	else								      &
		p% = p% + 1%						      &
\	end if								      &
\	return								      &
									      &


14000	!	Load Display-Function descriptions			      &
									      &
									      &
	return if Maximum.FQFUN%		! Do initialization only once &
									      &
\	I% = -1%							      &
\	until Maximum.FQFUN%						      &
\	  read Mnemonic$, Description$		! Load FQFUN descriptive      &
\	  if len(Description$) = 0% then	! captions from DATA	      &
	    Maximum.FQFUN% = I%						      &
	  else								      &
	    I% = I% + 1%						      &
\	    FQFUN.Mnemonic$(I%) = Mnemonic$				      &
\	    FQFUN.Description$(I%) = Description$
14010	  next								      &
									      &
									      &
\	I% = 1%								      &
\	while I%							      &
\	  read Mnemonic$, Description$					      &
\	  if Mnemonic$ = '000' then			! Load UUO descriptive &
	    UUO.Zero.Offset% = I%			! captions from DATA  &
	  else						! (remembering which  &
	    if len(Description$) = 0% then		! UUO corresponds to  &
	      I% = 0%					! zero)		      &
	    else							      &
	      UUO.Mnemonic$(I%) = Mnemonic$				      &
\	      UUO.Description$(I%) = Description$			      &
\	      I% = I% + 1%
14020	next								      &
									      &
\	return								      &


15000	!								      &
 	!	Function to the current EMT logging status		      &
 	!	of a CALFIP or UUO function				      &
 	!								      &
	Def* FnEMT.Logger%(mask%,func%)					      &
\	on error goto 15090						      &
\	firqb%(0%) = 5%							      &
\	firqb%(1%) = 6%							      &
\	firqb%(2%) =34%			!UU.CFG				      &
\	firqb%(3%) = 5%			!EMT logging control		      &
\	firqb%(4%) = mask%						      &
!	mask	Function bit mask:					      &
!		Bit 0: If set, CALFIP function, if clear, .UUO function	      &
!		Bit 1: If set, change value, if clear just read it	      &
!		Bit 2: If set, enable logging, if clear, disable logging      &
\	firqb%(5%) = func%						      &
!		Function code (.UUO or CALFIP subfunction) to effect	      &
\	change firqb% to firqb$						      &
\	change sys(firqb$) to firqb%					      &
\	FnEMT.Logger% = firqb%(7%)					      &
\	fnexit								      &

15090	PRINT "?No monitor support for EMT logging" if err = 66%	      &
\	goto 19000 if err = 28%			!Handle CTRL/C		      &
\	FnEMT.Logger% = -1%			!Set error value	      &
\	resume 15099							      &

15099	on error goto 19000 &			!Reset Error trap	      &
\	fnend								      &
									      &

									      &
									      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	RESUME 5000 IF ERR = 28%		!Continue If CTRL/C	      &
\	ON ERROR GO BACK			!Let the Root error	      &
						! handler handle it	      &
									      &


32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
