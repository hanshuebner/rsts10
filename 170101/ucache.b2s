1	SUB UCACHE							      &
\	ON ERROR GOTO 19000						      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   t i t l e				      &
	!								      &
	!	  subprogram : UCACHE					      &
	!	     version : V10.1					      &
	!	        edit : A					      &
	!	   edit date : 10-MAY-91				      &
	!	   author(s) : JJT,SEL					      &
	!								      &
	!******************************************************************** &
	!								      &
	!		  C O P Y R I G H T				      &
	!								      &
	!								      &
	!		      Copyright (C) 1984, 1991 by		      &
	!	Digital Equipment Corporation, Maynard, Mass.		      &
	!								      &
	!								      &
	! This software is furnished under a license and may be used and      &
	! copied  only  in accordance with the terms of such license and      &
	! with the  inclusion  of  the  above  copyright  notice.   This      &
	! software  or  any  other copies thereof may not be provided or      &
	! otherwise made available to any other person.  No title to and      &
	! ownership of the software is hereby transferred.		      &
	!								      &
	! The information in this software is subject to change  without      &
	! notice  and should not be construed as a commitment by Digital      &
	! Equipment Corporation.					      &
	!								      &
	! DIGITAL assumes no responsibility for the use  or  reliability      &
	! of its software on equipment that is not supplied by DIGITAL.	      &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   c a l l   f o r m a t		      &
	!								      &
	!	CALL UCACHE						      &
	!								      &
	!	Argument	I/O	Usage				      &
	!	========	===	=====				      &
	!								      &
	!******************************************************************** &
	!								      &
	!	m o d i f i c a t i o n   h i s t o r y   l o g		      &
	!								      &
	!								      &
	! VER/ED	EDIT DATE	REASON				      &
	!								      &
	! V10.0-01	13-Jul-89	(SEL) Print to OUT.CHN% (/OUTPUT)     &
	!								      &
	!******************************************************************** &
	!								      &
	!	s u b p r o g r a m   d e s c r i p t i o n		      &
	!								      &
	!								      &
	!******************************************************************** &
	!								      &
	!	v a r i a b l e s  /  a r r a y s   u s e d		      &
	!								      &
	!	name		description				      &
	!	====		===========				      &
	!								      &
	!******************************************************************** &

									      &

700	!	i n c l u d e   r e q u i r e d   M A P s , C O M M O N s     &
	!								      &
	!								      &
	%INCLUDE "CUI:CUICMN.B2S"		!include CUI data section     &
	%INCLUDE "SYSTEM:UTYKEY.B2S"		!include CUI common data      &

750	COMMON	(DSPCMN)	INDENT.COLUMN%				      &
									      &

									      &

910	DIM	FIRQB%(30%)			!SYScall array		      &

									      &
									      &

1000	!	m a i n   s u b p r o g r a m   l o g i c		      &
	!								      &
	!								      &
									      &

3999	!	p r o c e s s    c o m m a n d				      &
									      &

									      &

5800	!SET CACHE							      &
	!SET CACHE/DISABLE						      &
	!SHOW CACHE							      &
									      &
	IF U.CMDC% <> SCC.K% THEN		!IF NOT SHOW CACHE	      &
		PRIV.NEED$ = "TUNE"		!  WE NEED TUNE PRIV	      &
\		IF ASCII(SEG$(SYS(CHR$(6%)+CHR$(32%)+CHR$(1%)+ !IF DON'T HAVE &
			STRING$(3%,0%)+PRIV.NEED$),3%,3%)) THEN !RIGHT PRIV   &
			PRINT "?"+PRIV.NEED$+" privilege required" !SAY SO    &
\			SUBEXIT			! AND EXIT		      &
\		END IF							      &
\	END IF								      &
\	SELECT U.CMDC%				!SELECT THE COMMAND AGAIN     &
\	  CASE CAC.K%				!SET CACHE		      &
									      &
\	CALL FET$CQ BY REF (ALL.Q%)		!/ALL SPECIFIED?	      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		FIRQB%(11%) = 64%		!  CACHE ALL DATA TRANSFERS   &
\	END IF								      &
\	CALL FET$CQ BY REF (FIL.Q%)		!/[NO]FILE SPECIFIED?	      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		FIRQB%(11%) = 1% IF NOT U.NO%	!  /FILE-CACHE PER FILE BASIS &
\		FIRQB%(11%) = 128% IF U.NO%	!  /NOFILE-DISABLE ALL	      &
						!	   DATA CACHING	      &
\	END IF								      &
\	CALL FET$CQ BY REF (BUF.Q%)		!/[NO]BUFFERS SPECIFIED?      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		FIRQB%(12%) = 1% IF NOT U.NO%	!  /BUFFERS-USE SMALL BUFFERS &
\		FIRQB%(12%) = 128% IF U.NO%	!  /NOBUFFERS-DON'T USE BUFFS &
\	END IF								      &
\	CALL FET$CQ BY REF (CLU.Q%)		!/CLUSTERSIZE SPECIFIED?      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		CALL FET$A BY REF		!  GET THE ARGUMENT	      &
\		FIRQB%(4%) = U.LOW%		!  GET THE NUMBER	      &
\	END IF								      &
\	CALL FET$CQ BY REF (MAX.Q%)		!/MAXIMUM SPECIFIED?	      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		CALL FET$KA BY REF (UNL.K%)	!  =UNLIMITED?		      &
\		IF U.PRES% THEN			!  IF PRESENT		      &
			FIRQB%(5%), FIRQB%(6%) = -1% !SET UNLIMITED	      &
		ELSE							      &
			CALL FET$A BY REF	       !  GET THE ARGUMENT    &
\			Z$ = SEG$(U.STR$,1%,U.LEN%)    !  EXTRACT THE ARGUMENT &
\			FIRQB%(5%) = FNF.TO.I%(VAL(Z$))!  STORE THE MAXIMUM   &
\			FIRQB%(6%) = SWAP%(FIRQB%(5%)) !  HIGH BYTE OF MAXIMUM &
\		END IF							      &
\	END IF								      &
\	CALL FET$CQ BY REF (DIR.Q%)		!/DIRECTORY_MAXIMUM SPECIFIED? &
\	IF U.PRES% THEN				!IF PRESENT		      &
		CALL FET$KA BY REF (UNL.K%)	!  =UNLIMITED?		      &
\		IF U.PRES% THEN			!  IF PRESENT		      &
			FIRQB%(7%), FIRQB%(8%) = -1% !SET UNLIMITED	      &
		ELSE							      &
			CALL FET$A BY REF	!  GET THE ARGUMENT	      &
\			Z$ = SEG$(U.STR$,1%,U.LEN%)    !  EXTRACT THE ARGUMENT &
\			FIRQB%(7%) = FNF.TO.I%(VAL(Z$))!STORE THE DIR LIMIT   &
\			FIRQB%(8%) = SWAP%(FIRQB%(7%)) !  HIGH BYTE OF LIMIT  &
\		END IF							      &
\	END IF								      &
\	CALL FET$CQ BY REF (DAT.Q%)		!/DATA_MAXIMUM SPECIFIED?     &
\	IF U.PRES% THEN				!IF PRESENT		      &
		CALL FET$KA BY REF (UNL.K%)	!  =UNLIMITED?		      &
\		IF U.PRES% THEN			!  IF PRESENT		      &
			FIRQB%(9%), FIRQB%(10%) = -1% !SET UNLIMITED	      &
		ELSE							      &
			CALL FET$A BY REF	!  GET THE ARGUMENT	      &
\			Z$ = SEG$(U.STR$,1%,U.LEN%)    !  EXTRACT THE ARGUMENT &
\			FIRQB%(9%) = FNF.TO.I%(VAL(Z$))!STORE THE DATA LIMIT  &
\			FIRQB%(10%) = SWAP%(FIRQB%(9%))!  HIGH BYTE OF LIMIT  &
\		END IF							      &
\	END IF								      &
\	CALL FET$CQ BY REF (KEP.Q%)		!/KEEP SPECIFIED?	      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		CALL FET$A BY REF		!  GET THE ARGUMENT	      &
\		FIRQB%(13%) = U.LOW% AND 255%	!  GET THE FIRST HALF	      &
\		FIRQB%(14%) = SWAP%(U.LOW%) AND 255%!GET THE SECOND HALF      &
\	END IF								      &
\	FIRQB%(3%) = 0%				!ENABLE DIR/DATA CACHING CODE &
\	CALL FET$CQ BY REF (ENA.Q%)		!/ENABLE SPECIFIED?	      &
\	IF U.PRES% THEN				!IF PRESENT		      &
		FIRQB%(3%) = 0%			!  ENABLE DIR/DATA CACHING    &
\	END IF								      &
									      &
\	  CASE DCC.K%				!SET CACHE/DISABLE	      &
									      &
\	FIRQB%(3%) = 1%				!DISABLE ALL CACHING CODE     &
									      &
\	  CASE SCC.K%				!SHOW CACHE		      &
									      &
\	FIRQB%(3%) = 128%			!RETURN CACHE SETTINGS CODE   &
									      &
\	END SELECT							      &
\	FIRQB%(0%) = 30%			!30 BYTES		      &
\	FIRQB%(1%) = 6%				!SYS CALL TO FIP	      &
\	FIRQB%(2%) = 19%			!SUBFUNCTION CODE	      &
\	CHANGE FIRQB% TO FIRQB$			!CHANGE THE ARRAY TO A STRING &
\	FIRQB$ = SYS(FIRQB$)			!DO THE SYSCALL		      &
\	SUBEXIT UNLESS U.CMDC% = SCC.K% 	!EXIT UNLESS IT IS SHOW CACHE &
\	CHANGE FIRQB$ TO FIRQB%			!CHANGE THE STRING TO ARRAY   &
\	M$="disabled"							      &
\	M$="enabled for Directories" IF FIRQB%(3%) AND 1%		      &
\	PRINT #OUT.CHN%,						      &
\	PRINT #OUT.CHN%, "Caching configuration"			      &
\	PRINT #OUT.CHN%, "---------------------"			      &
\	PRINT #OUT.CHN%, "   Caching ";M$;				      &
\	PRINT #OUT.CHN%, " and Data"; IF (FIRQB%(3%) AND 129%)=129%	      &
\	PRINT #OUT.CHN%,						      &
\	PRINT #OUT.CHN%, "   Cache Keep timer = ";			      &
		NUM1$(FNI.TO.F(FIRQB%(13%)+SWAP%(FIRQB%(14%))));" seconds"    &
\	c.l=1%								      &
\	c.l=FIRQB%(4%) IF FIRQB%(3%) AND 128%				      &
\	PRINT #OUT.CHN%, "   Cluster size = ";NUM1$(c.l)		      &
\	M$="File selectable"						      &
\	M$="All data" IF FIRQB%(11%) AND 64%				      &
\	M$="Disabled" IF FIRQB%(11%) AND 128%				      &
\	PRINT #OUT.CHN%, "   Data caching = ";M$ IF FIRQB%(3%) AND 128%	      &
\	PRINT #OUT.CHN%,						      &
\	PRINT #OUT.CHN%, "XBUF usage (in K-words)"			      &
\	PRINT #OUT.CHN%, "-----------------------"			      &
\	PRINT #OUT.CHN%, "   Total cache:"; TAB(25%);			      &
\	PRINT #OUT.CHN% USING "####.##",				      &
		FNI.TO.F(FIRQB%(17%)+SWAP%(FIRQB%(18%)))*(c.l/4%);	      &
\	PRINT #OUT.CHN%, " (maximum clusters allowed: ";		      &
\	VAL.UE = FNI.TO.F(FIRQB%(5%)+SWAP%(FIRQB%(6%)))			      &
\	PRINT #OUT.CHN%, "Unlimited"; IF VAL.UE = 65535.	!PRINT UNLIMITED IF SO &
\	PRINT #OUT.CHN%, NUM1$(VAL.UE); IF VAL.UE <> 65535.	!PRINT ACTUAL NUMBER &
\	PRINT #OUT.CHN%, ")"						      &
\	PRINT #OUT.CHN%, "   Directory cache:"; TAB(25%);		      &
\	PRINT #OUT.CHN% USING "####.##",				      &
		FNI.TO.F(FIRQB%(19%)+SWAP%(FIRQB%(20%)))*(c.l/4%);	      &
\	PRINT #OUT.CHN%, " (maximum clusters allowed: ";		      &
\	VAL.UE = FNI.TO.F(FIRQB%(7%)+SWAP%(FIRQB%(8%)))			      &
\	PRINT #OUT.CHN%, "Unlimited"; IF VAL.UE = 65535.	!PRINT UNLIMITED IF SO &
\	PRINT #OUT.CHN%, NUM1$(VAL.UE); IF VAL.UE <> 65535.	!PRINT ACTUAL NUMBER &
\	PRINT #OUT.CHN%, ")"						      &
\	PRINT #OUT.CHN%, "   Data cache:"; TAB(25%);			      &
\	PRINT #OUT.CHN% USING "####.##",				      &
		FNI.TO.F(FIRQB%(21%)+SWAP%(FIRQB%(22%)))*(c.l/4%);	      &
\	PRINT #OUT.CHN%, " (maximum clusters allowed: ";		      &
\	VAL.UE = FNI.TO.F(FIRQB%(9%)+SWAP%(FIRQB%(10%)))		      &
\	PRINT #OUT.CHN%, "Unlimited"; IF VAL.UE = 65535.	!PRINT UNLIMITED IF SO &
\	PRINT #OUT.CHN%, NUM1$(VAL.UE); IF VAL.UE <> 65535.	!PRINT ACTUAL NUMBER &
\	PRINT #OUT.CHN%, ")"						      &
\	IF FIRQB%(23%)+FIRQB%(24%) THEN					      &
		PRINT #OUT.CHN%, "   Pending replacement:"; TAB(25%);	      &
\		PRINT #OUT.CHN% USING "####.##",			      &
			FNI.TO.F(FIRQB%(23%)+SWAP%(FIRQB%(24%)))*(c.l/4%)     &
\	END IF								      &
\	CHANGE SYS(CHR$(6%)+CHR$(-12%)) TO FIRQB%			      &
\	P%=FIRQB%(15%)+SWAP%(FIRQB%(16%))	! GET RTS POINTER	      &
\	V$ = SYS(CHR$(6%)+CHR$(-21%)+CHR$(0%))	! REGAIN TEMPORARY PRIVILEGES &
\	FIRQB%(I%)=PEEK(P%+I%) FOR I%=4% TO 18% STEP 2%			      &
\	V$ = SYS(CHR$(6%)+CHR$(-21%)+CHR$(255%))! DROP TEMPORARY PRIVILEGES   &
\	PRINT #OUT.CHN%, "   ASSIGN/SYSTEM tables:"; TAB(25%);		      &
\	PRINT #OUT.CHN% USING "  ##.##",(FNI.TO.F(FIRQB%(4%))*64.)/1024.      &
\	PRINT #OUT.CHN%, "   LOAD/OVERLAY tables:"; TAB(25%);		      &
\	PRINT #OUT.CHN% USING " ###.##",FNI.TO.F(FIRQB%(12%))/2048.	      &
\	PRINT #OUT.CHN%, "   LOAD/INDEX tables:"; TAB(25%);		      &
\	PRINT #OUT.CHN% USING "  ##.##",FNI.TO.F(FIRQB%(14%))/2048.	      &
\	PRINT #OUT.CHN%, "   DCL Buffers:"; TAB(25%);			      &
\	PRINT #OUT.CHN% USING "  ##.##",(FNI.TO.F(FIRQB%(6%))*288.)/1024.     &
\	PRINT #OUT.CHN%, "   Quota tables:"; TAB(25%);			      &
\	PRINT #OUT.CHN% USING "  ##.##",(FNI.TO.F(FIRQB%(8%))*64.)/1024.;     &
\	PRINT #OUT.CHN%, " (small buffers in use: "; NUM1$(FIRQB%(10%)*2); ")" &
\	PRINT #OUT.CHN%, "   Window turn blocks:"; TAB(25%);		      &
\	PRINT #OUT.CHN% USING "  ##.##",(FIN.TO.F(FIRQB%(16%))*288.)/1024.;   &
\	PRINT #OUT.CHN%, " (maximum blocks used: "; NUM1$(FIRQB%(18%)); ")"   &
\	PRINT #OUT.CHN%,						      &
\	SUBEXIT								      &

16000	DEF FNF.TO.I%(F) = F+65536.*(F>32767. AND F<65536.)		      &
		! PACK A FLOATING NUMBER IN THE RANGE 0-65535		      &
		! INTO AN UNSIGNED INTEGER FORMAT.			      &
		! AN ERROR WILL OCCUR IF THE FLOATING NUMBER IS OUT OF RANGE. &

16100	DEF FNI.TO.F(I%) = 32768.+(I% EQV 32767%)			      &
		! CONVERT A NUMBER FROM UNSIGNED INTEGER FORMAT		      &
		! TO A FLOATING NUMBER IN THE RANGE 0-65535.		      &
									      &

									      &
									      &
									      &
									      &
									      &

19000	!	s t a n d a r d   e r r o r   h a n d l i n g		      &
	!								      &
	!								      &
	ON ERROR GO BACK			!Let the Root error	      &
						! handler handle it	      &

									      &

32767	!	e n d   o f   s u b p r o g r a m			      &
	!								      &
	!								      &
	SUBEND
