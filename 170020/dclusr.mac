.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.LIBRARY	/DCL:DCLMAC.MLB/
.NLIST
.INCLUDE	/DCL:DCLPFX.MAC/
.LIST
TITLE	DCLUSR,<DCL RSTS/E User Commands>,0C,19-JUL-91,CEK/JFM/GMB/BGN

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR DCLUSR
;+
;  001	JFM  05-DEC-82	Created from DCLCMD
;  002	JFM  23-SEP-83	Changed HELP command to use our RTS name with help file
;  003	JFM  08-MAY-84	Added SHOW [DAY]TIME, HELP --> DCL.HLP again
;  004	JFM  30-JUL-84	Removed SET PASSWORD command (ACTMGR command)
;  005  GMB  04-Dec-84	Added Stardates to SHOW TIME
;  006	JFM  15-Mar-85	Removed extraneous .MCALLs
;  007  GMB  22-Feb-87	Added support for $PROMPT and $LOGFILE_PROMPT
;  008  JJT  12-Apr-87  Change ABVLEN and NAMLEN to NAMABB and NAMLNG
;
;			[RSTS V9.5]
;  010	JFM  11-Jun-87	Added BASIC, RUN, EOD, (NFT) PRINT to get rid of
;			DCLQUE and DCLPRG files.
;  011  BGN  21-Sep-87  Add $WAIT command (disabled for V9.5)
;  012	BGN  22-Sep-87	Remove BASIC command, move it to DCLAUX
;
;			[RSTS V9.6]
;  013  BGN   5-Jan-87  Enable $WAIT command
;
;			[RSTS/E V9.7]
;  014	JFM  20-Sep-88	Don't globalize U.STR or U.LEN
;
;			[RSTS/E V10.0]
;  015	BTB  30-May-90	Add /[NO]OUTPUT to SHOW NETWORK command
;
;			[RSTS/E V10.1]
;  016	JFM  12-Jul-91	Change variable name
;-

	.PSECT	DCLUSR,RO,REL,CON
	DEFORG	DCLUSR

	$CUI	TABLE			;Include macros for CUI tables
	$CUI	MSG			;Include macros for message facility

.MCALL	PUTCCL,PUTSPA,PUTSTR,$FAP,SETTYP,PUTRFIL,$BIC

.SBTTL	ATTACH Command					;=ATTACH

ATT.CMD::$THR
	$DEFCMD
	$PARM	PARM1,U$U8,MINVAL=1,MAXVAL=63,PROMPT=JOBN$P
	$ENDCMD

	PUTCCL	...ATT	
	PUTSPA
	$FETP	PARM1
	PUTSTR
	$ENDTHR

GLOBAL	<...ATT>

.SBTTL BYE Command					;=BYE

; Qualifier list

BYE.QL:	DEFQUAL	Y.Q,CONF=F.Q
	DEFQUAL	F.Q,CONF=Y.Q
	ENDQUAL

BYE.CMD::$THR
	$DEFCMD	QUAL=BYE.QL
	DFLTCQ	Y.Q			;Default to /Y.
	$ENDCMD

	PUTCCL	...BYE		;"BYE"
	$FETCQ	Y.Q		;Is it /Y?
	$IF	PRESENT		;If so then
	PUTSTR	"/Y"		;  "/Y"
	$ELSE			;Else /F.
	PUTSTR	"/F"		;  "/F"
	$ENDIF
	$ENDTHR

GLOBAL	<...BYE>

.SBTTL	CCL Prefix					;=CCL

CCL.CMD::$THR
	$DEFCMD
	$PARM	PARM1,U$REST,PROMPT=CCL$P
	$ENDCMD
	$FETP	PARM1			;Fetch rest of command line
	$DO				;
	MOV	U.POS(R4),LX.ERP	;The error position is here if CCL fails
	$ENDDO				;
	PUTSTR				;Put it into TRNBUF
	SETTYP	CCLTYP			;Try this as CCL
	$ENDTHR

GLOBAL	<LX.ERP>

.SBTTL EOD Command

; This command is a no-op.

EOD.CMD::$THR
	$DEFCMD
	$BIC	STSUPD!SEVCHK,ICFFLG	; Don't change $status or check
					; severity level.
	$ENDCMD
	$ENDTHR

GLOBAL	<ICFFLG>

.SBTTL HELP Command					;=HELP

HEL.QL:	DEFQUAL	PROM.Q,QF.NEG		;/[NO]PROMPT
	DEFQUAL	OUT.Q,ARG=REQ		;/OUTPUT=filespec
	 DEFARG	TYPE=LF.N		; = filespec
	 ENDARG
	ENDQUAL

HEL.CMD::$THR
	$DEFCMD	QUAL=HEL.QL
	$PARM	PARM1,U$REST,PF.OPT
	DFLTCQ	PROM.Q			;Default to /PROMPT
	$ENDCMD

	PUTCCL	...HEL		;"HELP"
	$FETCQ	PROM.Q		;Did he specify /[NO]PROMPT?
	$IF	YES		;If /PROMPT
	PUTSTR	"/PR"		;  "/PR"
	$ENDIF			;Endif
	
	$FETCQ	OUT.Q		;Did he specify /OUTPUT=filespec?
	$IF	PRESENT		;If so then
	$FETA			;  Fetch filespec
	PUTSTR	"/OU:"		;  "/OU:"
	PUTSTR			;  "filespec"
	$ENDIF			;Endif

	PUTSPA			;

	$FETP	PARM1
	$IF	PRESENT
	PUTSTR			;topic ...
	$ENDIF
	$ENDTHR

GLOBAL	<...HEL>

.SBTTL LOGOUT Command					;=LOGOUT

; Qualifier list

LOG.QL:	DEFQUAL	BRI.Q,CONF=FUL.Q;	/BRIEF 
	DEFQUAL	FUL.Q,CONF=BRI.Q;	/FULL 
	ENDQUAL

LOG.CMD::$THR
	$DEFCMD	QUAL=LOG.QL
	DFLTCQ	FUL.Q		;Default to /FULL.
	$ENDCMD

	PUTCCL	...BYE		;"BYE"
	$FETCQ	BRI.Q		;Is it /BRIEF?
	$IF	PRESENT		;If so then
	PUTSTR	"/F"		;  "/F"
	$ELSE			;Else
	PUTSTR	"/Y"		;  "/Y"
	$ENDIF
	$ENDTHR

GLOBAL	<...BYE>

.SBTTL	PRINT Command (NFT)				;=PRINT

PRI.CMD::$THR

; Determine if this is a network or local PRINT command

	$DO
	PUSH	LX.POS
	CALBX	LX.LOC <#5$>
	TMPORG	TEXT
5$:	 .ASCIZ "::"
	UNORG
	IFCS
	MOV	#-1,R0
	ENDIF
	POP	LX.POS
	$ENDDO
	$IF	ABSENT			;If this is a LOCAL print
	$GOTO	SPL.CMD		
	$ENDIF

	$DEFCMD	
	$PARM	PARM1,RF.N.W,PROMPT=FILS$P,OCCURS=11.
	$ENDCMD

	PUTCCL	...NFT			;  "NFT"
	PUTSTR	""<SPACE>"PR"<SPACE>"="	;  "PR ="  (print it locally)
	$FETP	PARM1			;  Fetch the first input filespec.
	PUTRFIL				;  "filespec"
10$:	$FETNP				;  Fetch the next one.
	$IF	PRESENT			;  If present then
	PUTSTR	""<COMMA>		;    ","
	PUTRFIL	NODE=NO			;    "filespec" with no NODE::
	$GOTO	10$			;    ...
	$ENDIF				;
	$ENDTHR				;

GLOBAL	<...NFT>
GLOBAL	<NETPOS,U.INET,LX.POS,VALUE,U.CMN,SPL.CMD>

.SBTTL RUN Command					;=RUN

RUN.CMD::$THR
	$DEFCMD	
	$PARM	PARM1,LF.N,PROMPT=PROG$P
	$ENDCMD
	$FETP	PARM1
	$DO				;
	MOV	U.POS(R4),LX.ERP	;Point to program name in case there
	$ENDDO				;is any error.
	PUTSTR
	SETTYP	RUNTYP			;Set up to run this program.
	$ENDTHR

GLOBAL	<LX.ERP>

.SBTTL SET HOST Command					;=SET HOST

SEHO.CMD::$THR
	$DEFCMD 
	$PARM	PARM1,U$NODE,PF.COL,PROMPT=NODE$P
	$ENDCMD
	PUTCCL	...NET
	PUTSPA
	$FETP	PARM1
	PUTSTR
	PUTSTR	"::"
	$ENDTHR

GLOBAL	<...NET>

.SBTTL	SET PROMPT command				;=SET PROMPT

PRO.QL:	DEFQUAL	LOGF.Q			;/LOGFILE_PROMPT="prompt"
	ENDQUAL

PRO.CMD::$THR
	$DEFCMD	QUAL=PRO.QL
	$PARM	PARM1,U$REST,FLAGS=PF.OPT
	$ENDCMD
	
.MACRO	SETPMT	PMTPOS
	.WORD	SETPMT,PMTPOS
	.ENDM	SETPMT

	$FETCQ	LOGF.Q			;Fetch /LOGFILE_PROMPT
	$IF	PRESENT			;If is was specified then
	$FETP	PARM1			;  Fetch the paramter
	SETPMT	LFPROMPT		;  Set prompt if specified else change
					;  back to default ("$.")
	$ELSE				;Else
	$FETP	PARM1			;  Fetch the paramter
	SETPMT	PROMPT			;  Set it if there else change back 
					;  to default ("$ ")
	$ENDIF				;Endif
	$ENDTHR				;

.ENABL	LSB

SETPMT:	TST	U.CMN+U.PRES		;Is prompt text present?
	IFNZ				;If so then
	MOV	U.CMN+U.POS,LX.POS	;  Reset scan position
	PUSH	R3			;  Preserve R3 across call
	CALLX	DOEXPR			;  Evaluate expression
	POP	R3			;  Restore R3
	BCS	20$			;  Quit if errors
	CALLX	LX.EOS			;  Are we at end-of-line
	BCS	20$			;  No, so error
	CALLX	NM2STR			;  Convert value to string if necessary
					;  ... R1 -> string
					;  ... R2 =  string length
	TST	R2			;  Is it a null string?
	BEQ	10$			;  Yes, go set default
	ELSE				;Else
10$:	MOV	#DOL$P,R1		;  Guess and point to default prompt
	CMP	(R3),#PROMPT		;  Are we changing regular prompt?
	IFNE				;  If not then
	MOV	#DOL.$P,R1		;    Point default logfile prompt
	ENDIF				;  Endif
	MOVB	(R1)+,R2		;  Get prompt length
	ENDIF				;Endif
	CLRB	NAMABB			;No abbreviation point		;008
	MOV	(R3)+,R4		;Get pointer to symbol to set
	MOVB	S.NAME(R4),NAMLNG	;Get name length from symbol entry;008
	ADD	#S.NAME+1,R4		;Point to name within symbol
	MOV	R4,NAMADR		;Set name address
	MOV	#GCA,SCOPE		;Set scope to global
	MOV	R1,VALADR		;Set pointer to string value
	MOVB	R2,VALLNG		;Set string length
	MOVB	#STRTYP,TYPE		;Set symbol type to string
	CALLX	ADDSYM			;Change the prompt symbol (may return
					;... errors)
20$:	RETURN				;Return with possible errors

.DSABL	LSB

GLOBAL	<U.CMN,LX.POS,GCA,DOL$P,DOL.$P>
GLOBAL	<NAMABB,NAMLNG,NAMADR,SCOPE,VALADR,VALLNG,TYPE>
GLOBAL	<PROMPT,LFPROMPT,NEWENT>

.SBTTL SHOW [DAY]TIME Command				;=SHOW DAYTIME
							;=SHOW TIME

SDT.CMD::$THR
	$DEFCMD 
	$ENDCMD

	$DO
	CALLX	DOTIME			;Get time returned in R1,R2 as 
					;address and length of date/time string
	CMPB	2(R1),#'-		;Is third char a "-"?
	BEQ	5$			;Yes, display date
	CMPB	2(R1),#'.		;No, Is third char a "."?
	BEQ	5$			;Yes, display date
	$FAP	<"!~IStardate!AD"<CR><LF>> <R2,R1>
					;No, Must be a stardate.
	BR	10$			;Go force it out

5$:	$FAP	<"!~I  !AD"<CR><LF>> <R2,R1>;Print it out
10$:	CALLX	U$FORCE			;Force it out
	$ENDDO
	$ENDTHR


.SBTTL SHOW NETWORK Command				;=SHOW NETWORK

SHNE.QL:DEFQUAL	OUT.Q,ARG=OPT,QF.NEG	;/[NO]OUTPUT=file		;015
	 DEFARG	TYPE=LF.N		;				;015
	 ENDARG				;				;015
	ENDQUAL								;015

SHNE.CMD::$THR
	$DEFCMD QUAL=SHNE.QL						;015
	$ENDCMD
	PUTCCL	...NCP		;"NCP SHO ACT NOD"
	PUTSTR	""<SPACE>"SHO"<SPACE>"ACT"<SPACE>"NOD"
	$FETCQ	OUT.Q		;Was /OUTPUT specified?			;015
	$IF	PRESENT		;If so then				;015
	$IF	YES		; If /OUTPUT				;015
	$FETA			;  Fetch the filespec			;015
	$IF	PRESENT		;  If there is one			;015
	PUTSTR	""<SPACE>"TO"<SPACE>""	;   " TO "			;015
	PUTSTR			;   "file"				;015
	$ENDIF			;  Endif				;015
	$ELSE			; If /NOOUTPUT				;015
	PUTSTR	""<SPACE>"TO"<SPACE>"NL:";  send to null device		;015
	$ENDIF			; Endif					;015
	$ENDIF			;Endif					;015
	$ENDTHR

GLOBAL	<...NCP>

.SBTTL WAIT Command					;=WAIT

WAI.CMD::$THR								;011
	$DEFCMD								;011
	$PARM	PARM1,TYPE=U$REST,FLAGS=PF.OPT				;011
	$ENDCMD								;011
	$FETP	PARM1							;011
	$DO				;Leave threaded code		;011
	MOV	U.POS(R4),LX.ERP	;Point to delta-time for errors	;011
	MOV	#1,-(SP)		;Number of Passes-1		;011
	MOV	#1,XRB+XRLEN		;Setup for the sleep		;011
10$:	MOV	#WAIDEL,R0		;Point at the delimiters	;011
	MOV	#WAITBL,R1		;Point at the wait table	;011
	MOV	#U.CMN+U.STR,R2		;Point at the delta-time	;011
	MOV	U.CMN+U.LEN,R4		;The length			;011
NXTFLD:	CLR	R5			;Final value for current field	;011
20$:	DEC	R4			;Fix the length remaining	;011
	BLT	30$			;We read too much, exit		;011
	MOVB	(R2)+,R3		;Get the character		;011
	CMPB	R3,(R0)			;Is it a correct delimiter?	;011
	BEQ	30$			;Yes, we are done		;011
	SUB	#'0,R3			;From ascii to raw number	;011
	BLT	50$			;Less than zero is invalid	;011
	CMPB	R3,#9.			;Too large?			;011
	BGT	50$			;Yes, exit with error		;011
	MUL	#10.,R5			;Multiply by 10 		;011
	BMI	50$			;Results are invalid, error	;011
	ADD	R3,R5			;Add in the value		;011
	BR	20$			;Try for more characters	;011

30$:	INC	R0			;Pop off the delimiter		;011
	TST	(R1)+			;Get number of seconds		;011
	BLT	60$			;No more waiting for us		;011
	CMP	R5,(R1)+		;Is the value ok?		;011
	BGT	50$			;No, so exit with error		;011
	TST	(SP)			;Is this the exeucute pass	;011
	BNE	NXTFLD			;No, this is just the parse	;011
	TST	R5			;Do we need to wait?		;011
	BEQ	NXTFLD			;No, try next field		;011
35$:	MOV	-4(R1),R3		;Setup R3 with seconds to wait	;011
	BEQ	65$			;None, time to exit		;011
40$:	.SLEEP				;Go to sleep			;011
	BITB	#CCHIT!LASTCC,DCLFLG	;Was a control/C hit?		;016
	BNE	65$			;Yes, Exit without error	;011
	SOB	R3,40$			;Sleep, one sleep/second	;011
	SOB	R5,35$			;And some more			;011
	BR	NXTFLD			;Continue			;011

50$:	MOV	#U.ITIM,R0		;Standard Error Message		;011
	BR	70$			;And exit			;011

60$:	DEC	(SP)			;One Last Pass			;011
	BEQ	10$			;And This is it!		;011
65$:	CLR	R0			;Indicate no error and exit	;011
	CLR	LX.ERP			;Clear out the error position	;011
70$:	TST	(SP)+			;Fix up the stack		;011
WAIEXT:	$ENDDO								;011
	$ENDTHR								;011

WAITBL:	;       seconds	, max value
	.EVEN
	.WORD	3600.	,23.		;Hours				;011
	.WORD	60.	,59.		;Minutes			;011
	.WORD	1.	,59.		;Seconds			;011
	.WORD	0	,99.		;Hundreds of of a second	;011
	.WORD	-1.			;End				;011

WAIDEL:	.ASCIZ	/::./			;Delimiters			;011
	.EVEN								;011

GLOBAL	<U.ICMD,LX.ERP,U.ITIM,DCLFLG>
.END
