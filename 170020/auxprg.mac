.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.LIBRARY	/DCL:DCLMAC.MLB/
.NLIST
.INCLUDE	/DCL:AUXPFX.MAC/
.LIST
TITLE	AUXPRG,<DCL Program Development Commands>,0A,10-MAY-91,CEK/JFM/GMB/BGN/BTK/BTB

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR AUXPRG
;+
;  001	JFM  05-DEC-82	Created from DCLCMD
;  002	JFM  31-Jan-83	Added DIBOL/OPTIMIZE switch
;  003	JFM  07-Mar-83	Changed ..BASD comment, patch to BPL.Q, not BAS.Q
;  004	JFM  30-Mar-83	In DIBOL, /OPTIMIZE conflicts with /DEBUG.
;  005	JFM  03-Dec-83	Made LINK not expand output filespecs.
;  006	JFM  18-Jan-84	Changed BASIC/BPLUS to RUN $BASIC2.TSK (patchable)
;  007  GMB  22-May-85	Copied DCL:DCLPRG.MAC to DCL:AUXPRG.MAC and
;			removed the BASIC and RUN commands (these are
;			still done in DCL).
;  008  GMB  11-Mar-86	Added /CONDITIONALS to COBOL command
;  009  GMB  04-Nov-86  Added check for .CMD file type for LINK/DESCRIPTION
;
;			[V9.4]
;  010	GMB  06-Jan-87	Made /EXTEND_SOURCE require /FOR rather than /F77
;  011  GMB  21-Feb-87  Added /STANDARD to DIBOL command
;  012  JFM  23-Feb-87	Added /[NO]I_D_SPACE qualifier to LINK command
;  013  JFM  02-Mar-87	Changed /I_D_SPACE to /CODE=[NO]I_D_SPACE in LINK
;
;			[V9.7]
;  014	BGN  22-Sep-87	Moved BASIC command from DCLUSR to here
;  015	JFM  14-Sep-88	Changed references from DCLPRG to AUXPRG
;  016	BTK  19-Jan-89	Added RMS Supervisor Mode to LINK command
;  017	BTB  12-May-89	Added /STANDARD qualifier to COBOL command
;
;			[V10.0]
;  017	BTB  13-Oct-89	Fixed DIBOL to allow /OPTIMIZE and /DEBUG together
;  018	BTB  02-Nov-89	Added /CC and /STACK for LINK command
;  019	BTB  24-May-90	Moved BASIC command back to DCL
;-

	.PSECT	AUXPRG,RO,REL,CON
	DEFORG	AUXPRG

	$CUI	TABLE			;Include macros for CUI tables

.MCALL	PUTCCL,PUTSPA,PUTSTR,PUTFIL,PUTDEV,PUTTIME,$MOV
.MCALL	LOOKUP,SETTYP,CRETNT

.SBTTL COBOL Command

; Qualifier list

COB.QL:	DEFQUAL	ANS.Q,QF.NEG			;	/[NO]ANSI_FORMAT
	DEFQUAL	CHE.Q,QF.NEG!QF.ALIS,ARG=OPT	; 	/[NO]CHECK(=keyword,...)
	 DEFARG PER.K,FLAGS=AF.NEG		;	 =[NO]PERFORM
	 DEFARG	BOU.K,FLAGS=AF.NEG		;	 =[NO]BOUNDS
	 ENDARG					;
	DEFQUAL	CODE.Q,ARG=REQ			;	/CODE=[NO]CIS
	 DEFARG	CIS.K,FLAGS=AF.NEG		;	 =[NO]CIS
	 ENDARG					;
	DEFQUAL	CON.Q,QF.NEG!QF.ALIS,ARG=OPT	;	/[NO]CONDITIONALS(=let,...)
	 DEFARG	TYPE=U$LBL			;gmb // fix this //
 	 ENDARG
	DEFQUAL	CRO.Q,QF.NEG,REQUIRE=LIS.Q	;	/[NO]CROSS_REFERENCE
	DEFQUAL	C81.Q				;	/C81
	DEFQUAL DEB.Q,QF.NEG			;	/[NO]DEBUG
	DEFQUAL	DIAG.Q,QF.NEG,ARG=OPT		;	/[NO]DIAGNOSTICS[=filespec]
	 DEFARG	TYPE=LF.N			;	 [=filespec]
	 ENDARG					;
	DEFQUAL	LIS.Q,QF.NEG,ARG=OPT		;	/[NO]LIST[=filespec]
	 DEFARG	TYPE=LF.N			;	 [=filespec]
	 ENDARG					;
	DEFQUAL	MAP.Q,QF.NEG,REQUIRE=LIS.Q,CONF=SHOW.Q;	/[NO]MAP
	DEFQUAL	NAMS.Q,ARG=REQ			;	/NAMES=aa
	 DEFARG	TYPE=U$SYM
	 ENDARG
	DEFQUAL	OBJ.Q,QF.NEG,ARG=OPT		;	/[NO]OBJECT[=filespec]
	 DEFARG	TYPE=LF.N			;	 [=filespec]
	 ENDARG					;
	DEFQUAL	SHOW.Q,QF.NEG,REQUIRE=LIS.Q,CONF=MAP.Q,ARG=OPT
						;	/[NO]SHOW[=keyword]
	 DEFARG	MAP.K,FLAGS=AF.NEG		;	 =[NO]MAP
	 ENDARG					;
	DEFQUAL	STA.Q,ARG=REQ			;	/STANDARD=keyword  ;017
	 DEFARG	S85.K				;	 =85		;017
	 DEFARG	V2.K				;	 =V2		;017
	 ENDARG					;			;017
	DEFQUAL	SUBP.Q,QF.NEG			;	/[NO]SUBPROGRAM
	DEFQUAL	TEM.Q,ARG=REQ			;	/TEMPORARY=device
	 DEFARG	TYPE=U$DEV			;	 =device
	 ENDARG					;
	DEFQUAL	TRUN.Q,QF.NEG			;	/[NO]TRUNCATE
	DEFQUAL	WAR.Q,QF.NEG,ARG=OPT		; 	/[NO]WARNINGS[=keyword]
	 DEFARG	INF.K,FLAGS=AF.NEG		;	 =[NO]INFORMATIONAL
	 ENDARG					;
	ENDQUAL

COB.CMD::$THR
	$DEFCMD	QUAL=COB.QL
	$PARM	PARM1,LF.N,PROMPT=FIL$P
	DFLTCQ	LIS.Q,AFFIRM=NO		;Default to /NOLIST.
	DFLTCQ	DIAG.Q,AFFIRM=NO	;Default to /NODIAGNOSTICS.
	DFLTKA  SHOW.Q,MAP.K		;Default /SHOW to /SHOW=MAP
	DFLTKA	WAR.Q,INF.K		;Default /WARNINGS to /WARNINGS=INF
	$ENDCMD

	PUTCCL	...C81			;"C81"
	PUTSPA
	$CALL	COM.RSX			;Build standard RSX compiler command 
					;string, "[objfile][,listfile]=".
	$FETP	PARM1
	PUTFIL	FLAGS=F.RSX		;"filespec" (RSX expansion)
	LOOKUP	FILE,DEFTYP=CBL		;Make sure the input file exists.

	PUTSTR	"/SKL/-BLD"		;"/SKL/-BLD" (suppress CMD, create
					;skeleton ODL).

	$FETCQ	ANS.Q			;Did he specify /[NO]ANSI_FORMAT?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /ANSI_FORMAT then
	PUTSTR	"/CVF"			;    "/CVF"
	$ELSE				;  Else
	PUTSTR	"/-CVF"			;    "/-CVF"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	CHE.Q			;Did he specify /[NO]CHECK?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /CHECK then (check keywords)
	$FETKA	BOU.K			;    Did he specify =[NO]BOUNDS ?
	$IF	PRESENT			;    If so then
	$IF	YES			;      If =BOUNDS then
	PUTSTR	"/BOU"			;        "/BOU"
	$ELSE				;      Else
	PUTSTR	"/-BOU"			;        "/-BOU"
	$ENDIF				;      End
	$ENDIF				;    End
	$FETKA	PER.K			;    Did he specify =[NO]PERFORM ?
	$IF	PRESENT			;    If so then
	$IF	YES			;      If =PERFORM then
	PUTSTR	"/PER"			;        "/PER"
	$ELSE				;      Else
	PUTSTR	"/-PER"			;        "/-PER"
	$ENDIF				;      End
	$ENDIF				;    End
	$FETKA	BOU.K			;    Did he specify no keywords?
	$IF	ABSENT			;    If he didn't specify BOUNDS,
	$FETKA	PER.K			;      Did he specify PERFORM?
	$IF	ABSENT			;      If not then he just said /CHECK
	PUTSTR	"/BOU/PER"		;        "/BOU/PER"
	$ENDIF				;      End
	$ENDIF				;    End
	$ELSE				;  Else he specified /NOCHECK
	PUTSTR	"/-PER/-BOU"		;    "/-PER/-BOU"
	$ENDIF				;  End
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	CODE.Q			;Did he specify /CODE ?
	$IF 	PRESENT			;If so then
	$FETKA	CIS.K			;  Did he specify :CIS ?
	$IF 	YES			;  If so then
	PUTSTR	"/CIS"			;    "/CIS"
	$ELSE				;  Else
	PUTSTR	"/-CIS"			;    "/-CIS"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	CON.Q			;Did he specify /[NO]CONDITIONALS?
	$IF	PRESENT			;If so then
	$IF	NO			;  If /NOCONDITIONALS then
	PUTSTR	"/-CON"			;    "/-CON"
	$ELSE				;  Else
	PUTSTR	"/CON"			;    "/CON"
	$FETA				;    Get argument
	$IF	PRESENT			;    If arg present then
	PUTSTR	":"			;      ":"
10$:	PUTSTR				;      Stuff it in the string
	$FETA				;      Get another arg
	$IF	PRESENT			;      If present then
	$GOTO	10$			;        Go put it in string also
	$ENDIF				;      Endif
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$ENDIF				;Endif (leave default up to compiler)

	$FETCQ	CRO.Q			;Did he specify /[NO]CROSS_REFERENCE?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /CROSS_REFERENCE then
	PUTSTR	"/CRF"			;    "/CRF"
	$ELSE				;  Else
	PUTSTR	"/-CRF"			;    "/-CRF"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	DEB.Q			;Did he specify /[NO]DEBUG?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /DEBUG then
	PUTSTR	"/DEB"			;    "/DEB"
	$ELSE				;  Else
	PUTSTR	"/-DEB"			;    "/-DEB"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	MAP.Q			;Did he specify /[NO]MAP?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /MAP then
	PUTSTR	"/MAP"			;    "/MAP"
	$ELSE				;  Else
	PUTSTR	"/-MAP"			;    "/-MAP"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	NAMS.Q			;Did he say /NAMES=cc?
	$IF	PRESENT			;If so then
	PUTSTR	"/KER:"			;  "/KER:"
	$FETA				;
	PUTSTR				;  "cc"
	$ENDIF				;Else it defaults to "SC".

	$FETCQ	SHOW.Q			;Did he specify /[NO]SHOW ?
	$IF 	PRESENT			;If so then
	$IF 	YES			;  If /SHOW then (check keywords)
	$FETKA	MAP.K			;    Did he specify :[NO]MAP
	$IF	YES			;    If :MAP then
	PUTSTR	"/MAP"			;      "/MAP"
	$ELSE				;    Else
	PUTSTR	"/-MAP"			;      "/-MAP"
	$ENDIF				;
	$ELSE				;  Else  /NOSHOW
	PUTSTR	"/-MAP"			;    "/-MAP"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.
	

	$FETCQ	STA.Q			;Did he specify /STANDARD ?	;017
	$IF 	PRESENT			;If so then			;017
	$FETKA	V2.K			;    Did he specify :V2		;017
	$IF	PRESENT			;    If :V2 then		;017
	PUTSTR	"/ST:V2"		;      "/ST:V2"			;017
	$ENDIF				;				;017
	$ENDIF				;Else default to 85		;017
	
	$FETCQ	SUBP.Q			;Did he specify /SUBPROGRAM?
	$IF	PRESENT			;  "/SUB"
	PUTSTR	"/SUB"			;
	$ENDIF				;

	$FETCQ	TEM.Q			;Did he specify /TEMPORARY:device?
	$IF 	PRESENT			;If so then
	PUTSTR	"/TMP:"			;  "/TMP:"
	$FETA				;
	PUTSTR				;  "device"
	PUTSTR  ":"			;  ":"
	$ENDIF				;Else leave default up to compiler.

	$FETCQ	TRUN.Q			;Did he specify /[NO]TRUNCATE ?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /TRUNCATE then
	PUTSTR	"/TRU"			;    "/TRU"
	$ELSE				;  Else
	PUTSTR	"/-TRU"			;    "/-TRU"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	
	$FETCQ	WAR.Q			;Did he specify /[NO]WARNINGS ?
	$IF 	PRESENT			;If so then
	$IF 	YES			;  If /WARNINGS then (check keywords)
	$FETKA	INF.K			;    Did he specify :[NO]INFORMATIONAL?
	$IF	YES			;    If :INFORMATIONAL then
	PUTSTR	"/INF"			;      "/INF"
	$ELSE				;    Else
	PUTSTR	"/-INF"			;      "/-INF"
	$ENDIF				;
	$ELSE				;  Else  /NOWARNINGS
	PUTSTR	"/-INF"			;    "/-INF"
	$ENDIF				;
	$ENDIF				;Else leave default up to compiler.

	$ENDTHR	

GLOBAL	<...C81>

.SBTTL DIBOL Command

; Qualifier list

DIB.QL:	DEFQUAL	DEB.Q,QF.NEG	;		/[NO]DEBUG
	DEFQUAL	LIS.Q,QF.NEG,ARG=OPT;		/[NO]LIST=[filespec]
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	OBJ.Q,QF.NEG,ARG=OPT;		/[NO]OBJECT=[filespec]
	 DEFARG	TYPE=LF.N		
	 ENDARG
	DEFQUAL	OPT.Q,QF.NEG	;		/[NO]OPTIMIZE
	DEFQUAL	STA.Q,QF.NEG,ARG=OPT;		/[NO]STANDARD
	 DEFARG	ANS.K		;		  =ANSI
	 DEFARG D83.K		;		  =D83
	 ENDARG
	DEFQUAL	WAR.Q,QF.NEG	;		/[NO]WARNINGS
	ENDQUAL

DIB.CMD::$THR
	$DEFCMD	QUAL=DIB.QL
	$PARM	PARM1,LF.N,PROMPT=FILS$P,OCCURS=6.
	DFLTCQ	WAR.Q		;Default to /WARNINGS.
	DFLTCQ	LIS.Q,AFFIRM=NO	;Default to /NOLIST.
	$ENDCMD

	PUTCCL	...DIC		;"DIC"
	PUTSPA

	$CALL	COM.RSX		;Create the standard RSX (?) compiler command 
				;string, "[objfile][,listfile]="
	$FETP	PARM1
10$:	PUTFIL	FLAGS=F.RSX	;"filespec" (RSX expansion)
	LOOKUP	FILE,DEFTYP=DBL	;Make sure the input file exists.
	$FETNP			;Did he specify more filespecs?
	$IF	PRESENT		;If so then
	PUTSTR	""<COMMA>	;","
	$GOTO	10$		;...
	$ENDIF

	$FETCQ	DEB.Q		;Is it /DEBUG or /NODEBUG?
	$IF	PRESENT		;If so then
	$IF	YES		;  If /DEBUG then
	PUTSTR	"/D"		;    "/D"
	$ENDIF			;
	$ENDIF			;

	$FETCQ	WAR.Q		;Is it /WARNINGS or /NOWARNINGS?
	$IF	NO		;If /NOWARNINGS then
	PUTSTR	"/W"		;  "/W"
	$ENDIF

	$FETCQ	STA.Q		;Is it /STANDARD or /NOSTANDARD?
	$IF	PRESENT		;If so then
	$IF	NO		;  If NO then
	PUTSTR	"/-ST"		;    "/-ST" (default)
	$ELSE			;  Else must be /STANDARD [=keyword]
	PUTSTR	"/ST"		;    "/ST"
	$FETKA	D83.K		;    Is argument "D83" ?
	$IF	PRESENT		;    If so then
	PUTSTR	":D83"		;      ":D83"
	$ELSE			;    Else argument is "ANSI" or not present
	PUTSTR	":ANS"		;      ":ANS" (default)
	$ENDIF			;    Endif
	$ENDIF			;  Endif
	$ENDIF			;Endif

	$FETCQ	OPT.Q		;Is it /OPTIMIZE or /NOOPTIMIZE?
	$IF	PRESENT		;If so then
	$IF	YES		;  If /OPTIMZE then
	PUTSTR	"/O"		;    "/O"
	$ENDIF			;  Endif
	$ENDIF			;Endif
	$ENDTHR

GLOBAL	<...DIC>

.SBTTL FORTRAN Command

; Qualifier list

FOR.QL:	DEFQUAL	CHE.Q,QF.NEG,REQUIRE=<F77.Q>;	/[NO]CHECK
	DEFQUAL	CODE.Q,REQUIRE=<FOR.Q>,ARG=REQ;	/CODE=option
	 DEFARG	EAE.K			;	 =EAE
	 DEFARG	EIS.K			;	 =EIS
	 DEFARG	FIS.K			;	 =FIS
 	 DEFARG	THR.K			;	 =THR
	 ENDARG
	DEFQUAL	CONTN.Q,REQUIRE=<F77.Q>,ARG=REQ;/CONTINUATIONS=n
	 DEFARG	TYPE=U$INT
	 ENDARG
	DEFQUAL	DEB.Q,QF.NEG,REQUIRE=<F77.Q>;	/[NO]DEBUG
	DEFQUAL	DLI.Q,QF.NEG		;	/[NO]D_LINES
	DEFQUAL	EXT.Q,QF.NEG,REQUIRE=<FOR.Q>;	/[NO]EXTEND_SOURCE
	DEFQUAL	F77.Q,CONF=<FOR.Q>	;	/F77 
	DEFQUAL	FOR.Q,CONF=<F77.Q>	;	/FOR 
	DEFQUAL	IDE.Q,QF.NEG,REQUIRE=<F77.Q>;	/[NO]IDENTIFICATION
      	DEFQUAL	I4.Q,QF.NEG		;	/[NO]I4
	DEFQUAL	LINE.Q,QF.NEG,REQUIRE=<FOR.Q>;	/[NO]LINE_NUMBERS
	DEFQUAL	LIS.Q,QF.NEG,ARG=OPT	;	/[NO]LIST=[filespec]
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	MACH.Q,QF.NEG,REQUIRE=<LIS.Q>;	/[NO]MACHINE_CODE
	DEFQUAL	OBJ.Q,QF.NEG,ARG=OPT	;	/[NO]OBJECT=[filespec]
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	OPT.Q,QF.NEG		;	/[NO]OPTIMIZE
	DEFQUAL	STA.Q,QF.NEG,ARG=OPT,REQUIRE=<F77.Q>
					;	/[NO]STANDARD[=option]
	 DEFARG	ALL.K			;	 =ALL
	 DEFARG	SOU.K			;	 =SOURCE
	 DEFARG	SYN.K			;	 =SYNTAX
	 ENDARG
	DEFQUAL	WAR.Q,QF.NEG		;	/[NO]WARNINGS
	DEFQUAL	WOR.Q,REQUIRE=<F77.Q>,ARG=REQ;	/WORK_FILES=n
	 DEFARG	TYPE=U$INT
	 ENDARG
	ENDQUAL

FOR.CMD::
	$THR
	$DEFCMD	QUAL=FOR.QL
	$PARM	PARM1,LF.N,PROMPT=FILS$P,OCCURS=6.
	DFLTCQ	F77.Q		;Default to /F77.
	DFLTCQ	LIS.Q,AFFIRM=NO	;Default to /NOLIST.

	$FETCQ	FOR.Q		;Is it FORTRAN/FOR?
	$IF	PRESENT		;If so then
	DFLTCQ	DLI.Q,AFFIRM=NO	;  Default to /NOD_LINES.
	DFLTCQ	I4.Q,AFFIRM=NO	;  Default to /NOI4.
				;  //Different from VMS.//
	DFLTCQ	LINE.Q		;  Default to /LINE_NUMBERS.
	DFLTCQ	MACH.Q,AFFIRM=NO;  Default to /NOMACHINE_CODE.
	DFLTCQ	WAR.Q		;  Default to /WARNINGS.
	$ENDCMD			;  //Different from FOR compiler's default.//

	PUTCCL	...FOR		;  "FORTRAN"
	PUTSPA
	$CALL	COM.RT		;  Build standard RT11 compiler command string
				;  "[objectfile][,listfile]="
	$FETP	PARM1
10$:	PUTFIL			;  "filespec"
	LOOKUP	FILE,DEFTYP=FOR	;  Make sure input file exists.
	$FETNP			;  Did he specify more filespecs?
	$IF	PRESENT		;  If so then
	PUTSTR	""<COMMA>	;    ","
	$GOTO	10$		;    ...
	$ENDIF

	$FETCQ	CODE.Q		;  Did he specify /CODE=option?
	$IF	PRESENT		;  If so then
	PUTSTR	"/I:"		;    "/I:"
	$FETKA	EAE.K
	$IF	PRESENT		;    If EAE then
	PUTSTR	"EAE"		;      "EAE"
	$ELSE			;    Else
	$FETKA	EIS.K		;
	$IF	PRESENT		;      If EIS then
	PUTSTR	"EIS"		;        "EIS"
	$ELSE			;      Else
	$FETKA	FIS.K
	$IF	PRESENT		;        If FIS then
	PUTSTR	"FIS"		;          "FIS"
	$ELSE			;        Else THR.
	PUTSTR	"THR"		;          "THR"
	$ENDIF
	$ENDIF
	$ENDIF
	$ENDIF			;  Else let compiler pick default.

	$FETCQ	DLI.Q		;  Is it /D_LINES or /NOD_LINES?
	$IF	YES		;  If /D_LINES then
	PUTSTR	"/D"		;    "/D"
	$ENDIF

	$FETCQ	EXT.Q		;  Did he specify /[NO]EXTEND_SOURCE?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /EXTEND_SOURCE
	PUTSTR	"/E"		;      "/E"
	$ELSE			;    Else
	PUTSTR	"/-E"		;	"/-E"
	$ENDIF			;    End
	$ENDIF			;  End, leave default up to compiler.

	$FETCQ	I4.Q		;  Is it /I4 or /NOI4?
	$IF	YES		;  If /I4 then
	PUTSTR	"/T"		;    "/T"
	$ENDIF

	$FETCQ	LINE.Q		;  Is it /LINE_NUMBERS or /NOLINE_NUMBERS?
	$IF	NO		;  If /NOLINE_NUMBERS then
	PUTSTR	"/S"		;    "/S"
	$ENDIF

	$FETCQ	MACH.Q		;  Is it /MACHINE_CODE or /NOMACHINE_CODE?
	$IF	PRESENT		;  If specified then
	$IF	YES		;    If /MACHINE_CODE then
	PUTSTR	"/L:7"		;      "/L:7"
	$ELSE			;    Else
	PUTSTR	"/L:3"		;      "/L:3"
	$ENDIF
	$ENDIF

	$FETCQ	OPT.Q		;  Did he specify /OPTIMIZE or /NOOPTIMIZE?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /OPTIMIZE then
	PUTSTR	"/P:CSE:STR:BND";      "/P:CSE:STR:BND"
	$ELSE			;    Else he said /NOOPTIMIZE.
	PUTSTR	"/M:CSE:STR:BND";      "/M:CSE:STR:BND"
	$ENDIF
	$ENDIF

	$FETCQ	WAR.Q		;  Is it /WARNINGS or /NOWARNINGS?
	$IF	YES		;  If /WARNINGS then
	PUTSTR	"/W"		;    "/W"
	$ENDIF

	$ELSE			;Else FORTRAN/F77.
	$ENDCMD

	PUTCCL	...F77		;  "F77"
	PUTSPA

	$CALL	COM.RSX		;  Build standard RSX compiler command string
				;  "[objectfile][,listfile]="
	$FETP	PARM1
20$:	PUTFIL	FLAGS=F.RSX	;  "filespec" (RSX expansion)
	LOOKUP	FILE,DEFTYP=FTN	;  Make sure input file exists.
	$FETNP			;  Did he specify more filespecs?
	$IF	PRESENT		;  If so then
	PUTSTR	""<COMMA>	;    ","
	$GOTO	20$		;    ...
	$ENDIF

	$FETCQ	CHE.Q		;  Did he specify /CHECK or /NOCHECK?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /CHECK then
	PUTSTR	"/CK"		;      "/CK"
	$ELSE			;    Else
	PUTSTR	"/NOCK"		;      "/NOCK"
	$ENDIF
	$ENDIF			;  Else let compiler default to /CHECK.

	$FETCQ	CONTN.Q		;  Did he specify /CONTINUATIONS=n?
	$IF	PRESENT		;  If so then
	PUTSTR	"/CO:"		;    "/CO:"
	$FETA
	PUTSTR			;    "n"
	$ENDIF			;  Else let compiler pick the default.

	$FETCQ	DEB.Q		;  Did he specify /DEBUG or /NODEBUG?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /DEBUG then
	PUTSTR	"/DB"		;      "/DB"
	$ELSE			;    Else
	PUTSTR	"/-DB"		;      "/-DB"
	$ENDIF			;    End
	$ENDIF			;  End, leave default up to compiler.

	$FETCQ	DLI.Q		;  Did he specify /D_LINES or /NOD_LINES?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /D_LINES then
	PUTSTR	"/DE"		;      "/DE"
	$ELSE			;    Else
	PUTSTR	"/NODE"		;      "/NODE"
	$ENDIF
	$ENDIF			;  Else let compiler default to /NOD_LINES.

	$FETCQ	I4.Q		;  Did he specify /I4 or /NOI4?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /I4 then
	PUTSTR	"/I4"		;      "/I4"
	$ELSE			;    Else
	PUTSTR	"/NOI4"		;      "/NOI4"
	$ENDIF			;    Endif
	$ENDIF			;  Else let compiler default to /NOI4.

	$FETCQ	IDE.Q		;  Did he specify /IDENTIFICATION or
				;  /NOIDENTIFICATION?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /IDENTIFICATION then
	PUTSTR	"/ID"		;      "/ID"
	$ELSE			;    Else
	PUTSTR	"/NOID"		;      "/NOID"
	$ENDIF			;    Endif
	$ENDIF			;  Else let compiler default to /NOID.

	$FETCQ	MACH.Q		;  Did he specify /MACHINE_CODE or
				;  /NOMACHINE_CODE?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /MACHINE_CODE then
	PUTSTR	"/LI:3"		;      "/LI:3"
	$ELSE			;    Else
	PUTSTR	"/LI:2"		;      "/LI:2"
	$ENDIF
	$ENDIF			;  Else let compiler default to /NOMACHINE.

	$FETCQ	OPT.Q		;  Did he specify /OPTIMIZE or /NOOPTIMIZE?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /OPTIMIZE then
	PUTSTR	"/OP"		;      "/OP"
	$ELSE			;    Else
	PUTSTR	"/-OP"		;      "/-OP"
	$ENDIF			;    End
	$ENDIF			;  End, leave default up to compiler.

	$FETCQ	STA.Q		;  Did he specify /STANDARD[=option] or
				;  ... /NOSTANDARD?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /STANDARD[=option] then
	PUTSTR	"/ST"		;      "/ST"
	$FETKA	SOU.K		;      Is it /STANDARD=SOURCE?
	$IF	PRESENT		;      If so then
	PUTSTR	":SOURCE"	;        ":SOURCE"
	$ELSE			;      Else
	$FETKA	ALL.K		;        Is it /STANDARD=ALL?
	$IF	PRESENT		;        If so then
	PUTSTR	":ALL"		;          ":ALL"
	$ENDIF			;        End - otherwise it's just "/ST"
	$ENDIF			;      End
	$ELSE			;    Else it's /NOSTANDARD
	PUTSTR	"/-ST"		;      "/-ST"
	$ENDIF			;    End
	$ENDIF			;  End, leave default up to compiler.

	$FETCQ	WAR.Q		;  Did he specify /WARNINGS or /NOWARNINGS?
	$IF	PRESENT		;  If so then
	$IF	YES		;    If /WARNINGS then
	PUTSTR	"/WR"		;      "/WR"
	$ELSE			;    Else
	PUTSTR	"/NOWR"		;     "/NOWR"
	$ENDIF
	$ENDIF			;  Else let compiler default to /WARNINGS.

	$FETCQ	WOR.Q		;  Did he specify /WORK_FILES=n?
	$IF	PRESENT	
	PUTSTR	"/WF:"		;    "/WF:"
	$FETA
	PUTSTR			;    "n"
	$ENDIF			;  Else let compiler pick default.
	$ENDIF
	$ENDTHR

GLOBAL	<...FOR,...F77>

.SBTTL LINK Command

; Qualifier list

LIN.QL:

DEFQUAL	BAS.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/BASIC
DEFQUAL	BP2.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/BP2 (synonym)
DEFQUAL CC.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,DES.Q>;            /CC	;018
DEFQUAL	C81.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,STR.Q,DES.Q>;	/C81 (synonym)
DEFQUAL	COB.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,STR.Q,DES.Q>;	/COBOL
DEFQUAL	CODE.Q,FLAGS=QF.ALIS,ARG=REQ,REQUIRE=<RSX.TG>,CONF=<RT.TG,DES.Q>
							;	/CODE=arg
 DEFARG	DAT.K,FLAGS=AF.NEG				;	 =[NO]DATA_SPACE
 ENDARG							;
DEFQUAL	DEB.Q,QF.NEG,REQUIRE=<C81.Q,COB.Q,FMS.Q,RSX.Q,DIB.Q>,CONF=<DES.Q>
							;	/[NO]DEBUG
DEFQUAL	DES.Q,CONF=<RSX.TG,RT.TG,DEB.Q,DMS.Q,EXE.Q,FMS.Q,MAP.Q,OTS.Q,RMS.Q,STR.Q>
							;	/DESCRIPTION
DEFQUAL	DIB.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/DIBOL
DEFQUAL	DMS.Q,QF.NEG,REQUIRE=<DIB.Q>,CONF=<DES.Q>;		/[NO]DMS
DEFQUAL	EXE.Q,QF.NEG,CONF=<DES.Q>,ARG=OPT;			/[NO]EXECUTABLE[=filespec]
 DEFARG	TYPE=LF.N
 ENDARG
DEFQUAL	FMS.Q,QF.NEG,REQUIRE=<RSX.TG>,CONF=<DES.Q>,ARG=OPT;	/[NO]FMS[=option]
 DEFARG	RES.K,FLAGS=AF.NEG				;	 =[NO]RESIDENT
 ENDARG
DEFQUAL	FOR.Q,CLASS=RT.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/FOR
DEFQUAL	F77.Q,CLASS=RSX.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/F77
DEFQUAL	MAP.Q,QF.NEG,CONF=<DES.Q>ARG=OPT;			/[NO]MAP[=filespec]
 DEFARG TYPE=LF.N
 ENDARG
DEFQUAL OTS.Q,REQUIRE=<RSX.TG>,CONF=<DES.Q>ARG=REQ;		/OTS=option
 DEFARG	RES.K,FLAGS=AF.NEG				;	 =[NO]RESIDENT
 ENDARG
DEFQUAL	RMS.Q,QF.NEG,REQUIRE=<RSX.TG>,CONF=<DES.Q>,ARG=OPT;	/RMS[=option]
 DEFARG	RES.K,FLAGS=AF.NEG				;	 =[NO]RESIDENT
 DEFARG	SUP.K						;	 =SUPERVISOR ;016
 DEFARG	USR.K						;	 =USER	;016
 ENDARG
DEFQUAL	RSX.Q,CLASS=RSX.TG,CONF=<RT.TG,RSX.TG,DES.Q>;		/RSX11
DEFQUAL	RT11.Q,CLASS=RT.TG,CONF=<RSX.TG,RT.TG,DES.Q>;		/RT11
DEFQUAL	SAM.Q,REQUIRE=<COB.Q,C81.Q>,CONF=<DES.Q>,ARG=REQ;	/SORT_AND_MERGE
 DEFARG	RES.K,FLAGS=AF.NEG				;	 =[NO]RESIDENT
 ENDARG
DEFQUAL STAC.Q,REQUIRE=<RSX.TG>,ARG=REQ                 ;       /STACK=n  ;018
 DEFARG TYPE=U$INT							  ;018
 ENDARG									  ;018
DEFQUAL	STR.Q,REQUIRE=<BAS.Q,BP2.Q,DIB.Q,F77.Q,RSX.Q>,CONF=<COB.Q,C81.Q,DES.Q>
							;	/STRUCTURE
ENDQUAL

LIN.CMD::$THR
	$DEFCMD	QUAL=LIN.QL
	$FETCQ	STR.Q			;Did he say /STRUCTURE?
	$IF	ABSENT			;If not then
	$PARM	PARM1,LF.N,PROMPT=FILS$P,OCCURS=100.
					;  Prompt for and parse filespecs.
	$ELSE				;Else 
	$PARM	PARM1,LF.N,PROMPT=ROOT$P,OCCURS=100.
					;  Prompt for and parse root filespecs.
	$ENDIF				;Endif
	DFLTCQ	BP2.Q			;Default to /BP2.
	DFLTCQ	DEB.Q,AFFIRM=NO		;Default to /NODEBUG.
	DFLTCQ	EXE.Q			;Default to /EXECUTABLE.
	DFLTCQ	MAP.Q,AFFIRM=NO		;Default to /NOMAP.
	DFLTCQ	FMS.Q,AFFIRM=NO		;Default to /NOFMS.
	DFLTCQ	DMS.Q,AFFIRM=NO		;Default to /NODMS.
	$ENDCMD

	$FETCQ	RT.TG			;Is it an RT11-based language?
	$IF	ABSENT			;If not then
	$GOTO 	RSXLNK			;  Do RSX flavor
	$ENDIF				;Endif

;It's an RT11-based language.

	PUTCCL	...LIN			;"LINK" (with LINK.SAV).
	$CALL	OUT.THR			;Build the output filespecs.
	$FETP	PARM1			;Fetch the filespec
10$:	PUTFIL	FLAGS=F.RT11		;"filespec"
	LOOKUP	FILE,DEFTYP=OBJ		;Make sure input file exists.
	$FETNP				;Did he specify more filespecs?
	$IF	PRESENT			;If so then
	PUTSTR	""<COMMA>		;  ","
	$GOTO	10$			;  Loop
	$ENDIF				;Endif

	$FETCQ	FOR.Q			;Is it /FOR?
	$IF	PRESENT			;If so then
	PUTSTR	"/F"			;  "/F" (include FORLIB.OBJ)
	$ENDIF				;Endif
	$GOTO 	DONE			;Done

;It's an RSX-based language.

RSXLNK:	PUTCCL	..PLIN			;"LINK" (with PRELIN).

	$FETCQ	STR.Q			;Did he say /STRUCTURE?
	$IF	PRESENT			;If so then
	PUTSTR	"/STR"			;  "/STR"
	$ENDIF				;Endif

	$FETCQ	DEB.Q			;Is it /DEBUG or /NODEBUG ?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /DEBUG then
	PUTSTR	"/DEB"			;    "/DEB"
	$ENDIF				;  Endif
	$ENDIF				;Endif

	$FETCQ	FMS.Q			;Is it /FMS or /NOFMS?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /FMS then
	PUTSTR 	"/FMS"			;    "/FMS"
	$FETKA	RES.K			;    Did he specify =[NO]RESIDENT ?
	$IF 	PRESENT			;    If so then
	$IF 	YES			;      If =RESIDENT then
	PUTSTR	":RES"			;        ":RES"
	$ELSE				;      Else
	PUTSTR	":NORES"		;        ":NORES"
	$ENDIF				;      Endif  
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$ENDIF				;Endif


	$FETCQ	CODE.Q			;Did he specify /CODE ?
	$IF 	PRESENT			;If so then
	$FETKA	DAT.K			;  Did he specify =[NO]DATA_SPACE?
	$IF 	PRESENT			;  If so then
	$IF	YES			;    If /DATA_SPACE then
	PUTSTR	"/ID"			;      "/ID" 
	$ELSE				;    Else
	PUTSTR	"/NOID"			;      "/NOID" 
	$ENDIF				;    End if 
	$ENDIF				;  End if
	$ENDIF				;End if

	$FETCQ	SAM.Q			;Is it /SORT_AND_MERGE:[NO]RESIDENT?
	$IF	PRESENT			;If so then
	$FETKA	RES.K			;  Did he specify =[NO]RESIDENT ?
	$IF 	YES			;  If =RESIDENT then
	PUTSTR 	"/SAM"			;    "/SAM"
	$ENDIF				;  Endif. Anything else, this is a NOP
	$ENDIF				;Endif

	$FETCQ	RMS.Q			;Is it /RMS or /NORMS?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /RMS then
	PUTSTR	"/RMS"			;    "/RMS"
	$FETKA	RES.K			;    Did he specify =[NO]RESIDENT ?
	$IF 	PRESENT			;    If so then
	$IF 	YES			;      If =RESIDENT then
	PUTSTR	":RES"			;        ":RES"
	$ELSE				;      Else
	PUTSTR	":NORES"		;        ":NORES"
	$ENDIF				;      Endif
	$ENDIF				;    Endif, let PRELIN choose default.
	$FETKA	USR.K			;    Did he specify =USER ?	;016
	$IF	PRESENT			;    If so then			;016
	PUTSTR	":RES"			;      ":RES"			;016
	$ENDIF
	$FETKA	SUP.K			;    Did he specify =SUPERVISOR ? ;016
	$IF	PRESENT			;    If so then			;016
	PUTSTR	":SUP"			;      ":SUP"			;016
	$ENDIF
	$ELSE				;  Else
	PUTSTR	"/NORMS"		;    "/NORMS"
	$ENDIF				;  Endif
	$ENDIF				;Endif

	$FETCQ	OTS.Q			;Is it /OTS=[NO]RESIDENT ?
	$IF	PRESENT			;If so then
	PUTSTR	"/OTS:"			;  "/OTS:"
	$FETKA	RES.K			;  Is it =RESIDENT or =NORESIDENT ?
	$IF	YES			;  If =RESIDENT then
	PUTSTR	"RES"			;    "RES"
	$ELSE				;  Else
	PUTSTR	"NORES"			;    "NORES"
	$ENDIF				;  Endif  
	$ENDIF				;Endif, let PRELIN choose default.

	$FETCQ	DES.Q			;Is it /DESCRIPTION?
	$IF	PRESENT			;If so then
	PUTSTR	"/DES"			;  "/DES"
	$ENDIF				;Endif

	$FETCQ	BAS.Q			;Is it /BASIC?
	$IF	PRESENT			;If so then
	PUTSTR	"/BP2"			;  "/BP2"
	$ENDIF				;Endif
	$FETCQ	BP2.Q			;Is it /BP2 (synonym)?
	$IF	PRESENT			;If so then
	PUTSTR	"/BP2"			;  "/BP2"
	$ENDIF				;Endif
	$FETCQ  CC.Q                    ;Is it /CC?			;018
	$IF     PRESENT                 ;If so then			;018
	PUTSTR  "/CC"                   ;  "/CC"			;018
	$ENDIF                          ;Endif				;018
	$FETCQ	COB.Q			;Is it /COBOL?
	$IF	PRESENT			;If so then
	PUTSTR	"/C81"			;  "/C81"
	$ENDIF				;Endif
	$FETCQ	C81.Q			;Is it /C81 (synonym)?
	$IF	PRESENT			;If so then
	PUTSTR	"/C81"			;  "/C81"
	$ENDIF				;Endif
	$FETCQ	DIB.Q			;Is it /DIBOL?
	$IF	PRESENT			;If so then
	$FETCQ	DMS.Q			;  Is it /DMS or /NODMS?
	$IF	YES			;  If /DMS then
	PUTSTR	"/DMS"			;    "/DMS"
	$ELSE				;  Else
	PUTSTR	"/DIBOL"		;    "/DIBOL"
	$ENDIF				;  Endif
	$ENDIF				;Endif
	$FETCQ	F77.Q			;Is it /F77?
	$IF	PRESENT			;If so then
	PUTSTR	"/F77"			;  "/F77"
	$ENDIF				;Endif
	$FETCQ	RSX.Q			;Is it /RSX11?
	$IF	PRESENT			;If so then
	PUTSTR	"/RSX11"		;  "/RSX11"
	$ENDIF				;Endif
	$FETCQ  STAC.Q                  ;Look for /STACK		;018
	$IF     PRESENT                 ;Is it present			;018
	PUTSTR  "/STACK:"               ;  Yes, insert /STACK:		;018
	$FETA                           ;  Fetch the stack size		;018
	PUTSTR                          ;  And insert it in the string	;018
	$ENDIF                          ;Endif				;018

	$CALL	OUT.THR			;Build the output filespecs.
	$FETCQ	DES.Q			;Got a /DESCRIPTION?
	$IF	PRESENT			;If so then
	$FETP	PARM1			;  Fetch the filspec
	PUTSTR				;  "filespec" (no defaults plugged in)
	LOOKUP	FILE,DEFTYP=CMD		;  Make sure command file exists.
	$ELSE				;Else
	$FETP	PARM1			;  Fetch the filspec
30$:	PUTSTR				;  "filespec" (no defaults plugged in)
	LOOKUP	FILE,DEFTYP=OBJ		;  Make sure input file exists.
	$FETNP				;  Did he specify more filespecs?
	$IF	PRESENT			;  If so then
	PUTSTR	""<COMMA>		;    ","
	$GOTO	30$			;    Loop
	$ENDIF				;  Endif
	$ENDIF				;Endif

DONE:	$ENDTHR

;   Build the output filespecs "FOO,FOO=".

OUT.THR:$THR
	PUTSPA

	$FETCQ	EXE.Q			;Is it /EXECUTABLE[=filespec] or
					;  /NOEXECUTABLE?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /EXECUTABLE[=filespec] then
	$FETA				;    Did he give a filespec?
	$IF	PRESENT			;    If so then
	PUTFIL	FLAGS=F.RT11		;      "filespec" 
	LOOKUP	DIRECTORY		;      Make sure output directry exists
	$ELSE				;    Else
	$FETP	PARM1			;      Use the first input filespec.
	PUTFIL	FLAGS=F.NOTYP!F.OURD!F.RT11
					;      "filespec" (without filetype;  
					;      let it default to .TSK or .SAV,
					;      and put the file in user's 
					;      directory on SY:.)
	$ENDIF				;
	$ELSE				;  Else /NOEXECUTABLE.
	$FETCQ	MAP.Q			;    Is it /MAP or /NOMAP?
	$IF	NO			;    If /NOMAP then
	$RETURN	MPEX.E			;      ?Map or executable file required
					;      file.
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$ENDIF				;Endif

	$FETCQ	MAP.Q			;Is it /MAP[=filespec] or /NOMAP?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /MAP[=filespec] then
	PUTSTR	""<COMMA>		;    ","
	$FETA				;    Did he give a filespec?
	$IF	PRESENT			;    If so then
	PUTFIL	FLAGS=F.RT11		;      "filespec"
	LOOKUP	DIRECTORY		;      Make sure directory exists.
	$ELSE				;    Else
	$FETCQ	EXE.Q			;      Did he specify /EXECUTABLE=file?
	$IF	PRESENT			;  
	$FETA				;  
	$IF	PRESENT			;      If so then
	PUTFIL	FLAGS=F.RT11!F.NOTYP	;        "filespec" -- use the 
					;        executable.  (No filetype;   
					;        let it default to .MAP.)
	$GOTO	10$			;      Else
	$ENDIF				;
	$ENDIF				;
	$FETP	PARM1			;        Use the first input filespec.
	PUTFIL	FLAGS=F.NOTYP!F.OURD	;        "filespec" (No filetype;let it
					;        default to .MAP, put the file 
					;        in the user's directory on SY:
10$:	$ENDIF				;
	CRETNT	DEFTYP=MAP		;    Create the map file tentatively.
	$ENDIF				;  Else /NOMAP.
	$ENDIF				;

	PUTSTR	"="			;"="
	$ENDTHR

GLOBAL	<MPEX.E>
GLOBAL	<...LIN,..PLIN>

.SBTTL	MACRO Command

; Parameter qualifier list

MAC.PQL:DEFQUAL	LIB.Q,QF.PARM	;		/LIBRARY

; Command qualifier list

MAC.CQL:DEFQUAL	LIS.Q,QF.NEG,ARG=OPT;		/[NO]LIST[=filespec]
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	OBJ.Q,QF.NEG,ARG=OPT;		/[NO]OBJECT[=filespec]
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	RSX.Q,CONF=RT11.Q;		/RSX11 
	DEFQUAL	RT11.Q,CONF=RSX.Q;		/RT11 
	ENDQUAL
	
MAC.CMD::$THR
	$DEFCMD	QUAL=MAC.CQL
	$PARM	PARM1,LF.N,QUAL=MAC.PQL,PROMPT=FILS$P,OCCURS=6.
	DFLTCQ	RSX.Q		;Default to /RSX11.
	DFLTCQ	LIS.Q		;Default to /LIST.
	$ENDCMD

	$FETCQ	RT11.Q		;Is it /RT11?
	$IF	PRESENT		;If so then

	PUTCCL	..MCRO		;  "MACRO" (RT11-based)
	PUTSPA

	$CALL	COM.RT		;  Build the standard RT11 compiler command 
				;  string, "[objfile][,listfile]="
	$FETP	PARM1
10$:	PUTFIL	FLAGS=F.RT11	;  "filespec" (full expansion)
	LOOKUP	FILE,DEFTYP=MAC	;  Make sure that input file exists.
	$FETPQ	LIB.Q		;  Did he say /LIBRARY?
	$IF	PRESENT		;  If so then
	PUTSTR	"/M"		;    "/M"
	$ENDIF
	$FETNP			;  Did he specify more source files?
	$IF	PRESENT		;  If so then
	PUTSTR	""<COMMA>	;    ","
	$GOTO	10$		;    ...
	$ENDIF

	$ELSE			;Else /RSX11.
	PUTCCL	...MAC		;  "MAC" (RSX-based)
	PUTSPA
	$CALL	COM.RSX		;  Build the standard RSX compiler command 
				;  string, "[objfile][,listfile]="

	$FETP	PARM1		;  Fetch the input files
20$:	PUTFIL	FLAGS=F.RSX	;  "filespec" (RSX expansion)
				;  (Can't look up file, because we don't yet
				;  know whether it's a .MAC or a .MLB.)
	$FETPQ	LIB.Q		;  Is this a LIBRARY?
	$IF	PRESENT		;  If so then
	PUTSTR	"/ML"		;    "/ML"
	$ENDIF			;  Endif
	$FETNP			;  Fetch next input filespec
	$IF	PRESENT		;  If there are more then
	PUTSTR	""<COMMA>	;    "'"
	$GOTO	20$		;    ...
	$ENDIF			;  Endif
	$ENDIF			;Endif
	$ENDTHR

GLOBAL	<...MAC,..MCRO>

.SBTTL COM.RSX and COM.RT --Build standard compiler command line
;+
; COM.RSX -- Build standard RSX compiler command line.
; COM.RT  -- Build standard RT11 compiler command line.
;
; INPUTS:
; 	Object qualifier: /OBJECT, /NOOBJECT, /OBJECT=objfile, or nothing
;		specified.  /OBJECT is the default.  /OBJECT without
;		a filespec means use the first source filespec, but with
;		an OBJ filetype.
;	List qualifier: /LIST, /NOLIST, or /LIST=listfile.  There is no
;		default.  /LIST without a filespec means use
;		a filetype of LST, with the same filespec as the object file;
;		if /NOOBJECT was specified, use the same filespec as the
;		first source file.
;	Diagnostics qualifier: /DIAGNOSTICS, /NODIAGNOSTICS, or /DIAGNOSTICS=
;		filespec.  /NODIAGNOSTICS is the default.  /DIAG without a 
;		filespec means use a filetype of DIA, with the same filespec
;		as the object file;  if /NOOBJECT was specified, use the same
;		filespec as the source file.
;	Source files: these are designated by PARM1.  There is at least
;		one source file.
;
; $CALL	COM.THR		(used from within a $THR block)
;
; OUTPUTS:
;	A string of the following form is appended to TRNBUF.
;	  [objfile],[listfile][,diagfile]=
;-

	TMPORG	IMPURE
RSXFLG:	.BLKW
	 UNORG

	.MACRO	DOFIL FLAGS
	 .WORD	DOFIL,FLAGS
	.ENDM

DOFIL:	MOV	R3,-(SP)	;Save pointer into threaded code
	MOV	(R3)+,-(SP)	;Put the flags onto the stack
	BIS	RSXFLG,(SP)	;Set the flag, RSX-style or RT11-style
	MOV	SP,R3		;Point R3 at the new flag
	CALLX	PUTFIL		;PUT the filespec into TRNBUF
	POP			;Pop the flag off the stack
	MOV	(SP)+,R3	;Restore pointer into threaded code
	TST	(R3)+		;Pop past flag word
	RETURN

COM.RSX::$THR
	$MOV	F.RSX,RSXFLG
	$GOTO JOIN
	$ENDTHR

COM.RT::$THR
	$MOV	F.RT11,RSXFLG
JOIN:	DFLTCQ	OBJ.Q		;Default to /OBJECT.
	$FETCQ	OBJ.Q		;Is it /OBJECT[=filespec] or /NOOBJECT?
	$IF	YES		;If /OBJECT[=filespec] then
	$FETA			;  Is there a filespec?
	$IF	PRESENT		;  If so then
	DOFIL			;    "filespec"
	$ELSE			;  Else
	$FETP	PARM1		;    Use first input filespec.
	DOFIL	FLAGS=F.NOTYP!F.OURD;"filespec" (No filetype;
				;    let it default to .OBJ, and put the file
				;    in the user's directory on SY:.)
	$ENDIF			;  Endif
	CRETNT	DEFTYP=OBJ	;  Create the output file tentatively.
	$ENDIF			;Else /NOOBJECT.

	PUTSTR	""<COMMA>	;","
	$FETCQ	LIS.Q		;Is it /LIST[=filespec] or /NOLIST?
	$IF	YES		;If /LIST[=filespec]  then
	$FETA			;  Is there a filespec?
	$IF	PRESENT		;  If so then
	DOFIL			;    "filespec" 
	$ELSE			;  Else
	$FETCQ	OBJ.Q		;    Is there an explicit /OBJECT=filespec?
	$IF	YES		;    If so then
	$FETA			;      Fetch filespec
	$IF	PRESENT		;      If there is one then
	DOFIL	FLAGS=F.NOTYP	;        "filespec" (no type; default to .LST)
	$GOTO	10$		;        Go do .DIA (if any)
	$ENDIF			;      Endif
	$ENDIF			;    Endif
	$FETP	PARM1		;    Use first source filespec.
	DOFIL	FLAGS=F.NOTYP!F.OURDIR
				;    "filespec" (No filetype
				;    let it default to .LST, and put the file
				;    in the user's directory and on SY:.)
10$:	$ENDIF			;  Endif
	CRETNT	DEFTYP=LST	;  Create the list file tentatively.
	$ENDIF			;Else /NOLIST.

	$FETCQ	DIAG.Q		;Is it /[NO]DIAGNOSTICS[=filespec]?
	$IF 	PRESENT		;If so then
	$IF	YES		;  If /DIAGNOSTICS[=filespec]  then
	PUTSTR	""<COMMA>	;    ","
	$FETA			;    Is there a filespec?
	$IF	PRESENT		;    If so then
	DOFIL			;      "filespec" 
	$ELSE			;    Else
	$FETCQ	OBJ.Q		;      Is there an explicit /OBJECT=filespec?
	$IF	YES		;      If so then
	$FETA			;        Fetch filespec
	$IF	PRESENT		;        If there was one then use it
	DOFIL	FLAGS=F.NOTYP	;          "filespec" (No type, default to .LST)
	$GOTO	20$		;          Finished	
	$ENDIF			;        Endif
	$ENDIF			;      Endif
	$FETP	PARM1		;      Use first source filespec.
	DOFIL	FLAGS=F.NOTYP!F.OURDIR;"filespec" (No filetype; let it default
				;      to .DIA, and put the file in user's 
				;      directory on SY:)
20$:	$ENDIF			;    Endif
	CRETNT	DEFTYP=DIA	;    Create the diagnostic file tentatively.
	$ENDIF			;  Endif (else use /NODIAGNOSTICS)
	$ENDIF			;Endif

	PUTSTR	"="		;"="
	$ENDTHR
.END
