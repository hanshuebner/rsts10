.INCLUDE	/CMN:COMMON.MAC/
.INCLUDE	/CMN:KERNEL.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.LIBRARY	/DCL:DCLMAC.MLB/
.INCLUDE	/CMN:PFBDEF.MAC/
.INCLUDE	/DCL:DCLPFX.MAC/
TITLE	DCLRTS,<DCL Mainline>,0I,31-JAN-92,CEK/JFM/SDL/GMB/BTK/BTB/FEK/DLS

;
;		COPYRIGHT (c) 1974, 1992 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR DCLRTS
;+
;
;  001	CEK  16-APR-82	Added edit history
;  002	CEK  16-APR-82	Removed @# notation
;  003	CEK  16-APR-82	Keep channel 15 open
;  004	CEK  16-APR-82	Assume friend has same name as RTS.
;  005	CEK  16-APR-82	Call DCLPAR as normal routine, not as PPARSE pattern
;  006	CEK  16-APR-82	Check for parameter word of 8192, not 30000.
;  007	CEK  30-APR-82	Changed ORG statements
;  008	CEK  30-APR-82	Changed symbol names in file descriptor block
;  009	CEK  30-APR-82	Moved ...IND indentation string to DCLMSG.MAC.
;  010	CEK  30-APR-82	Changed name from DCL.MAC to DCLRTS.MAC.
;  012	CEK  30-APR-82	Use CALB rather than CALL for command doers
;  013	CEK  30-APR-82	Removed ..PCCL patch hooks
;  014	CEK  30-APR-82	Moved stack to this module
;  015	CEK  15-MAY-82	Moved P.NEW and P.CRAS entry points to this module
;  016	CEK  15-MAY-82	Moved patch space to this module
;  017	CEK  07-Jul-82	Eliminated logged-out prompt
;  018	CEK  13-Jul-82	Moved EXIT back into this module.
;  019	JFM  14-Apr-83	DCL uses logical assignments before .RUN and .CHAINs
;  020	JFM  02-Jun-83	Cleaned up logical assignments before .RUN and .CHAINs
;  021	JFM  12-Sep-83	Got rid of all need for DCL.DCL.
;  022  SDL  02-Sep-83  Add handling of the symbol table file
;  023  SDL  10-Nov-83  Cleaned up some comments
;  024  JFM  29-Nov-83  Clean up the handling of a CTRL/C 
;  025  JFM  08-Dec-83  Fixed P..NEW so it doesn't loop on LOGIN
;  026  SDL  09-Dec-83  Fixed GETSTF and SAVSTF to set up symbol table offsets
;  027  SDL  06-Jan-84  Change names of .PFB directive function codes
;  028	JFM  18-Mar-84	Added CCLFLG to indicate CCL entry.  Avoids loops from
;			CCL processor passing same command to DCL.
;  029	JFM  11-Apr-84	Added support for DCL to be primary run-time system
;  030	SDL  01-May-84	SAVSTF saves the ON settings for the current ICF
;  031	SDL  02-May-84	Added error and CTRL/C checking after each command
;			is processed
;  032	SDL  21-Jun-84	Made changes to account for the global and a local
;			symbol table being in core at the same time
;  033	JFM  08-Jul-84	Fixed P..RUN entry point processing.  Took out call
;  			to SWIDCL if it's a RUN of a .COM file
;  034	SDL  12-Jul-84	Modified SAVSTF routine to save some words
;  035	SDL  16-Jul-84	Made ENT.TY cell and INICUI routine global
;  036	SDL  17-Jul-84	Fixed some bugs in ON ERROR and ON CONTROL_C handling
;  037	JFM  17-Jul-84	Chain to LOGIN.TSK at line 32000
;  038	JFM  24-Jul-84	Don't issue an extra JFB.PF directive on entry, wipes
;			out last I/O exit status
;  039	JFM  08-Aug-84	Changed for long logical names
;  040	SDL  14-Aug-84	Trap I/O errors that occur when working with the user's
;			symbol table file
;  041	SDL  11-Sep-84	Removed some code dealing with open data files stack 
;  042	SDL  26-Oct-84	Handle CTRL/C and error checking when unnesting ICFs
;  043	SDL  06-Nov-84	Saved some words in GETSTF and SAVSTF routines 
;  044	SDL  29-Nov-84	Modified GETSTF and SAVSTF routines to do I/O to symbol
;			table file on the PFB channel instead of the IOB
;  045	JFM  14-Dec-84	Got rid of VERIFY bit and made CC work, but not unnested
;  046  GMB  17-Jun-85	Added PRVFLG to IMPURE for priv check before chaining
;			Always set location zero (0) to BPT (3)
;			Changed ...MOM to ...DCL
;			Changed ...ODT to ...DCL+2
;			P..NEW jumps to DIE if .RUN of LOGIN failed
;			Retry .CMDLN up to 10 times before giving up
;			Issue command not installed if logical is not set
;  047  GMB  25-Jul-85	Monitor Control/C flag returned in different place now.
;			Changed READCC routine to look at new place.
;  048  GMB  15-Aug-85	Bug fix. Moved setting of PRVFLG to proper place.
;  049  GMB  20-Sep-85	Open message files in DCLINI
;  050  GMB  01-Oct-85	Moved IOBCHN from global context to IMPURE
;			Reserved channel 2 for F$SEARCH
;  051  GMB  05-Jan-86	Made changes for new symbol table
;			Changed value of INLTYP to zero
;  052  GMB  09-Nov-86  Fix bug 012: For CCLs: made "?Protection violation" into
;			"?Non-executable file"
;  053  GMB  09-Nov-86  Fix SPR 11-92603: Chain to a COM file with non-zero line
;			number doesn't pass parameters.
;
;			[V9.4]
;  054  GMB  29-Feb-87	Made RUNCOM a byte and made it more versatile
;			Got rid of CCLFLG. Was replaced by ENT.TY.
;			Made ENT.TY values symbolic (defined in DCLPFX)
;  055  GMB  23-Mar-87	Miscellaneous clean up.  Removed STFFLG (unused).
;			Ignore temp priv bit on line number.
;
;			[V9.5]
;  056	JFM  27-May-87	Miscellaneous clean up.  Removed DOPFB label in place
;			of GETEXIT.  Added comments, etc.  No code change.
;
;			[RSTS/E V9.7]
;  057	JFM  20-Sep-88	Unglobalize routines and variables
;  058	BTK  17-Dec-88	Use "Gimme privs" .PFB directive instead of .CHAIN.
;			Cleaned up flow in P.NEW.  Don't update $SEVERITY at 
;			interactive level.
;
;                       [RSTS/E V10.0]
;  059  BTB  07-Feb-90  Put back $SEVERITY update from 058.  Added fix for
;			GOSUB/GOTO bugs.
;
;                       [RSTS/E V10.1]
;  060  BTB  06-Jun-90  Correct arrow placement for CCL and RUN commands
;  061	JFM  12-Jul-91  Don't clear CTRL/C flags here - done in CUIRD.
;  062	FEK  04-DEC-91	Remove unnecessary PKG file opens to decrease the
;			number of small buffers used by 2/job in DCL.
;  063	DLS  30-Jan-92	Clean up several error arrow position bugs
;-

;+
; DCLRTS -- Mainline of DCL run-time system
;
; This module contains all of the entry points and all of the
; exit points of the DCL run-time system (apart from abnormal exits).
;
; Together with DCLEXC.MAC, which contains the exception handlers,
; this module provides the run-time environment of DCL.
;-

	.PSECT	DCLRTS,RO,REL,CON
	DEFORG	DCLRTS

	$CUI	MSG

.SBTTL	Align impure area

	$CUI	PSECTS		;Put the CUI PSECT definitions here.
	.PSECT	IMPURE,RW,D,GBL,ABS,CON
				;Redefine IMPURE PSECT
	.BLKB	NSTORG		;Pad impure PSECT out to location 1000.

; This module must be first in the LINK sequence, so that the IMPURE
; PSECT gets padded out to the right location.

	UNORG

.SBTTL	Constants

	.EVEN
STK.SIZ	=:	1000		;Size of stack, in bytes.
STK.GV	==:	123456		;Stack guard value.  The stack guard word 
				;normally contains this magic value.  Any 
				;other value indicates a stack overflow.

...PPN	==:	.		;PPN value of this run_time system
	.WORD	1		;==> PPN is [0,1]
...DCL	==:	.		;First three characters of this RTS name
	.RAD50	/DCL/		;==> RTS name 1 is "DCL"
				;Next three characters of this RTS name
	.RAD50	/   /		;==> RTS name 2 is "   "


.SBTTL	Stack

	TMPORG	IMPURE
STK.GRD::.BLKW	1		;Stack guard word.  If this word is not
				;equal to STK.GV (guard value), it means
				;the stack overflowed.  THIS MUST BE RIGHT
				;BELOW THE STACK.
STK.BOT::.BLKB	STK.SIZ		;The stack.
STACK::				;= initial value for stack pointer.
	UNORG

.SBTTL	Variables
;+
; CMDTYP--variable indicating the type of processing we do for this command.
; One of:
;	RUNTYP--a RUN command.  We run a program at line 0, passing no 
;		information in core common.
;	CUSPTYP--a "CUSP" type of command.  We run a CUSP, passing information 
;		to it in core common.  The CUSP thinks it was invoked by
;		a CCL.
;	CCLTYP--a CCL prefix command.  We issue a .CCL directive.
;	INLTYP--an "inline" command.  We execute the command inline, by issuing
;		SYS calls or whatnot.
;	BADDYP--a "bad", ie unrecognized, command.
;-

	TMPORG	IMPURE
	.EVEN
CMDTYP::.BLKW			;(See above.)
CCLDES::.BLKW			;Address of CCL descriptor block of CUSP to 
				;run (if CMDTYP is CUSPTYP).
CMDPOS::.BLKW			;Position of command in CMDBUF
INLEN::	.BLKW			;Length of inline command
OURPPN::.BLKW			;PPN of user.  
ENT.TY::.BLKW			;Entry type code.  
				; (0=KBM, 1=CCL, 2=CHAIN, 3=NO READ PERFORMED)
IOBCHN::.BLKW			;The IOB channels bit mask indicating which
				;... files are open.
STFBLK::.BLKW			;The STF block info (start block # and size)
EXTFLG::.BLKB			;Flag indicating whether the last command just 
				; examined was an EXIT command or not
				; (used for unnesting ICFs to determine if a
				;  CTRL/C or error occurred and must be carried
				;  back through)
				;  = 0 if haven't seen an EXIT
				;  = 1 if have seen an EXIT
RUNCOM::.BLKB			;Flag indicating a RUN of a .COM file
				;  =  0 if not a run/chain/ccl
				;  =  1 if this is a run/chain of a .COM file
				;  = -1 if this is a ccl of a .COM file
LASTIO:	.BLKB			;Last I/O flag.  (0=Warning, 1=Success, 2=Error
				; 4=Severe-Error, -1 if meaningless)
ERRFLG::.BLKB			;Flag indicating the severity-level of the
				; error that occurred, if any (used for
				; unnesting ICFs to carry error back through)
				;  = 0 Warning
				;  = 1 Success
				;  = 2 Error
				;  = 4 Severe Error
STFILE::.BLKB			;Flag to indicate if the user's symbol table
				; file exists on disk
				;  = 0 symbol table file exists on disk
				;  = 1 symbol table file does not exist on
				;      disk, but the in-core symbol tables
				;      in the work buffer can be used until
				;      the user takes corrective action
KBMFLG::.BLKB			;Job KBM flag, 0 if we are job's KBM, -1 if not
	.EVEN
	UNORG

.SBTTL	CUI Common
	TMPORG	IMPURE
	$CUI	ALLOC
	UNORG

.SBTTL	Patch space

	.PSECT	PATCH,RO,REL,CON;Patch space.
PATCH::	.BLKB0	100
	UNORG

.SBTTL	P.NEW entry point
;+
; P.NEW entry point
;
; We were entered here under the following conditions:
;
; (1)	We were invoked as a KBM.  We go to JOIN with ENT.TY clear to indicate
; 	that we are a KBM.
;
; (2)	We were invoked by a spawned logged out job.  We're logged out with 
;	no previous RTS, and there is a program waiting to be run ... we 
;	run it.
;
; (3)	We were invoked by system startup.  We're logged out with no previous 
;	RTS and no program waiting to be run, so we attempt to run LOGIN.
;
; (4)	We are logged out with a previous RTS, we must DIE.
;
;-
.ENABL	LSB

P..NEW::BIT	#JFNOPR,KEY	;Is job logged out?
	BNE	10$		;No					;058
				.ASSUME KBM.TY EQ 0
	CLR	ENT.TY		;Indicate that we're a KBM.
	CLRB	RUNCOM		;This isn't a RUN/CHAIN/CCL of a .COM file
	BR	DCLINI		;Initialize the world, go ahead and be a KBM.
				;Job is logged out			;058
10$:	TST	XRB+2		;Was there a previous RTS?  
	BNE	30$		;No					;058
	TST	FIRQB+FQPPN	;Spawned logged out job?
	IFZE			;If not then
	MOV	#402,FIRQB+FQPPN;  Run [1,2]LOGIN.*
	MOV	#^RLOG,FIRQB+FQNAM1; 
	MOV	#^RIN,FIRQB+FQNAM1+2;
	MOV	#-1,FIRQB+FQEXT	;  (default to any extension)
	MOV	#100000!32000.,FIRQB+FQNENT
				;  Enter at line 32000 with privs
	ELSE			;Else set up core common
	MOV	#CORCMN,R1	;  Point R1 to CORCMN
	MOV	#11.,R2		;  Move 10 bytes
	MOVB	R2,(R1)+	;  Plus creator's JOBNO*2
20$:	MOVB	FIRQB+16-<CORCMN+1>(R1),(R1)+ 
	SOB	R2,20$		;  Fill core common
	MOVB	FIRQB+FQFIL,-(R1) ;Last byte is create JOBNO*2
	ENDIF			;Endif
	.RUN			;Do RUN (shouldn't return inline)
	CMESSAG	#UNAV.E		;"?Command not installed"
30$:	JMP	DIE		;Die (let the monitor kill us)		;058

GLOBAL	<CORCMN>

.DSABL	LSB

.SBTTL	P.RUN entry point
;+
; We are entered here under the following conditions:
;
; (1)  	A CCL points to DCL.RTS.  We read from CORE COMMON to get command.
;
; (2)  	Somebody CHAINED to us.  We read from CORE COMMON if we were chained 
;	to at a non-zero line number, else we SWITCH to ourselves.
;
; (3)	Somebody ran DCL.RTS.  DCL's protection code has executable bit set so 
;	somebody could possibly RUN [0,1]DCL.RTS.  If this happens, we exit.
;
; (4)	Somebody ran a .COM file.  We put the filespec into the command buffer
;	and set entry type to NOR.TY.  This tells CUI not to read this command.
;	Entry type gets set to KBM.TY if it was from DCL that the RUN was
;	issued.
;
; (5)	A CCL points to a .COM file.  We treat it as though somebody ran
;	a .COM file.
;
;-
.ENABL	LSB

P..RUN:: .ASSUME KBM.TY EQ 0
	CLR	ENT.TY		;Assume that we're a KBM.
	CLRB	RUNCOM		;Assume this isn't a RUN/CHAIN/CCL of a .COM
				;... file
	BIC	#100000,FIRQB+FQNENT
				;Ignore temp privilege bit on line number
;+
; In every case, except (4) and (5) above, the FIRQB contains our name.
; So let's get right down to it ... is a command file being activated?
;-

	CMP	...PPN,FIRQB+FQPPN	;Is the account:	[0,1]?
	BNE	10$			;No
	CMP	...DCL,FIRQB+FQNAM1	;File name:		"DCL"?
	BNE	10$			;No
	CMP	...DCL+2,FIRQB+FQNAM1+2	;File name:		""?
	BNE	10$			;No
	CMP	#^RRTS,FIRQB+FQEXT	;Extension:		".RTS"?
	BEQ	20$			;Yes

;+
; We have either a RUN of a .COM file, or a CCL pointing to a .COM file.
; Treat them both the same.  The file is already open on channel 15 for us.  
; We read from Core common to retreive P1-P8.
;-

10$:	CLR	INLEN		;Nothing to read yet ...
	DECB	RUNCOM		;Assume CCL of .COM file
	TST	XRB+0		;Is this a CCL pointing to a .COM file?
	BMI	13$		;Yes, go get parameters
	NEGB	RUNCOM		;No, switch to RUN/CHAIN of .COM file
	TST	FIRQB+FQNENT	;Did we get here as a result of a .CHAIN
				;... to a non-zero line number?
	BEQ	18$		;No, skip trying for parameters
13$:	CALLX	CLRXRB		;Clear the XRB
	MOV	#CMD.BSIZ,XRB+XRLEN
				;Max length of input
	MOV	#CMDBUF,XRB+XRLOC;Address of buffer (1st byte is for length)
	;CLR	XRB+XRBC	;Indicate a .CMDLN read
	.CMDLN			;Read command line
;
; Ignore NOSUCH errors.  They mean we didn't get a command line.
;
	CMPB	FIRQB+0,#NOSUCH	;Is error "No command line"?
	IFNE			;If not then
	CALLX	U$CHKE		;  Abort if error (shouldn't happen)
	ENDIF			;Endif
	MOV	XRB+XRBC,INLEN	;Number of characters in command line 
18$:	MOV	#NOR.TY,ENT.TY	;Indicate RUN of .COM.  CUI will not
				;read the command, merely issue RETURN in RDCMD
	BR	50$		;Process command

;+
; Is this a CCL command? 
;-

20$:	.ASSUME CCL.TY EQ 1
	INC	ENT.TY		;Assume CCL entry
	TST	XRB+0		;Is CCL bit set?
	BMI	50$		;We were right, go do it.

;+
; Did somebody CHAIN to us at some non-zero line number?  If so then read
; from Core common and execute command found there.
;-

	.ASSUME CHA.TY EQ 2
	INC	ENT.TY		;Assume a chain entry (this will also cover
				;  the case of somebody RUNNING DCL.RTS)
	TST	FIRQB+FQNENT	;Did somebody CHAIN to us at some non-zero line?
	BNE	50$		;Yes, read from core common and execute command
	CLR	CORCMN		;No, clear core common ... somebody just RAN us
				;  or CHAINed to us at line 0 ... effectively
				;  SWITCH to  DCL.

50$:	.BR	DCLINI		;Initialize the world.

.DSABL	LSB

GLOBAL	<CMDBUF,CMD.BSIZ,TRNLEN,TRNBUF,CORCMN>

.SBTTL	DCLINI -- Initialize DCL
;+
; DCLINI -- Initialize DCL
;
; INPUTS:
;	SP	->	USRSP
;	ENT.TY	=	Entry type
;
; OUTPUTS:
;	SP	->	STACK (stack initialized)
;	TROUBLE	=	0 (no fatal error)
;	Print buffer initialized for output
;
; SIDE EFFECTS:
;	All registers random
;	FIRQB and XRB are destroyed
;-

.ENABL	LSB

DCLINI:	.TTECH			;Re-enable terminal eching
	CLR	TROUBLE		;No fatal errors yet.
	CLRB	DCLFLG		;Clear CUI's DCL flag (no CTRL/C's yet)	;061
	CLRB	EXTFLG		;Haven't seen EXIT command yet (for unnesting)
				;... (last command examined was not an EXIT)
	MOVB	#SUCCESS,ERRFLG	;Initialize error seen to 'success' (unnesting)
	MOV	#STACK,SP	;Set up our (bigger) stack.
	MOV	#STK.GV,STK.GRD ;Set up stack guard value.
	MOV	#3,0		;Make sure there's an odd address at 0,
				;in case anybody goes off the end of
				;a linked list.
	.ASSUME	BPT EQ 3	;Also, 3 is a "BPT" instruction,
				;so if we jump to zero we'll get a reserved
				;instruction trap.
	CALLX	CLRFQB		;Clear FIRQB.
	MOVB	#RSTFQ,FIRQB+FQFUN ;Prepare to reset I/O channels
	TSTB	RUNCOM		;Is this a RUN/CHAIN/CCL of a .COM file?
	IFNE			;If so then
	MOVB	#-15.*2,FIRQB+FQFIL ;Don't reset channel 15
	ENDIF			;Endif
	CALFIP			;Reset all channels except possibly 15 if it's
				;a run of a .COM file (no errors possible)
	MOV	#^B0001000000011111,IOBCHN
				;Set up the IOB channels bit mask indicating
				; 6 channels are reserved:
				;   0 --> user's keyboard (KB:)
				;   1 --> used for creating tentative files
				;          (GENCHN in CUILOK)
				;   2 --> used by F$SEARCH for OPEN NEXT channel
				;  12 --> used by CUIPRT to lookup messages
				;GMB // What about channel 15?? //
	MOVB	#-1,LASTIO	;We want to get last I/O exit status
	CALL	GETEXIT		;Do PFB func "read job flags" to get exit status
	MOV	FIRQB+FQBUFL,R2	;Get the flags
	MOV	FIRQB+FQSIZ,STFBLK
				;Retrieve the STF block info
	CALLX	U$RSTP		;Initialize the print buffer.
	MOV	#O.ISIZ,MEMSIZ	;Set MEMSIZ to our initial size (in K)
	MOVB	#1,GBLNFG	;Our in memory copies of the global (and local)
				;... symbol tables are no good
	CALBX	RESSTB		;Set up the symbol tables
	BIC	#^C<ICFACT!LOGACT>,R2
	MOV	R2,ICFFLG	;Set up our ICF flag to reflect only the three
	.ASSUME	LOGACT EQ J2LOG	;bits we want.  Leave everything else alone.
	.ASSUME	ICFACT EQ J2ICF	;ICFFLG bits for this to work.  
	BIS	#STSUPD!SEVCHK,ICFFLG
				;Update status and check severity by default
	MOV	#CBB1,R1	;Point to CBB block
5$:	MOV	#-1,IO.CHN(R1)	;Indicate that data is invalid
	ADD	#CBBSIZ,R1	;Point to next CBB
	CMP	R1,#LSTCBB	;Was that the last CBB?
	BNE	5$		;No, mark them all as invalid

	CALL	INICUI		;Initialize Common User Interface.  (Tell it 
				; where CUI common is, and what entry type is)
	CLRB	EVLTYP		;Set evaluation type one-shot to normal
				;... expression
	CLRB	NAMABB		;Make sure this is clear else might interfere
				;... with SRHENT.  Only set by CHKSN.
	CALLX	CLRXRB		;Zero XRB.
	MOV	#JFSYS,XRB	;Drop temp privs.
	.CLEAR			;
	CALLX	U$CHKE		;Abort if error.  (Shouldn't happen.)	

; Get user's PPN. Only used in DCLTRN when expanding filespecs
; Get the job's KBM, set flag if it is NOT DCL!
	
	CLRB	KBMFLG		;Assume this IS DCL	
	CALLX	U$USYS		;Do UU.SYS subfunction to .UUO to get user info
	MOV	FIRQB+26,OURPPN	;Save PPN	
	CMP	FIRQB+30,FIRQB+34;Is job's KBM our own?
	BNE	10$		;No
	CMP	FIRQB+32,FIRQB+36;Is it?
	BEQ	20$		;Yes!
10$:	COMB	KBMFLG		;Indicate that job's KBM is not our own
	.BR	20$

;Install RTS name as program name.

20$:	MOV	FIRQB+34,FIRQB+FQNAM1   ;RTS is in FIRQB+34 and FIRQB+36 
	MOV	FIRQB+36,FIRQB+FQNAM1+2 ;from UU.SYS call
	.NAME			;Declare name.
	CALLX	U$CHKE		;Abort if error.  (Shouldn't happen.)
	.BR	HEART		;Get to the heart of the matter.

.DSABL	LSB
GLOBAL	<TROUBLE,CBBSIZ,IO.CHN,CBB1,LSTCBB>
GLOBAL	<O.ISIZ,MEMSIZ,GBLNFG,NAMABB>

.SBTTL	The Heart of the Matter

; Get and process command.

.ENABL	LSB

HEART:	CALLX	INITRN		;Initialize TRN buffer.			;057
				.ASSUME INLTYP EQ 0
	CLR	CMDTYP		;Default command type is "inline".
	BIC	#GOACT,ICFFLG	;Haven't seen a GOSUB or GOTO		;059
	MOV	#SUBBUF,STRBUF	;Set up string holder location (for after 
				;symbol substitution is performed)

	BIT	#ICFACT,ICFFLG	;Is command file active?
	IFNZ			;If so then
	CALL	CHKCC		;  Check to see if user typed Control/C
	BCC	30$		;  He did (subroutine set up everything)
	CALL	CHKERR		;  Check if an error occurred in last I/O.
	BCC	30$		;  It did (action to take place is in CMDBUF) ;059
	ELSE			;Else					  ;059
	CALL	UPDATE		;  Update $STATUS and $SEVERITY variables ;059
	ENDIF			;Endif

30$:	BIS	#STSUPD!SEVCHK,ICFFLG
				;Indicate that severity level checking and
				;updating of $SEVERITY and $STATUS variables
				;is to take place after processing this command

	CLR	U.CMN+U.STAT	;Clear out the status
	CLRB	EXTFLG		;Indicate we haven't just seen an EXIT command

; ***** DO COMMAND DIALOG AND PROCESS COMMAND *******
;						*****
	CALBX	U.DIA				;****
;						*****
; ******** COMMAND PROCESSING IS COMPLETE ***********

	MOV	R0,R1		;Save status of dialog.
	CMP	STK.GRD,#STK.GV ;Has stack guard word been munged?
	IFNE			;If so then
	JMPX	STK.OV		;  OH NOOOO!  Tell somebody, and exit.
	ENDIF			;Endif

	BITB	#WATCH,WATFLG	;Does user want to watch the translated string?
	IFNZ			;If so then
	TST	TRNLEN		;  Any length to this string?
	IFNZ			;  If so then
	CMESSAG	#CMDD.M <TRNLEN,#TRNBUF>
				;    Display it
	ENDIF			;  Endif
	ENDIF			;Endif

	BIT	#ICFACT,ICFFLG	;Is a command file active ?
	BEQ	10$		;No
	TSTB	EXTFLG		;Yes, have we just seen an EXIT command ?
				;If so, retain present status of flags
	IFZE			;If not, then
10$:	BICB	#CCHIT,DCLFLG	;  We are finished unnesting, a CTRL/C 	;061
				;  hit previous to this is unimportant.	;061
	MOVB	#SUCCESS,ERRFLG	;  Indicate 'success' for severity level
	ENDIF			;Endif
	
	TST	R1		;Was there an error in dialog?
	BNE	60$		;Yes, or no more commands. Anyway, exit.
	MOV	CMDTYP,R1
	BEQ	60$		;Inline commands are already finished.
	.ASSERT	R1 GE #SMLTYP	;Check that CMDTYP ...
	.ASSERT	R1 LE #BIGTYP	;is in proper range.

; ***** EXECUTE COMMAND, MIGHT NOT RETURN INLINE *****
;						 *****
	CALB	@DISPAT-2(R1)			 ;****
;						 *****
; ***** WE CAME BACK INLINE, STATUS IS IN R0	 *****

	BCC	60$		;Success! Go exit to job KBM.

; An error occurred.  Now R0=status.

	TSTB	DCLFLG		;Have we seen a CTRL/C ?		;061
.ASSUME	LASTCC	EQ 200							;061
	BLT	60$		;Yes, quit, don't error
	MOV	R0,R1		;Save error code
	REPAINT	LX.ERP,CONFPOS	;Repaint line with possible uparrows
	CMESSAGE R1		;Print error message

60$:	TSTB	RUNCOM		;Is this a RUN/CHAIN/CCL of a command file?
	BNE	70$		;Yes, re-initialize CUI and continue
	TSTB	KBMFLG		;Are we the job's KBM?
	BEQ	70$		;Yes, re-initialize CUI and get another command
	CALBX	SAVSTB		;Save symbol table in case we don't come back.
	CALLX	CLRFQX		;CCL or RUN or CHAIN.  Clear FIRQB and XRB.
	.RTS			;Return to original run-time system if
				;different from our own
70$:				.ASSUME KBM.TY EQ 0
	CLR	ENT.TY		;RTS was ours.  Want to read from KB again.
	CALL	INICUI		;Re-initialize Common User Interface.
	BR	HEART		;Go back and do dialogue.

.DSABL	LSB

GLOBAL	<CONFPOS,LX.ERP,ICFFLG,CMDD.M,STRBUF,SUBBUF,WATFLG,TRNLEN,TRNBUF>
GLOBAL	<EVLTYP,DCLFLG>

.SBTTL	INICUI - Initialize CUI common
;+
; INPUTS:
;	U.CMN 	- address of CUI common
;	ENT.TY	- entry type
;
; OUTPUTS:
;	CUI common initialized.  CUI set up to know where to read command from.
;	From TERMINAL		if ENT.TY = KBM.TY
;	From CORE COMMON 	if ENT.TY = CCL.TY or CHA.TY
;	NO READ PERFORMED 	if ENT.TY = NOR.TY
;	
;-
.ENABL	LSB

INICUI:	CALBX	U.INI <#U.CMN,#ENT.TY>					;057
	RETURN

.DSABL	LSB

.SBTTL	CHKCC - Check to see if user typed a control C
;+
; Using .SPEC function, check if a CTRL/C has been typed.  If so, then load the
; target of the "ON CONTROL_C THEN command" statement into CMDBUF and set entry
; type to NOR.TY.  This entry type tells CUI to not stomp on what is in CMDBUF.
;
; This is only called if a command file is active.
;
; OUTPUTS:
;	C = 0 indicates CTRL/C hit and CTRL/C checking enabled
;		CMDBUF = Command
;		ENT.TY = NOR.TY to indicate command is already in CMDBUF
;		INLEN  = inline command length
;	C = 1 indicates CTRL/C not hit or CTRL/C checking disabled
;		CMDBUF = unchanged
;		ENT.TY = unchanged
;-
.ENABL	LSB

CHKCC:	MOV	LCAPTR,-(SP)	;Get address of local context area
	ADD	#LCCFLG,(SP)	;Point to Control/C checking flag
	TSTB	@(SP)+		;CTRL/C checking enabled for this ICF ?
	BEQ	8$		;No, it's disabled.  Quit with C-bit set
	CALL	READCC		;Was a CONTROL/C hit?
	BCS	5$		;No, not this time
	MOVB	#CCHIT,DCLFLG	;Yes, set flag indicating a CTRL/C seen	;061
				; but want this command to execute	;061

5$:	;C-bit must be set if CCHIT is not at this point
	BITB	#CCHIT,DCLFLG	;CTRL/C been hit? (doesn't effect C-bit) ;061
	BEQ	10$		;No, quit with C-bit clear
	MOVB	#CCTYP,TYPE	;Set trap type to Control/C command
	CALL	GETCMD		;Get command, put it into CMDBUF
	TST	(PC)+		;Indicate command in CMDBUF
8$:	SEC			;Indicate CTRL/C not hit
10$:	RETURN			;Return with C-bit

READCC::CALLX	CLRFQX		;Clear the FIRQB and XRB
	MOV	#012,XRB+XRLEN	;Function code = 'Read CTRL/C flag'
	;CLRB	XRB+XRCI	;Channel #0 (*2) = user's keyboard
	MOVB	#TTYHND,XRB+XRBLKM;Handler index for terminal
	;MOVB	#0,XRB+XRBLK	;Load 0 for our KB number
	.SPEC			;Issue the call
	.ASSERT FIRQB+0 EQ #0,BYTE;No error can occur
	TSTB	XRB+XRBC	;Was a CTRL/C typed ? (-1 --> yes)
	BPL	20$		;No
	TST	(PC)+		;Yes, clear C-bit to indicate a CC was hit,
				;     ... skip next instruction
20$:	SEC			;Indicate CC not hit
	RETURN

.DSABL	LSB

GLOBAL	<SCOPE,LCCFLG,CCTYP,TYPE,DCLFLG>

.SBTTL	CHKERR - Check if an error occurred in last I/O
;+
; If an error occurred on the last I/O in the user's command file, then
; the target of the "ON <severity-level> THEN command" statement is put
; into CMDBUF and processed.  The default settings for error checking
; are then updated.  The default severity-level is set to "error" and
; the default DCL command action to take is set to "_EXIT".
;-
.ENABL	LSB

CHKERR:	CMPB	ERRFLG,#SUCCESS	;Does flag indicate last command was success ?
	BNE	5$		;No, an error occurred
	CALL	UPDATE		;Update $STATUS and $SEVERITY if necessary,
				; returns R1 = level of severity
	MOVB	R1,ERRFLG	;Update severity-level flag
	CMPB	R1,#SUCCESS	;Success ?
	BEQ	10$		;If so then don't do error checking
5$:	BIT	#SEVCHK,ICFFLG	;Go through error path?
	IFNZ			;If so then
	MOV	LCAPTR,R1
	TSTB	LERFLG(R1)	;  Is error checking enabled for this ICF ?
	IFNZ			;  If so
	CMPB	ERRFLG,LSEVLV(R1)
				;    Did an error occur for which ON ... THEN
				;     action should take place?
	IFGE			;    If so
	MOVB	#ERRTYP,TYPE	;      Set TYPE to error trap command
	CALL	GETCMD		;      Get command, put it into CMDBUF
	MOVB	#ERROR,LSEVLV(R1)
				;      Reset default severity level to "error"
	ENDIF			;    Endif
	ENDIF			;  Endif
	ENDIF			;Endif
10$:	RETURN

GLOBAL	<LSEVLV,LERFLG,ICFFLG,ERRTYP,TYPE>

.DSABL	LSB

.SBTTL	GETCMD - Get command from symbol table
;+
; We get the command from the symbol table.  The argument, TYPE, instructs
; us whether the type is CTRL/C or ON ERROR.  When we get the command we
; put it into CMDBUF.
;-
.ENABL	LSB

GETCMD:	SAVREG			;Save registers
	MOV	LCAPTR,SCOPE	;Search the local symbol table
	CALLX	GETVAL		;Get pointer to the trap command
	IFCS			;If there was an error then
	CMP	R0,#USYM.E	;  Was it that we didn't find a trap command?
	BNE	99$		;  No. Some other error so quit.
	MOV	#30$,R0		;  Yes. Default action is to issue an "_EXIT"
				;  ... command
	ENDIF			;Endif
		; R0 -> trap command
	CLR	R2		;Ensure high byte is clear
	BISB	(R0)+,R2	;Get length of command string
	IFNZ			;If it's not a null string
	MOV	#CMDBUF,R4	;  Address of command buffer
	MOV	R2,CMDLEN	;  Update command length also
	MOV	R2,INLEN	;  Length of command to transfer
20$:	MOVB	(R0)+,(R4)+	;  Move command string from symbol table to
	SOB	R2,20$		;  CMDBUF so it can be processed
	ENDIF			;Endif
	MOV	#NOR.TY,ENT.TY	;Make entry type 'Don't really read command'
	MOV	#30$,R1		;Reset default command to "_EXIT" 
				;... (change value of command entry in table 
				;... once this predefined action is taken)
	CMP	R0,R1		;%Was the symbol found in symbol table ?
	IFLO			;%If so then
	BISB	#1,LCLNFG	;  Indicate local context area changing
	MOVB	(R1)+,VALLNG	;  Set up value length
	MOV	R1,VALADR	;  Set up value address
	CALLX	ADDCMD		;  Change the value of the command
	IFCS			;  If there was an error then
99$:	MOV	R0,R1		;    Get error code
	CALLX	DOCMES		;    Print the message and continue
	ENDIF			;  Endif
	ENDIF			;Endif	
	CALL	INICUI		;Re-initialze CUI common
	RETURN			;

30$:	.ASCIC	"_EXIT"		;Issue EXIT (bypass command synonym substit)
	.EVEN

GLOBAL	<CMDBUF,CMDLEN,VALLNG,VALADR,USYM.E>
GLOBAL	<LCAPTR,LCLNFG,SCOPE>

.DSABL	LSB

.SBTTL	UPDATE - Update $STATUS and $SEVERITY variables
;+
; Updates variables with Monitor Exit Status from last I/O
;
; OUTPUTS:
;	R1 = level of severity of last I/O
;-
.ENABL	LSB

UPDATE:	CALL	GETEXIT		;Get monitor exit status from last I/O command
	MOVB	LASTIO,R1	;Move it to R1.
	BIC	#^C<7>,R1	;Only save first three bits
	CMP	R1,#SUCCESS	;Exit with success?
	IFNE			;If not then
	BIS	#SEVCHK!STSUPD,ICFFLG
				;  Indicate that updates will be done and
				;  severity levels will be checked.
	ENDIF			;Endif
	CALBX	$STATUS <R1,#0>	;Update $STATUS & $SEVERITY
	MOVB	#-1,LASTIO	;We took care of this variable
	RETURN			;

.DSABL	LSB

.SBTTL	GETEXIT - Read PFB flags, extract last error status
;+
; GETEXIT - Read PFB flags
;
; INPUTS:
; 	LASTIO	= -1 if we want to get error
;		>= 0 if we have already gotten status
;
; OUTPUTS:
; 	LASTIO  = unchanged it it was -1 on entry
;		= exit status otherwise
;-
.ENABL 	LSB

GETEXIT:
	TSTB	LASTIO			;Did we do this call already?
	IFLT				;If not then
	CALL	JBFPFB			;  Get job flags
	MOVB	FIRQB+FQPROT,LASTIO	;  Get exit status from last I/O command
	ENDIF				;Endif
	RETURN				;Return

.DSABL	LSB

.SBTTL	JBFPFB - Read PFB flags
.SBTTL	JBFPF2 - Read PFB flags, don't clear FIRQB first
.SBTTL	JBFPF3 - Read PFB flags, don't clear FIRQB first, don't set "success"
;+
; JBFPFB is called to read PFB clags
; JBFPF2 is called when you want to first set something up in the FIRQB
;        so it does not clear the first before issuing the .PFB
; JFBPF3 does not clear the FIRQB and does not insert anything in the "set
;        input status" field.
;
;% NOTE: Do we really want to set the "input status" to success in the case of 
;%       the JFBPFB and JFBPF3 calls?  It seems we may known out some valuable
;%       info (last exit status).  Jim M.
;
; No errors are possible with this call.
;-
.ENABL	LSB

JBFPFB::CALLX	CLRFQB			;Clear the FIRQB
JBFPF2::MOVB	#SUCCESS,FIRQB+FQPROT	;Set "input status" to success
JBFPF3::MOV	STFBLK,FIRQB+FQSIZ	;Set STF block # & # of blocks
	MOVB	#JBF.PF,FIRQB+FQFIL	;PFB function is "read job flags"
	.PFB				;Do PFB function 
	CALLX	U$CHKE			;Abort if error
	RETURN				;Return

.DSABL	LSB

.SBTTL	Dispatch table
;+
; This table is used to dispatch to the command type executors.
; We do not branch on in-line commands,=.  The command executors look
; like DORUN, DOCUSP, etc.
;-

	.ASSUME	INLTYP EQ 0	;Inline commands do not dispatch
DISPAT:	.ASSUME	RUNTYP EQ .-DISPAT+2
	.WORD	DORUN		;Dispatch address for RUN command.
	.ASSUME	CUSPTYP EQ .-DISPAT+2
	.WORD	DOCUSP		;Dispatch address for command that invokes
				;a CUSP.
	.ASSUME	CCLTYP EQ .-DISPAT+2
	.WORD	DOCCL		;Dispatch address for CCL prefix command.
	.ASSUME	UNKTYP EQ .-DISPAT+2
	.WORD	DOBAD		;Dispatch address for bad (unrecognized)
				;command.  

.SBTTL	DORUN--Run a program.
;+
; DORUN--Run a program.
;
; INPUTS:
;	TRNLEN	=	length of filespec string to run
;	TRNBUF	contains filespec string
;
; CALB	DORUN
;
; OUTPUTS:
; If run succeeds, call does not return.
; If run fails then:
;	R0	=	status
;	C=1
;
; SIDE EFFECTS:
;	FIRQB and XRB clobbered.
;-

; INTERNAL VARIABLES:
;	R1	=	-1 => no filetype specified
;		=	 0 => filetype specified

.ENABL	LSB

DORUN:	SUBR
	CALBX	U$FSS <TRNLEN,#TRNBUF>
				;FSS the filespec in TRNBUF.
	.ASSERT	R0 EQ #0	;No error occurred.
	CLR	R1		;Assume a filetype is present.
	BIT	#F2EXT,XRB+10	;Is there an explicit filetype?
	IFZE			;If not then
	COM	R1		;  Flag no filetype.
	MOV	#-17947.,FIRQB+FQEXT
				;  Use wildcard extension.
	ENDIF			;Endif
	;CLR	FIRQB+4		;Look for first occurrence of file.
	MOVB	#UU.LOK,FIRQB+FQFUN
	.UUO			;
	CLR	R0		;Facility is monitor, code is 0.
	BISB	FIRQB,R0	;Get error code.
	IFNZ			;If error occurred then
	CMP	R0,#NOSUCH	;  Was it ?Can't find file or account?
	IFEQ			;  If so then
	MOV	#U.FIEX,R0	;    Make it ?File does not exist.
	ENDIF			;  Endif
	RETURN
	ENDIF			;Endif
	TST	R1		;Did user specify a filetype?
	IFZE			;If so then
	BITB	#64.,FIRQB+20	;  Is the file runnable?
	BEQ	10$		;  No. Go flag ?Non-executable file.
	ENDIF			;Endif
	CALBX	SAVSTB		;Save the symbol table file		
	CALBX	U$FSS <TRNLEN,#TRNBUF>
				;FSS the filespec in TRNBUF.
	.ASSERT	R0 EQ #0	;No error occurred.
	BIS	R1,FIRQB+FQEXT	;If user didn't specify a filetype,
				;flag -1 to try all runnable filetypes.
				;Else leave user's filetype alone.
	TSTB	DCLFLG		;Have we seen a CTRL/C ?		;061
.ASSUME	LASTCC	EQ 200							;061
	BLT	8$		;Yes, don't execute this command
	.RUN			;Try to run the program.
	CLR	R0
	BISB	FIRQB,R0	;Get error code.
	.ASSERT	R0 NE #0	;An error occurred.
8$:	CMP	R0,#NOSUCH	;Was it ?Can't find file or account?
	IFEQ			;If so then
10$:	MOV	#NOEX.E,R0	;  We already checked that the file 
				;  does exist.  It must mean 
				;  ?Non-executable file.
	ENDIF			;Endif
	RETURN

.DSABL	LSB
GLOBAL	<NOSUCH,U.FIEX,NOEX.E,TRNLEN,TRNBUF,DCLFLG>

.SBTTL	DOCUSP--Invoke a CUSP at CCL entry point.
;+
; INPUTS:
;	TRNLEN	=	length of CCL string to pass > 0.
;	#TRNBUF =	address of CCL string to pass.
;	CCLDES	->	CCL descriptor block of CUSP (see DCLFIL.MAC).
;
; CALB	DOCUSP
;
; EFFECT:
;	The CCL string is moved to core common.  The "Give me privs" .PFB
;	directive is used to get privileges for ourselves.  Privs are needed
;	because we will be running programs at non-zero line numbers.
;
; OUTPUTS:
; 	If run fails then:
;		C	=	1
;		R0	=	error message
;
; SIDE EFFECTS:
;	FIRQB and XRB clobbered.
;-
.ENABL	LSB

DOCUSP:	SUBR
	BITB	#NOP,WATFLG	;Are we suppose to DO CUSP?
	BNE	40$		;No - skip to the end			;058
	MOV	CCLDES,R3	;Point at CCL descriptor block.
	MOV	TRNLEN,R1	;Get number of chars in CCL string.
	.ASSERT	R1 GT #0	;At least one.
	MOV	#U.LONG,R0	;Say ?Line too long.
	CMP	R1,FLCLEN(R3)	;Is command line longer than the 
				;utility accepts?
	BHI	40$		;Yes - exit with error			;058
	CALL	CMDLN		;Pass the command line to the program
	CALBX	SAVSTB		;Save the symbol table file		
	CALLX	CLRFQB		;Clear the FIRQB			;058
	MOVB	#PRV.PF,FIRQB+FQFIL ;Set function code			;058
	.PFB			;Gain privileges!			;058
	CALLX	U$CHKE		;Abort if error. (Shouldn't happen)	;058
	CALBX	U$FSS	<#10.,R3>;FSS logical device. Set up FIRQB for .RUN
	BCS	25$		;"?Command not installed"
	ADD	#10.,R3		;Bump R3 past the logical name.
	.ASSUME	FLNAM1 EQ FLLOG+10. ;Check layout of "CCL" table	;058
	.ASSUME	FLEXT EQ FLNAM1+4   ;...				;058
	.ASSUME	FLNENT EQ FLEXT+2   ;...				;058
	MOV	(R3)+,FIRQB+FQNAM1  ;Set up filename			;058
	MOV	(R3)+,FIRQB+FQNAM1+2 ;...				;058
	MOV	(R3)+,FIRQB+FQEXT   ;...				;058
	MOV	(R3)+,FIRQB+FQNENT  ;and entry point			;058
	BITB	#WATCH,WATFLG	;Does user want to watch debugging info?
	IFEQ			;If not then
	BIC	#1,FIRQB+FQNENT	;  Clear watch bit if set
	ENDIF			;Endif
	TSTB	DCLFLG		;Have we seen a CTRL/C ?		;061
.ASSUME	LASTCC	EQ 200							;061
	BLT	30$		;If so then don't .RUN
	.RUN			;Attempt a .RUN

;    We've run into some serious problems.  We haven't found the file
;    in the specified logical. The file was not found, so return with
;    ?Command not installed.  

20$:	CLR	R0
	BISB	FIRQB,R0	;Error is whatever RSTS said.
	CMPB	R0,#NOSUCH	;Was error ?Can't find file or account?
	BNE	27$		;Nope.					;063
25$:	MOV	#UNAV.E,R0	;Yes, make it ?Command not installed.	;063
27$:	MOV	CMDPOS,LX.ERP	;Point to command			;063

; Drop temp privs

30$:	CALLX	CLRXRB		;Clear XRB.
	MOV	#JFSYS,XRB	;Drop temporary privileges
	.CLEAR			;
	CALLX	U$CHKE		;Abort if error. (Shouldn't happen.)
40$:	RETURN			;					;058

.DSABL	LSB

GLOBAL	<TRNLEN,U.LONG,WATFLG,UNAV.E,NOSUCH,LX.ERP,DCLFLG>

.SBTTL	CMDLN	- Set up command line for program

;+
; CMDLN - Set up command line for program
;
; This routine attempts to move the command line to core
; common or XBUF via the .CMDLN directive.  If the directive
; fails (such as no XBUF available) then we sleep 1 second
; and try again.  We will retry 10 times before giving up and
; aborting.  //Should not abort but rather issue an error
; mesage and quit. //
;
; Input:
;	R1  = Number of characters in the command line
;
; Call:
;	CALL	CMDLN
;
; Output:
;	R0  = Random
;	R1  = Unchanged
;-

.ENABL	LSB

CMDLN:	MOV	#10.,R0		; Retry .CMDLN a max of 10. times.	;057
10$:	CALLX	CLRXRB		; Clear the XRB.
	MOV	R1,XRB+XRLEN	; Store the buffer length.
	MOV	R1,XRB+XRBC	; Store the byte count.
	MOV	#TRNBUF,XRB+XRLOC
				; Point at translated string
	.CMDLN			; Move the command line.
	TSTB	FIRQB+0		; Did an error occur?
	IFNE			; If so then
	CALLX	CLRXRB		;   Clear the XRB.
	MOV	#1,XRB+XRLEN	;   Set sleep time to 1 sec.
	.SLEEP			;   Sleep for a second.
	SOB	R0,10$		;   Go back and try again.
	ENDIF			; Endif
	CALLX	U$CHKE		; Abort if error
	RETURN

	GLOBAL	<U$CHKE>
.DSABL	LSB

.SBTTL	DOBAD--Process an unrecognized command.
;+
; DOBAD--Process a bad (unrecognized) command.  Try it as a CCL.
;
; INPUTS:
;	TRNLEN	=	length of command string > 0
;	#TRNBUF	=	address of command string
;
; CALB	DOBAD
;
; OUTPUTS:
; C=1 if error
;	R0	=	U.ICMD (?Invalid command)
;
; EFFECTS:
;	If command is a legal CCL, it is executed, and we don't return.
;-

.ENABL	LSB

DOBAD:	SUBR
	CALL	DOCCL		;If it's a valid CCL command, then exit
				;and execute it.
	MOV	CMDPOS,LX.ERP	;Position of command is position of error;063
	CMP	R0,#CCL.E	;Was error "?Invalid CCL command"?	;063
	BNE	10$		;No, all done then			;063
	MOV	#U.ICMD,R0	;Yes, make it "?Invalid command"	;063
10$:	RETURN

.DSABL	LSB
GLOBAL	<CCL.E,U.ICMD,LX.ERP>

.SBTTL	DOCCL--Execute a CCL string.
;+
; DOCCL--Execute a CCL string.
;
; INPUTS:
;	TRNLEN	=	length of string > 0
;	#TRNBUF	=	address of string
;
; CALB	DOCCL
;
; OUTPUTS:
; 	If CCL succeeds, call does not return.
; 	If CCL fails then:
;		R0	=	status
;		C=1
;
; SIDE EFFECTS:
;	FIRQB and XRB clobbered.
;-

.ENABL	LSB

DOCCL:	SUBR
	CALBX	SAVSTB		;Save the symbol table file in case we leave
	CMP	ENT.TY,#CCL.TY	;Were we entered as a CCL?  
	BEQ	20$		;Yes, don't try as a CCL then, could be	;063
				;infinite loop.  ?Invalid command
	CALL	CLRXRB		;Clear XRB.
	MOV	TRNLEN,XRB+XRLEN;Length of CCL string.
	MOV	TRNLEN,XRB+XRBC	;Length of CCL string.
	MOV	#TRNBUF,XRB+XRLOC;Address of CCL string.
	TSTB	DCLFLG		;Have we seen a CTRL/C ?		;061
.ASSUME	LASTCC	EQ 200							;061
	BLT	30$		;Yes, don't attempt CCL			;063
	.CCL			;If CCL fails we return inline.

	MOVB	FIRQB+0,R0	;Save the error code.  Did we get one?	;063
	BEQ	20$		;No, we'll use the default		;063
	CMP	R0,#PRVIOL	;Was it "?Protection violation" ?	;063
	BNE	10$		;Nope.					;063
	MOV	#NOEX.E,R0	;Yes, make it "?Non-executable file"	;063
	BR	30$		;All done now				;063

10$:	CMP	R0,#NOSUCH	;Was it "?Can't find file or account"?	;063
	BNE	30$		;Nope.					;063
	MOV	#UNAV.E,R0	;Yes, make it ?Command not installed.	;063
	BR	30$		;All done now				;063

20$:	MOV	#CCL.E,R0	;"?Invalid CCL command"			;063
30$:	RETURN

.DSABL	LSB
GLOBAL	<CCL.E,TRNBUF,TRNLEN,PRVIOL,NOEX.E,DCLFLG,UNAV.E>		;063

.SBTTL	EXIT -- Exit program
;+
; EXIT -- Exit program
;
; JMP	EXIT
;
; Control passes to job keyboard monitor.  If job keyboard monitor cannot
; be reached for some reason - like non-resident run-time system -
; then control passes to the system default keyboard monitor.
;
; This routine makes no assumptions about where SP points to.
; It will function even when things are very screwed up.
; It can be used both for a normal exit after a command completes,
; and for an abnormal exit after a software or hardware failure.
;-
.ENABL	LSB

EXIT::	MOV	#USRSP,SP	;Reset the stack.
	CALLX	CLRFQX		;Clear FIRQB and XRB.
	.RTS			;Exit to job KBM.
	JMP	@P.NEW		;Exit to default KBM (Which is DCL).

.DSABL	LSB

.SBTTL	DIE--Terminate job.
;+
; DIE--Terminate job.
;
; JMP	DIE
;
; EFFECT:
;	Kill our own job.
;-

.ENABL	LSB

DIE:	CALLX	CLRXRB		;Clear XRB for read
	MOV	#100000,XRB+XRTIME;Infinite keyboard monitor wait
	MOV	#TRNBUF,XRB+XRLOC;Random starting address of buffer
	MOV	#255.,XRB+XRLEN	;Size of our random buffer in bytes
	;CLRB	XRB+XRCI	;Read from channel zero ...
	.READ			;  Until we are dead.
	BR	DIE		;  (Monitor will kill job if logged out)

.DSABL	LSB
GLOBAL	<TRNBUF>

.END	P..NEW
