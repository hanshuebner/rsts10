.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.INCLUDE	/CUI:CUIPFX.MAC/
TITLE	AUXPOL,<DCLAUX Storage Pool>,0A,10-MAY-91,CEK/JFM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR AUXPOL
;+
;
;  001	CEK  23-JUN-82	Created from CUITRE
;  002	CEK  17-Nov-82	Use modified message facility.
;  003	JFM  12-May-83	Fixed typo.
;
;		[RSTS/E V9.7]
;  004	JFM  14-Sep-88	The name of this module is AUXPOL, make necessary 
;			changes.
;
;-

;+
; AUXPOL -- DCLAUX Storage Pool
;
; This module provides simple-minded dynamic storage.
; First you call U$IPOL to initialize the pool.
; Then you call U$ALLO as needed to allocate space.
; There is no way to return space.
; There is also no way to make the pool grow dynamically.
;-

	.PSECT	CUIPOL,RO,REL,LCL,CON	;//AUXPOL?//
	DEFORG	CUIPOL			;//AUXPOL?//

.SBTTL	Constants
POOL.SIZ =:	512.		;Size of storage pool for DCLAUX in words.

.SBTTL	Variables 
	TMPORG	IMPURE
POOL:	.BLKW	POOL.SIZ	;Storage pool.
NEXT:	.BLKW			;Address of next free slot in pool.
	UNORG

.SBTTL	U$IPOL--Initialize pool
;+
; U$IPOL--Initialize pool
;
; CALBX	U$IPOL
;-

U$IPOL::SUBR
	MOV	#POOL,NEXT
	RETURN

.SBTTL	U$ALLO--allocate space from storage pool
;+
; U$ALLO--allocate space from storage pool.
;
; INPUTS:
;	size	=	size of desired storage block, in bytes.
;			Must be an even number, greater than 0.
;
; CALBX	U$ALLO <size>
;
; OUTPUTS:
; C=0 if success
;	R0	=	0
;	R1	->	storage block (word-aligned)
;			storage block contains all zeroes
; C=1 if error
;	R0	=	XCDCOR (?Maximum memory exceeded)
;-

.ENABL	LSB

U$ALLO::SUBR	<SIZE>
	MOV	NEXT,R1		;Get address of next free storage block.
	MOV	SIZE(R5),R3	;Get size of storage block, in bytes.
	ADD	R3,R1		;Get address of next free storage block.
	CMP	R1,#POOL+<2*POOL.SIZ>;Have we overflowed storage pool?
	IFHI			;If so then
	MOV	#XCDCOR,R0	;  ?Maximum memory exceeded.
	BR	20$		;  Quit.
	ENDIF
	MOV	R1,NEXT		;Save address of next free storage block.
	.ASSERT	R3 GT #0	;Size of storage block is non-zero.
10$:	CLRB	-(R1)		;Clear the storage block.
	SOB	R3,10$
				;R1 now points at first word of storage block.
	MOV	R1,TOS.R1(SP)	;Give pointer back to caller.
20$:	RETURN

.DSABL	LSB
GLOBAL	<XCDCOR>
.END
