.INCLUDE	/CMN:COMMON.MAC/
.LIBRARY	/CUI:CUIMAC.MLB/
.LIBRARY	/DCL:DCLMAC.MLB/
.NLIST
.INCLUDE	/DCL:AUXPFX.MAC/
.LIST
TITLE	AUXSRT,<DCL SORT and MERGE Commands>,0A,10-MAY-91,JFM/GMB

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR AUXSRT
;+
;  001	JFM  18-Apr-83	Created.
;  002	JFM  11-Aug-83	Changed PUTCCL's, SORT & MERGE are two different tasks.
;  003  JFM  21-Nov-83  Fixed various bugs
;  004	JFM  22-Mar-84	Got rid of access QF.PARMs
;  005	JFM  12-Mar-85	Put in integer ranges for all qualifiers and arguments,
;			added /TREESPACE, changed /FORMAT=SIZE to =STREAM, 
;			used $DISALLOWs to cleaned up code.
;  006  GMB  16-Dec-85	Changed /CS:D to /CS:M for multi-national collating seq.
;
;			[RSTS/E V9.7]
;  007	JFM  14-Sep-88	The name of this module is AUXSRT, change the title
;-

	.PSECT	AUXSRT,RO,REL,CON
	DEFORG	AUXSRT

	$CUI	TABLE			;Include macros for CUI tables

.MCALL	PUTCCL,PUTSPA,PUTSTR,PUTDEV
.MCALL	LOOKUP,$DISALLOW

.SBTTL	SORT and MERGE Commands

.SBTTL	Input file qualifiers

MIN.QL:
SIN.QL:	DEFQUAL	FMT.Q,FLAGS=QF.ALIS!QF.PARM,ARG=REQ
						;  /FORMAT=(arg,arg)
	 DEFARG	FIL.K,ARG=REQ			;    =FILE_SIZE:1-(2**32-1)
	  DEFARG TYPE=U$U32,MINVAL=1		;      =mmm
	  ENDARG				;      
	 DEFARG	RECS.K,ARG=REQ			;    =RECORD_SIZE:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 ENDARG					;    
	DEFQUAL	INDS.Q,FLAGS=QF.PARM,ARG=REQ	;  /INDEXED_SEQUENTIAL:1-255
	 DEFARG	TYPE=U$U8,MINVAL=1		;    =nnn
	 ENDARG					;    
	DEFQUAL	SHAR.Q,FLAGS=QF.NEG!QF.PARM	;  /[NO]SHAREABLE
	DEFQUAL	TRE.Q,FLAGS=QF.PARM,ARG=REQ	;  /TREE_SPACE:1-100
	 DEFARG	TYPE=U$U8,MAXVAL=100		;    =NNN
	 ENDARG

.SBTTL	Output file qualifiers

MOU.QL:
SOU.QL:	DEFQUAL	ALLO.Q,FLAGS=QF.PARM,ARG=REQ,CLASS=<OUT.TG>
						;  /ALLOCATION:1-(2**32-1)
	 DEFARG	TYPE=U$U32,MINVAL=1		;    =nnn
	 ENDARG					;    
	DEFQUAL	BUC.Q,FLAGS=QF.PARM,ARG=REQ,CLASS=<OUT.TG>
						;  /BUCKET_SIZE:1-15
	 DEFARG	TYPE=U$U8,MINVAL=1,MAXVAL=15	;    =nnn
	 ENDARG					;    
	DEFQUAL	CONTIG.Q,FLAGS=QF.NEG!QF.PARM,CLASS=<OUT.TG>
						;  /[NO]CONTIGUOUS
	DEFQUAL	FMT.Q,ARG=REQ,FLAGS=QF.ALIS!QF.PARM
						;  /FORMAT=(options)
	 DEFARG	FIX.K,ARG=OPT			;    =FIXED:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	VAR.K,ARG=OPT			;    =VARIABLE:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	CONT.K,ARG=OPT			;    =CONTROLLED:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	RMS.K,ARG=OPT			;    =RMS_STREAM:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	STR.K,ARG=OPT			;    =STREAM:1-32767
	  DEFARG TYPE=U$U16,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	BLO.K,ARG=REQ			;    =BLOCK_SIZE:18-8192
	  DEFARG TYPE=U$U16,MINVAL=18,MAXVAL=8192;     =nnn
	  ENDARG				;      
	 DEFARG	FSZ.K,ARG=REQ			;    =FSZ:1-255
	  DEFARG TYPE=U$U8,MINVAL=1		;      =nnn
	  ENDARG				;      
	 ENDARG					;    
	DEFQUAL	INDS.Q,FLAGS=QF.PARM,ARG=REQ	;  /INDEXED_SEQUENTIAL:1-255
	 DEFARG	TYPE=U$U8,MINVAL=1		;    =nnn
	 ENDARG					;    
	DEFQUAL	LOA.Q,FLAGS=QF.PARM,CLASS=<OUT.TG>
						;  /LOAD_FILL		 
	DEFQUAL	OVE.Q,FLAGS=QF.NEG!QF.PARM,CLASS=<OUT.TG>
						;  /[NO]OVER_LAY
	DEFQUAL	RELA.Q,FLAGS=QF.PARM,CLASS=<OUT.TG>
						;  /RELATIVE
	DEFQUAL	SEQ.Q,FLAGS=QF.PARM,CLASS=<OUT.TG>
						;  /SEQUENTIAL

.SBTTL	Command qualifier list

MER.QL:
SOR.QL:	DEFQUAL	CHES.Q,FLAGS=QF.NEG,CLASS=<MRG.TG>;/[NO]CHECK_SEQUENCE
	DEFQUAL	COL.Q,ARG=REQ 			;  /COLLATING_SEQUENCE[=arg]
	 DEFARG	ASCI.K				;    =ASCII
	 DEFARG EBC.K				;    =EBCDIC
	 DEFARG	MUL.K				;    =MULTINATIONAL
	 ENDARG					;    
	DEFQUAL	DUP.Q,FLAGS=QF.NEG		;  /[NO]DUPLICATES
	DEFQUAL	KEY.Q,FLAGS=QF.ALIS!QF.MULT,ARG=REQ 
						;  /KEY =option(s)
	 DEFARG	POS.K,ARG=REQ			;    =POSITION:1-255
	  DEFARG TYPE=U$U8,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG SIZ.K,ARG=REQ			;    =SIZE:1-255
	  DEFARG TYPE=U$U8,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	ASCF.K				;    =ASCII_FLOATING
	 DEFARG ASCZ.K				;    =ASCII_ZONED
	 DEFARG BIN.K				;    =BINARY
	 DEFARG	CHA.K				;    =CHARACTER
	 DEFARG	DECI.K				;    =DECIMAL
	 DEFARG	DIBZ.K				;    =DIBOL_ZONED
	 DEFARG	DFL.K				;    =D_FLOATING
	 DEFARG	FFL.K				;    =F_FLOATING
	 DEFARG PACD.K				;    =PACKED_DECIMAL
	 DEFARG SIG.K				;    =SIGNED
	 DEFARG	UNS.K				;    =UNSIGNED
	 DEFARG	LEA.K				;    =LEADING_SIGN
	 DEFARG	TRA.K				;    =TRAILING_SIGN
	 DEFARG OVE.K				;    =OVERPUNCHED_SIGN
	 DEFARG SEPS.K				;    =SEPARATE_SIGN
	 DEFARG ASCE.K				;    =ASCENDING
	 DEFARG	DES.K				;    =DESCENDING
	 ENDARG					;    
	DEFQUAL PROC.Q,ARG=REQ,CLASS=<SRT.TG>	;  /PROCESS=option
	 DEFARG ADD.K				;    =ADDRESS
	 DEFARG IND.K				;    =INDEX
	 DEFARG	REC.K				;    =RECORD
	 DEFARG	TAG.K				;    =TAG
	 ENDARG					;    
	DEFQUAL	SPEC.Q,ARG=REQ			;  /SPECIFICATION=file
	 DEFARG	TYPE=LF.N			;    =file specification
	 ENDARG					;    
	DEFQUAL	STAB.Q,FLAGS=QF.NEG		;  /[NO]STABLE
	DEFQUAL	STAT.Q,FLAGS=QF.NEG		;  /[NO]STATISTICS
	DEFQUAL	WOR.Q,FLAGS=QF.ALIS,ARG=OPT,CLASS=<SRT.TG>
						;  /WORKFILES[=option,...]
	 DEFARG	NUM.K,ARG=REQ			;    =NUMBER:0-10
	  DEFARG TYPE=U$U8,MAXVAL=10		;      =nnn
 	  ENDARG				;      
	 DEFARG	DEV.K,ARG=REQ			;    =DEVICE=dev:
	  DEFARG TYPE=U$DEV			;      =dev:
	  ENDARG				;      
	 DEFARG	ALLN.K,ARG=REQ			;    =ALLOCATION:1-(2**32-1)
	  DEFARG TYPE=U$U32,MINVAL=1		;      =nnn
	  ENDARG				;      
	 DEFARG	CON.K,FLAGS=AF.NEG		;    =[NO]CONTIGUOUS
	 DEFARG	SIZ.K,ARG=REQ			;    =SIZE:1-255
	  DEFARG TYPE=U$U8,MINVAL=1		;      =nnn
	  ENDARG				;      
	 ENDARG					;    
	ENDQUAL					;  


.SBTTL	Parse the SORT and MERGE commands

.ENABL LSB

SOR.CMD::$THR
	$DEFCMD	QUAL=SOR.QL
	$PARM	PARM1,TYPE=LF.N,PROMPT=INPF$P,OCCURS=10,QUAL=SIN.QL
					;Parse input filespecs
	$DISALLOW <OUT.TG>,U.IQ		;Disallow any output output quals so far
	$PARM	PARM2,TYPE=LF.N,PROMPT=OUTF$P,QUAL=SOU.QL
					;Parse output filespec.
	$ENDCMD
	DFLTKA	KEY.Q,CHA.K		;Default /KEY to =CHARACTER.

	PUTCCL	...SRT			;SORT 
	PUTSPA				;" "
	$DISALLOW <MRG.TG>,U.IQ		;Disallow any MERGE qualifiers
	$GOTO BEGIN			;Begin parsing

MER.CMD::$THR
	$DEFCMD	QUAL=MER.QL
	$PARM	PARM1,TYPE=LF.N,PROMPT=INPF$P,OCCURS=10,QUAL=MIN.QL
					;Parse input filespecs
	$DISALLOW <OUT.TG>,U.IQ		;Disallow any output output quals so far
	$PARM	PARM2,TYPE=LF.N,PROMPT=OUTF$P,QUAL=MOU.QL
					;Parse output filespec.
	$ENDCMD
	DFLTKA	KEY.Q,CHA.K		;Default /KEY to =CHARACTER.

	PUTCCL	...MGE			;MERGE
	PUTSPA				;" "
	$DISALLOW <SRT.TG>,U.IQ		;Disallow any SORT-only qualifiers 

;+
; Parse the output filespec
;-

BEGIN:	$FETP	PARM2			;Fetch the output filespec.
	PUTSTR				;"filespec" 

;+
;Parse the output qualifiers
;-

	$FETPQ	ALLO.Q			;Did he specify /ALLOCATION?
	$IF	PRESENT			;If so then
	PUTSTR	"/AL:"			; "/AL:"
	$FETA				;  Fetch the argument
	PUTSTR				;  mmm
	$ENDIF				;End

	$FETPQ	BUC.Q			;Did he specify /BUCKET_SIZE?
	$IF	PRESENT			;If so then
	PUTSTR	"/BU:"			; "/BU:"
	$FETA				;  Fetch the argument
	PUTSTR				;  mmm
	$ENDIF				;End
	
	$FETPQ	CONTIG.Q		;Did he specify /[NO]CONTIGUOUS?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /CONTIGUOUS then
	PUTSTR	"/CO"			;    "/CO"
	$ENDIF				;  End
	$ENDIF				;End

	$FETPQ	FMT.Q			;Did he specify /FORMAT?
	$IF	PRESENT			;If so then
	PUTSTR	"/FO"			;  "/FO"
	$FETKA	FIX.K			;  Did he specify =FIXED?
	$IF	PRESENT			;  If so then
	PUTSTR	":F"			;    ":F"
	$FETA				;    Fetch the argument
	$IF	PRESENT			;    If present
	PUTSTR	":"			;      ":"
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$FETKA	VAR.K			;  Did he specify =VARIABLE?
	$IF	PRESENT			;  If so then
	PUTSTR	":V"			;    ":V"
	$FETA				;    Fetch the argument
	$IF	PRESENT			;    If present
	PUTSTR	":"			;      ":"
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$FETKA	CONT.K			;  Did he specify =CONTROLLED?
	$IF	PRESENT			;  If so then
	PUTSTR	":C"			;    ":C"
	$FETA				;    Fetch the argument
	$IF	PRESENT			;    If present
	PUTSTR	":"			;      ":"
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$FETKA	FSZ.K			;    Did he specify =FSZ?
	$IF	PRESENT			;    If so then
	PUTSTR	":"			;      ":"
	$FETA				;      Fetch the argument
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$FETKA	RMS.K			;  Did he specify =RMS_STREAM?
	$IF	PRESENT			;  If so then
	PUTSTR	":R"			;    ":R"
	$FETA				;    Fetch the argument
	$IF	PRESENT			;    If present
	PUTSTR	":"			;      ":"
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$ENDIF				;  Endif
	$FETKA	STR.K			;  Did he specify =STREAM?
	$IF	PRESENT			;  If so then
	PUTSTR	":S"			;    ":S"
	$FETA				;    Fetch the argument
	$IF	PRESENT			;    If present
	PUTSTR	":"			;      ":"
	PUTSTR				;      "nnn"
	$ENDIF				;    Endif
	$ENDIF				;  End
	$FETKA	BLO.K			;  Did he specify =BLOCK_SIZE?
	$IF	PRESENT			;  If so then
	PUTSTR	"/BL:"			;    "/BL:"
	$FETA				;    Fetch the argument
	PUTSTR				;    "mmm"
	$ENDIF				;  End
	$ENDIF				;End

	$FETPQ	INDS.Q			;Did he specify /INDEXED_SEQUENTIAL?
	$IF	PRESENT			;If so then
	PUTSTR	"/IN:"			;  "/IN:"
	$FETA				;  Fetch the argument
	PUTSTR				;  nnn
	$ENDIF				;End

	$FETPQ	LOA.Q			;Did he specify /LOAD_FILL?
	$IF	PRESENT			;If so then
	PUTSTR	"/LO"			;  "/LO"
	$ENDIF				;End

	$FETPQ	OVE.Q			;Did he specify /[NO]OVERLAY?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /OVERLAY then
	PUTSTR	"/OV"			;    "/OV"
	$ENDIF				;  End
	$ENDIF				;End
	
	$FETPQ	RELA.Q			;Did he specify /RELATIVE?
	$IF	PRESENT			;If so then
	PUTSTR	"/RE"			;  "/RE"
	$ENDIF				;End

	$FETPQ	SEQ.Q			;Did he specify /SEQUENTIAL?
	$IF	PRESENT			;If so then
	PUTSTR	"/SE"			;  "/SE"
	$ENDIF				;End
	
	PUTSTR	"="			;"="

;+
; Parse the first input filespec now
;-

	$FETP	PARM1			;Fetch the input filespec.
	PUTSTR				;"filespec" 
	LOOKUP	FILE,DEFTYP=<DAT>	;Make sure the input file exists.
	
;+
;These qualifiers have to follow the FIRST input filespec.
;-

	$FETCQ	CHES.Q			;Did he specify /[NO]CHECK_SEQUENCE?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /CHECK_SEQUENCE then
	PUTSTR	"/CH"			;    "/CH"
	$ELSE				;  Else he specified /NOCHECK_SEQUENCE.
	PUTSTR	"/-CH"			;    "/-CH"
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	COL.Q			;Did he specify /COLLATING_SEQUENCE?
	$IF	PRESENT			;If so then
	$FETKA	ASCI.K			;  Did he specify =ASCII?
	$IF	PRESENT			;  If so then
	PUTSTR	"/CS:A"			;    "/CS:A"
	$ELSE				;  Else
	$FETKA	MUL.K			;    Did he specify =MULTINATIONAL?
	$IF	PRESENT			;    If so then
	PUTSTR	"/CS:M"			;      "/CS:M"
	$ELSE				;    Else he specified =EBCDIC.
	PUTSTR	"/CS:E"			;      "/CS:E"
	$ENDIF				;    End
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	DUP.Q			;Did he specify /[NO]DUPLICATES?
	$IF	PRESENT			;If so then
	$IF	NO			;  If /NODUPLICATES then
	PUTSTR	"/ND"			;    "/ND"
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	KEY.Q			;Did he specify /KEY?
	$IF	PRESENT			;If so then
	PUTSTR	"/KE:"			;  "/KE:"
20$:	$FETKA	ASCF.K			;  Did he specify =ASCII_FLOATING?
	$IF	PRESENT			;  If so then
	PUTSTR	"A"			;    "A"
	$ELSE				;  Else
	$FETKA	ASCZ.K			;    Did he specify =ASCII_ZONED?
	$IF	PRESENT			;    If so then
	PUTSTR	"Z"			;      "Z"
	$ELSE				;    Else
	$FETKA	BIN.K			;      Did he specify =BINARY?
	$IF	PRESENT			;      If so then
	$FETKA	UNS.K			;        Is it BINARY,UNSIGNED?
	$IF	PRESENT			;        If so then
	PUTSTR	"U"			;          "U"
	$ELSE				;        Else
	PUTSTR	"S"			;          "S"
	$ENDIF				;        End
	$ELSE				;      Else
	$FETKA	DIBZ.K			;        Did he specify =DIBOL_ZONED?
	$IF	PRESENT			;        If so then
	PUTSTR	"L"			;          "L"
	$ELSE				;        Else
	$FETKA	DFL.K			;          Did he spcfy =D_FLOATING?
	$IF	PRESENT			;          If so then
	PUTSTR	"F"			;            "F"
	$ELSE				;          Else
	$FETKA	FFL.K			;            Did he spcfy =FFLOATING?
	$IF	PRESENT			;            If so then
	PUTSTR	"F"			;              "F"
	$ELSE				;            Else
	$FETKA	PACD.K			;              How about =PACKED_DEC?
	$IF	PRESENT			;              If so then
	PUTSTR	"P"			;                "P"
	$ELSE				;              Else
	$FETKA	DECI.K			;                How about =DECIMAL?
	$IF	PRESENT			;                If so then
	$GOTO 	40$			;                  Go process that.
	$ELSE				;                Else default to char
	PUTSTR	"C"			;                  "C"
	$ENDIF				;                End
	$ENDIF				;              End
	$ENDIF				;            End
	$ENDIF				;          End
	$ENDIF				;        End
	$ENDIF				;      End
	$ENDIF				;    End
	$ENDIF				;  End
30$:	$FETKA	ASCE.K			;  Did he specify =ASCENDING?
	$IF	PRESENT			;  If so then
	PUTSTR	"N"			;    "N"
	$ELSE				;  Else
	$FETKA	DES.K			;    Did he specify =DESCENDING?
	$IF	PRESENT			;    If so then
	PUTSTR	"O"			;      "O"
	$ENDIF				;    End
	$ENDIF				;  End
	$FETKA	POS.K			;  Did he specify =POSITION?
	$IF	ABSENT			;  If not then 
	$DISALLOW <KEY.Q>,ADDA.E	;    "?Additional argument required"
	$ELSE				;  Else
	$FETA				;    Fetch the argument
	PUTSTR				;    "nnn"
	$ENDIF				;  End
	PUTSTR	"."			;  "." 

	$FETKA	SIZ.K			;  Did he specify =SIZE?
	$IF	PRESENT			;  If so then
	$DO				;  
	MOV	U.CMN+U.POS,LX.ERP	;    Calculate it's position.
	$ENDDO				;  
	$FETKA	DFL.K			;    Did he also specify =D_FLOATING?
	$IF	PRESENT			;    If so then
	$GOTO	36$			;      We have a conflict.
	$ELSE				;    Else
	$FETKA	FFL.K			;      Did he also specify =F_FLOATING?
	$IF	PRESENT			;      If so then
	$GOTO	36$			;        We have a conflict.
	$ELSE				;      Else
	$FETA				;        Fetch the argument
	PUTSTR				;        "mmm"
	$ENDIF				;      End
	$ENDIF				;    End
	$ELSE				;  Else he did not specify =SIZE
	$FETKA	DFL.K			;    Did he specify =D_FLOATING?
	$IF	PRESENT			;    If so then
	PUTSTR	"8"			;      "8"
	$ELSE				;    Else
	$FETKA	FFL.K			;      Did he also specify =F_FLOATING?
	$IF	PRESENT			;      If so then
	PUTSTR	"4"			;        "4"
	$ELSE				;      Else
	$DISALLOW <KEY.Q>,ADDA.E	;        ?Additional argument required
	$ENDIF				;      End
	$ENDIF				;    End
	$ENDIF				;  End
	$ENDIF				;End
	$GOTO	50$			;Go past these routines.

;+
; This routine is jumped to if both =SIZE and either =D_ or F_FLOATING have 
; been specified in the /KEY qualifier.  This rountine does not return.
;-
	
36$:	$DO				;We have a conflict.
	MOV	U.CMN+U.POS,CONFPOS	;Point to offendeing qualifier
	MOV	#U.CNFE,R0		;?Conflicting elements
	$ENDDO				;Return 

;+
; This little routine is here because the nested comments were getting too much 
; to handle. Three extra words for alot of readability.  JFM
;
; If we get here then we have just found that the /KEY qualifier has the
; =DECIMAL argument.  Depending on which other arguments follow the /KEY 
; qualifier we translate it differently.
;-

40$:	$FETKA	SEPS.K			;Did he specify /KEY=SEPARATE_SIGN?
	$IF	PRESENT			;If so then
	$FETKA	LEA.K			;  Did he also say =LEADING_SIGN?
	$IF	PRESENT			;  If so then
	PUTSTR	"I"			;    "I"
	$ELSE				;  Else he didn't say =LEADING_SIGN.
	PUTSTR	"J"			;    "J"
	$ENDIF				;  End
	$ELSE				;Else
	$FETKA	TRA.K			;  Did he specify =TRAILING_SIGN
	$IF	PRESENT			;  If so then
	PUTSTR	"D"			;    "D"
	$ELSE				;  Else 
	$FETKA	LEA.K			;    Did he specify =LEADING_SIGN?
	$IF	PRESENT			;    If so then
	PUTSTR	"K"			;      "K"
	$ELSE				;    Else it's something.
	PUTSTR	"D"			;      "D"	
	$ENDIF				;    End
	$ENDIF				;  End
	$ENDIF				;End
	$GOTO	30$			;Go back and finish /KEY
	
50$:	$FETNQ	KEY.Q			;Did he specify any more /KEY's?
	$IF	PRESENT			;If so then
	PUTSTR	":"			;  ":"
	$GOTO	20$			;  Go process the arguments
	$ENDIF
	
	$FETCQ	PROC.Q			;Did he specify /PROCESS?
	$IF	PRESENT			;If so then
	PUTSTR	"/PR:"			;  "/PR:"
	$FETKA	ADD.K			;  Did he specify =ADDRESS?
	$IF	PRESENT			;  If so then
	PUTSTR	"A"			;    "A"
	$ELSE				;  Else
	$FETKA	IND.K			;    Did he speicfy =INDEX?
	$IF	PRESENT			;    If so then
	PUTSTR	"I"			;      "I"
	$ELSE				;    Else 
	$FETKA	REC.K			;      Did he speicfy =RECORD?
	$IF	PRESENT			;      If so then
	PUTSTR	"R"			;        "R"
	$ELSE				;      Else he specified =TAG
	PUTSTR	"T"			;        "T"
	$ENDIF				;      End
	$ENDIF				;    End
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	STAB.Q			;Did he specify /[NO]STABLE?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /STABLE then
	PUTSTR	"/ST"			;    "/ST"
	$ELSE				;  Else it is /NOSTABLE
	PUTSTR	"/-ST"			;    "/-ST"
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	STAT.Q			;Did he specify /[NO]STATISTICS?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /STATISTICS then
	PUTSTR	"/SS"			;    "/SS"
	$ENDIF				;  End
	$ENDIF				;End

	$FETCQ	WOR.Q			;Did he specify /WORK_FILES?
	$IF	PRESENT			;If so then
	$FETKA	NUM.K			;  Did he specify =NUMBER?
	$IF	PRESENT			;  If so then
	PUTSTR	"/FI:"			;    "/FI:"
	$FETA				;    
	PUTSTR				;    nnn
	$ENDIF				;  End
	$FETKA	DEV.K			;  Did he specify =DEVICE?
	$IF	PRESENT			;  If so then
	PUTSTR	"/DE:"			;    "/DE:"
	$FETA				;    
	PUTDEV				;    dev:
	$ENDIF				;  End
	$FETKA	ALLN.K			;  Did he specify =ALLOCATION?
	$IF	PRESENT			;  If so then
	PUTSTR	"/AL:"			;    "/AL:"
	$FETA				;    
	PUTSTR				;    mmm
	$ENDIF				;  End
	$FETKA	CON.K			;  Did he specify =[NO]CONTIGUOUS?
	$IF	PRESENT			;  If so then
	$IF	YES			;    If /CONTIGUOUS then
	PUTSTR	"/CO"			;      "/CO"
	$ENDIF				;    End
	$ENDIF				;  End
	$FETKA	SIZ.K			;  Did he specify =SIZE?
	$IF	PRESENT			;  If so then
	PUTSTR	"/SI:"			;    "/SI:"
	$FETA				;    
	PUTSTR				;    ppp
	$ENDIF				;  End
	$ENDIF				;End

;+
; Now we can parse the rest of the input filespecs.
;-

	$FETP	PARM1 			;set up the correct parmtree
60$:	$FETPQ	FMT.Q			;Did he specify /FORMAT?
	$IF	PRESENT			;If so then
	$FETKA	RECS.K			;  Did he specify =RECORD_SIZE?
	$IF	PRESENT			;  If so then
	PUTSTR	"/FO:U:"		;    "/FO:U:"
	$FETA				;    Fetch the argument
	PUTSTR				;    nnn
	$ENDIF				;  Endif
	$FETKA	FIL.K			;  Did he specify =FILE_SIZE?
	$IF	PRESENT			;  If so then
	PUTSTR	"/BK:"			;    "/BK:"
	$FETA				;    Fetch the argument
	PUTSTR				;    mmm
	$ENDIF				;  End
	$ENDIF				;End

	$FETPQ	INDS.Q			;Did he specify /INDEXED_SEQUENTIAL?
	$IF	PRESENT			;If so then
	PUTSTR	"/IN:"			;  "/IN:"
	$FETA				;  Fetch the argument
	PUTSTR				;  nnn
	$ENDIF				;End

	$FETPQ	TRE.Q			;Did he specify /TREE_SPACE?
	$IF	PRESENT			;If so then
	PUTSTR	"/PT:"			;  "/PT:"
	$FETA				;  Fetch the argument
	PUTSTR				;  "nnn"
	$ENDIF				;End

	$FETPQ	SHAR.Q			;Did he specify /[NO]SHAREABLE?
	$IF	PRESENT			;If so then
	$IF	YES			;  If /SHAREABLE then
	PUTSTR	"/SH"			;    "/SH"
	$ELSE				;  Else
	PUTSTR	"/-SH"			;    "/-SH"
	$ENDIF				;  End
	$ENDIF				;End

;+
; Parse the rest of the input filespecs, if any
;-

	$FETNP				;Any more input filespecs?
	$IF	PRESENT			;If so then
	PUTSTR	""<COMMA>		;  ","
	PUTSTR				;  "filespec" 
	LOOKUP	FILE,DEFTYP=<DAT>	;  Make sure the input file exists
	$GOTO	60$			;  Find the rest.
	$ENDIF				;End

;+
; This qualifier must put the filespec right after the last input filepsec 
; and then add a /SF to it.
;-

	$FETCQ	SPEC.Q			;Did he specify /SPECIFICATION=file?
	$IF	PRESENT			;If so then
	PUTSTR	""<COMMA>		;  ","
	$FETA				;  Fetch the filespec
	PUTSTR				;  "filespec" 
	LOOKUP	FILE,DEFTYP=<SRT>	;  Make sure the input file exists.
	PUTSTR	"/SF"			;  "/SF"
	$ENDIF				;Endif

	
	$ENDTHR

GLOBAL	<...SRT,...MGE>
GLOBAL	<LX.ERP,U.CMN>
GLOBAL	<ADDA.E,U.IQ,CONFPOS,U.CNFE>

.DSABL	LSB				
.END
