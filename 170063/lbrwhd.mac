	.TITLE	LBRWHD
	.IDENT	/4.01/

;
; COPYRIGHT 1979, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
;
;	DEC ASSUMES NO RESPONSIBLIITY FOR THE USE
;	OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
;	WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; VERSION 4.01
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; MODIFIED BY:
;	C.A. D'ELIA	10-JUN-74
;	C.A. D'ELIA	07-JUL-74 (VIRTUAL TABLES)
;	THOMAS J. MILLER 07-NOV-74
;			18-MAR-75
;
;
;	B. ALIMONTI	7-AUG-79
;		BA031 -- CORRECT ERROR INVOLVING THE INDICATION OF A "FIXED"
;			 TABLE ENTRY (CONCERNING A BYTE POSITION OF 0)
;
;
;

;
; MACRO CALLS
;
 
	.MCALL	FDOFF$
	FDOFF$	DEF$L
	.MCALL	FCSBT$
	FCSBT$
	.MCALL	IOERR$,PUT$
	IOERR$

;+
; **-$WTHD=WRITE LIBRARY HEADER,EPT,AND MNT.
;
; THIS ROUTINE WRITES THE LIBRARY HEADER, EPT AND MNT
; ONTO THE LIBRARY FILE.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;-
$WTHD::	BIT	#LB$DTY,$SWTCH+2 ;HAS LIBRARY BEEN MODIFIED
	BEQ	EXIT		;EXIT IF IT HAS NOT
	BIC	#LB$DTY,$SWTCH+2 ;INDICATE UPDATE
	SAVRG			;SAVE R3-R5
	MOV	$LBRPT,R0	;POINT R0 TO LIBRARY FDB, ETC
	MOVB	#R.FIX,F.RTYP(R0)  ;SPECIFY FIXED LENGTH RECORDS
	MOV	L$ET,R2		;GET START BLOCK OF EPT
	MOV	#$EPBLK,R5	;POINT R5 TO EPT DESCRIPTOR BLOCK
	CALL	WTR		;WRITE EPT
	MOV	L$MT,R2		;GET START BLOCK OF MNT
	MOV	#$MNBLK,R5	;POINT R5 TO MNT DESCRIPTOR BLOCK
WTR:	CALL	SETUP		;POSITION FILE
	MOV	(R5)+,F.RSIZ(R0)  ;SET RECORD SIZE
	MOV	2(R5),R4	;PUT NUMBER OF ENTRIES IN R4
	BEQ	50$		;NULL TABLE, DONE
	CLR	R3		;INITIAL PARTITION LIST OFFSET IS ZERO
	MOV	(R5),-(SP)	;PUT ADDR OF LIST HEADS ON STACK
10$:	MOV	@(SP)+,R1	;PUT VIRTUAL LOCN OF NEXT ENTRY IN R1
	BEQ	20$		;BRANCH IF THE LINK IS NULL
	CALL	$CVRL		;ELSE, OBTAIN ITS REAL ADDRESS
	MOV	R0,-(SP)	;SAVE THIS ENTRY'S LINK
	TST	6(R0)		;EXAMINE ASSOCIATED MODULE HEADER ADDR
	BEQ	10$		;BRANCH IF SYMBOL IS LOGICALLY DELETED
	MOV	R0,R1		;POINT R1 TO THE ENTRY
	TST	(R1)+		;AND PAST THE LINK WORD
	TST	6(R1)		;WAS BYTE POS. FLAGED BY FIXTAB DURING COMPRESS?
	BPL	15$		;IF PL NO
	BIC	#100000,6(R1)	;UNSET FLAG
15$:	PUT$	$LBRPT,R1,F.RSIZ(R0)  ;WRITE THE ENTRY INTO LIBRARY FILE
	BCS	WTERR		;BRANCH IF WRITE ERROR DETECTED
	DEC	R4		;DECREMENT NUMBER OF ENTRIES
	BR	10$		;REPEAT FOR NEXT ENTRY
20$:	ADD	#2,R3		;UPDATE PARTITION LIST OFFSET
	CMP	R3,#<NU$PAR*2>-2  ;COMPARE IT WITH MAXIMUM
	BGT	30$		;BRANCH IF END OF TABLE
	MOV	(R5),-(SP)	;CALC ADDR OF THE NEXT PARTITION ...
	ADD	R3,(SP)		;... LIST HEAD
	BR	10$		;EMPTY THIS LIST
30$:	TST	R4		;MUST WE PAD FILE WITH DUMMY ENTRIES?
	BEQ	50$		;NO, JUST LEAVE
	MOV	#$OUTBF+128.,R2	;POINT R2 TO END OF TEMP BUFFER
	SUB	-(R5),R2	;BACKUP BY AN ENTRY SIZE
35$:	MOV	#177777,(R2)+	;FILL THE ENTRY WITH ALL ONES
	CMP	R2,#$OUTBF+128.	;
	BLO	35$		;
	SUB	(R5),R2		;POINT R2 BACK TO START OF DUMMY RECORD
	MOV	$LBRPT,R0	;POINT R0 TO LIBRARY FDB
40$:	PUT$	R0,R2,F.RSIZ(R0)  ;OUTPUT A DUMMY ENTRY
	BCS	WTERR		;BRANCH ON ERROR
	SOB	R4,40$		;FILL OUT THE ENTIRE DISK TABLE WITH THEM
50$:	MOV	#1,R2		;PREPARE TO POINT TO VBN ONE
	CALL	SETUP		;POSITION FILE TO THE BLOCK
	MOV	#512.,F.RSIZ(R0)  ;SET RECORD SIZE FOR LATER OPENS
	CALL	$FIXLA		;RECOMPUTE L$LA
	PUT$	R0,#L$BUF,#512.	;WRITE OUT LIBRARY HEADER RECORD
	BCS	WTERR		;BRANCH IF ERROR
EXIT:	RETURN			;EXIT
 
WTERR:	MOV	(PC)+,R1	;FATAL WRITE ERROR
	.BYTE	E$R02,S$V2
	BR	ERRNM
 
PERR:	MOV	(PC)+,R1	;ERROR IN POSITIONING FILE
	.BYTE	E$R14,S$V2	;WITH .POINT
 
ERRNM:	MOV	R$NAME(R0),R2	;POINT R2 TO FILE NAME
	JMP	$ERMSG		;FATAL ERROR EXIT
 
;+
;
; SETUP FOR EPT OR MNT WRITE.
;
; THIS ROUTINE POSITIONS THE FILE AT THE DESIRED TABLE BLOCK.
;
; INPUTS:
;
;	R0 = $LBRPT
;	R2 = STARTING BLOCK OF TABLE
;
; OUTPUTS:
;
;	R0 IS UNCHANGED
;	R1 AND R3  ARE LOST
;
;-

SETUP:	CLR	R1		;CLEAR HIGH VBN
	CLR	R3		;CLEAR BYTE ADDRESS
	CALL	.POINT		;POSITION FILE
	BCC	10$
	CMPB	#IE.EOF,F.ERR(R0) ;IGNORE EOF ERRORS
	BNE	PERR		;BRANCH IF NOT EOF ERROR
	ASR	R3		;DIVIDE BY 512. TO GET BLOCKS
10$:	RETURN



	.END
