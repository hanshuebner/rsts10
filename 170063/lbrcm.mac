	.TITLE	LBRCM
	.IDENT	/6.01B/
;
;		COPYRIGHT (c) 1981, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; MODIFIED BY:
;	C.A. D'ELIA	16-JUN-74
;	C.A. D'ELIA	30-JUN-74  (VIRTUAL TABLES)
;	C.A. D'ELIA	01-AUG-74
;	THOMAS J. MILLER 07-NOV-74
;			12-NOV-74
;			18-MAR-75
;	T. J. MILLER 24-JAN-76
;
;		TM002 -- ADDITION OF ENTRY POINT SWITCH (/EP).
 
;	B. ALIMONTI	08-AUG-78
;		BA001 -- CORRECT ERROR FOR NUMBER OF EPT OR MNT
;			 ENTRIES > 4032.
;
;	B.ALIMONTI	2-OCT-78
;		BA002 -- ADDITION OF UNIVERSAL MODULE TYPE
;
;
;	B. ALIMONTI	6-AUG-79
;		BA031 -- CORRECT ERROR INVOLVING THE INDICATION OF A "FIXED"
;			 TABLE ENTRY (CONCERNING A BYTE POSITION OF 0)
;
;
;	C.ZIEGELMILLER	17-MAR-82
;		CDZ011 -- FIX PROBLEM WITH CARRY BIT BEING SET
;		WHEN SPECIFIED EPT OR MNT IS EXACTLY 4096(10).
;
;
;MODIFIED FOR RSTS/E V10.1 BY:
;
;	S. LEVAN	09-MAY-91
;		MERGE RSTS-CODE INTO RSX V4.3 VERSION OF THIS MODULE.
;
;

;
; MACRO LIBRARY CALLS
;

	.MCALL	FDOFF$
	FDOFF$	DEF$L
	.MCALL	IOERR$
	IOERR$


	.IF NDF	S$$LIB


	.MCALL	OPEN$R,OPEN$W,CLOSE$,GET$,PUT$

	.IFF

	.MCALL	FCSBT$
	FCSBT$
	.MCALL	CLOSE$,GET$S,PUT$


	.ENDC


;
; FILE POINTERS FOR COMPRESS
;

IPOINT:	.BLKW	2
OPOINT:	.BLKW	2


;+
;
; **-$CMP-COMPRESS OPTION
;
; THE COMPRESS OPTION REMOVES LOGICALLY DELETED SPACE FROM A LIBRARY FILE
; BY COPYING IT ONTO A NEW LIBRARY FILE.  DURING THE COPY
; OPERATION THE SPACE ALLOCATED TO THE MNT AND EPT MAY BE CHANGED.
;
; INPUTS:
;
;	$LBRPT	=NEW LIBRARY FILE FDB, ETC
;
; OUTPUTS:
;
;	NONE
;
;-

$CMP::	SAVRG			;SAVE R3-R5
	MOV	#$CMPPT,R4	;POINT R4 TO COMPRESS FDB, ETC
	MOV	#CMPPT,(R4)	;RESTORE PROPER ADDRESS
	MOV	(R4),R0		;GET INPUT FDB ADDR FOR COMPRESS
	MOV	#$CSIBK,R1	;PUT ADDR OF CSI BLOCK IN R1
	CALL	$SCANI		;GET INPUT FILE SPECIFICATION
	BCC	20$		;BRANCH IF FILE WAS PRESENT
10$:	MOV	(PC)+,R1	;INPUT FILE ERROR WITH /CO??
	.BYTE	E$R26,S$V2
	JMP	$ERMSG		;FATAL ERROR EXIT
20$:	TST	R0		;INSURE ONLY ONE INPUT FILE
	BEQ	10$		;ERROR IF NOT
	MOV	$LBRPT,-(SP)	;EXCHANGE $LBRPT AND $CMPPT
	MOV	(R4),$LBRPT
	MOV	#FO.RD,R1	;SPECIFY OPEN FOR READ
	MOV	LBRNAM+N.FTYP,CMPNAM+N.FTYP ;COPY DEFAULT EXTENSION
	CALL	$RDLHD		;READ LBR HEADER
	MOVB	L$TYP,R0	;PICK UP LBR TYPE FROM HEADER
	ASL	R0		;CONVERT TO WORD OFFSET
	MOV	LBRTAB(R0),LBRNAM+N.FTYP ;SET DEFAULT OUTPUT EXTENSION
	MOV	(SP)+,R0	;OUTPUT FDB PTR TO R0
	MOV	R0,(R4)		;AND TO $CMPPT
	TST	$SIZ		;USE DEFAULT SIZE?
	BNE	CREATE		;BRANCH IF NOT
	MOV	CMPPT+F.HIBK+2,$SIZ ;SET UP DEFAULT SIZE
CREATE:	MOV	$SIZ,F.CNTG(R0)	;SET FILE SIZE (CONTIGUOUS)

	.IF	DF,R$RSTS	;++RSTS V7.2
	NEG	F.CNTG(R0)	;++RSTS V7.2  DON'T FORCE CONTIGUOUS
	.ENDC			;++RSTS V7.2

	.IF NDF	S$$LIB


	OPEN$W	R0		;CREATE NEW LIBRARY FILE

	.IFF

	MOV	#FO.WRT,R1	;SPECIFY OPEN FOR WRITE
	CALL	$OPEN		;PARSE FILENAME AND OPEN FILE


	.ENDC


	BCC	READLH		;BRANCH IF OPEN SUCCEEDED
OERR:	MOV	(PC)+,R1	;FILE OPEN FAILURE
	.BYTE	E$R11,S$V2
JMPERR:	JMP	ERRNM		;BRANCH TO COMMON ERROR EXIT

READLH:	MOV	R0,$OPNFL	;INDICATE FILE OPEN ON 'CMPPT'
	MOV	#L$MS,R0	;POINT R0 TO SIZE OF MNT ENTRIES
	MOVB	(R0)+,R3	;PUT MNT ENTRY SIZE IN R3
	INC	R0		;SKIP UNUSED BYTE
	MOV	(R0)+,R2	;GET START VBN OF MNT  (L$MT)
	MUL	(R0),R3		;COMPUTE SIZE OF MNT IN BYTES  (* L$MI)
	DEC	R3
	BIS	#777,R3
	INC	R3		;GET NEXT HIGHER MULTIPLE OF 512. BYTES
	SWAB	R3
	ASR	R3		;DIVIDE BY 512.
	ADD	R2,R3		;CALC FIRST MODULE VBN OF CURRENT LIBRARY
	MOV	R3,IPOINT	;STORE IN POINTER BLOCK
	CLR	IPOINT+2	;CLEAR BYTE-IN-BLOCK
	MOV	$EPT,R0		;GET NEW # OF EPT ENTRIES TO ALLOCATE
	MOV	#L$ES,R2	;POINT R2 TO SIZE OF EPT ENTRIES
	BIT	#EP$SW,$SWTCH	;/-EP SPECIFIED?                        ; TM002
	BEQ	1$		;IF EQ NO                               ; TM002
	CLR	L$EI		;CLEAR OLD NUMBER ALLOCATED             ; TM002
	CLR	L$EA		;CLEAR OLD NUMBER AVAILABLE             ; TM002
1$:	CALL	COMP		;COMPUTE NEW L$EI AND L$EA              ; TM002
	MOV	R5,-(SP)	;SAVE VBN OF NEW MNT                    ;**-1
	CALL	$RDEP		;READ THE EPT INTO VIRTUAL MEMORY
	MOV	$MNT,R0		;GET NEW NUMBER OF MNT ENTRIES TO ALLOC
	MOV	#L$MT,R2	;PNT R2 TO CURRENT START VBN OF MNT
	MOV	(R2),-(SP)	;SAVE CURRENT MNT VBN
	MOV	2(SP),(R2)	;SET L$MT TO NEW MNT VBN
	TST	-(R2)		;POINT R2 TO SIZE OF MNT ENTRIES  (L$MS)
	CALL	COMP		;COMPUTE NEW L$MI AND L$MA
	MOV	(SP)+,L$MT	;RESTORE L$MT TO READ OLD MNT
	CALL	$RDMN		;READ THE MNT INTO VIRTUAL MEMORY
	MOV	(SP)+,L$MT	;RESTORE L$MT TO NEW START VBN OF MNT
	MOV	R5,OPOINT	;STORE VBN OF FIRST MODULE HEADER
	CLR	OPOINT+2	;CLEAR BYTE-IN-BLOCK OFFSET
	MOV	R5,R2		;GET VBN FOR POINT
	MOV	$CMPPT,R0	;GET ADDR OF COMPRESS FDB IN R0
	CLR	R1		;HIGH VBN=0
	CLR	R3		;BYTE IN BLOCK=0
	CALL	.POINT		;POINT TO FIRST MODULE IN OUTPUT FILE
	BCC	2$		;BRANCH IF .POINT IS OK
	CMPB	#IE.EOF,F.ERR(R0) ;IGNORE EXPECTED EOF ERROR
	BEQ	2$
	JMP	PERR		;BRANCH IF OTHER ERROR
2$:	CMPB	#2,L$TYP	;UNIVERSAL MODULE TYPE?
	BEQ	5$		;IF EQ, YES, SO BRANCH TO SET FIXED LENGTH REC
	MOVB	#R.VAR,F.RTYP(R0) ;VARIABLE LENGTH PUTS
	BR	10$		;BRANCH TO CONTINUE
5$:	MOV	#512.,F.RSIZ(R0) ;SET SIZE OF OUTPUT RECORD BUFFER
	MOV	$LBRPT,R1	;GET ADDRESS OF LIBRARY FDB
	MOV	#512.,F.RSIZ(R1) ;SET SIZE OF INPUT RECORD BUFFER
;
; MAIN LOOP OF COMPRESS
;
10$:	MOV	#IPOINT,R1	;GET CURRENT INPUT RECORD ADDR
	MOV	R1,R5		;SAVE R1
	CMP	(R1),L$NX	;END-OF-FILE?
	BLO	11$		;NO...
	BEQ	105$		;IF EQ, POSSIBLY
104$:	JMP	CERR		;IF NOT, FATAL COMPRESS ERROR
105$:	CMP	2(R1),L$NX+2
	BNE	110$		;IF NE, NO, POSSIBLE COMPRESS ERROR
	JMP	DONE		;END-OF-FILE REACHED
110$:	BHI	104$		;IF HI, FATAL COMPRESS ERROR
11$:	CMPB	#2,L$TYP	;UNIVERSAL MODULE TYPE?
	BNE	113$		;IF NE, NO, SO JUST CONTINUE
	MOV	$LBRPT,R0	;GET ADDRESS OF LIBRARY FDB
	MOV	#R.VAR,F.RTYP(R0) ;SET INPUT FILE RECORDS TO VARIABLE LEN.
	MOV	$CMPPT,R0	;GET ADDRESS OF COMPRESS FDB
	MOV	#R.VAR,F.RTYP(R0) ;SET OUTPUT FILE RECORDS TO VARIABLE LENGTH
113$:	CALL	$RDMH		;READ MODULE HEADER
	BCC	115$		;IF CC, NO ERROR, SO CONTINUE
	JMP	RERR		;FATAL READ ERROR
115$:	TSTB	$MHST		;IS THIS A DELETED MODULE?
	BNE	12$		;YES, SKIP TABLE FIXUP
	MOV	#$EPBLK,R2
	CALL	FIXTAB		;FIX EPT
	MOV	#$MNBLK,R2
	CALL	FIXTAB		;FIX MNT
12$:	MOV	(R5)+,R1	;GET VBN
	MOV	(R5),R2		;GET BYTE-IN-BLOCK
	CALL	$NEXT		;COMPUTE NEXT MODULE HEADER
	MOV	R2,(R5)		;SAVE NEXT MODULE HEADER ADDRESS
	MOV	R1,-(R5)
	TSTB	$MHST		;DELETED MODULE?
	BNE	10$		;YES, PROCEED WITH COMPRESS
	MOV	$LBRPT,R1	;GET INPUT FDB
	MOV	$CMPPT,R0
	PUT$	R0,#$MHBUF,F.NRBD(R1)  ;WRITE OUT MODULE HEADER
	BCS	WERR
	CMPB	#2,L$TYP	;UNIVERSAL MODULE TYPE?
	BNE	20$		;IF NE, NO, SO CONTINUE
	MOV	#R.FIX,F.RTYP(R0) ;SET OUTPUT FILE RECORDS TO FIXED LENGTH
	MOV	#R.FIX,F.RTYP(R1) ;SET INPUT FILE RECORDS TO FIXED LENGTH
	CALL	.MARK		;GET OUTPUT FILE POSITION
	CLR	R1		;ZERO OUT HIGH BITS OF VBN
	INC	R2		;INDICATE NEXT VBN
	CLR	R3		;ZERO OUT BYTE IN BLOCK
	CALL	.POINT		;POSITION TO BEGINNING OF NEXT BLOCK
	BCC	20$		;IF CC, NO ERROR, SO CONTINUE
	CMPB	#IE.EOF,F.ERR(R0) ;IS ERROR EOF?
	BNE	PERR		;IF NE, NO, SO REPORT POSITION ERROR
20$:	CALL	.MARK		;COMPUTE OUTPUT FILE POINTER
	MOV	R2,OPOINT	;SAVE (LO) VBN
	MOV	R3,OPOINT+2	;AND BYTE-IN-BLOCK OF NEXT RECORD
	MOV	$LBRPT,R0	;GET INPUT FDB
	CALL	.MARK		;GET INPUT FILE POINTER (CURRENT)
	CMP	R3,#1000	;TEST FOR EXACT END OF BLOCK
	BNE	25$		;BRANCH IF IT DOES NOT APPLY
	CLR	R3		;ELSE, CONVERT POINTER TO START ...
	INC	R2		;... OF NEXT BLOCK
25$:	CMP	R2,IPOINT	;CHECK FOR END-OF-MODULE
	BLO	27$		;NOT THERE YET
	BHI	CERR		;PAST EOM--FATAL ERROR
	CMP	R3,IPOINT+2
	BEQ	10$		;AT EOM--GO BACK TO MAIN LOOP
	BHI	CERR		;PAST EOM--FATAL ERROR
27$:


	.IF NDF	S$$LIB


	GET$	R0,#$RECBF,#$BFSIZ ;READ RECORD

	.IFF

	GET$S	R0,#$RECBF,#$BFSIZ ;READ RECORD


	.ENDC


	BCS	RERR		;READ ERROR
	MOV	$LBRPT,R1
	PUT$	$CMPPT,#$RECBF,F.NRBD(R1) ;WRITE RECORD
	BCC	20$
WERR:	MOV	(PC)+,R1	;FATAL OUTPUT ERROR
	.BYTE	E$R02,S$V2
	BR	ERRNM		;INDICATE FILE NAME
;
; COMPRESS EXIT
;
DONE:	MOV	$LBRPT,R0
	MOVB	#R.FIX,F.RTYP(R0)  ;REST OLD LIB TO FIXED LENGTH RECORD
	CLOSE$	R0		;CLOSE OLD LIBRARY FILE
	MOV	$CMPPT,$LBRPT	;SWITCH TO NEW LIBRARY FILE
	CLR	$OPNFL		;INDICATE LIBRARY IS ONLY OPEN FILE
	MOV	OPOINT,L$NX	;UPDATE NEXT MODULE INSERT ADDR (L$NX)
	MOV	OPOINT+2,L$NX+2
	CLR	L$LD		;CLEAR RECOVERABLE DELETED SPACE (L$LD)
	CLR	L$LD+2
	CALL	$FIXLA		;RECOMPUTE FILE SPACE AVAILABLE (L$LA)
	BIS	#IN$COR!LB$DTY,$SWTCH+2 ;SET IN-CORE AND DIRTY FLAGS
	JMP	$WTHD		;WRITE OUT HEADER, EPT, AND MNT
				;AND EXIT (THROUGH $WTHD)


;
; COMPRESS ERRORS
;
PERR:	MOV	(PC)+,R1	;ERROR FROM .POINT
	.BYTE	E$R14,S$V2
	BR	ERRNM

ZERR:	MOV	(PC)+,R1	;NOT ENOUGH EPT OR MNT SPACE
	.BYTE	E$R28,S$V2
	BR	ERR

CERR:	MOV	(PC)+,R1	;FATAL COMPRESS ERROR
	.BYTE	E$R27,S$V2
	BR	ERR

RERR:	MOV	(PC)+,R1	;READ ERROR
	.BYTE	E$R01,S$V2
ERRNM:	MOV	R$NAME(R0),R2	;GET FILE NAME
ERR:	JMP	$ERMSG		;FATAL ERROR EXIT


;+
;
; THIS ROUTINE COMPUTES THE SIZE OF THE NEW EPT
; OR MNT.
;
; INPUTS:
;
;	R0 = REQUESTED NEW SIZE (0 IF NO CHANGE)
;	R2 = ADDRESS OF L$ES OR L$MS
;
; OUTPUTS:
;
;	R5 CONTAINS THE START VBN OF TABLE + LENGTH OF TABLE IN BLOCKS
;
;-
COMP:	MOVB	(R2)+,R3	;GET ENTRY SIZE IN R3  (L$?S)
	INC	R2		;SKIP UNUSED BYTE
	MOV	(R2)+,-(SP)	;SAVE START BLOCK  (L$?T)
	TST	R0		;ANY CHANGE NEEDED
	BNE	1$		;BRANCH IF CHANGING TABLE SIZE
	MOV	(R2),R0		;NO CHANGE...USE CURRENT SIZE  (L$?I)
1$:	CMP	#10000,R0	;IS R0=4096(10)?
	BNE	2$		;IF NE, NO SO BR
	SUB	#1,R0		;ELSE, SUP 1 FROM R0 TO PREVENT CS
2$:	MOV	R0,R4		;COMPUTE ACTUAL # OF ENTRIES TO ALLOCATE
	MOV	R3,R0		;COPY ENTRY SIZE INTO R0
	MUL	R0,R4		;BY FILL OUT TO A FULL BLOCK
	BCS	ZERR		;TABLE SIZE TOO LARGE ERROR
	DEC	R5		;ROUND TO NEAREST 512 BYTES
	BIS	#777,R5
	INC	R5
	MOV	R5,-(SP)	;SAVE NEW TABLE LENGTH IN BYTES
	BEQ	5$		;BRANCH IF ZERO TABLE SIZE
	DIV	R0,R4		;COMPUTE ACTUAL ENTRIES TO ALLOCATE
	SUB	(R2),R4		;COMPUTE DIFFERENCE IN SIZES  (- L$?I)
	BHIS	5$		;BRANCH IF NOT MAKING THE TABLE SMALLER
	NEG	R4
	CMP	R4,2(R2)	;CHECK FOR ROOM IN TABLE  (L$?A)
	BHI	ZERR		;BRANCH IF NO ROOM
	NEG	R4
5$:	ADD	R4,2(R2)	;UPDATE ENTRIES AVAILABLE  (L$?A)
	ADD	R4,(R2)	;UPDATE ENTRIES ALLOCATED (L$?I)
	MOV	(SP)+,R5	;PUT NEW TABLE LENGTH (BYTES) IN R5


	.IF DF	R$$EIS


	ASH	#-9.,R5		;COMPUTE NEW LENGTH IN BLOCKS

	.IFF

	SWAB	R5		;SWAP BYTES OF R5
	ASRB	R5		;SHIFT RIGHT ONE MORE BIT


	.ENDC


	BIC	#177600,R5	;CLEAR POSSIBLE SIGN EXTENSIONS
	ADD	(SP)+,R5	;PLUS OLD START BLOCK
	RETURN


;+
; SUBROUTINE TO FIX EPT & MNT TABLES.  ALL REFERENCES
; TO A MODULE ARE LOCATED IN THE TABLE AND ARE
; MODIFIED AS NEEDED.
;
; INPUTS:
;
;	R2 = TABLE DESCRIPTOR
;
; OUTPUTS:
;
;	R0,R1,R2  ARE LOST
;-
FIXTAB:	MOV	IPOINT,R0	;PUT INPUT LIBRARY VBN IN R0
	MOV	IPOINT+2,R1	;AND BYTE-IN-BLOCK OFFSET IN R1
	CMP	R0,OPOINT	;IF THAT INFORMATION EXACTLY MATCHES ...
	BNE	10$		;... THE OUTPUT LIBRARY FILE ...
	CMP	R1,OPOINT+2	;... INFORMATION, THEN BYPASS ...
	BEQ	25$		;... THE TABLE FIXUP
10$:	CALL	$FINDC		;ELSE, FIND A MATCHING ENTRY
	BCS	25$		;EXIT IF NONE FOUND
20$:	MOV	OPOINT,6(R0)	;AND UPDATE IT
	MOV	OPOINT+2,8.(R0)
	BIS	#100000,8.(R0)	;INDICATE BYTE-IN-BLK POINTER UNIQUE
				;   FROM OLD POINTERS
	CALL	$WRMPG		;MARK PAGE DIRTY
	CALL	$FINDN		;FIND NEXT ONE
	BCC	20$		;CONTINUE UNTIL DONE
25$:	RETURN 			;ALL DONE


;
	.END
