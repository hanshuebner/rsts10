	.TITLE	LBRERO
	.IDENT	/4.03B/
;
;		COPYRIGHT (c) 1981, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
;
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; PREVIOUSLY MODIFIED BY:
;
;	C. A. D'ELIA
;	T. J. MILLER
;	B.    ALIMONTI
;
; MODIFIED BY:
;
;	D. R. DONCHIN	19-JAN-81
;		DD082 -- CHANGE MESSAGES TO UPPER/LOWER CASE
;
;	C.ZIEGELMILLER	17-MAR-82
;	CDZ012 -- MOVER ERROR MESSAGE OUTPUT BUFFER TO A NEW BUFFER
;	WHERE IT WON'T OVERWRITE ROUTINE MESSAGE BUFFER.
;	NOTE: THIS CORRECTION INCLUDES PATCHES FOR LBRDF & LBRERF
;
; MODIFIED BY:
;
;	S. LEVAN	09-MAY-1991
;		MERGE RSTS-SPECIFIC INTO RSX V4.3 VERSION OF THIS MODULE.
;
; ERROR MESSAGE OUTPUT ROUTINE
;
 
;
; MACRO LIBRARY CALLS
;

	.MCALL	FDOFF$
	FDOFF$	DEF$L
	.MCALL	FCSBT$
	FCSBT$	DEF$L
 
	.MCALL	CLOSE$,RCML$
 
 
 
	.IF NDF	Q$$CMO
 
 
	.MCALL	PUT$
 
	.IFF
 
	.MCALL	FILIO$
	FILIO$
	.MCALL	DRERR$
	DRERR$
 
 
	.ENDC
 
 
	.MCALL	QIO$,WTSE$,DIR$,WSIG$S

 
 
	.IF DF	Q$$CMO
 
 
;
; DPB TO QUEUE I/O DIRECTLY TO COMMAND OUTPUT DEVICE
;
 
CMODPB:	QIO$	IO.WVB,$ERRLN,$QIOEF,,,,<,,0,,,> ;QUEUE I/O TO 'CMO'
 
 
	.ENDC
 
 
;
; OTHER I/O RELATED DPB'S
;
 
$QIOEF==2			;QUEUE I/O EVENT FLAG
 
ATTDET:	QIO$	IO.ATT,$CMOLN,$QIOEF  ;DPB USED TO ATTACH/DETACH TTY'S
 
QIOWT:	WTSE$	$QIOEF		;WAIT FOR QUEUE I/O EVENT FLAG
 
 
 
 
 
;
; LOCAL MESSAGE
;
 
	.PSECT	TXT
	.ENABL	LC
 
	.IF	NDF,R$RSTS							;++RSTS 7.2
ABTMSG:	.ASCII	<15><12>/LBR -- *FATAL* -- Run aborted/	;ABORT MESSAGE		; DD082
	.IFF									;++RSTS 7.2
ABTMSG:	.ASCII	<15><12>/?LBR -- *FATAL* -- Run aborted/			;++RSTS 7.2 ABORT MESSAGE
	.ENDC									;++RSTS 7.2
ABTLEN = .-ABTMSG								;**-1
 
 
	.PSECT
 
 
$EROUT::
 
 
	.IF NDF	Q$$CMO
 
 
	PUT$	$CMOPT,#$OUTBF,R2 ;OUTPUT MESSAGE
 
	.IFF
 
	MOV	#$ERRBF,R0		;SPECITY BUFFER ADDRESS IN R0
	MOV	R2,R1		;SPECIFY BYTE COUNT IN R1
	CALL	$QIOMG		;SEND TO COMMAND OUTPUT (VIA QIO)
 
 
	.ENDC
 
 
	BCS	75$		;FATAL IF MESSAGE SEND FAILED
	CMP	R4,#S$V2	;FATAL ERROR?
	BGE	75$		;IF GE YES
	RETURN			;

75$:	TSTB	$ATTFG		;CHECK TTY ATTACHED FLAG
	BEQ	76$		;SKIP IF NOT ATTACHED
	CALL	$TTYDT		;ELSE, DETACH THE TELETYPE
76$:	MOV	$OPNFL,R0	;PNT R0 TO FDB OF (POSSIBLE) OPEN FILE
	BEQ	77$		;IF NULL, THEN NONE OPEN
	CLOSE$	R0		;ELSE, CLOSE FILE
77$:	MOV	$LBRPT,R0	;POINT R0 TO LIBRARY FDB
	TST	$NTLIB		;IS LIBRARY FILE REALLY A LIBRARY?
	BNE	130$		;IF NE, NO, SO DON'T SET RECORD TYPE
	MOVB	#R.FIX,F.RTYP(R0) ;SET FIXED LENGTH RECORDS ATTRIBUTE
130$:	CLOSE$	R0		;CLOSE LIBRARY FILE
	CLR	$NTLIB		;CLEAR "...NOT A LIBRARY" FLAG
	CLOSE$	$WRKPT		;CLOSE WORK FILE
	RCML$	$CMIPT		;RESET TO ZERO LEVEL
	JMP	$RSTRT		;GET NEXT COMMAND LINE
 
	.IF DF Q$$CMO
 
$QIOMG::MOV	#CMODPB,R2	;PUT DPB ADDRESS IN R2
	MOV	R0,Q.IOPL(R2)	;SET BUFFER ADDRESS
	MOV	R1,Q.IOPL+2(R2)	;SET BYTE COUNT
 
 
	.ENDC			; (Q$$CMO)
 
 
$QIO::	DIR$	R2		;INVOKE QUEUE I/O DIRECTIVE
	BCC	10$		;SKIP ON SUCCESS
	CMP	@#$DSW,#IE.UPN	;FAIL -- WAS DYNAMIC MEMORY UNAVAILABLE?
	BNE	20$		;ERROR IF SOMETHING ELSE
	WSIG$S			;ELSE, WAIT FOR MEMORY TO BECOME FREE
	BR	$QIO		;AND TRY IT AGAIN
10$:	DIR$	#QIOWT		;WAIT FOR I/O DONE
20$:	ROL	@#$DSW		;USE DIRECTIVE STATUS TO SET C-BIT
	RETURN			;AND RETURN
 
 
	.ENABL	LSB
 
$TTYAT::MOVB	R0,$ATTFG+1	;SAVE TELETYPE LUN
	INCB	$ATTFG		;SET TTY ATTACHED FLAG
	MOV	#IO.ATT,ATTDET+Q.IOFN  ;SPECIFY ATTACH FUNCTION
	BR	10$		;BRANCH INTO COMMON CODE
 
$TTYDT::CLRB	$ATTFG		;CLEAR TTY ATTACHED FLAG
	MOV	#IO.DET,ATTDET+Q.IOFN  ;SPECIFY DETACH FUNCTION
10$:	MOV	#ATTDET,R2	;PUT DPB ADDRESS IN R2
	MOVB	$ATTFG+1,Q.IOLU(R2)  ;SPECIFY TTY LUN IN DPB
	BR	$QIO		;QUEUE THE I/O REQUEST AND RETURN
 
	.DSABL	LSB
 
 
 

	.END
