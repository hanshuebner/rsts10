	.TITLE	LBRMMH
	.IDENT	/01/
 
; COPYRIGHT (C) 1979
 
; DIGITAL EQUIPMENT CORPORATION, MAYNARD MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LISENSE FOR USE ONLY ON A
; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
; MADE AVAILABLE TO ANY OTHER  PERSOM  EXCEPT FOR  USE ON SUCH
; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
; IN DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVEDED IN WRITING BY DEC.
;
;
; VERSION 01
;
;
;
; B. ALIMONTI
;
;
;
; MODIFY UNIVERSAL MODULE HEADER
;
;
 
;
; MACRO CALLS
;
 
	.MCALL	PUT$,CLOSE$
 
 
;
; DIRECT ASSIGNMENTS
;
 
POUND	=43			;ASCII CODE FOR A POUND ("#")
 
 
;
; LOCAL DATA
;
 
ARGBLK:	.WORD	0		;ARGUEMENT BLOCK
 
 
;+
;
; **-$MOD-MODIFY MODIFY UNIVERAL MODULE HEADER
;
; THIS ROUTINE MODIFIES THE OPTIONAL DESCRIPTIVE INFORMATION IN THE MODULE
; HEADER OF A MODULE IN A UNIVERSAL LIBRARY.
;
;
;
; INPUTS:
;
;	$MHBLK =CONTAINS THE ASCII OF THE /MH SWITCH VALUES
;	$UNINM =HAS RAD50 OF MOD NAME (FROM LBRCD)
;
; OUTPUTS:
;
;	THE OPTIONAL DESCRIPTIVE INFO IN THE MODULE HEADER IS CHANGED.
;
;-
 
 
 
$MOD::	SAVRG
	MOV	#FO.MFY,R1	;SET FOR MODIFY ACCESS
	CALL	$RDHD		;READ HEADER, EPT, AND MNT
	CMPB	#2,L$TYP	;UNI MODULE TYPE?
	BEQ	10$		;IF EQ, YES, SO CONTINUE
	MOV	(PC)+,R1	;CANNOT MODIFY HEADER (OF OBJ OR MAC) ERROR
	.BYTE	E$R37,S$V2
	JMP	$ERMSG
10$:	MOV	#$UNINM,R2	;POINT R2 TO NAME OF MODULE
	MOV	(R2)+,R0	;COPY MOD NAME...
	MOV	(R2),R1		;...TO R0 AND R1
	MOV	#$MNBLK,R2	;POINT R2 TO MNT DESCRIPTOR BLOCK
	CALL	$FINDA		;SEARCH FOR MODULE NAME
	BCC	20$		;IF CC, FOUND IT, SO CONTINUE
	MOV	(PC)+,R1	;NONEXISTING MODULE ERROR
	.BYTE	E$R18,S$V2
	MOV	#$UNINM,R2	;POINT R2 TO NAME OF UNFOUND MODULE
	JMP	$ERMSG
20$:	MOV	R0,R1		;COPY MNT ENTRY POINTER
	ADD	#8.,R1		;POINT TO END OF MODULE ADDRESS
	MOV	(R1),-(SP)	;SAVE MOD BYTE OFFSET
	MOV	-(R1),-(SP)	;SAVE MOD VBN
	CALL	$RDMH		;READ MODULE HEADER
	BCC	30$		;IF CC, NO ERRORS
	MOV	(PC)+,R1	;I/O ERROR ON INPUT FILE
	.BYTE	E$R01,S$V2
25$:	MOV	LBRPT+R$NAME,R2	;R2 =  NAME OF FILE ON WHICH ERROR OCCURED
	JMP	$ERMSG
30$:	MOV	#$MHBLK,R3	;POINT R3 TO OP DESCRIPTIVE INFO BUFFER
	MOV	#$MHOP1,R4	;POINT R4 TO OP INFO 1 OF UNV MOD. HEADER
	MOV	#$MHVSZ-1,R5	;R5 = NUM OF OP. INFO.
40$:	ADD	#6,R3		;POSITION R3 TO NEXT OP. INFO.
	TST	(R3)		;MODIFY CORRESPONDING OP. INFO.?
	BNE	41$		;IF NE, YES, SO CHECK FOR "/"
	ADD	#4,R4		;POINT R4 TO NEXT OP. INFO.
	BR	43$		;AND CONTINUE
41$:	CMPB	#POUND,(R3)	;CLEAR CORRESPONDING OP. INFO.?
	BNE	42$		;IF NE, MOVE CORR. SWITCH TO OP. INFO.
	CLR	(R4)+		;CLEAR CORR. ...
	CLR	(R4)+		;... OP. INFO.
	BR	43$		;AND CONTINUE
42$:	CALL	$CARD		;CONVERT OP INFO AND PLACE IN MOD. HEADET
	BCC	43$		;IF CC, NO CONVERSION ERROR, SO CONTINUE
	MOV	(PC)+,R1	;CONVERSION ERROR
	.BYTE	E$R36,S$V2
	MOV	#ARGBLK,R2	;POINT R2 TO ARGUEMENT BLK
	MOV	R3,(R2)		;MOVE ADDRESS OF STRING TO ARG BLK
	JMP	$ERMSG		;FATAL ERROR EXIT
43$:	SOB	R5,40$		;IF MORE, CONTINUE TO CONVERT AND PLACE
	MOV	(SP)+,R2	;RESTORE MOD BYTE OFFSET
	MOV	(SP)+,R3	;RESTORE MOD VBN
	CLR	R1		;CLEAR HIGH VBN
	MOV	$LBRPT,R0	;POINT R0 TO FDB
	CALL	.POINT		;POSITION FILE
	BCC	45$		;IF CC, NO ERRORS, SO CONTINUE
	MOV	(PC)+,R1	;FILE POSITIONING ERROR
	.BYTE	E$R14,S$V2
	BR	25$		;BRANCH TO SET FOR REST OF ERROR MSG
45$:	PUT$	R0,#$MHST,#MHSIZE ;WRITE MOD HEADER RECORD
	BCC	50$		;IF CC, NO ERROR
	MOV	(PC)+,R1	;OUTPUT ERROR
	.BYTE	E$R02,S$V2
	BR	25$		;BRANCH TO SET UP FOR REST OF ERROR MSG
50$:	CLOSE$	R0		;CLOSE FILE
	RETURN
	.END
