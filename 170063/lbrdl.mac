	.TITLE	LBRDL
	.IDENT	/V04.01/

;
; COPYRIGHT 1981, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
;
;	DEC ASSUMES NO RESPONSIBLIITY FOR THE USE
;	OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
;	WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; ALL RIGHTS RESERVED
;
; VERSION 04.01
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; PREVIOUSLY MODIFIED BY:
;
;	C. A. D'ELIA
;	T. J. MILLER
;
; MODIFIED BY:
;
;	D. R. DONCHIN	19-JAN-81
;		DD082 -- CHANGE MESSAGES TO UPPER/LOWER CASE
;


;
; MACRO LIBRARY CALLS
;

	.MCALL	PUT$

;
; DELETION MESSAGE
;
	.ENABL	LC

DMD:	.ASCIZ	/%NModules deleted:%N/
DGD:	.ASCIZ	/%NEntry points deleted:%N/
DNAME:	.ASCIZ	/%2R%N/
	.EVEN


;+
;
; **-$DEL- DELETE FUNCTION
;
; THIS ROUTINE DELETES NAMED MODULES FROM THE LIBRARY.
;
; INPUTS:
;
;	MODULE NAMES ARE STORED IN '$DMN' AS RADIX 50
;	DOUBLE WORDS, TERMINATED BY A WORD OF ZERO.
;
; OUTPUTS:
;
;	NONE
;
;-

$DEL::	SAVRG			;SAVE R3-R5
	MOV	#$DMN,R5	;SET UP POINTER TO NAMES TO DELETE
	MOV	#FO.UPD,R1	;SPECIFY OPEN FOR UPDATE
	CALL	$RDHD		;READ HEADER, EPT AND MNT
 
 
	.IF NDF	Q$$CMO
 
 
	MOV	$CMOPT,R0	;OUTPUT ON CMO DEVICE
 
	.IFF
 
	CLR	R0		;OUTPUT TO CMD OUTPUT
 
 
	.ENDC
 
 
	CALL	$OUT		;INIT OUTPUT ROUTINE
	TST	(R5)		;CHECK FOR ANY /DE
	BEQ	10$		;BRANCH IF NONE
	MOV	#DMD,R1		;SEND INITIAL MESSAGE
	CLR	R2
5$:	CALL	$OUT1
10$:	MOV	(R5)+,R0	;GET FIRST WORD OF NAME
	BEQ	DG		;EXIT IF END OF TABLE
	MOV	(R5)+,R1
	MOV	#$MNBLK,R2
	CALL	$FINDA		;FIND THE NAMED MODULE
	BCC	20$		;BRANCH IF MODULE FOUND
	MOV	(PC)+,R1	;CAN'T FIND MODULE
	.BYTE	E$R18,S$V2
	BR	ERR.0

20$:	BIS	#LB$DTY,$SWTCH+2 ;INDICATE MODIFICATION
	ADD	#8.,R0		;POINT R0 TO LAST WORD OF ENTRY
	MOV	(R0),-(SP)	;SAVE BLOCK OFFSET POINTER ...
	MOV	-(R0),-(SP)	;... AND VBN OF ASSOCIATED MODULE
	MOV	SP,R2		;POINT R2 TO THE INFORMATION
	INC	L$MA		;INCREMENT MNT'S AVAILABLE COUNT
	CLR	(R0)+		;LOGICALLY DELETE THE MNT ENTRY ...
	CLR	(R0)		;... BY CLEARING IT'S MODULE ADDRESS
	CALL	$WRMPG		;MARK THE PAGE DIRTY
	CALL	$DELM		;DELETE THE MODULE
	CMP	(SP)+,(SP)+	;CLEAN THE STACK
	CALL	$WTHD		;REWRITE FILE HEADER, EPT, MNT
	MOV	#DNAME,R1	;GIVE NAME OF MODULE DELETED
	MOV	R5,R2		;POINT R2 PAST MODULE NAME
	CMP	-(R2),-(R2)	;SUBTRACT 4 FROM R2
	BR	5$

DG:	TST	(R5)		;ANY EP'S TO DELETE?
	BEQ	EXIT		;BRANCH IF NONE
	MOV	#DGD,R1
	CLR	R2
5$:	CALL	$OUT1		;"ENTRY POINTS DELETED:"
10$:	MOV	(R5)+,R0	;GET ENTRY POINT NAME
	BEQ	EXIT		;EXIT IF END OF LIST
	MOV	(R5)+,R1
	MOV	#$EPBLK,R2	;GET EPT DESCRIPTOR
	CALL	$FINDA		;FIND ENTRY POINT
	BCS	20$		;BRANCH IF NOT FOUND

	BIS	#LB$DTY,$SWTCH+2 ;INDICATE MODIFICATION
	CLR	6(R0)		;LOGICALLY DELETE THE EPT ENTRY ...
	CLR	8.(R0)		;... BY CLEARING ITS MODULE ADDRESS
	CALL	$WRMPG		;MARK THE PAGE DIRTY
	INC	L$EA		;ONE MORE EP SLOT AVAILABLE
	CALL	$WTHD		;REWRITE FILE HEADER
	MOV	#DNAME,R1	;PRINT NAME OF EP DELETED
	MOV	R5,R2
	CMP	-(R2),-(R2)
	BR	5$		;CONTINUE DELETE

20$:	MOV	(PC)+,R1
	.BYTE	E$R22,S$V2
ERR.0:	CMP	-(R5),-(R5)
	MOV	R5,R2
ERROR:	JMP	$ERMSG		;FATAL ERROR EXIT


EXIT:	BIS	#LB$DTY,$SWTCH+2 ;SET DIRTY FLAG TO INSURE HEADER WILL
				 ;BE REWRITTEN AFTER L$LA IS RECOMPUTED
	RETURN
 
 
	.END


