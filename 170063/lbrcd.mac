	.TITLE	LBRCD
	.IDENT	/6.01C/

;
; COPYRIGHT (C) 1974, 1976, 1978, 1979, 1980, 1991
; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
; IN DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; MODIFIED BY:
;	C.A. D'ELIA	16-MAY-74
;	C.A. D'ELIA	29-JUN-74  (VIRTUAL TABLES)
;	THOMAS J. MILLER 29-OCT-74
;
;	T. J. MILLER 11-JAN-76
;
;		TM001 -- ADDITION OF EXTRACT SWITCH (/EX).
;
;	T. J. MILLER 23-JAN-76
;
;		TM002 -- ADDITION OF ENTRY POINT SWITCH (/EP).
;
;
;	B. ALIMONTI	24-OCT-78
;
;		BA002 -- ADDITION  OF UNIVERSAL MODULE TYPE
;
;
;	B. ALIMONTI	8-NOV-78
;
;		BA006  --  CORRECTION OF ERROR IN REPORTING OF BAD
;			   MODULE NAME
;
;	J GALLANT	26-JAN-82
;		JG0008	- FIX SO THAT A USER CAN ENTER A FILTYPE
;		OF LESS THAN 3 CHARACTERS FOR A UNIVERSAL LIBRARY
;
;
;	C ZIEGELMILLER	29-JAN-82
;		CDZ009 - CORRECT CHECK FOR NON-RAD50 MODULE NAME IN
;		/EX AND /DE
;
;
;	B. ALIMONTI	11-AUG-80
;		BA063 -- CLEAR OUTPUT FILE SWITCH WORD
;
;MODIFIED FOR RSTS/E V10.1 BY:
;
;	S. LEVAN	09-MAY-91
;		MERGE RSTS-CODE INTO RSX V4.3 VERSION OF THIS MODULE.
;
;
; MACRO LIBRARY CALLS
;

	.MCALL	CSI$                                                            ; TM001
	CSI$                                                                    ; TM001
	.MCALL	FDOFF$
	FDOFF$	DEF$L


	.IF NDF	S$$LIB


	.MCALL	OPEN$W

	.IFF

	.MCALL	FCSBT$
	FCSBT$


	.ENDC


;
; LOCAL DATA
;

ARGBLK:	.WORD	0		;ARGUEMENT BLOCK
 
 
MHBLK:	.WORD	$UNINM+2
	.WORD	$MHBLK
	.WORD	$UNINM
 
 
 
DDBLK:	.WORD	$DEND
	.WORD	$DBLK
	.WORD	$DMN


DGBLK:	.WORD	$DGEND
	.WORD	$DGBLK
DGSTRT:	.WORD	0

;                                                                               ; TM001
; SCRATCH STORAGE FOR CSI BLOCK.                                                ; TM001
;                                                                               ; TM001
                                                                                ; TM001
CSIBK:	.BLKB	C.SIZE                                                          ; TM001
                                                                                ; TM001
;
; DEFINE DEFAULT PARAMETERS FOR /CR
;
	.MACRO	DEFAULT NAME,SIZ,EPT,MNT,TYP,LBRTYP
	.RAD50	/NAME/
	.WORD	SIZ		;DEFAULT FOR $SIZ
	.WORD	EPT		;DEFAULT FOR $EPT
	.WORD	MNT		;DEFAULT FOR $MNT
	.WORD	TYP		;DEFAULT FOR $TYP
	.PSECT	DFTYP,D,GBL,OVR	;NOTE - THIS PSECT IS ALLOCATED IN THE
				;   ROOT.  THE FIRST WORD OF THE PSECT
				;   IS ACCESSED THROUGH THE GLOBAL SYMBOL
				;   LBRTAB DEFINED IN THE MODULE LBRDF.
	.RAD50	/LBRTYP/	;DEFAULT LIBRARY FILE EXTENSION
	.PSECT
	.ENDM
;
;
DFTAB:
	DEFAULT	OBJ,100.,512.,256.,TY$OBJ,OLB
DFESIZ=	.-DFTAB
	DEFAULT	MAC,100.,0,256.,TY$MAC,MLB
	DEFAULT	UNI,100.,0,256.,TY$UNI,ULB
	.WORD	0		;MARK END OF DEFAULT TABLE

;+
;
; **-$DECD- COMMAND LINE DECODER FOR LIBRARIAN
;
; THIS ROUTINE SCANS THE INPUT COMMAND LINE, SETTING UP
; THE SWITCH OPTION WORD, $SWTCH.  THE LEGALITY AND SYNTAX
; OF THE COMMAND LINE IS ALSO VERIFIED.  ON RETURN, THE
; LIBRARY FILE IS OPEN FOR UPDATE (EXCEPT IF /CR WAS
; SPECIFIED).
;
; INPUTS:
;
;	R1 = ADDRESS OF CSI BLOCK
;	R5 = $SWTCH ADDRESS
;
; OUTPUTS:
;
;	NONE
;
;-

$DECD::	SAVRG			;SAVE R3 - R5
                                                                                ; TM001
;                                                                               ; TM001
; FIRST CHECK FOR /EX BY SCANNING THE FIRST INPUT SPECIFIER USING               ; TM001
; THE SCRATCH CSI BLOCK.  IF /EX IS NOT SPECIFIED, THIS SCAN IS                 ; TM001
; FORGOTTEN SINCE THE REAL CSI BLOCK IS NOT MODIFIED.                           ; TM001
;                                                                               ; TM001
                                                                                ; TM001
	MOV	$LBRPT,R0	;POINT TO LBR FDB                               ; TM001
	MOV	R1,R2		;COPY POINTER TO REAL CSI BLOCK                 ; TM001
	ADD	#C.SIZE,R2	;POINT TO END                                   ; TM001
	MOV	#CSIBK+C.SIZE,R1 ;POINT TO END OF SCRATCH CSI BLOCK             ; TM001
1$:	MOV	-(R2),-(R1)	;COPY REAL CSI BLOCK                            ; TM001
	CMP	R1,#CSIBK	;DONE YET?                                      ; TM001
	BHI	1$		;IF HI NO                                       ; TM001
	CALL	$SCANI		;SCAN FIRST INPUT SPEC                          ; TM001
	BCS	5$		;IF CS NONE SPECIFIED                           ; TM001
	BIT	#EX$SW,(R5)	;/EX SPECIFIED?                                 ; TM001
	BEQ	5$		;IF EQ NO                                       ; TM001
	BIT	#^C<EX$SW>,(R5)	;ANY OTHER SWITCHES SPECIFIED?                  ; TM001
	BEQ	2$		;IF EQ NO                                       ; TM001
	MOV	(PC)+,R1	;ILLEGAL SWITCH COMBINATION                     ; TM001
	.BYTE	E$R21,S$V2	;                                               ; TM001
	BR	3$		;                                               ; TM001
2$:	TST	R0		;ANY MORE INPUT FILES?                          ; TM001
	BNE	32$		;IF NE NO                                       ; TM001
	MOV	(PC)+,R1	;TOO MANY INPUT FILES                           ; TM001
	.BYTE	E$R33,S$V2	;                                               ; TM001
3$:	JMP	ERR		;REPORT ERROR                                   ; TM001
                                                                                ; TM001
;                                                                               ; TM001
; /EX WAS NOT SPECIFIED, PROCEED TO EXAMINE FIRST OUTPUT SPEC.                  ; TM001
;                                                                               ; TM001
                                                                                ; TM001
5$:	CLR	$SWTCH		;CLEAR OUTPUT FILE SWITCH WORD
	MOV	#$CSIBK,R1	;POINT TO CSI BLOCK
	MOV	$LBRPT,R0	;SCAN FOR FIRST OUTPUT FILE
	CALL	$SCANO
	BIT	#EX$SW,(R5)	;WAS /EX SPECIFIED ON OUTPUT?                   ; TM001
	BNE	35$		;IF NE YES, ILLEGAL COMBINATION                 ; TM001
	BCC	10$		;BRANCH IF LIBRARY FILE READ
	BIT	#DF$SW,(R5)	;DEFAULT SWITCH MAY STAND ALONE
	BNE	15$		;BRANCH IF IT IS PRESENT
	MOV	(PC)+,R1	;ERROR-NO LIBRARY SPECIFIED
	.BYTE	E$R20,S$V2
	JMP	ERR		;GO TO ERROR EXIT

10$:	BIT	#DF$SW,(R5)	;DEFAULT SWITCH SPECIFIED?
	BEQ	32$		;BRANCH IF NOT
15$:	ROL	R4		;SAVE C-BIT IN R4
	CLR	DF$TYP		;INITIALLY CLEAR DEFAULT TYPE
	MOV	#L$BUF+3,R0	;POINT TO DF SWITCH VALUE
	TSTB	(R0)		;NO VALUE SPECIFIED?
	BEQ	30$		;IF SO, LEAVE IT CLEAR (OBJ TYPE)
	CLR	R1		;OTHERWISE SET TO CONVERT VALUE
	CALL	$CAT5		;CONVERT TO RAD50 STOPPING ON .OR $
	CLR	R3		;INITIALIZE TABLE POINTER
20$:	TST	DFTAB(R3)	;AT END OF TABLE?
	BEQ	25$		;YES, ILLEGAL TYPE
	CMP	R1,DFTAB(R3)	;COMPARE SWITCH VALUE WITH TYPE IN TABLE
	BEQ	30$		;DONE IF MATCH FOUND
	INC	DF$TYP		;OTHERWISE BUMP DEFAULT TYPE
	ADD	#DFESIZ,R3	;...AND TABLE POINTER
	BR	20$		;TRY AGAIN
25$:	CLR	DF$TYP		;ERROR, FORCE DEFAULT TYPE TO OBJ
	MOV	(PC)+,R1	;PICK UP ERROR MESSAGE CODE
	.BYTE	E$R5,S$V2	;ILLEGAL LIBRARY TYPE
	JMP	ERR		;BRANCH TO PRINT
30$:	ROR	R4		;RESTORE SAVED C-BIT
	BCC	32$		;CONTINUE IF LIBRARY FILE WAS SPECIFIED
	JMP	EXIT		;OTHERWISE GET NEXT COMMAND LINE
32$:	MOV	DF$TYP,R3	;PICK UP DEFAULT TYPE
	ASL	R3		;CONVERT TO WORD OFFSET
	MOV	LBRTAB(R3),LBRNAM+N.FTYP ;DEFAULT EXTENSION FOR LIBRARY FILE
	BIT	#EX$SW,(R5)	;/EX SPECIFIED?                                 ; TM001
	BNE	65$		;IF NE YES, PROCESS MODULE NAMES                ; TM001
	BIT	#CO$SW,(R5)	;COMPRESS OPTION?
	BEQ	60$		;BRANCH IF NOT
	BIT	#XC$SW,(R5)	;INSURE LEGAL SWITCH COMBINATION
	JMP	EXIT		;BRANCH TO LEAVE IF ONLY /CO
35$:	MOV	(PC)+,R1	;ILLEGAL SWITCH COMBINATION
	.BYTE	E$R21,S$V2
	JMP	ERR
60$:	BIS	#IN$SW,(R5)	;/IN IS FORCED DEFAULT
	BIT	#CR$SW,(R5)	;/CR?
	BNE	70$		;BRANCH IF /CR
65$:	MOV	#DDBLK,R0	;ASSUME /DE OR /EX                              ; TM001
	CALL	CSTOR                                                           ;**-1
	MOV	R0,DGSTRT
	MOV	#DGBLK,R0	;ASSUME /DG ALSO
	CALL	CSTOR
	MOV	#MHBLK,R0	;ASSUME /MH ALSO
	CALL	CSTOR		;GET MODULE NAME OF /MH
	RETURN			;EXIT

70$:	BIT	#DL$SW,(R5)	;/DE WITH /CR IS INVALID
	BNE	35$		;BRANCH IF /DE
	MOV	#L$BUF,R0	;SET UP DEFAULTS
	MOV	#DFTAB,R4	;BASED ON TYPE
	TST	(R0)		;NULL TYPE IMPLIES DEFAULT
	BEQ	105$
	CLR	R1
	CALL	$CAT5		;CONVERT TYPE SPEC. TO RAD50

22$:	CMP	R1,(R4)		;CHECK FOR MATCH
	BEQ	21$		;BRANCH IF MATCH
	ADD	#DFESIZ,R4	;GO ON TO NEXT DFTAB ENTRY
	TST	(R4)		;IS IT 0 (END OF TABLE)?
	BNE	22$		;BRANCH IF MORE TO SCAN
	MOV	(PC)+,R1	;ILLEGAL TYPE SPECIFICATION
	.BYTE	E$R5,S$V2
	BR	ERR		;TAKE ERROR EXIT

105$:	MOV	DF$TYP,R3	;PICK UP DEFAULT TYPE
	INC	R3		;MAKE IT A LOOP COUNTER
	BR	115$		;BRANCH TO LOOP TEST
110$:	ADD	#DFESIZ,R4	;BUMP TABLE POINTER
115$:	SOB	R3,110$
21$:	TST	(R4)+		;GET DEFAULTS
	MOV	#3,R3
	MOV	#$SIZ,R2
23$:	TST	(R2)		;DEFAULT NEEDED?
	BNE	26$		;IF NE NO                                       ; TM002
	CMP	R2,#$EPT	;IS IT THE EPT SPEC?                            ; TM002
	BNE	24$		;IF NE NO                                       ; TM002
	BIT	#EP$SW,$SWTCH	;/-EP SPECIFIED?                                ; TM002
	BNE	26$		;IF NE YES                                      ; TM002
24$:	MOV	(R4),(R2)	;STORE DEFAULT                                  ; TM002
26$:	CMP	(R4)+,(R2)+	;GET NEXT DEFAULT                               ; TM002
	SOB	R3,23$                                                          ;**-3
	MOV	(R4),R3		;PICK UP TYPE
	MOV	R3,(R2)+	;STORE IT IN $TYP
	ASL	R3		;CONVERT TYPE TO WORD OFFSET
	MOV	LBRTAB(R3),LBRNAM+N.FTYP ;SET DEFAULT EXTENSION FOR LBR FILE
	CMPB	#2,(R4)		;UNI MODULE TYPE?
	BEQ	183$		;IF EQ, YES, PROCESS DEFAULT INSERT FILETYPE
	TST	$EXTIN		;WAS A DEFAULT INSERT FILETYPE SPECIFIED
	BEQ	200$		;IF EQ, NO, SO CONTINUE
	MOV	(PC)+,R1	;DEFAULT INSERT FTYPE IGNORED FOR MAC OR OBJ LIB
	.BYTE	E$R35,S$V0
	CALL	$ERMSG
	BR	200$		;CONTINUE
183$:	TST	(R2)		;WAS DEFAULT INSERT FILETYPE SPECIFIED?
	BNE	190$		;IF NE, YES, SO PROCESS
	MOV	#^RUNI,R1	;FORCE DEFAULT FILETYPE TO UNI
	BR	195$		;AND CONTIUNE
190$:	MOV	R2,R0		;POINT R0 TO DEFAULT INSERT FILETYPE
	CMPB	#'$,(R0)	;IS FIRST CHAR OF FILETYPE "$"?
	BEQ	193$		;IF EQ, YES, BAD SWITCH VALUE FOR FILETYPE
	CMPB	#'$,1(R0)	;IS SEC CHAR OF FILETYPE "$"?
	BEQ	193$		;IF EQ, YES, BAD SWITCH VALUE FOR FILETYPE
	CMPB	#'$,2(R0)	;IS THIRD CHAR OF FILETYPE "$"?
	BEQ	193$		;IF EQ, YES, BAD SWITCH VALUE FOR FILETYPE
	CLR	R1		;DON'T ALLOW "$" OR "."
	CALL	$CAT5		;CONVERT FILETYPE TO RAD50
	BCC	195$		;IF CC, NO CONVERSION ERROR
	CMPB	(R0),R2		;IS NEXT CHAR IN CMD LINE THE CHAR THAT
				;CAUSED CONVERSION TERMINATION?
	BEQ	195$		;YES	- LESS THAN 3 CHAR ALLOWED

193$:	MOV	(PC)+,R1	;CONVERSION ERROR
	.BYTE	E$R41,S$V2
	MOV	#$EXTIN,ARGBLK	;COPY ADDR OF DEFAULT INSERT FTYPE TO ARG. BLK.
	MOV	#ARGBLK,R2	;POINT R2 TO THE ARGUEMENT BLOCK
	BR	ERR		;REPORT ERROR
195$:	MOV	R1,$UNIEX	;STORE DEFAULT FILETYPE FOR LATER USE
	CLR	$EXTIN		;REINIT DEFAULT TYPE TO BE NULL
 
200$:

	MOV	$LBRPT,R0	;OPEN LIBRARY FILE
CREATE:	MOV	$SIZ,F.CNTG(R0)	;SET FILE SIZE (CONTIGUOUS)

	.IF	DF,R$RSTS	;++RSTS V7.2
	NEG	F.CNTG(R0)	;++RSTS V7.2  DON'T FORCE CONTIGUOUS
	.ENDC			;++RSTS V7.2

	.IF NDF	S$$LIB


	OPEN$W	R0

	.IFF

	MOV	#FO.WRT,R1	;SPECIFY OPEN FOR WRITE
	CALL	$OPEN		;PARSE FILENAME AND OPEN FILE


	.ENDC


	BCC	EXIT
OERR:	MOV	(PC)+,R1	;OPEN FAILURE
	.BYTE	E$R11,S$V2
	MOV	R$NAME(R0),R2
ERR:	JMP	$ERMSG		;FATAL ERROR EXIT


;+
;
; THIS ROUTINE CONVERTS A LIST OF 6 CHARACTER NAMES INTO
; RADIX 50 AND STORES THEM IN A PRE-ALLOCATED TABLE.
;
; INPUTS:
;
;	R0 = ADDRESS OF PARAMETER BLOCK
;	WHERE THE PARAMETER BLOCK FORMAT IS:
;		.WORD	END-OF-STORAGE-TABLE
;		.WORD	START-OF-NAME-LIST
;		.WORD	START-OF-STORAGE-TABLE
;
; OUTPUTS:
;
;	R0 = NEXT WORD IN STORAGE TABLE
;
;-

CSTOR:	SAVRG			;SAVE R3-R5
	MOV	(R0)+,R3	;GET NUMBER OF NAMES
	MOV	(R0)+,R4	;GET START OF ASCII LIST
	MOV	(R0),R5		;GET START OF STORAGE LIST

10$:	MOV	R4,R0		;GET STRING ADDRESS
	MOV	SP,R1		;NON-ZERO PERMITS "." AND "$"
	CALL	$CAT5		;CONVERT STRING TO RAD50
	MOV	R1,(R5)+	;STORE FIRST THREE CHARS IN RAD50
	BCC	12$		;IF CC,NO RAD50 CHAR ERROR
	BNE	11$		;IF R1 = 0, THEN END OF LIST, OR ERROR
	TST	R2		;IF R2 NE 0, THEN IT CONTAINS NON-RAD50 - ERROR
	BEQ	30$		;IF R2 = 0, END OF LIST, SO EXIT
11$:
	CLR	R1		;NULL 2ND PART OF NAME
	BR	15$		;OTHERWISE RAD50 CHAR ERROR
12$:	CALL	$CAT5		;CONVERT REST OF STRING
	BCC	20$		;BRANCH IF ALL SIX CHARS CONVERTED
15$:	TST	R2		;CHECK TERMINAL CHAR
	BEQ	20$		;NULL IS ONLY LEGAL TERMINAL
	MOV	#ARGBLK,R2	;POINT R2 TO THE ARGUEMENT BLOCK
	MOV	R4,(R2)		;COPY ADDRESS OF ASCII STRING TO ARG BLK
	MOV	(PC)+,R1	;INDICATE BAD NAME ERROR
	.BYTE	E$R19,S$V2
	BR	ERR

20$:	MOV	R1,(R5)+	;STORE VALUE (CHARS 3-6)
	ADD	#6,R4		;GET NEXT NAME
	CMP	R3,R5		;REACHED END OF TABLE?
	BHI	10$		;LOOP IF NOT
	CLR	(R5)+
30$:	MOV	R5,R0
EXIT:	RETURN


;
	.END


