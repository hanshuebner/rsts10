	.TITLE	LBRPUT
	.IDENT	/04/

;
; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  07754
; COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
;
;	DEC ASSUMES NO RESPONSIBLIITY FOR THE USE
;	OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
;	WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; VERSION 04
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; MODIFIED BY:
;	C.A. D'ELIA	10-JUN-74
;	C.A. D'ELIA	02-JUL-74  (VIRTUAL TABLES)
;	THOMAS J. MILLER 29-OCT-74
;
;
	.PAGE
;+
; **-PUT- PUT AN ENTRY IN A TABLE
;
; INPUTS:
;
;	R1 - POINTS TO FIRST WORD OF NAME
;	R2 - POINTS TO TABLE DESCRIPTOR BLOCK
;	R4 - POINTS TO NUMBER OF ENTRIES AVAILABLE
;
;	WHERE THE FORMAT FOR THE DESCRIPTOR BLOCK IS
;	AS FOLLOWS:
;	       .WORD	SIZE
;	       .WORD	ADDR
;		.WORD	NUMBER
;	  SIZE = SIZE OF ENTRIES
;	  ADDR = ADDRESS OF FIRST ENTRY
;	NUMBER = NUMBER OF ENTRIES IN THE TABLE
;
; OUTPUTS:
;
;	R0 AND R2 ARE LOST
;	ALL OTHER REGISTERS PRESERVED
;
;-
 
	.ENABL	LSB

PUT::	TST	(R4)		;ARE ANY ENTRIES AVAILABLE?
	BEQ	30$		;ERROR IF NOT
	CALL	10$		;PUT THE ENTRY IN THE DESIRED TABLE
	DEC	(R4)		;DECREMENT ENTRIES AVAILABLE COUNT
	RETURN
 
10$:	SAVRG			;SAVE R3-R5
	CMP	(PC)+,(R1)	;NAME TOO LOW?
	.RAD50	/A  /
	BHI	15$		;ERROR IF SO
	MOV	R1,-(SP)	;SAVE ADDR OF SYMBOL IN THE GSD RECORD
	MOV	R2,R3		;SAVE ADDR OF TABLE DESCRIPTOR BLOCK
	MOV	(R1)+,R0	;R0 GETS FIRST HALF OF SYMBOL
	MOV	(R1),R1		;AND R1 GETS THE SECOND HALF
	CALL	$FINDA		;SEARCH TABLE TO FIND SLOT FOR SYMBOL
	BCC	REPLAC		;MATCH FOUND--THIS MAY REQUIRE A REPLACEMENT
	TST	R2		;WAS A SLOT FOUND?
	BEQ	20$		;BRANCH IF TRUE
15$:	MOV	(PC)+,R1	;ELSE, SYMBOL IS TOO BIG
	.BYTE	E$R30,S$V2	;INVALID INPUT MODULE FORMAT
	BR	35$		;FATAL ERROR
 
20$:	TST	R1		;IS LINK TO SLOT A LIST HEAD?
	BEQ	22$		;BRANCH IF TRUE
	TST	6(R0)		;ELSE, IS LINK TO SLOT LOGICALLY DELETED?
	BEQ	RPLAC0		;YES, TREAT AS A MODIFIED REPLACE
22$:	MOV	R0,R4		;PUT ADDR OF LINK TO SLOT IN R4
	MOV	R1,R5		;PUT VIRTUAL LOCN OF LINK TO SLOT IN R5
	BEQ	25$		;BRANCH IF LINK IS A LIST HEAD
	CALL	$LCKPG		;ELSE, LOCK THE PAGE CONTAINING THE LINK
25$:	MOV	(R3),R1		;GET ENTRY SIZE IN R1
	ADD	#2,R1		;ADD IN ROOM FOR A LINK WORD
	CALL	$ALVRT		;ALLOCATE VIRTUAL MEMORY FOR THE ENTRY + LINK
	CALL	$NWLNK		;UNLOCK OLD LINK AND INSERT NEW ENTRY
PUT1:	TST	(R4)+		;POINT R4 PAST THE NEW ENTRY'S LINK WORD
	MOV	(SP)+,R1	;RESTORE ADDR OF SYMBOL IN THE GSD
	MOV	R1,R3		;COPY THE ADDRESS INTO R3
	MOV	(R3)+,(R4)+	;TRANSFER SYMBOL NAME INTO ...
	MOV	(R3)+,(R4)+	;... THE NEW ENTRY
	MOV	L$NX,(R4)+	;TRANSFER THE MODULE HEADER ADDR ...
	MOV	L$NX+2,(R4)+	;... INTO THE NEW ENTRY
	BIS	#LB$DTY,$SWTCH+2 ;INDICATE MODIFICATION
	RETURN
 
30$:	MOV	(PC)+,R1	;FATAL--EPT OR MNT FULL
	.BYTE	E$R15,S$V2
35$:	MOV	$INPPT,R0	;POINT R0 TO INPUT FILE INFO
	MOV	R$NAME(R0),R2	;FATAL ERROR
ERRXIT:	JMP	$ERMSG
 
	.DSABL	LSB
 
;
; A MATCH HAS BEEN FOUND IN THE TABLE.  IF IT IS NOT ALREADY
; LOGICALLY DELETED, TREAT THIS AS A MODIFIED REPLACE.  IF THE
; SYMBOL IS STILL ACTIVE, A CHECK MUST BE MADE TO SEE IF WE CAN
; REPLACE IT.  IF THAT IS PERMISIBLE, PERFORM THE REPLACE.
;
REPLAC:	TST	6(R0)		;IS THE SYMBOL STILL BOUND TO A MODULE?
	BEQ	RPLAC0		;NO, IT'S LOGICALLY DELETED--INSERT NEW ONE
	TST	RPMHD		;YES, IS A REPLACEMENT ALLOWABLE?
	BEQ	KERR		;BRANCH IF NOT
	CMP	#$EPBLK,R3	;O.K., IS THIS AN EPT OR AN MNT?
	BEQ	20$		;BRANCH IF IT'S AN EPT
 
	CALL	MATCH		;SETUP MODULE REPLACE INFORMATION
	BCS	EPTERR		;AN EPT ERROR HAS OCCURRED EARLIER
	MOV	#RPMNT,R4	;SAVE NAME AS MNT ENTRY REPLACED
	INC	L$MA		;UPDATE MNT AVAILABLE COUNT 
	BR	30$		;USE COMMON CODE TO INSERT NEW ENTRY
 
20$:	CALL	MATCH		;MUST MATCH EARLIER MODULE REPLACE INFO
	BCS	KERR		;ERROR IF WE DON'T
	INC	L$EA		;UPDATE EPT AVAILABLE COUNT
	MOV	#LASTEP,R4	;SAVE NAME AS LAST EPT ENTRY REPLACED
 
30$:	MOV	2(R0),(R4)+	;SAVE FIRST HALF OF SYMBOL NAME
	MOV	4(R0),(R4)	;AND THE LAST HALF
RPLAC0:	CALL	$WRMPG		;MARK THE PAGE DIRTY
	MOV	R0,R4		;PNT R4 TO ADDR OF ENTRY WE'RE REPLACING
	BR	PUT1		;USE NORMAL INSERT CODE
 
 
	.ENABL	LSB
 
EPTERR::MOV	#LASTEP+2,R0	;POINT R0 TO EPT SYMBOL+2 IN ERROR
	MOV	#$EPBLK,R3	;SPECIFY EPT ERROR MESSAGE
	BR	10$
KERR:	CMP	(R0)+,(R0)+	;POINT R0 TO MNT SYMBOL+2 IN ERROR
10$:	MOV	$INPPT,R2	;POINT R2 TO INPUT FILE INFO
	MOV	R$NAME(R2),R2	;POINT R2 NOW TO FILE NAME INFO
	ADD	#8.,R2
	MOV	(R2),-(SP)	;PUSH FILE NAME ON THE STACK
	MOV	-(R2),-(SP)	;
	MOV	-(R2),-(SP)	;
	MOV	-(R2),-(SP)	;
	MOV	-(R2),-(SP)	;
	MOV	(R0),-(SP)	;PUSH ENTRY NAME ON STACK
	MOV	-(R0),-(SP)	;
	MOV	SP,R2		;R2 SERVES AS POINTER TO PARAMETER LIST
	MOV	(PC)+,R1	;ASSUME MNT ERROR MESSAGE
	.BYTE	E$R16,S$V2
	CMP	#$EPBLK,R3	;VERIFY BY CHECKING DESCRIPTOR ADDRESS
	BNE	20$		;SKIP IF ASSUMPTION CORRECT
	MOV	(PC)+,R1	;ELSE, USE EPT ERROR MESSAGE
	.BYTE	E$R23,S$V2
20$:	BR	ERRXIT		;USE FATAL ERROR EXIT
 
	.DSABL	LSB


;+
; THIS ROUTINE MATCHES THE MODULE HEADER ADDRESS OF THE
; ENTRY POINTED AT BY R0 WITH 'RPMHD' TO INSURE THAT WE'RE
; REPLACING THE CORRECT MODULE AND ITS ENTRY POINTS.  NOTE
; THAT 'RPMHD' IS INITIALLY ONE.
;
; INPUTS:
;
;	R0 = TABLE ENTRY ADDRESS
;
; OUTPUTS:
;
;	R4 IS TEMPORARY
;	C-BIT IS SET IF MATCH FAILED
;-
MATCH:	MOV	#RPMHD,R4
	CMP	#1,(R4)		;IS THIS THE MNT CALL?
	BEQ	10$		;BRANCH IF TRUE
	CMP	(R4)+,6(R0)	;MATCH?
	BNE	5$		;BRANCH IF NOT
	CMP	(R4),8.(R0)	;MATCH?
	BEQ	20$		;EXIT IF MATCH
5$:	SEC			;BAD MATCH EXIT
	RETURN
10$:	MOV	6(R0),(R4)+	;STORE MODULE HEADER ADDRESS ...
	MOV	8.(R0),(R4)	;... IN REPLACE INFO BLOCK
20$:	CCC
	RETURN
	.END
