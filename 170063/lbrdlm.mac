	.TITLE	LBRDLM
	.IDENT	/03/

;
; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1973, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
;
;	DEC ASSUMES NO RESPONSIBLIITY FOR THE USE
;	OR RELIABILITY OF ITS SOFTWARE ON EQUIPMENT
;	WHICH IS NOT SUPPLIED BY DEC.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; VERSION 03
;
; WRITTEN BY:
;	GEORGE W. BERRY
;
; MODIFIED BY:
;	C.A. D'ELIA	08-MAY-74
;	C.A. D'ELIA	24-JUN-74  (VIRTUAL TABLES)
;	THOMAS J MILLER 24-JUN-75  (CHANGE TO UPDATE END OF FILE)
;
;

;
; MACRO LIBRARY CALLS
;
 
	.MCALL	FDOFF$,PUT$
	FDOFF$	DEF$L
 
;+
;
; **-$DELM- DELETE SPECIFIED MODULE
;
; THIS ROUTINE DELETES A MODULE AND ALL OF ITS
; EPT ENTRIES.  THE ROUTINE IS CALLED BY $DEL
; AND $INS (REPLACE).
;
; INPUTS:
;
;	R2 = MODULE HEADER ADDRESS POINTER
;
; OUTPUTS:
;
;	NONE
;
;-
$DELM::	SAVRG			;SAVE R3 - R5
	MOV	R2,R4		;AND SAVE IT FOR NOW
	MOV	(R2)+,R0	;SET UP KEY FOR ASSOCIATIVE SEARCH
	MOV	(R2),R1
	MOV	#$EPBLK,R2	;GET ADDRESS OF EPT DESCRIPTOR
	CALL	$FINDC		;SEARCH FOR EPT ENTRIES
	BCS	40$		;BRANCH IF NONE FOUND

30$:	CLR	6(R0)		;LOGICALLY DELETE THE EPT ENTRY ...
	CLR	8.(R0)		;... BY CLEARING ITS MODULE ADDRESS
	CALL	$WRMPG		;MARK THE PAGE DIRTY
	INC	L$EA		;ONE MORE EPT ENTRY AVAILABLE
	CALL	$FINDN		;CONTINUE SEARCH
	BCC	30$		;BRANCH IF ANOTHER ENTRY FOUND

40$:	MOV	R4,R1		;GET ADDRESS OF MODULE HEADER
	CALL	$RDMH		;READ MODULE HEADER
	BCC	50$		;BRANCH IF READ OK
	MOV	(PC)+,R1	;FATAL READ ERROR
	.BYTE	E$R10,S$V2
	BR	ERRNM

50$:	INCB	$MHST		;MARK MODULE DELETED
	MOV	(R4),R1		;GET VBN OF CURRENT MODULE HEADER
	MOV	2(R4),R2	; " BYTE-IN-BLOCK " " " "
	CALL	$NEXT		;COMPUTE ADDRESS OF NEXT HEADER
	MOV	#L$NX,R3
	CMP	R1,(R3)+	;ARE WE DELETING THE LAST MODULE IN FILE?
	BNE	60$		;BRANCH IF NOT
	CMP	R2,(R3)
	BNE	60$		;BRANCH IF NOT
	MOV	2(R4),(R3)	;FIX UP L$NX
	MOV	(R3),LBRPT+F.FFBY ;UPDATE EOF
	MOV	(R4),-(R3)
	MOV	(R3),LBRPT+F.EFBK+2 ;UPDATE EOF
	CLR	R4		;INDICATE REWRITE OF MODULE HEADER NOT REQUIRED
	BR	65$		;AND ADD MODULE SIZE INTO L$LA

60$:	MOV	#L$LD+4,R3	;ADD SIZE INTO LOGICALLY DELETED SPACE

65$:	ADD	$MOSZ+2,-(R3)	;RECOMPUTES SIZE IN BYTES
	ADC	-(R3)		;(DOUBLE PRECISION)
	ADD	$MOSZ,(R3)
	TST	R4		;REWRITE MODULE HEADER?
	BEQ	70$		;IF EQ NO

	CLR	R1		;REWRITE MODULE HEADER
	MOV	(R4)+,R2	;GET BLOCK #
	MOV	(R4),R3		;GET BYTE IN BLOCK
	CALL	.POINT		;POSITION FILE
	BCS	PERR
	PUT$	R0,#$MHST,F.NRBD(R0) ;WRITE OUT HEADER
	BCS	WERR		;BRANCH IF WRITE ERROR
70$:	RETURN


;
; ERROR EXIT
;
WERR:	MOV	(PC)+,R1	;FILE WRITE ERROR
	.BYTE	E$R02,S$V2
	BR	ERRNM
 
PERR:	MOV	(PC)+,R1	;FILE POSITIONING ERROR
	.BYTE	E$R14,S$V2
ERRNM:	MOV	R$NAME(R0),R2	;INDICATE FILE NAME
ERROR:	JMP	$ERMSG		;FATAL ERROR EXIT


	.END


