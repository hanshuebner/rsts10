;  DEC/CMS REPLACEMENT HISTORY, Element GETLN.MAC
;  *3    18-AUG-1986 11:21:02 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:22:27 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:36:54 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element GETLN.MAC
	.NLIST							;Edit Level 01
	.ENABL	LC,GBL
	.LIST
	.TITLE	GETLN - Top level get next source line routine
	.SBTTL	GETLN - Top level get next source line routine
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	GETLN - Top level get next source line routine
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	27-Jul-83	Update for 8-bit support.
;--


	PURE	PUREI,I

;+
; GETLIN
; GET NEXT SOURCE LINE FOR ASSEMBLER
; A SOURCE LINE CAN COME FROM THE FOLLOWING:
; 1)	A MACRO LIBRARY DURING .MCALL PROCESSING
; 2)	AN EXPANDING MACRO OR REPEAT BLOCK, THE RECURSIVE CONTEXT OF WHICH
;	IS STORED IN VARIABLES NAMED "MSBXXX" IN THE ROOT
; 3)	A LOW LEVEL READ FROM AN INPUT FILE
; ON EXIT, ENDFLG AND R0 IS SET NONZERO IF AN ENDFILE IS DETECTED
;-


GETLIN::SAVREG			;Save registers R1 - R4
GETLUP:	CALL	XCTLIN		;Init line-oriented variables.
	MOV	FFCNT,R0	;ANY RESERVED FF'S?
	BEQ	5$		;  NO
	ADD	R0,PAGNUM	;YES, UPDATE PAGE NUMBER
	MOV	#-1,PAGEXT
	CLR	FFCNT

.IF	DF,RT11			;If RT-11
	CLR	LINNUM		;INIT NEW CREF SEQUENCE
	CLR	SEQEND
.ENDC;	DF,RT11			;If RT-11

	TST	PASS
	BEQ	5$
	CLR	LPPCNT
5$:	MOV	#LINBUF,R2
	MOV	R2,LCBEGL	;SET UP BEGINNING
	MOV	#LINEND,LCENDL	;  AND END OF LINE MARKERS

; Get next line of source from the .MLB file (.MCALL)

	TST	SMLLVL		;PROCESSING SYSTEM MACRO?
	BEQ	6$		;++015 BRANCH IF NOT
	MOV	#SMLCHN,R0	;++015 ASSUME READ FROM MACRO LIB CHANNEL
	MOV	R0,R1		;++015 SAVE SOFTWARE CHANNEL NUMBER
	CALL	$READ		;++015 GET LINE OF MACRO DEFINITION
	MOV	R1,R3		;COPY CHANNEL NUMBER
	CLR	R0		;ASSUME GOOD READ

.IF	DF,RT11			;If RT-11

	BITB	#IO.EOF,IOFTBL(R3)  ;++015 END-OF-FILE DETECTED?

.IFF;	DF,RT11			;If RT-11

	BITB	#IO$EOF,IOFTBL(R3)  ;++015 END-OF-FILE DETECTED?

.ENDC;	DF,RT11			;If RT-11

	BEQ	88$		;NO, JUST SETUP BUFFER POINTERS AND EXIT
	INC	R0
	BIS	R0,ENDFLG	;FLAG IT
88$:	BR	SETBUF		;TAKE EXIT

; Check if we are taking input from a .INCLUDE file, if so verify
; that we are not in a higher level macro expansion.

6$:	MOV	INCSP,R1	;R1 -> Last file stacked on a .INCLUDE
	BEQ	7$		;Branch if none, ok.
	CMP	-(R1),MACLVL	;Same expansion level?
	BEQ	9$		;Branch if so, skip macro expansion check.
;;;	BLT	7$		;Less than is OK too	 ***DEBUG***
;;;	HALT			;Error .ENDM in .INCLUDE ***DEBUG***	

7$:	MOV	MSBRDV,R1	;TEST IF MACRO EXPANSION FLAGGED
	BNE	GETTX2		;  YES, PROCESS IT
9$:	MOV	#SRCCHN,R3	;SET SOURCE FILE SOFTWARE CHANNEL NUMBER

; Get physical line from the executive

.IF	DF,RT11			;If RT-11

	.MCALL	.WAIT

	TST	CHAN+SRCCHN	;FIRST FILE OPEN?
	BNE	10$		;YES
	MOV	#3,R1		;ELSE,INIT FIRST INPUT CHANNEL
	BR	30$

10$:	TSTB	INCFLG		;.INCLUDE file pending?
	BLE	1000$		;Branch if not.
	CLRB	INCFLG		;Mark .INCLUDE file taken care of
	BR	1999$		;Go zap for new file.

1000$:	$READ	SRC
	CLR	R0
	BIT	#IO.EOF,IOFTBL+SRCCHN	;END OF FILE?
	BEQ	50$		;NO

; See if .INCLUDE file available to use

20$:	MOV	INCSP,R5	;R5 -> Next .INCLUDE stack frame
	BEQ	2100$		;Branch if none, use next channel for input.
	CALL	UNSINC		;Unstack last .INCLUDE file or last source.
	BR	1999$		;Merge in common code

2100$:	MOV	CHAN+SRCCHN,R1	;GET CURRENT INPUT CHAN
	INC	R1		;MOVE TO NEXT CHAN
	CMP	R1,#8.		;LAST CHAN?
	BHI	40$		;YES, FLAG END OF INPUT
30$:	CLR	RECNUM+SRCCHN	;RESET RECORD (BLK) NUMBER
	MOV	BLKTBL+<SRCCHN*4>,PTRTBL+<SRCCHN*4>
	MOV	R1,CHAN+SRCCHN
	.WAIT	R1		;See if this channel is open
	BCS	40$		;BRANCH IF NO MORE INPUT
	CALL	$INIFL		;CHECK FOR MLB
	BEQ	20$		;BRANCH IF IT IS MLB
				;OR NOT IN THE SAME PASS
1999$:	MOV	#-1,R0		;FLAG END OF FILE
	BR	50$

40$:	MOV	#1,R0		;FLAG END OF INPUT
50$:

.IFF;	DF,RT11			;If RT-11

	.MCALL	CSI$
	CSI$

	CMPB	#IO.OPN,IOFTBL+SRCCHN  ;Is source file open?
	BNE	120$		;Branch if not, open next source file
	$READ	SRC		;Get a source input line
	CLR	R0		;Assume everything is OK.
	BITB	#IO$EOF,IOFTBL+SRCCHN  ;Was end-of-file detected?
	BEQ	135$		;Branch if not, process it.
99$:	CALL	CLOSRC		;Close source file
	TST	GETFLG		;File crossing enabled?
	BNE	100$		;Branch if not, return EOF.
	BITB	#CS.MOR,CSIBLK+C.STAT ;Another file on hand here?
	BNE	120$		;Branch if so, next please.
	TST	INCSP		;Any .INCLUDE files stacked?
	BNE	120$		;Branch if so, next file please.
100$:	MOV	#1,R0		;Flag end of source files.
	BR	135$		;and continue.

; Open new source input file

120$:	CALL	$INIFL		;Initialize input file (using CSI$2,INPUT)
	BPL	121$		;Branch if ok.
	CALLR	CONT		;Else return for another command, done.

121$:	DEC	PASSSW		;Decrement switch value to be ...
				; in line with 'PASS' value
	BMI	130$		;Ignore if value was zero
	CMP	PASS,PASSSW	;Compare 'PASS' and switch values
	BEQ	130$		;Branch if ok, assemble this pass.
	INC	PAGNUM		;Else, bump page number
	BR	99$		;Close this input file, try the next one.

130$:	COM	R0		;O.K. - Set success
135$:

.ENDC;	DF,RT11			;If RT-11

.ENABL	LSB

	TST	R0		;NORMAL?
	BEQ	30$		;  YES
	BLT	10$		;  NEW FILE
	ERROR	E		;EOF, ERROR
	INC	ENDFLG		;FLAG IT
	BR	20$

GETTX2:	BR	GETTXT		;KLUDGE A FEW UNREACHING BRANCHES

10$:	INC	FFCNT		;NEW FILE, FORCE EJECT
20$:	.IF NDF	XLCSEQ
	MOV	#-1,LINNUM	;START FILE WITH NEW SEQUENCE NUMBERS
	CLR	SEQEND		;
	.ENDC

.IF	NDF,RT11		;If not RT-11

30$:	BITB	#IO$RBG,IOFTBL+SRCCHN ;WAS INPUT RECORD TOO LONG?
	BEQ	40$		;BRANCH IF NO
	BICB	#IO$RBG,IOFTBL+SRCCHN ;CLEAR ERROR FLAG
	ERROR	L		;FLAG THE ERROR
40$:	.IF NDF	XLCSEQ
	INC	LINNUM		;INCREMENT LINE COUNT
	.IF NDF	XFCSQN
	MOV	FDBTBL+SRCCHN,R4 ;GET FDB ADDRESS
	MOV	F.SEQN(R4),R4	;PICK UP RECORD SEQUENCE NUMBER
	BEQ	50$		;BRANCH IF NONE DEFINED
	MOV	R4,LINNUM	;ELSE USE IT AS SEQ NUMBER INSTEAD
50$:
	.ENDC
	.ENDC
	.DSABL	LSB

SETBUF:	MOV	BUFTBL(R3),R1	;POINT R1 TO INPUT BUFFER
	MOV	-(R1),R4	;RETURN COUNT IN R4
	CLR	(R1)+		;SET STOPPER
	TST	R0		;RETEST I/O COMPLETION

.IFF;	NDF,RT11		;If not RT-11

30$:	BIT	#IO.ERR,IOFTBL(R3) ;ERROR?
	BEQ	40$		;NO
	ERROR	L		;YES, FLAG IT

40$:	.IF NDF	XLCSEQ
	INC	LINNUM		;INCREMENT LINE COUNT
	.ENDC
	.DSABL	LSB

SETBUF:	MOV	CNTTBL(R3),R1	;POINT TO COUNT
	MOV	(R1),R4		;RETURN COUNT IN R4
	CLR	(R1)		;SET STOPPER
	MOV	BUFTBL(R3),R1	;POINT R1 TO INPUT BUFFER
	TST	R0		;RETEST I/O COMPLETION

.ENDC;	NDF,RT11		;If not RT-11

	BLT	GETLU2		;TRY AGAIN IF ERROR
	BGT	GOTLIN		;JUST RETURN IF EOF

;
; TRIM TRAILING CARRAIGE CONTROL CHARS, PASS LINE TO ASSEMBLER
; AS AN ASCIZ STRING
;

TRIMLN:	ADD	R1,R4		;POINT R4 AT END OF LINE
10$:	CLRB	(R4)		;FORM ASCIZ STRING
	MOVB	-(R4),R5	;GET LAST CHAR
	CMP	R5,#CR		;IF > CR
	BHI	30$
	CMP	R5,#LF		;  OR < LF
	BLO	30$		;  MOVE ON
	CMP	R5,#FF		;FORM FEED?
	BNE	10$		;  NO, LOOP
	TST	SMLLVL		;SYSTEM MACRO?
	BNE	10$		;  YES, DON'T TALLY FF
	INC	FFCNT		;COUNT THE PAGE
	BR	10$

20$:	MOVB	R5,(R2)+	;MOVE INTO LINBUF
30$:	CLR	R5		;Clear for BISB
	BISB	(R1)+,R5	;Fetch next character of input line
	MOVB	CTTBL(R5),R0	;GET CHARACTERISTICS
	BEQ	50$		;QUESTIONABLE
	BIT	#CT.LC,R0	;LOWER CASE?
	BEQ	20$		;  NO
	BIT	#ED.LC,EDMASK	;LOWER CASE ENABLED?
	BEQ	20$		;Branch if so, stuff it.
	SUB	#40,R5		;CONVERT LOWER TO UPPER CASE
	BR	20$		;STORE

50$:	MOVB	R5,(R2)		;QUESTIONABLE, ASCIZ NULL?
	BEQ	GOTLIN		;  YES, ALL SET
	ERROR	I		;NO, ILLEGAL CHARACTER
	MOV	#200,R5		;STORE ZERO WITH FLAG BIT
	BR	20$

.ENABL LSB
GOTLIN:	.IF NDF	XEDCDR
	MOVB	LINBUF+72.,CDRSAV ;SAVE COLUMN 73
	BIT	#ED.CDR,EDMASK	;CARD READER TYPE?
	BNE	10$		;  NO
	CLRB	LINBUF+72.	;YES, FORCE EOL
	.ENDC
10$:	MOV	#LINBUF,CHRPNT
	SETNB
	BNE	20$		;ALL SET IF NON-NULL LINE
	TST	FFCNT		;NULL, FORM FEED?
	BEQ	20$		;  NO
GETLU2:	JMP	GETLUP		;YES, JUST BUMP PAGE COUNT
20$:	MOV	ENDFLG,R0	;RETURN WITH "ENDFLG" AS ARGUMENT
MRETN:	RETURN			;EXIT FROM GETLIN ROUTINE
.DSABL LSB


;
; HANDLE MACRO/REPEAT BLOCK EXPANSIONS
; NOTE: CVRL DESTROYS R2
;

GETTXT:
	MOV	R2,R4		;COPY LINE BUFFER POINTER
	CVRL			;GET REAL ADDR OF CURRENT MACRO TEXT BLOCK
	MOV	R0,R2		;COPY REAL ADDR
	MOV	R0,R3		; TWICE
	ADD	#BPMB,R2	;POINT PAST END OF BLOCK
	ADD	MSBMRP,R0	;ADD SAVED OFFSET IN THIS BLOCK

10$:	CALL	MOVTXT		;MOVE TEXT INTO SOURCE LINE UP TO SPECIAL CHAR
	TSTB	R5		;What did we find?
	BEQ	30$		;BRANCH IF END OF LINE WITHIN MACRO
	CMPB	R5,#MT.MAX	;TEST SPECIAL CHAR FOR MACRO TERMINATOR
	BLOS	40$		;BRANCH IF SO, POP TO PREV LEVEL OR REPEAT
	CALL	MACBYT		;Get next byte from the macro (arg number)
	CMP	MSBTYP,#MT.MAC	;SEE IF .MACRO EXPANSION
	BEQ	20$		;BRANCH IF SO
	MOV	MSBCNT,R5	;ELSE USE REPEAT COUNT AS ARG NUMBER FOR .IRP
20$:	CMP	R5,ARGMX	;COMPARE ARG # TO MAX WE HAVE
	BHI	10$		;NOTHING TO SUBSTITUTE, JUST CONTINUE
	MOV	R0,-(SP)	;SAVE CURRENT REAL TEXT BLOCK POINTER
	CLR	R0
	BISB	ARGVC-1(R5),R0	;GET OFFSET INTO ARGUMENT STRING FOR THIS ARG
	ADD	#ARGST,R0	;MAKE ABSOLUTE
	CALL	MOVTXT		;MOVE TEXT UNTIL DELIMITER SEEN
	MOV	(SP)+,R0	;RESTORE REAL ADDR
	BR	10$		;CONTINUE THE EXPANSION

30$:	CLRB	(R4)		;SET NULL END OF LINE DELIMITER
	MOV	R1,MSBRDV	;NOW UPDATE MACRO VIRTUAL READ POINTER
	SUB	#BPMB,R2	;POINT BACK TO START OF BLOCK
	SUB	R2,R0		; AND CALCULATE CURRENT OFFSET
	MOV	R0,MSBMRP	;UPDATE IT
	BIS	#LC.ME,LCFLAG	;INDICATE MACRO EXPANSION OCCURRED TO LISTING
	BR	GOTLIN		;FINISH OFF LINE SETUP

40$:	CALL	ENDMAC		;POP TO PREV MACRO EXPANSION CONTEXT
				; OR REPEAT IF UNFINISHED REPEAT BLOCK
	JMP	GETLUP		;LOOP BACK TO CONTINUE IN NEW CONTEXT


.SBTTL	MOVTXT - Move text from macro block

;+
; MOVTXT
; This routine moves text from a MACRO text block, into
; LINBUF, until a flag character is found.
;
;	R4	-> Position in LINBUF
;
;	CALL	MOVTXT
;
;	R5	= Flag character at end of text.
;-
.ENABL	LSB

40$:	MOVB	R5,(R4)+	;STORE CHAR IN THE LINE

MOVTXT:	CMP	R4,#LINBUF+SRCLEN ;SEE IF ROOM IN SOURCE LINE
	BLO	20$		;BRANCH IF HAVE IT
	ERROR	L		;ELSE FLAG ERROR
	DEC	R4		; AND DROP PREVIOUS CHAR
20$:	CALL	MACBYT		;Fetch a character
	TSTB	R5		;What is it?
	BEQ	MRETN		;Null means leave
	BPL	40$		;7-bit character, proceed
	BITB	#^C<237>,R5	;Is it printable?
	BEQ	MRETN		;No, so it is a flag code
	BR	40$		;Normal, go store it

MACBYT:	CMP	R0,R2		;SEE IF MORE IN CURRENT VIRTUAL BLOCK
				; ALWAYS BRANCHES IF DUMMY ARG SUBSTITUTION
	BNE	10$		;BRANCH IF SO
	MOV	-BPMB(R0),R1	;GET VIRTUAL THREAD WORD
	CVRL			;GET REAL ADDR
	MOV	R0,R2		;MAKE COPY
	ADD	#BPMB,R2	;POINT PAST END OF BLOCK
	TST	(R0)+		;POINT PAST LINK WORD
10$:	CLR	R5		;Avoid sign extension
	BISB	(R0)+,R5	;Get next char
	BITB	#CT.LC,CTTBL(R5) ;TEST IF LOWER CASE
	BEQ	50$		;No, exit
	BIT	#ED.LC,EDMASK	;TEST IF CONVERTING TO UPPER CASE
	BEQ	50$		;No, exit
	SUB	#40,R5		;Yes, convert to upper
50$:	RETURN			;Done

.DSABL	LSB


.IF	NDF,RT11		;If not RT-11

	.MCALL	CLOSE$
CLOSRC::MOV	FDBTBL+SRCCHN,R0  ;++017 PUT SOURCE FILE FDB ADDR IN R0
	CLRB	IOFTBL+SRCCHN	;++014 SET FILE CLOSED STATUS
	CLOSE$			;++010 CLOSE THE SOURCE FILE
	RETURN			;++010

	.PSECT	IMPPAS,D,GBL,RW
LPPCNT::.BLKW	1		;FORCE NEW PAGE WHEN NEGATIVE
FFCNT::	.BLKW	1		;UNPROCESSED FF COUNT
PAGNUM::.BLKW	1		;PAGE NUMBER
PAGEXT::.BLKW	1		;PAGE EXTENSION

	.IF NDF	XLCSEQ
LINNUM::.BLKW	2		;CREF LINE NUMBER
SEQEND::.BLKW	1		;
	.ENDC

.ENDC;	NDF,RT11		;If not RT-11


	.END
