;  DEC/CMS REPLACEMENT HISTORY, Element DATSUB.MAC
;  *8     8-AUG-1991 12:23:13 MACRO11 "After talking to Jim Williams, I finally find out what RT really needs..."
;  *7     5-AUG-1991 14:27:07 MACRO11 "Fix year 2000 problem, for last time..."
;  *6     2-AUG-1991 15:14:28 MACRO11 "Fixed incase RSX, RSTS and RT give different year formats back for past 2000"
;  *5     1-AUG-1991 15:40:45 MACRO11 "Put in fix to allow MACRO to work beyond the year 2000..."
;  *4    29-JUN-1987 20:23:07 STEVENS "Added /EN:BMK for MACRO regression testing"
;  *3    18-AUG-1986 11:18:55 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:18:13 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:35:09 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element DATSUB.MAC
	.NLIST							;Edit Level 00
	.ENABL	LC,GBL
	.LIST
	.TITLE	DATSUB	- RETURN THE SYSTEM DATE/TIME IN TEXT
	.SBTTL	DATSUB	- RETURN THE SYSTEM DATE/TIME IN TEXT
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Joe Worrall
;
;   Created:	04-Jun-82
;
;  Abstract:	This module formats the date and time into a string
;		of the format:
;
;		Day-of-the-week dd-mmm-yy hh:mm
;
;		An example would be:
;
;		Friday 04-Jun-82 18:00
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	01	PJH	05-Aug-1991	Fixed up for year 2000
;--


;	System Library "MCALLS"

.IF	NDF,RT11		;If not RT-11

	.MCALL	GTIM$S

.IFTF;	NDF,RT11		;If not RT-11

	PURE	TXTBYT,D

.IF	NDF,XEDBMK
BMKSTR:	.ASCIZ	/Weekday dd-mmm-yy hh:mm/	;Benchmark string
BMKVRS:	.ASCIZ	/Vnn.nna /
.ENDC;	NDF,XEDBMK

MON:	.ASCIZ	/Monday/
TUE:	.ASCIZ	/Tuesday/
WED:	.ASCIZ	/Wednesday/
THU:	.ASCIZ	/Thursday/
FRI:	.ASCIZ	/Friday/
SAT:	.ASCIZ	/Saturday/
SUN:	.ASCIZ	/Sunday/
MONTHS:	.ASCII	/JanFebMarAprMayJunJulAugSepOctNovDec/
UNKW:	.ASCIZ	/Unknown/

	PURE	DPURE,D

	.WORD	SAT		;Days pointer structure
	.WORD	SUN		;...
	.WORD	MON
	.WORD	TUE
	.WORD	WED
	.WORD	THU
	.WORD	FRI
DAYS:
MONLEN:	.WORD	0-1		;JANUARY
	.WORD	31.-1		;FEBRUARY
	.WORD	59.-1		;MARCH
	.WORD	90.-1		;APRIL
	.WORD	120.-1		;MAY
	.WORD	151.-1		;JUNE
	.WORD	181.-1		;JULY
	.WORD	212.-1		;AUGUST
	.WORD	243.-1		;SEPTEMBER
	.WORD	273.-1		;OCTOBER
	.WORD	304.-1		;NOVEMBER
	.WORD	334.-1		;DECEMBER


.IFF;	NDF,RT11			;If RT-11

	.PSECT	IMPURE,D,RW,GBL	;Pull date string into the root

.IFT;	NDF,RT11			;If RT-11

	.PSECT	ROODAT,D,RW,SAV,GBL	;Pull date string into the root

.ENDC;	NDF,RT11			;If RT-11


DAYTIM::.BLKW	3		;Saved Year,month,day
HOUR:	.BLKW	3		;Saved Hour,minute,second
TICK:	.BLKW	1		;Saved Ticks
TICKS:	.BLKW	1		;Saved Ticks per second
	DATSIZ	== 26.		;Size of date/time string (MAX)
				;If size changes, change TTLBUF
				; size in the root module MACRO.MAC!
DATTIM::.ASCIZ	/Wednesday dd-mmm-yy hh:mm/	;Maximum length string
.EVEN
	PURE	PUREI,I


.SBTTL	GETELP	- Get elapsed time from start of assembly
;+
; GETELP
; This routine inserts the elapsed time from the last time
; SETTIM was called.
;
;	R2	-> Buffer to stuff
;
;	CALL	GETELP
;
;	R2	-> Updated buffer pointer
;
;	All other register volitile.
;-

GETELP::TST	TICKS		;Was SETTIM called earlyer?
	BNE	10$		;Branch if so, OK.
	MOV	#UNKW,R1	;R1 -> Message to insert
	CALLR	MOVBYT		;Insert error message
;	<Unknown>


10$:	MOV	#HOUR,R1	;R1 -> Start hours
	MOV	(R1)+,-(SP)	;Stack hours
	MOV	(R1)+,-(SP)	;Stack minutes
	MOV	(R1)+,-(SP)	;and   seconds
	MOV	(R1)+,-(SP)	;and   ticks
	MOV	R2,-(SP)	;Save R2
	CALL	SETTIM		;Get new time paramites
	MOV	(SP)+,R2	;Restore R2
	MOV	#TICK,R5	;R5 -> Ticks
	SUB	(SP)+,@R5	;Subtract old ticks
	BGE	20$		;Branch if no carry
	ADD	2(R5),@R5	;Else borrow # Ticks per second on system.
	DEC	-2(R5)		;Correct seconds accordingly

20$:	SUB	(SP)+,-(R5)	;Subtract seconds
	BGE	30$		;Branch if no carry
	ADD	#60.,@R5	;Else, borrow 60. seconds
	DEC	-2(R5)		;Correct minutes accordingly
30$:	SUB	(SP)+,-(R5)	;Subtract minutes
	BGE	40$		;Branch if no carry
	ADD	#60.,@R5	;Else, borrow 60. minutes
	DEC	-2(R5)		;Correct hours accordingly
40$:	SUB	(SP)+,-(R5)	;Subtract hours
	BGE	50$		;Branch if no carry
	ADD	#24.,@R5	;Else, borrow 24. hours
50$:	MOV	(R5)+,R1	;R1 -> Hours
	CALL	TIMCVT		;Convert to ASCII
	MOVB	#':,(R2)+	;add seperator
	MOV	(R5)+,R1	;Dump minutes the same way
	CALL	TIMCVT		;...
	MOVB	#':,(R2)+	;
	MOV	(R5)+,R1	;Seconds ...
	CALL	TIMCVT		;
	MOVB	#'.,(R2)+	;
	MOV	(R5)+,R1	;Ticks
	CALL	TIMCVT		;
	CLRB	@R2		;Make field .ASCIZ
	RETURN			;Return to caller


.SBTTL	SETTIM	- Setup date/time information into DAYTIM/DATTIM
;+
; SETTIM
; This routine calculates all needed date and time information
; for the macro-11 assembler, and stores it in cells in root
; psects.
;
;	CALL	SETTIM
;
;	DAYTIM		Saved binary date/time information
;	DATTIM		String of date information for headers.
;
;	No registers are saved!
;-

SETTIM::
.IF	NDF,XEDBMK
	BIT	#ED.BMK,EDMCSI	;Was /E:BMK or /D:BMK specified in command?
	BNE	50$		;Branch if so - RETURN
.ENDC;	NDF,XEDBMK
.IF	DF,RT11		;If RT-11
	CALL	GETBIN	;Setup binary time info into DAYTIM
	MOV	#DAYTIM,R5 ;R5 -> Setup area
.IFF;	DF,RT11		;If RT-11
	MOV	#DAYTIM,R5 ;R5 -> Setup area
	GTIM$S	R5	;Get binary values needed by exec call
.ENDC;	DF,RT11		;If RT-11

;	Get the day of the week and date for the header line.

	MOV	#DATTIM,R2	;R2 -> String to fill into
	MOV	(R5)+,R0	;R0 = Year
	TST	(R5)		;Test if date is set (Month = 0?)
	BEQ	30$		;Branch if date not set, don't print junk.
	SUB	#72.,R0		;R0 = Year - 72.
	MOV	(R5)+,R4	;R4 = Month
	ASL	R4		;R4 = Month * 2
	SUB	#2,R4		;R4 = <Month*2>-2
	MOV	@R5,R5		;R5 = Day

;	R0	= Year - 72.
;	R4	= <Month*2>-2
;	R5	= Day of month

	MOV	R0,-(SP)	;Save year
	DEC	R0		;Make leap year correction
	ASR	R0
	ASR	R0
	ADD	@SP,R0
	INC	R0
	ADD	R0,R5		;Accumulate day
	BIT	#3,(SP)+	;Leap year?
	BNE	10$		;Nope - skip correction
	CMP	#2*1,R4		;After february?
	ADC	R5		;Correct if so
10$:	ADD	MONLEN(R4),R5	;Add in days from previous months
20$:	SUB	#7,R5		;Cheapo modulo 7
	BPL	20$		;...
	ASL	R5		;*2 For table index
	MOV	DAYS(R5),R1	;R1 -> .ASCIZ of day name
	CALL	MOVBYT		;Move it into the string
	MOVB	#40,(R2)+	;Stuff in a space
	MOV	#HOUR,R4	;R4 -> Hours word in DATTIM
	MOV	-(R4),R1	;R1 = Day
	CALL	TIMCVT		;Convert day to ASCII
	MOVB	#'-,(R2)+	;Stuff "-"
	MOV	-(R4),R1	;Get month
	ASL	R1		;*2
	ADD	@R4,R1		;R1 = <Months*2>+Months
	ADD	#MONTHS-3,R1	;R1 = Position in months string
	MOVB	(R1)+,(R2)+	;Move in the month
	MOVB	(R1)+,(R2)+
	MOVB	(R1)+,(R2)+
	MOVB	#'-,(R2)+	;Stuff "-"
	MOV	-(R4),R1	;R1 = Year
; Fixup for the year 2000...
23$:	CMP	R1,#100.	;Are we less than 100 years
	BLT	25$		;Yes -> skip subtraction
	SUB	#100.,R1	;Sub 100 years from total
	BR	23$		;check if we are below 100 yet
25$:	CALL	TIMCVT		;Convert

;	Stuff Time

30$:	TST	TICKS		;Any clock present on this system?
	BEQ	40$		;Branch if not, no time to print.
	MOVB	#40,(R2)+	;Insert a space beteen date and time
	MOV	#HOUR,R4	;R4 -> Hours word in DATTIM
	MOV	(R4)+,R1	;R1 = Hours
	CALL	TIMCVT		;Convert day to ASCII
	MOVB	#':,(R2)+	;Stuff ":"
	MOV	@R4,R1		;R1 = Minutes
	CALL	TIMCVT		;Convert minutes
40$:	CLRB	@R2		;.ASCIZ please
.IF	NDF,XEDBMK
50$:
.ENDC;	NDF,XEDBMK
	RETURN			;Return to caller.
.IF	NDF,XEDBMK


.SBTTL	ENABMK	- Enable MACRO benchmark testing
;+
; ENABMK
; This routine modifies the MACRO version number and date string
; so that benchmarks done on different days with different versions
; of macro are identical.
;
; INPUTS:
;	NONE
;
; OUTPUTS:
;	DATTIM and $MVRSN strings modified
;
; REGISTERS DESTROYED:
;	R1, R2
;
; CALLING SEQUENCE:
;	CALL	ENABMK
;-

ENABMK::BIT	#ED.BMK,EDMCSI	;Was /E:BMK or /D:BMK specified in command?
	BEQ	1$		;NO - Return
	MOV	#DATTIM,R2	;R2 -> String to fill
	MOV	#BMKSTR,R1	;R1 -> String to move
	CALL	MOVBYT		;Move string
	MOV	#$MVRSN,R2	;R2 -> MACRO version string to modify
	MOV	#BMKVRS,R1	;R1 -> MACRO version for benchmark
	CALL	MOVBYT		;Move string
	CALL	SETHDR		;Setup listing title line
1$:	RETURN
.ENDC;	NDF,XEDBMK


.SBTTL	TIMCVT	- Convert octal to ascii with leading zero
;+
; TIMCVT
; This routine simply adds a leading zero before calling
; DNC if needed.
;
;	R1	= Number to convert
;	R2	-> String to fill in
;
;	CALL	TIMCVT
;
;	R2	-> Updated string pointer
;-

TIMCVT:	CMP	R1,#10.		;++021 IS NUMBER LESS THAN TEN?
	BGE	10$		;++021 BRANCH IF NOT
	MOVB	#'0,(R2)+	;++021 ELSE, PAD WITH LEADING ZERO
10$:	CALLR	DNC		;++021 CVT TO DECIMAL, STORE, AND RETURN


.IF	DF,RT11		;If  RT-11
.SBTTL	GETBIN	- Get binary date/time info under RT-11

;+
; GETBIN
; This routine sets up the binary time/date cells for RT-11. Under
; RSX-11, the GTIM$S directive is used inline, and does not require
; mungs to get the binary info we need.
;
;	CALL	GETBIN
;
;	DAYTIM		Saved binary date/time info.
;
;	No registers are saved.
;-
	.MCALL	.DATE,	.GTIM,	.GVAL

	CONFIG	= 300
	$CLK50	= 040

GETBIN:	MOV	#DAYTIM,R1	;R1 -> Area to get info into
	.GTIM	#EMAREA,R1	;Get time info first, roll date if needed
	MOV	#TICKS,R5	;R5 -> Ticks per second saved area
	CLR	@R5		;Assume no clock on system

; Find out the correct # of ticks per second on this system

	.GVAL	#EMAREA,#CONFIG ;Get monitor config word
	TST	R0		;KW11L Clock present?
	BPL	20$		;Nope - no time to obtain
	MOV	#50.,@R5	;Assume 50 cycle clock
	BIT	#$CLK50,R0	;50 OR 60 Cycle?
	BNE	10$		;Branch if 50 Cycle clock
	MOV	#60.,@R5	;Else 60 cycles per second

10$:	MOV	(R1)+,R0	;R0 = Low order time
	MOV	@R1,R1		;R1 = High order time
	CALL	DIVTK		;Convert ticks @R5
	MOV	R3,-(R5)	;Stuff...
	CALL	DIV60		;Convert seconds
	MOV	R3,-(R5)	;Stuff...
	CALL	DIV60		;Convert minutes
	MOV	R3,-(R5)	;Stuff...
	MOV	R1,-(R5)	;Stuff hours

;	Stuff DAY & MONTH & YEAR

20$:	MOV	#DAYTIM,R5	;R1 -> Area to stuff date info into
	.DATE			;Return system date in R0 (If set)

;	Stuff year

	MOV	R0,@R5		;Copy R0
	BEQ	30$		;Branch if no date, just return.
; Fix to work past the year 2004...(add in AGE bits)
	MOV	R0,-(SP)	;Get working copy on stack
	SWAB	@SP		;Get AGE bits in the 5 & 6th positions
	ASR	@SP		; "	"
	BIC	#^C140,@SP	; Clear out everything else

	BIC	#^C37,@R5	;Want just the year bits please
	BIS	(SP)+,@R5	;...and add in the Age bits...
	ADD	#72.,(R5)+	;Adjust it for the funny RT-11 format

;	Stuff month

	MOV	R0,@R5		;Copy R0
	SWAB	@R5		;Put month bits in low byte
	ASR	@R5		;Right adjust month bits
	ASR	@R5		;
	BIC	#^C37,(R5)+	;Just want the month.

;	Stuff	day

	MOV	R0,@R5		;Copy R0
	ASL	@R5		;Get day bits on a byte boundry
	ASL	@R5		;
	ASL	@R5		;
	SWAB	@R5		;Put day bits in low order byte
	BIC	#^C37,@R5	;Want just the day bits

30$:	RETURN			;Return to caller

.IF	NE,0			;Found in the root in macro-11
	.PSECT	MIXED,D,RW

EMAREA:	.BLKW	2		;EMT area block
.ENDC;	NE,0

	PURE	PUREI,I


.SBTTL	DIVTK	- Divide R0,R1 by @R5
.SBTTL	DIV60	- Divide R0,R1 by 60.

;+
; DIVTK,DIV60
; Divtk divides by the # of clock ticks per second @R5, and
; Div60 divides by 60 ofcource.
;
;	R0,R1	Dividend
;
;	CALL	DIV??
;
;	R3	Remainder
;
;	R2,R4	Destroyed.
;-
.ENABL LSB

DIVTK:	MOV	@R5,R4		;R4 -> Divisor
	BR	10$		;Merge ...

DIV60:	MOV	#60.,R4		;Set for divide by 60
10$:	CLR	R3		;Zero remainder
	MOV	#32.,-(SP)	;Bit count
20$:	ASL	R1		;Standard shift-and-subtract division
	ROL	R0		;...
	ROL	R3
	CMP	R3,R4
	BLO	30$
	SUB	R4,R3
	INC	R1
30$:	DEC	@SP
	BNE	20$
	TST	(SP)+		;Remove 0 from stack
	RETURN			;Return to caller
.DSABL	LSB
.ENDC;	DF,RT11


	.END
