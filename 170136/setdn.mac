;  DEC/CMS REPLACEMENT HISTORY, Element SETDN.MAC
;  *4    29-JUN-1987 20:22:38 STEVENS "Added /EN:BMK for MACRO regression testing"
;  *3    18-AUG-1986 11:27:26 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:55:44 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:45:50 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element SETDN.MAC
	.NLIST							;Edit Level 03
	.ENABL	LC,GBL
	.LIST
	.TITLE	SETDN	- End of assembly processing
	.SBTTL	SETDN	- End of assembly processing
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	SETDN	- End of assembly processing
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	17-Apr-84	Print errors detected and
;					macro-11 command line as ONE print
;					because of terminal attachment problems
;					under RSX with > 1 MAC's running.
;	002	Jrw	03-Feb-85	Change rt-11 command line and CSI block
;					locations.
;	003	Jrw	18-Aug-86	Correct product names of RSX-11M/M-PLUS
;					and RTEM-11.
;--


; MCALL's to macro libraries

.IF	NDF,RT11		;If not RT-11

	.MCALL	CLOSE$,	DIR$,	GCMLD$,	GLUN$S,	GTIM$S,	GTSK$
	GCMLD$

.IFF;	NDF,RT11		;If not RT-11

	.MCALL	.CLOSE,.CHAIN,.GVAL,.LOCK,.RCTRL,.UNLOCK

.IFTF;	NDF,RT11		;If not RT-11

; Local data

.NLIST	BEX

.IFT;	NDF,RT11		;If not RT-11

	PURE	DPURE,D

; 'Get task paramters' DPB

TDPB:	GTSK$	TBUF

	.PSECT	MIXED,RW,D

; Parameter buffer

TBUF:	.BLKW	16.

.IFF;	NDF,RT11

	PURE	TXTBYT,D

.IFT;	NDF,RT11		;If not RT-11

.IF	NDF,R$RSTS	;IF NOT RSTS/E

FINERR:	.ASCII	/MAC -- /	;Name gets OVERLAYED on the fly!

.IFF;	NDF,R$RSTS	;IF NOT RSTS/E

FINERR:	.ASCII	/?MAC -- /	;Name gets OVERLAYED on the fly!

.ENDC;	NDF,R$RSTS	;IF NOT RSTS/E

.IFF;	NDF,RT11		;If not RT-11

FINERR:	.ASCII	/?MACRO-E-/

.IFTF;	NDF,RT11		;If not RT-11

FINMSG:	.ASCIZ	/Errors detected:  /

.IFT;	NDF,RT11		;If not RT-11

.EVEN

.IFTF;	NDF,RT11		;If not RT-11

	PURE	TXTBYT,D

WRKHED:	.ASCIZ	/*** Assembler statistics/
WRKRED:	.ASCIZ	/Work  file  reads: /
WRKWRT:	.ASCIZ	/Work  file writes: /
FINMS1:	.ASCIZ	/Size of work file: /
FINMS2:	.ASCIZ	/ Words  ( /
FINMS3:	.ASCIZ	/ Pages)/
DYNMSG:	.ASCIZ	/Size of core pool: /
.IF	NDF	XEDBMK
BMKOPS:	.ASCIZ	/Operating  system: /
.ENDC;	NDF	XEDBMK
OPSMSG:	.ASCII	/Operating  system: /
.IFT;	NDF,RT11

.IF	NDF,I$$IAS	;If not IAS

.IF	NDF,R$$PRO	;If not POS350 (CT)
	.ASCIZ	\RSX-11M/M-PLUS\
.IFF;	NDF,R$$PRO	;If not POS350 (CT)
	.ASCIZ	\RSX-11M/M-PLUS (P/OS)\
.ENDC;	NDF,R$$PRO	;If not POS350 (CT)

UVMS:	.ASCIZ	\ (Under VAX/VMS)\
URSTS:	.ASCIZ	\ (Under RSTS/E)\
UPOS:	.ASCIZ	\ (Under P/OS)\

.IFF;	NDF,I$$IAS	;If not IAS

	.ASCIZ	\IAS\

.ENDC;	NDF,I$$IAS	;If not IAS

.IFF;	NDF,RT11
	.ASCIZ	\RT-11\
URTEM:	.ASCIZ	/ (Under RTEM)/
URSTS:	.ASCIZ	\ (Under RSTS/E)\

.IFTF;	NDF,RT11
TIMMSG:	.ASCIZ	<CR><LF>/Elapsed time: /
.LIST	BEX

.IFT;	NDF,RT11		;If not RT-11

	PURE	DPURE,D

;	Table to control CRF data transfer

CTLLST:	.BYTE	N.FNAM,N.FNAM+2,N.FNAM+4,N.FTYP,N.FVER
	.BYTE	N.DID,N.DID+2,N.DID+4,-1
.EVEN

.IFF;	NDF,RT11		;If not RT-11

	.PSECT	MIXED,RW,D

; Chain to CREF information

CHNSPC:	.WORD	500		;CHAIN INFO AREA
	.RAD50	/SY /		;NAME OF CREF
	.RAD50	/CREF  /
	.RAD50	/SAV/
	.WORD	1		;OUTPUT CHANNEL
	.WORD	2		;INPUT CHANNEL
CHNDEV:	.RAD50	/DK /		;+030 INPUT DEVICE
	.RAD50	/SY /		;TO CHAIN BACK
	.RAD50	/MACRO /
	.RAD50	/SAV/
	.WORD	TTLBUF

.IFTF;	NDF,RT11		;If not RT-11

	PURE	PUREI,I

;+
; **-SETDN-SET DONE-END OF PROGRAM CLEAN UP
;-

SETDN::

.IFT;	NDF,RT11		;If not RT-11
.IF	NDF,R$RSTS		;If not RSTS
	MOVB	$MACPR+2,FINERR	;Fill in dynamic task name into
	MOVB	$MACPR+3,FINERR+1 ; possible error message.
	MOVB	$MACPR+4,FINERR+2
.ENDC;	NDF,R$RSTS		;If not RSTS
.IFTF;	NDF,RT11		;If not RT-11

;	Output errors detected message to the listing file

	MOV	#LINBUF,R2	;R2 -> Output line buffer
	MOV	#FINMSG,R1	;R1 -> Postfix message
	CALL	MOVBYT		;Move it into linbuf
	MOV	ERRCNT,R1	;R1 = # Errors in this assembly
	CALL	DNC		;Load up number of errors into LINBUF
	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF
	CALL	PRTLIN		;Output a <CR><LF>

;	Assembler statistics messages

	MOV	#WRKHED,R1	;R1 -> "**** Assembler statistics"
	CALL	MOVBYT		;Move it into output buffer
	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF
	CALL	PRTLIN		;Output a <CR><LF>
	CALL	PRTLIN		;Output a <CR><LF>
	MOV	#WRKRED,R1	;R1 -> "Work file reads:"
	CALL	MOVBYT		;Move it into output buffer

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	310$		;YES
.ENDC;	NDF	XEDBMK

.IFF;	NDF,RT11	;If not RT-11
	MOV	$WFRDC,R1	;R1 = # Work file reads
.IFT;	NDF,RT11	;If not RT-11
	MOV	$WRKRD+2,R1	;R1 = # Work file reads
.IFTF;	NDF,RT11	;If not RT-11

	CALL	DNC		;Stuff it in decimal

.IF	NDF	XEDBMK
310$:
.ENDC;	NDF	XEDBMK

	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF
	MOV	#WRKWRT,R1	;R1 -> "Work file writes:"
	CALL	MOVBYT		;...

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	320$		;YES
.ENDC;	NDF	XEDBMK

.IFF;	NDF,RT11	;If not RT-11
	MOV	$WFWRC,R1	;R1 = # Work file reads
.IFT;	NDF,RT11	;If not RT-11
	MOV	$WRKWR+2,R1	;R1 = # Work file reads
.IFTF;	NDF,RT11	;If not RT-11

	CALL	DNC		;Stuff it in decimal

.IF	NDF	XEDBMK
320$:
.ENDC;	NDF	XEDBMK

	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF

;	Virtual memory messages.

	MOV	#FINMS1,R1	;R1 -> "Virtual memory: "
	CALL	MOVBYT		;Move it into output buffer

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	330$		;YES
.ENDC;	NDF	XEDBMK

	MOV	$HGVAD,R1	;R1 -> Highest virtual word address used
	CALL	DNC		;Stuff it in decimal
	MOV	#FINMS2,R1	;R1 -> "Words "
	CALL	MOVBYT		;...
	MOV	$HGVAD,R1	;R1 -> Highest virtual word address used
	ADD	#377,R1		;Round up to next page
	CLRB	R1		;Divide by 256.
	SWAB	R1		;
	CALL	DNC		;Convert to decimal and store
	MOV	#FINMS3,R1	;R1 -> " (Pages)"
	CALL	MOVBYT		;Stuff it.

.IF	NDF	XEDBMK
330$:
.ENDC;	NDF	XEDBMK

	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF

	MOV	#DYNMSG,R1	;R1 -> "Dynamic memory :"
	CALL	MOVBYT		;Stuff it in

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	340$		;YES
.ENDC;	NDF	XEDBMK

.IFT;	NDF,RT11	;If not RT-11

	MOV	$FRSIZ,R1	;Get size of available memory
	CLC			;Convert it to words
	ROR	R1		;R1 = Size in words
	MOV	R1,R5		;Save it
	MOV	#P$GSIZ,R3	;R3 = Size of a resident page
	MOV	$FRSIZ,R1	;Get size of dynamic memory again
	CLR	R0		;Divide it
	DIV	R3,R0		;
	MOV	R5,R1		;R1 = # WORDS
	MOV	R0,R5		;R5 = # PAGES

.IFF;	NDF,RT11	;If not RT-11

	MOV	$FRAVL,R5	;R5 = # of page buffers available.
	MOV	R5,R1		;Copy to convert to words
	SWAB	R1		;Convert to words.

.IFTF;	NDF,RT11	;If not RT-11

	CALL	DNC		;Convert to decimal and store
	MOV	#FINMS2,R1	;R1 -> " Words "
	CALL	MOVBYT		;Stuff it
	MOV	R5,R1		;R1 = # Pages
	CALL	DNC		;Convert it to decimal and stuff it.
	MOV	#FINMS3,R1	;R1 -> " (Pages)"
	CALL	MOVBYT		;...

.IF	NDF	XEDBMK
340$:
.ENDC;	NDF	XEDBMK

	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF

	MOV	#OPSMSG,R1	;R1 -> "Operating  system: xxxxx"

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BEQ	350$		;NO
	MOV	#BMKOPS,R1	;R1 -> "Operating  system: "
350$:
.ENDC;	NDF	XEDBMK

	CALL	MOVBYT		;Stuff it.

.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	10$		;YES
.ENDC;	NDF	XEDBMK

.IFT;	NDF,RT11

.IF	NDF,I$$IAS	;If not IAS

	DIR$	#TDPB		;Get task parameters
	BCS	10$		;Branch if directive failed!
	MOV	#UVMS,R1	;R1 -> "(Under VAX/VMS)"
	CMP	TBUF+G.TSSY,#5	;VAX/VMS?
	BEQ	5$		;Branch if so, done.
	MOV	#UPOS,R1	;R1 -> "(Under POS)"
	CMP	TBUF+G.TSSY,#11	;POS (CT)?
	BEQ	5$		;Branch if so, done.
	CMP	TBUF+G.TSSY,#4	;RSTS/E?
	BNE	10$		;Branch if not, done.
	MOV	#URSTS,R1	;R1 -> "(Under RSTS/E)"
5$:	CALL	MOVBYT		;Stuff it.

.ENDC;	NDF,I$$IAS	;If not IAS

.IFF;	NDF,RT11
	.GVAL	#EMAREA,#SYSGEN	;Get sysgen feature word
	BCS	10$		;Branch if directive failed, forget it!
	MOV	#URTEM,R1	;R1 -> "(Under RTEM-11)"
	BIT	#RTEM$,R0	;Running under RTEM-11?
	BNE	5$		;Branch if so!
	.GVAL	#EMAREA,#0	;Get first word of RMON (JMP INTEN)
	BCS	10$		;Give up if error.
	MOV	#URSTS,R1	;R1 -> "(Under RSTS/E)"
	TST	R0		;JMP INTEN present?
	BNE	10$		;Branch if so, not RSTS/E
5$:	CALL	MOVBYT		;Stuff it.
.IFTF;	NDF,RT11
10$:	CALL	PRTLIN		;Print the line - return with R2 ->LINBUF

	MOV	#TIMMSG,R1	;R1 -> "Elapsed time:"
	CALL	MOVBYT		;Stuff it.
.IF	NDF	XEDBMK
	BIT	#ED.BMK,EDMCSI	;Performing MACRO regression benchmark?
	BNE	360$		;YES
.IFTF;	NDF	XEDBMK
	CALL	GETELP		;Get elapsed time into buffer
.IFT;	NDF	XEDBMK
360$:
.ENDC;	NDF	XEDBMK
	PUTLP	#LINBUF		;Write buffer into listing

;	Print command line given.

.IFT;	NDF,RT11	;If not RT-11

	MOV	#CMLBLK,R1	;Get address of command block
	MOV	G.CMLD(R1),R2	;R2 = # of bytes in command line
	MOV	G.CMLD+2(R1),R5	;R5 -> Address of command line
	ADD	R5,R2		;R2 -> Location following EOL
	CLRB	@R2		;Make the command string .ASCIZ

.IFF;	NDF,RT11	;If not RT-11

	MOV	#$GTLIN,R5	;R5 -> RT-11 Command string addr

.IFTF;	NDF,RT11	;If not RT-11

	PUTLP	R5		;Print it in the listing file

.IFF;	NDF,RT11	;If not RT-11

	$FLUSH	LST		;Dump last buffers.
	$FLUSH	BIN

.IFTF;	NDF,RT11	;If not RT-11

	TST	ERRCNT		;Any errors?

.IFF;	NDF,RT11		;If not RT-11

	BEQ	210$		;Branch if not
	BISB	#ERROR$,@#USERRB ;Else set error byte for DCL files
	BR	220$		;Output error lines to KB:

210$:	BISB	#SUCC$,@#USERRB	;Set success for DCL files
	BR	50$		;Merge over error output code

220$:

.IFT;	NDF,RT11	;If not RT-11

	BEQ	50$		;Branch if no errors.

.IFTF;	NDF,RT11		;If not RT-11

	MOV	#FINERR,R1	;R1 -> Beginning of error message for KB:
	MOV	#LINBUF,R2	;R2 -> Buffer to spit it out with
	CALL	MOVBYT		;Move errors detected for KB: message.
	MOV	ERRCNT,R1	;R1 = # Errors
	CALL	DNC		;Load up number of errors into LINBUF
	MOVB	#12,(R2)+	;<CR><LF>
	MOVB	#15,(R2)+	;
	MOV	R5,R1		;R1 -> MACRO-11 command line
	CALL	MOVBYT		;Move command line in for KB: message
	CLRB	@R2		;.ASCIZ it

.IFF;	NDF,RT11	;If not RT-11

	.RCTRLO			;Cancel CTRL/O

.IFTF;	NDF,RT11	;If not RT-11

	PUTKB	#LINBUF		;Print COMPLETE error string on terminal.
;;;	PUTKB	R5		; and the MACRO command line too.
50$:

;	Chain or spawn CRF/CREF as the case may be.

.IFF;	NDF,RT11	;If not RT-11

; Chain to the RT-11 CREF if requested.

	$FLUSH	CRF
	TST	CRFFLG		;Any cref desired?
	BEQ	100$		;Branch if not
	MOV	CRF.DEV,CHNDEV	;Stuff workfile device
	MOV	#CHNSPC,R2	;R2 -> Chain INFO
	MOV	(R2)+,R1	;R1 -> .CHAIN area
	MOV	(R2)+,(R1)+	;Move in cref name
	MOV	(R2)+,(R1)+
	MOV	(R2)+,(R1)+
	MOV	(R2)+,(R1)+
	MOV	(R2)+,(R1)+	;Output (LST) Channel #
;	TST	(R1)+		;Output device (Set by CSISPC)
	MOV	#$CSIBL,R0	;Get CSI string addr
	MOV	10.(R0),(R1)+	;Output device (Set by CSI)		;JR
	BEQ	100$		;No cref if no listing device
	MOV	RECNUM+LSTCHN,(R1)+ ;Output highest block written
	MOV	(R2)+,(R1)+	;Input (CREF) channel #
	MOV	(R2)+,(R1)+	;Input device
;	MOV	@#<500+<2*10.>>,R0 ;Get device if specified
	MOV	20.(R0),R0	;Get device if specified		;JR
	BEQ	70$		;No, just use default
	MOV	R0,-2(R1)	;Else, put in interface
70$:	MOV	RECNUM+CRFCHN,(R1)+ ;Input highest block written
	CLR	(R1)+		;Listing width flag
	BIT	#LC.TTM,LCMASK	;In .NLIST TTM mode?
	BEQ	80$		;Branch if not
	COM	-2(R1)		;Else set 80. collum listing
80$:	MOV	(R2)+,(R1)+	;Move in name of return chain
	MOV	(R2)+,(R1)+
	MOV	(R2)+,(R1)+
	MOV	(R2)+,(R1)+
	MOV	@R2,R2		;Point to last title line
90$:	MOVB	(R2)+,(R1)+	;Copy into chain area
	CMP	R2,TTLBRK	;End of title?
	BLO	90$		;No - keep copying
	CLRB	(R1)+		;Assure .ASCIZ
	.CLOSE	CHAN+BINCHN	;Close BINARY channel
	.CHAIN			;Chain to CREF
	BR	110$		;Can't happen (Except in disasters!)

100$:	.LOCK			;Keep the USR in core
	.CLOSE	CHAN+BINCHN	;Close BINARY channel
	.CLOSE	CHAN+LSTCHN	;Close LISTING channel
	.UNLOCK
110$:	JMP	CONT		;Restart the assembler

.IFT;	NDF,RT11	;If not RT-11

	TSTB	CRFFIL		;Was a CRF file created?
	BEQ	170$		;Branch if not
	MOV	FDBTBL+LSTCHN,R0  ;R0 -> Listing file FDB addr
	MOVB	F.LUN(R0),R1	;R1 = Lun
	ADD	#F.FNB,R0	;R0 -> Points to file name block
	SUB	#13.*2,SP	;Allocate send block on stack
	MOV	SP,R2		;Copy addr into R2
	MOV	#CTLLST,R3	;Get addr of transfer ctl list
120$:	MOVB	(R3)+,R4	;Get next fnb offset
	BLT	130$		;Branch if done.
	ADD	R0,R4		;Add in FDB address
	MOV	(R4),(R2)+	;Copy data into send block
	BR	120$		;Loop ...

; Get lun information to insure that the correct device name and
; unit number are conveyed.  This is a side effect of the MCR logical
; device name assignment command. Note that the return address is
; clobbered, but that this routine always jumps to the assembler restart
; address.

130$:	GLUN$S	R1,R2		;Get LUN info
	ADD	#3,R2		;Point beyond unit number
	CLRB	(R2)+		;Assume not to spool output
	BIT	#SPMSK,$SWTCH	;LST Spooling requested?
	BNE	140$		;Branch if not
	INCB	-1(R2)		;Set CRF spool flag
140$:	MOV	FDBTBL+CRFCHN,R0  ;Get CRF file FDB addr
	MOV	F.FNB+N.FVER(R0),(R2)+  ;Copy CRF file version
	MOV	$LSTGT,(R2)+	;Copy LST file target device
	MOVB	$LSTGT+2,(R2)	; and unit number
	MOV	SP,R1		;Set data buffer address
	CLOSE$	R0		;Close crf file before send
	CLOSE$	FDBTBL+LSTCHN	;Close listing file

.IF	NDF,R$RSTS		;If not RSTS

	MOV	#^RCRF,R0	;Set three-character task name
	CALL	$DSPAT		;Call to dispatch cross-ref task
	BCC	150$		;Branch if no errors
	MOV	#EX$WAR,R0	;Else, set warning status
150$:	CMP	#EX$SUC,R0	;Successful status returned?
	BEQ	160$		;Branch if so, OK.
	CMP	R0,$EXSTS	;Is error worse than existing status?
	BLE	160$		;Branch if not
	MOV	R0,$EXSTS	;Else set new error status

.ENDC;	NDF,R$RSTS		;If not RSTS

160$:	ADD	#13.*2,SP	;Clean stack
	BR	180$		;Skip lst file spooling

;	Come here if no CREF, check to see if we should spool
;	the file.

170$:	BIT	#SPMSK,$SWTCH	;Spool listing?
	BNE	180$		;Branch if not.
	MOV	FDBTBL+LSTCHN,R0  ;Else put listing file FDB addr in R0
	BEQ	180$		;Branch if none
	CALL	.PRINT		;Close file and send info to spooler

180$:	CALL	CLSALL		;Close all open files
	JMP	CONT		;Restart the assembler

.ENDC;	NDF,RT11	;If not RT-11


; Print a line

PRTLIN:	CLRB	@R2		;MAKE AN ASCIZ STRING
	PUTLP	#LINBUF		;PUT THE LINE ON LPT
	MOV	#LINBUF,R2	;RESET TO START OF BUFFER
	RETURN


	.END
