;  DEC/CMS REPLACEMENT HISTORY, Element ENDLN.MAC
;  *3    18-AUG-1986 11:19:21 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:19:30 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:35:26 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element ENDLN.MAC
	.NLIST							;Edit Level 02
	.ENABL	LC,GBL
	.LIST
	.TITLE	ENDLN - End of line processing
	.SBTTL	ENDLN - End of line processing
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	ENDLN - End of line processing
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	12-Apr-83	Give ERROR exit status in all
;					error cases!
;	002	Jrw	04-Nov-83	Call SETMAX if we are processing
;					last line in file to allow error
;					to be given by SETMAX on last line
;					in the file.
;--


	PURE	PUREI,I

;+
; **-ENDLIN-END OF LINE PROCESSOR
;-

ENDLIN::SAVREG			;Save registers
	TSTB	CTTBL(R5)	;EOL or SEMI-COLON?
	BLE	1$		;Branch if so, OK.
	ERROR	Q
1$:	.IF NDF	XEDCDR
	MOVB	CDRSAV,LINBUF+72.	;Replace borrowed char
	.ENDC
	MOV	PASS,-(SP)	;PASS 1?
	BEQ	9$		;  YES
	MOV	LSTDEV,(SP)	;INIT LISTING FLAG
	TST	ERRBTS		;ANY ERRORS?
	BNE	7$		;  YES, GO DIRECTLY, DO NOT COLLECT, ETC.
	TSTB	(SP)		;ANY LISTING DEVICE?
	BEQ	9$		;  NO
	BIT	#LC.LD,LCFLAG	;LISTING DIRECTIVE?
	BNE	5$		;  YES
	TST	LCLVL		;TEST OVER-UNDER RIDE
	BLT	5$		;IF <0, LIST ONLY IF ERRORS
	BGT	8$		;IF >0, LIST UNCONDITIONALLY
	BIT	#LC.COM,LCMASK	;COMMENT SUPPRESSION?
	BEQ	2$		;  NO
	MOV	CHRPNT,LCENDL	;YES, ASSUME WE'RE SITTING AT COMMENT
2$:	BIT	#LC.SRC,LCMASK	;LINE SUPPRESSION?
	BEQ	3$		;  NO
	MOV	#LINBUF,LCENDL	;YES, POINT TO START OF BUFFER
3$:
	.IF NDF	XMACRO
	TST	$LSCNT+CODLST	;++021 IS THERE GENERATED CODE?
	BEQ	4$		;  NO
	BIT	#LC.MEB,LCMASK	;MACRO BINARY EXPANSION?
	BNE	4$		;  NO
	BIC	#LC.ME,LCFLAG	;YES, IGNORE ME FLAG
	.ENDC
4$:	MOV	#LC.SEQ!LC.LOC!LC.SRC!LC.BIN,R1  ;++012 MASK OF SIG LC BITS
	BIC	LCMASK,R1	;++012 CLEAR IT VIA CURRENT LIST CTL MASK
	BEQ	5$		;++012 ZERO, LINE WILL BE NULL--SUPPRESS IT
	BIT	LCMASK,LCFLAG	;++012 SUPPRESS IT ON OTHER GROUNDS?
	BEQ	9$		;  NO, USE CURRENT FLAGS
5$:	CLR	(SP)		;YES, CLEAR LISTING MODE
	BR	9$
7$:	SWAB	(SP)		;ERROR, SET TO ERROR FLAGS
8$:	MOV	#LINBUF,LCBEGL	;LIST ENTIRE LINE
	MOV	#LINEND,LCENDL
9$:	TST	ENDFLG		;Is this the last line to process in the file?
	BEQ	4999$		;Branch if not
	CALL	SETMAX		;Else close out the current psect
4999$:	CLR	$LSPNT		;Init pointer to start of list
	CALL	PCROLL		;PROCESS ENTRY ON CODE ROLL
500$:	MOVB	(SP),LSTREQ	;ANYTHING REQUESTED?
	BEQ	502$		;  NO
	CLRB	@LCENDL		;SET ASCIZ TERMINATOR
	MOV	#OCTBUF,R2
11$:	MOV	#SPACE*400+SPACE,(R2)+	;BLANK FILL
	CMP	#LINBUF,R2	;TEST FOR END (BEGINNING OF LINE BUFFER)
	BNE	11$
	MOV	#OCTBUF,R2	;++012 POINT R2 TO OUTPUT BUFFER
	CALL	TSTERR		;++012 SET ERROR FLAGS
	.IF NDF	XLCSEQ		;++012
	MOV	#LINNUM,R0	;++012 PNT R0 TO LINE NUMBER (PAIR)
	MOV	(R0)+,R1	;++012 GET LINE # IN R1- PNT R0 TO OLD #
	CMP	R1,(R0)		;++012 DO OLD AND CURRENT #'S MATCH?
	BEQ	20$		;++012 YES, GET NEXT PRINT FIELD
	MOV	R1,(R0)		;++012 NO RESET OLD LINE # TO CURRENT #
	BIT	#LC.SEQ,LCMASK	;++012 ARE LINE NUMBERS SUPPRESSED?
	BNE	20$		;++012 YES, GET NEXT PRINT FIELD
	MOV	R2,R4		;++012 SAVE BUFFER POINTER
	DNC			;++012 CVT LINE # TO DECIMAL AND STORE
	MOV	#OCTBUF+7,R0	;++012 PNT R0 TO END OF SEQ FIELD
15$:	MOVB	-(R2),-(R0)	;++012 RIGHT ADJUST THE SEQUENCE NUMBER
	MOVB	#SPACE,(R2)	;++012 REPLACE DIGIT WITH BLANK
	CMP	R2,R4		;++012 CONTINUE FOR THE ENTIRE ...
	BHI	15$		;++012 ... SEQUENCE NUMBER
	MOV	#OCTBUF+7,R2	;++012 NOW UPDATE BUFFER POINTER
	.ENDC			;++012
20$:	MOVB	#TAB,(R2)+	;++012 INSERT FIELD SEPARATOR
	MOV	#PF0,R1		;++012 PNT R1 TO LOCATION FIELD DATA
	BIT	#LC.LOC,LCMASK	;++012 IS LOCN FIELD SUPPRESSED?
	BNE	24$		;++012 YES, TRY NEXT FIELD
	TST	(R1)		;++012 IS LOCN FIELD EMPTY?
	BEQ	22$		;++012 YES, SKIP DATA CONVERSION
	CALL	SETWRD		;++012 CVT LOCATION AND STORE IN LINE
22$:	MOVB	#TAB,(R2)+	;++012 INSERT FIELD SEPARATOR
24$:	CLR	(R1)		;++012 SET LOCATION FIELD EMPTY
	MOV	#PF1,R1		;++012 PNT F1 TO BINARY FIELD DATA
	BIT	#LC.BIN,LCMASK	;++012 IS BINARY FIELD SUPPRESSED?
	BNE	501$		;++012 YES, GO DIRECTLY TO PRINT
	.IF NDF	XLCTTM		;++012
	MOV	#1,R4		;++012 ASSUME TTMODE (ONE BINARY FIELD)
	BIT	#LC.TTM,LCMASK	;++012 ARE WE IN TELETYPE MODE?
	BEQ	30$		;++012 YES, SKIP
	CMPB	(R4)+,(R4)+	;++012 NO, SET TO THREE BINARY FIELDS
	.IFTF			;++012
30$:	TST	(R1)		;++012 IS BINARY FIELD EMPTY?
	BEQ	32$		;++012 YES, SKIP DATA CONVERSION
	CALL	LINWDB		;++012 CVT BINARY FIELD AND STORE IN LINE
32$:	MOVB	#TAB,(R2)+	;++012 INSERT FIELD SEPARATOR
	CLR	(R1)		;++012 SET BINARY FIELD EMPTY
	.IFT			;++012
	DEC	R4		;++012 DECR BINARY FIELD COUNT
	BEQ	501$		;++012 WHEN ZERO PRINT THE LINE
	TST	$LSFLG		;++021 IS ANY GENERATED CODE LEFT?
	BEQ	32$		;++012 NO, GENERATE NULL FIELD
	CALL	PCROLL		;++012 YES, GET NEXT ENTRY IN CODE ROLL
	BR	30$		;++012 REPEAT FORMAT PROCESS
	.ENDC			;++012
501$:	MOV	LCBEGL,R1	;POINT TO START OF LISTING LINE
	MOVBYT			;MOVE OVER
	PUTLIN	#OCTBUF		;TEST FOR HEADER AND LIST
502$:	CLRB	@LCBEGL		;DON'T DUPE LINE
	.IF NDF	XLCTTM
	TST	$LSFLG		;++021 IS ANY GENERATED CODE LEFT?
	BEQ	503$		;  YES, DON'T LOOP
	.ENDC
	CALL	PCROLL
	BEQ	503$		;EXIT IF EMPTY
	BIT	#LC.BIN!LC.BEX,LCMASK  ;++012 SUPPRESS ADDITIONAL BINARY?
	BNE	502$		;++012 YES
	BR	500$		;++012 NO, FORMAT FOR PRINTING

503$:	TST	(SP)+		;PRUNE LISTING FLAG
	ZAP	CODLST		;++021 EMPTY GENERATED CODE LIST
	CALL	ZAPCPX		;++001 CLEAR CPXROL & INIT COMPLEX STR LENGTH
	MOV	CLCLOC,R0
	CMP	R0,CLCMAX	;NEW HIGH FOR SECTOR?
	BLOS	499$		;  NO
	MOV	R0,CLCMAX	;YES, SET IT
499$:	RETURN


TSTERR:	MOV	ERRBTS,R0	;ANY ERRORS?
	BEQ	505$		;  NO
	BIC	#ERR.,R0	;YES, ".PRINT"?
	BEQ	4$		;  YES
 
 
.IF	NDF,RT11		;If not RT-11
;;	MOV	#EX$WAR,R1	;ASSUME WARNING STATUS IS PROPER
;;	BIT	#^C<ERR.I!ERR.Q>,R0  ;IS ASSUMPTION CORRECT?
;;	BEQ	100$		;IF EQ YES
;;	MOV	#EX$ERR,R1	;SET ERROR STATUS
;;100$:	CMP	R1,$EXSTS	;IS THIS STATUS WORSE THAN PREVIOUS?
;;	BLE	110$		;IF LE NO
;;	MOV	R1,$EXSTS	;STORE THIS STATUS
;;110$:
	MOV	#EX$ERR,$EXSTS	;Set error status
.ENDC;	NDF,RT11		;If not RT-11 
 
	INC	ERRCNT		;BUMP ERROR COUNT
4$:	MOV	#ERRMNE-1,R1
1$:	TSTB	(R1)+		;MOVE CHAR PNTR AND CLEAR CARRY
	ROR	ERRBTS		;ROTATE ERROR BITS
	BCC	2$
	MOVB	(R1),(R2)+

;.IF	DF,RT11			;If RT-11

	MOVB	(R1),R0		;FETCH CHARACTER
	CALL	TSTR50		;CONVERT TO RAD50
	CALL	MULR50		;LEFT JUSTIFY
	CALL	MULR50
	MOV	R0,SYMBOL	;STORE
	CLR	SYMBOL+2
	MOV	#ERRROL,ROLNDX	;PREPARE TO CREF
	CALL	CRFERR		;Cross reference this, without checking
				;status of .enabl/.dsabl CRF stuff.

;.ENDC;	DF,RT11			;If RT-11

	BR	1$
2$:	BNE	1$
505$:	RETURN

LINWDB:	CALL	SETWDB		;++001 LIST WORD OR BYTE
	BIT	#RELFLG,(R1)	;++017 IS RELOCATION FLAG SET?
	BEQ	10$		;++017 NO, TRY NEXT TEST
	MOVB	#'',(R2)	;++001 INDICATE RELOCATION WITH APOSTROPHE
10$:	BIT	#GLBFLG,(R1)	;++017 IS GLOBAL REFERENCE FLAG SET?
	BEQ	1$		;++001 NO, NEXT TEST
	MOVB	#'G,(R2)	;++001 INDICATE GLOBAL WITH LETTER 'G'.
1$:	BIT	#CPXFLG,(R1)	;++001 COMPLEX RELOCATION?
	BEQ	2$		;++001 NO, LEAVE
	MOVB	#'C,(R2)	;++001 INDICATE COMPLEX WITH LETTER 'C'.
2$:	INC	R2		;++012 INCREMENT LINE BUFFER POINTER
	RETURN			;++012


.SBTTL	Global data for ENDLN and the rest of macro

	.PSECT	IMPLIN,D,GBL,RW
ERRBTS::.BLKW	1		;Error bits set for current source line

.IF	DF,RT11			;If RT-11
	.PSECT	IMPURE,D,RW,GBL
.IFF;	DF,RT11			;If RT-11
	.PSECT	IMPURE,D,RW
.ENDC;	DF,RT11			;If RT-11

.IF	NDF,XEDCDR		;If card support
CDRSAV::.BLKW	1		;Saved character from card format
.ENDC;	NDF,XEDCDR		;If card support

ERRCNT::.BLKW	1		;Assembly error counter

	.BLKW	1		;Byte count for listing channel
LSTBUF::			;Doubly used for listing buffer too.
OCTBUF::.BLKW	20.		;Buffer for 40. chars of line info
	.BLKW	1		;A buffer sepperator

;**** CRITICAL ORDERING ****
SMLBUF::			;Doubly used buffers for RT-11
SRCBUF::			;"			     "
LINBUF::.BLKW	LINLEN/2	;The USED LINBUF
LINEND::.BLKW	1		;and the buffers ending.

; Buffer for saving LINBUF during auto-mcall sequence (MCALL.MAC)

LINSAV::.BLKW	LINLEN/2	;Save area for LINBUF
;**** END CRITICAL ORDERING ****


	.END
