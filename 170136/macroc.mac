;  DEC/CMS REPLACEMENT HISTORY, Element MACROC.MAC
;  *3    18-AUG-1986 11:23:52 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:32:17 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:40:13 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element MACROC.MAC
	.NLIST							;Edit Level 00
	.ENABL	LC,GBL
	.LIST
	.TITLE	MACROC - Macro invocation
	.SBTTL	MACROC - Macro invocation
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	MACROC - Macro invocation
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;--



.IF	NDF,RT11		;If not RT-11

;
; Local data
;

	.PSECT	MIXED,D,RW
ARGBUF:	.BLKB	64.		;DEFAULT ARGUMENT BUFFER
TMPOFF:	.BLKW	1		;TEMPORARY BUFFER OFFSET
TMPTXT:	.BLKW	1		;TEMPORARY TEXT BLOCK POINTER
NULCNT::.BLKW	1		;KEEPS COUNT OF NULL MACRO CALL ARGS

.ENDC;	NDF,RT11		;If not RT-11

	PURE	PUREI,I

OPCERR:	ERROR	O		;++017 DECLARE OPCODE ERROR
	RETURN			;++017

;+
; MACROC
; PROCESS MACRO CALL
; JMP'D TO FROM STMNT PROCESSOR WHEN MACRO NAME FOUND IN OPCODE FIELD
; HANDLES KEYWORD MACRO ARGUMENTS, PUSHES DOWN CURRENT MACRO EXPANSION
; CONTEXT AND SETS NEW CONTEXT.  ON RETURN THE MACRO IS SET UP
; TO EXPAND
;-

MACROC::SETPF0			;MARK LOCATION
	MOV	VALUE,R1	;GET VIRT LOCN OF BASIC TEXT BLK	;JR
	BEQ	OPCERR		;++013 IF NULL, NO DEFN -- ERROR
	MOV	R1,MACTXT	;++021 ELSE, SAVE ITS VIRTUAL LOCN
	CVRL			;++021 GET REAL ADDR OF BLOCK IN R0
	CALL	INCMAC		;INCREMENT REFERENCE
	ZAP	DMALST		;++025 EMPTY DUMMY ARGUMENT ROLL
	MOV	#6,TMPOFF	;++025 SET OFFSET TO START OF TEXT
	CALL	90$		;++025 SET TO READ FROM VIRTUAL MEMORY
	MOV	4(R1),MACGSB	;++025 SET GENERATED SYMBOL BITS
	MOVB	3(R1),ARGMAX	;++025 SET MAXIMUM NUMBER OF ARGUMENTS
	BEQ	50$		;++025 IF EQ NO ARGUMENTS
	MOVB	3(R1),R3	;++025 SET LOOP COUNT
	MOV	#ARGBUF,R5	;++025 SET POINTER TO DEFAULT ARGUMENT BUFFER
10$:	MOV	#SYMBOL,R4	;++025 SET POINTER TO SYMBOL ACCUMULATOR
20$:	CALL	60$		;++025 READ NEXT CHARACTER FROM VIRTUAL MEMORY
	MOVB	R0,(R4)+	;++025 STORE CHARACTER IN SYMBOL ACCUMULATOR
	CMP	R4,#SYMBOL+6	;++025 END OF DUMMY ARGUMENT SYMBOL?
	BLO	20$		;++025 IF LO NO
	MOV	R5,(R4)		;++025 SET ADDRESS OF DEFAULT ARGUMENT
	MOVB	-(R4),R4	;++025 GET LENGTH OF DEFAULT ARGUMENT
30$:	DEC	R4		;++025 ANY MORE BYTES IN DEFAULT ARGUMENT?
	BLT	40$		;++025 IF LT NO
	CALL	60$		;++025 READ NEXT CHARACTER FROM VIRTUAL MEMORY
	MOVB	R0,(R5)+	;++025 STORE CHARACTER IN DEFAULT BUFFER
	BR	30$		;++025
40$:	APPEND	DMALST		;++025 APPEND DUMMY ARGUMENT TO ROLL
	DEC	R3		;++025 ANY MORE ARGUMENTS TO PROCESS?
	BGT	10$		;++025 IF GT YES
50$:	SETCHR			;++025 RESTORE R5
	CLR	NULCNT		;++031 CLEAR NULL ARGUMNET COUNT
	CALL	PROMC		;PROCESS CALL ARGUMENTS
	SUB	NULCNT,ARGCNT	;++031 CAC # OF NON-NULL MACRO CALL ARGUMENTS
	MOV	R1,R3		;++021 COPY VIRTUAL LOCN OF ARG BLOCK
	MOV	#MT.MAC,R5
	CALL	MPUSH		;PUSH NESTING LEVEL
	MOV	MACTXT,R1	;++021 GET VIRT LOCN OF BASIC TXT BLK
	UNLPG			;++021 UNLOCK PAGE (LOCKED BY 'INCMAC')
	MOV	R1,(R2)+	;++021 STORE VIRT LOCN OF BASIC TEXT BLK
	MOV	R3,(R2)+	;++021 AND VIRT LOCN OF ARG BLOCK
	MOV	ARGCNT,(R2)	;FILL IN ARGUMENT COUNT
	MOV	(R2)+,(R2)+	;  AND REPLECATE
	MOV	TMPOFF,(R2)+	;++025 SET OFFSET TO START OF MACRO BODY
	MOV	TMPTXT,(R2)	;++025 SET VIRTUAL BLOCK OF MACRO BODY
	CALL	SETARG		;SETUP FAST ARGUMENT SUBSTITUTION BUFFER ;JR
	SETCHR
	RETURN			;ALL SET, EXIT STMNT ROUTINE

;+
;  READ CHARACTER FROM VIRTUAL MEMORY
;-

60$:	CMP	#BPMB,TMPOFF	;++025 END OF CURRENT TEXT BLOCK?
	BNE	70$		;++025 IF NE NO
	MOV	(R1),R1		;++025 GET VIRTUAL ADDRESS OF NEXT BLOCK
	CALL	80$		;++025 SET TO READ NEXT TEXT BLOCK
70$:	INC	TMPOFF		;++025 INCREMENT OFFSET IN BUFFER
	MOVB	(R2)+,R0	;++025 GET NEXT CHARACTER FROM BUFFER
	RETURN			;++025

80$:	MOV	#2,TMPOFF	;++025 RESET OFFSET TO START OF TEXT
90$:	MOV	R1,TMPTXT	;++025 SET VIRTUAL ADDRESS OF TEXT BLOCK
	CVRL			;++025 CONVERT TO REAL MEMORY ADDRESS
	MOV	R0,R1		;++025 COPY REAL ADDRESS OF TEXT BLOCK
	MOV	R0,R2		;++025 CALCULATE ADDRESS OF TEXT IN BLOCK
	ADD	TMPOFF,R2	;++025
	RETURN			;++025


	.END
