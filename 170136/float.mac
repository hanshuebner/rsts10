;  DEC/CMS REPLACEMENT HISTORY, Element FLOAT.MAC
;  *4    31-MAR-1989 14:10:47 STEVENS "COMMA NOW REQUIRED BETWEEN ARGUMENTS IN THE .FLT2 AND .FLT4 DIRECTIVE"
;  *3    18-AUG-1986 11:20:50 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:21:41 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:36:36 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element FLOAT.MAC
	.NLIST							;Edit Level 00
	.ENABL	LC,GBL
	.LIST
	.TITLE	FLOAT - .FLT2, .FLT4, AND ^F PROCESSING
	.SBTTL	FLOAT - .FLT2, .FLT4, AND ^F PROCESSING
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	FLOAT - .FLT2, .FLT4, AND ^F PROCESSING
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;--


	PURE	PUREI,I

;+
; **-FLT4-FOUR WORD FLOATING POINT
; **-FLT2-TWO WORD FLOATING POINT
;-

.IF	DF,RT11			;If RT-11

FLT4::	INC	R3		;SET FOR 4 WORD
FLT2::	INC	R3		;SET FOR TWO WORD

.ENDC;	DF,RT11			;If RT-11

FLOAT::	ASL	R3		;NOW 2 OR 4
1$:	TSTARG
	BEQ	4$		;IF EQ DONE
	CALL	@FLTPNT-2(R3)	;EVALUTE NUMBER
	BNE	2$		;BRANCH IF NON-NULL
	ERROR	A		;  NULL, FLAG ERROR
2$:	MOV	R3,R2		;GET A WORKING COUNT
	MOV	#FLTBUF,R1	;POINT TO FLOATING POINT BUFFER
3$:	MOV	(R1)+,(R4)	;MOVE IN NEXT NUMBER
	STCODE			;PLACE ON CODE ROLL
	SOB	R2,3$		;LOOP ON WORD COUNT
	INC	EXPFLG		;COMMA REQUIRED
	BR	1$		;CONTINUE
4$:	RETURN			;
FLTG4W:	INC	FLTWDC		;FLOATING POINT NUMBER EVALUATOR
FLTG2W:	INC	FLTWDC
FLTG1W::SAVREG			;SAVE REGISTERS
	MOV	CHRPNT,-(SP)	;STACK CURRENT CHARACTER POINTER
	MOV	#FLTBUF,R3	;CONVENIENT COPY OF POINTERS
	MOV	#FLTSAV,R4	;  TO BUFFER AND SAVE AREA
	MOV	R4,R1
1$:	CLR	-(R1)		;INIT VARIABLES
	CMP	R1,#FLTBEG
	BHI	1$		;LOOP UNTIL DONE
	MOV	#65.,FLTBEX	;INIT BINARY EXPONENT
	CMP	#CH.ADD,R5	;  "+"?
	BEQ	10$		;  YES, BYPASS AND IGNORE
	CMP	#CH.SUB,R5	; "-"?
	BNE	11$		;  NO
	MOV	#100000,FLTSGN	;YES, SET SIGN AND BYPASS CHAR
10$:	GETCHR			;GET THE NEXT CHARACTER
11$:	BITB	#CT.NUM,CTTBL(R5)	;NUMERIC?
	BEQ	20$		;  NO
	BIT	#174000,(R3)	;NUMERIC, ROOM FOR MULTIPLICATION?
	BEQ	12$		;  YES
	INC	FLTEXP		;NO, COMPENSATE FOR THE SNUB
	BR	13$
12$:	CALL	FLTM50		;MULTIPLY BY 5
	CALL	FLTGLS		;CORRECTION, MAKE THAT *10
	SUB	#DIG.0,R5	;MAKE ABSOLUTE
	MOV	R4,R2		;POINT TO END OF BUFFER
	ADD	R5,-(R2)	;ADD IN
	ADC	-(R2)		;RIPPLE CARRY
	ADC	-(R2)
	ADC	-(R2)
13$:	ADD	FLTDOT,FLTEXP	;DECREMENT IF PROCESSING FRACTION
	CLR	(SP)		;CLEAR INITIAL CHAR POINTER (WE'RE GOOD)
	BR	10$		;TRY FOR MORE
20$:	CMP	#CH.DOT,R5	;DECIMAL POINT?
	BNE	21$		;  NO
	COM	FLTDOT		;YES, MARK IT
	BMI	10$		;LOOP IF FIRST TIME AROUND
21$:	CMP	#LET.E,R5	;EXPONENT?
	BNE	FLTG3		;  NO
	GETNB			;YES, BYPASS "E" AND BLANKS
	MOV	CRADIX,-(SP)	;STACK CURRENT RADIX
	MOV	#10.,CRADIX	;SET TO DECIMAL
	ABSTRM			;ABSOLUTE TERM
	MOV	(SP)+,CRADIX	;RESTORE RADIX
	ADD	R0,FLTEXP	;UPDATE EXPONENT
FLTG3:	MOV	R3,R1
	MOV	(R1)+,R0	;TEST FOR ZERO
	BIS	(R1)+,R0
	BIS	(R1)+,R0
	BIS	(R1)+,R0
	BEQ	FLTGEX		;EXIT IF SO
31$:	TST	FLTEXP		;TIME TO SCALE
	BEQ	FLTG5		;FINI IF ZERO
	BLT	41$		;DIVIDE IF .LT. ZERO
	CMP	(R3),#031426	;MULTIPLY, CAN WE *5?
	BHI	32$		;  NO
	CALL	FLTM50		;YES, MULTIPLY BY 5
	INC	FLTBEX		;  AND BY TWO
	BR	33$
32$:	CALL	FLTM54		;MULTIPLY BY 5/4
	ADD	#3.,FLTBEX	;  AND BY 8
33$:	DEC	FLTEXP		;  OVER 10
	BR	31$
40$:	DEC	FLTBEX		;DIVISION, LEFT JUSTIFY BITS
	CALL	FLTGLS
41$:	TST	(R3)		;SIGN BIT SET?
	BPL	40$		;  NO, LOOP
	MOV	#16.*2,-(SP)	;16 OUTER, 2 INNER
	CALL	FLTGRS		;SHIFT RIGHT
	CALL	FLTGSV		;PLACE IN SAVE BUFFER
42$:	BIT	#1,(SP)		;ODD LAP?
	BNE	43$		;  YES
	CALL	FLTGRS		;MOVE A COUPLE OF BITS RIGHT
	CALL	FLTGRS
43$:	CALL	FLTGRS		;ONCE MORE TO THE RIGHT
	CALL	FLTGAD		;ADD IN SAVE BUFFER
	DEC	(SP)		;END OF LOOP?
	BGT	42$		;  NO
	TST	(SP)+		;YES, PRUNE STACK
	SUB	#3.,FLTBEX
	INC	FLTEXP
	BR	31$
FLTG5:	DEC	FLTBEX		;LEFT JUSTIFT
	CALL	FLTGLS
	BCC	FLTG5		;LOSE ONE BIT
	ADD	#200,FLTBEX	;SET EXCESS 128.
	BLE	2$		;BRANCH IF UNDER-FLOW
	TSTB	FLTBEX+1	;HIGH ORDER ZERO?
	BEQ	3$		;  YES
2$:	ERROR	N		;NO, ERROR
3$:	MOV	R4,R2		;SET TO SHIFT EIGHT BITS
	MOV	R2,R1
	TST	-(R1)		;R1 IS ONE LOWER THAN R2
4$:	CMP	-(R1),-(R2)	;DOWN ONE WORD
	MOVB	(R1),(R2)	;MOVE UP A BYTE
	SWAB	(R2)		;BEWARE OF THE INSIDE-OUT PC!!
	CMP	R2,R3		;END?
	BNE	4$
	CALL	FLTGRS		;SHIFT ONE PLACE RIGHT
	ROR	(R4)		;SET HIGH CARRY

.IF	NDF,XEDFPT

	BIT	#ED.FPT,EDMASK	;TRUNCATION?
	BEQ	7$		;  YES

.ENDC;	NDF,XEDFPT

	MOV	FLTWDC,R2	;GET SIZE COUNT
	ASL	R2		;DOUBLE
	BNE	8$		;PRESET TYPE
	INC	R2		;SINGLE WORD
8$:	ASL	R2		;CONVERT TO BYTES
	BIS	#077777,FLTBUF(R2)
	SEC
5$:	ADC	FLTBUF(R2)
	DEC	R2
	DEC	R2
	BGE	5$
	TST	(R3)		;TEST SIGN POSITION
	BPL	7$		;OK IF POSITIVE
6$:	ERROR	T
7$:	ADD	FLTSGN,(R3)	;SET SIGN, IF ANY
FLTGEX:	CLR	MODE		;MAKE ABSOLUTE
	CLR	FLTWDC		;CLEAR COUNT
	MOV	(R3),VALUE	;PLACE FIRST GUY IN VALUE
	MOV	(SP)+,R0	;ORIGIONAL CHAR POINTER
	BEQ	1$		;ZERO (GOOD) IF ANY DIGITS PROCESSED
	MOV	R0,CHRPNT	;NONE, RESET TO WHERE WE CAME IN
	CLR	R3		;FLAG AS FALSE
1$:	MOV	R3,R0		;SET FLAG IN R0
	JMP	SETNB		;RETURN WITH NON-BLANK
FLTM54:	CMP	(R3),#146314	;ROOM?
	BLO	1$
	CALL	FLTGRS
	INC	FLTBEX
1$:	CALL	FLTGSV		;SAVE IN BACKUP
	CALL	FLTGRS		;SCALE RIGHT
	CALL	FLTGRS
	BR	FLTGAD

FLTM50:	CALL	FLTGSV		;*5
	CALL	FLTGLS
	CALL	FLTGLS
FLTGAD:	MOV	R4,R2		;POINT TO SAVE AREA
1$:	ADD	6(R2),-(R2)	;ADD IN WORD
	MOV	R2,R1		;SET FOR CARRIES
2$:	ADC	-(R1)		;ADD IN
	BCS	2$		;CONTINUE RIPPLE, IF NECESSARY
	CMP	R2,R3		;THROUGH?
	BNE	1$		;  NO
	RETURN

FLTGRS:	CLC			;RIGHT SHIFT
	MOV	R3,R1		;RIGHT ROTATE
	ROR	(R1)+
	ROR	(R1)+
	ROR	(R1)+
	ROR	(R1)+
	RETURN

FLTGLS:	MOV	R4,R2		;LEFT SHIFT
	ASL	-(R2)
	ROL	-(R2)
	ROL	-(R2)
	ROL	-(R2)
	RETURN

FLTGSV:	MOV	R3,R1		;MOVE FLTBUF TO FLTSAV
	MOV	R4,R2
	JMP	XMIT4


.IF	NDF,RT11		;If not RT-11

	.PSECT	IMPURE,D,RW	;++017
FLTBEG:				;START OF FLOATING POINT IMPURE
FLTSGN:	.BLKW			;SIGN BIT
FLTDOT:	.BLKW			;DECIMAL POINT FLAG
FLTEXP:	.BLKW			;DECIMAL EXPONENT
FLTBEX:	.BLKW	1		;BINARY EXPONENT (MUST PRECEED FLTBUF)
FLTBUF:	.BLKW	4		;MAIN AC
FLTSAV:	.BLKW	4

.ENDC;	NDF,RT11		;If not RT-11

	PURE	DPURE,D

FLTPNT:	.WORD	FLTG2W		;
	.WORD	FLTG4W		;


	.END
