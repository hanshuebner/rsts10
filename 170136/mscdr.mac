;  DEC/CMS REPLACEMENT HISTORY, Element MSCDR.MAC
;  *3    18-AUG-1986 11:24:59 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:36:42 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:41:52 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element MSCDR.MAC
	.NLIST							;Edit Level 01
	.ENABL	LC,GBL
	.LIST
	.TITLE	MSCDR - Misc directives
	.SBTTL	MSCDR - Misc directives
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	MSCDR - Misc directives
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	27-Jul-83	Update for 8-bit support.
;--


;+
; **-GLOBL-GLOBAL REFERENCE OR DEFINITION
; **-END-END OF ASSEMBLY
;-

	.IF DF	RSX11M

	.MCALL	FDBF$R,OFNB$A,CLOSE$

	.ENDC

;+
; GLOBL,WEAK
; This routine enters the symbol name given into the
; weak symbol list. This list is checked when GSD
; records are output, to determine if the weak symbol
; reference/definition bit should be set. Since no
; symbol table entry bits are left, this was the only
; sane way to implement this currently.
;-
	PURE	PUREI,I

.IF	DF,W$$EK		;If WEEK directive

WEAK::	INC	R3		;Make @SP non-zero for .WEAK entry
GLOBL::	MOV	R3,-(SP)	;Flag this action as .GLOBL or .WEAK

.IFF;	DF,W$$EK		;If .WEAK directive

GLOBL::

.IFTF;	DF,W$$EK		;If .WEAK directive

10$:	GSARG			;GET SYMBOLIC ARGUMENT
	BEQ	3$		;  END
	SSRCH			;NO, SEARCH USER SYMBOL TABLE
	BIT	#REGFLG,FLAGS	;REGISTER?
	BNE	2$		;  YES, ERROR
	BIC	#DFGFLG,FLAGS	;CLEAR DEFAULT GLOBAL FLAG BIT
	BIS	#GLBFLG,FLAGS	;NO, FLAG AS GLOBL
	CALL	SINSRT		;UPDATE/INSERT HASH TABLE		;JR
	CRFREF			;Cross ref this reference

.IFF;	DF,W$$EK		;If .WEAK directive

	BR	10$		;Next symbol ...

.IFT;	DF,W$$EK		;If .WEAK directive

	TST	@SP		;.WEAK directive?
	BEQ	10$		;Branch if not, next symbol please
	MOV	$WEAHD,R1	;R1 -> Virtual address (If set up)
	BEQ	20$		;Branch if listhead not setup, get a page
15$:	CVRL			;Convert R1 to address in R0
	BR	30$		;Go insert the symbol, R0 -> Real address

20$:	ALPAG			;Else allocate a page
	MOV	R1,$WEAHD	;Save listhead, R0 -> Real address

30$:	MOV	R1,@SP		;@SP = Virtual address of current page
	MOV	#255.,R3	;R3 -> Count of # possible entrys
31$:	TST	@R0		;In use?
	BEQ	40$		;Branch if not, we have a free entry.
	CMP	(R0)+,SYMVRP	;Is this symbol already here?
	BEQ	10$		;Branch if so, ignore this symbol.	
	SOB	R3,31$		;Loop though all possible entries.
	MOV	@R0,R1		;Is there another page linked to this one?
	BNE	15$		;Branch if so, follow it!
	MOV	@SP,R1		;R1 -> Virtual address of current page
	MOV	R0,-(SP)	;Save real address of link word
	LOCPG			;Lock current page in memory
	ALPAG			;Get another virtual page
	MOV	R1,@(SP)+	;Stuff new link to next
	MOV	R1,R0		;R5 -> Virtual address of new page
	MOV	@SP,R1		;R1 -> Old page to unlock/write
	MOV	R0,@SP		;@SP -> Virtual address of new page
	UNLPG			;Unlock old page
	WMCPG			;Write mark old page
	MOV	@SP,R1		;R1 -> Virtual address of new page
	CVRL			;R0 -> Real address of new page
40$:	MOV	SYMVRP,@R0	;Stuff in virtual address of symbol.
	WMCPG			;Write mark current page
	BR	10$		;

.IFTF;	DF,W$$EK		;If .WEAK directive

2$:	ERROR	R
	BR	10$		;

3$:

.IFT;	DF,W$$EK		;If .WEAK directive

	TST	(SP)+		;Clean the stack of .GLOBL/.WEAK flag

.ENDC;	DF,W$$EK		;If .WEAK directive

	RETURN


END::	MOV	CNDLVL,-(SP)	;++002 TEST TO SEE IF USER IS IN EITHER ...
	BIS	MACLVL,(SP)+	;++002 ... A MACRO EXPANSION OR A CONDITIONAL
	BEQ	10$		;++002 IF NOT, CONTINUE
	JMP	OPCERR		;++002 ELSE, DECLARE AN OPCODE ERROR
10$:	EXPR			;++002 EVALUATE TRANSFER EXPRESSION
	BNE	1$		;  BRANCH IF NON-NULL
	INC	(R4)		;NULL, MAKE IT A ONE
1$:	RELTST			;NO GLOBALS ALLOWED
	INC	ENDFLG
	SETIMM			;FILL OUT BLOCK
	SETPF1			;LIST FIELD 1
	MOV	#SYMBOL,R1
	MOV	#ENDVEC,R2
	JMP	XMIT4		;MOVE TO END VECTOR

;+
; **-SETHDR-SET PAGE HEADER
; **-TITLE-SET PROGRAM TITLE
; **-SBTTL-SUB TITLE
; **-PRINT-MESSAGE
; **-ERROR-ERROR MESSAGE
; **-REM-REMARKS
;-

SETHDR::MOV	#DEFTTL,CHRPNT	;POINT TO DEFAULT HEADING
	SETCHR			;MAKE IT LOOK LIKE THE REAL THING

TITLE::	CALL	GETSYF		;GET TITLE SYMBOL			;JR
	BNE	1$		;  ERROR IF NULL
	ERROR	A
	RETURN

1$:	MOV	R0,PRGTTL	;MOVE INTO STORAGE
	MOV	SYMBOL+2,PRGTTL+2
	CALL	SETSYM		;POINT TO START OF TITLE
	MOV	#TTLBUF,R2	;POINT TO BUFFER
	.IF DF	RT11		;Form feed fix for RT-11 (for now)	;JR+
	MOVB	FFLOC,(R2)+	;Store FF (or LF if first output page)
	.IFF
	MOVB	#FF,(R2)+	;STORE PAGE EJECT
	.ENDC			;					;JR-
	CLR	R3		;CLEAR POSITION CONTER
2$:	MOVB	R5,(R2)		;PLUNK THE NEXT CHAR IN THE BUFFER
	BEQ	5$		;BRANCH IF END
	CMPB	R5,#TAB		;A TAB?
	BNE	3$		;  NO
	BIS	#7,R3		;YES, COMPENSATE
3$:	INC	R3		;UPDATE POSITION COUNTER
	CMP	R3,#TTLLEN	;WITHIN BOUNDS?
	BHIS	4$		;  NO
	TSTB	(R2)+		;YES, MOVE POINTER
4$:	CALL	GETCH8		;Get the next character
	BNE	2$		;LOOP IF NOT END
5$:	MOVB	#TAB,(R2)+	;SET SEPARATOR
	MOV	#HDRTTL,R1
	MOVBYT			;SET VERSION NUMBER, ETC.
	.IF NDF	XTIME
	MOV	#DATTIM,R1
	MOVBYT			;DATE AND TIME
	.ENDC
	MOV	R2,TTLBRK	;REMEMBER BREAK POINT
	RETURN

	PURE	TXTBYT,D	;++017
DEFTTL:	.ASCIZ	/.MAIN./	;DEFAULT TITLE
	PURE	PUREI,I		;++017

SBTTL::	MOV	#STLBUF,R2	;POINT TO SUBTITLE BUFFER
	TST	PASS		;PASS ONE?
	BEQ	2$		;  YES
1$:	MOVB	R5,(R2)+	;MOVE CHARACTER IN
	BEQ	13$		;  BRANCH IF END
	CALL	GETCH8		;Get the next character
	CMP	R2,#STLBUF+STLLEN-1	;TEST FOR END
	BLO	1$
	TSTB	-(R2)		;POLISH OFF LINE
	BR	1$
2$:	BIT	#LC.TOC,LCMASK
	BNE	13$
	TSTB	LSTDEV		;ANY LISTING DEVICE?
	BEQ	13$		;  NO, EXIT
;;;	TST	LCLVL		;++012 CHECK LISTING CONTROL LEVEL
;;;	BLT	13$		;++012 LEAVE IF LEVEL IS 'NOLIST'

	.IF DF	RSX11M		;++017

.IF	NDF,R$RSTS	;If not RSTS/E

	TSTB	IOFTBL+LSTCHN	;IS LISTING FILE CLOSED?
	BNE	100$		;IF NE NO -- NO NEED TO REOPEN
	MOV	FDBTBL+LSTCHN,R0  ;++017 PUT LISTING FILE FDB ADDR IN R0
	FDBF$R	R0,,$LSTVZ	;++017 OVERRIDE DEVICE BUFFER SIZE
	OFNB$A	R0		;++017 RE-OPEN LISTING FILE
100$:				;
.ENDC;	NDF,R$RSTS	;If not RSTS/E

	.ENDC			;++014

	MOV	#TOCTXT,R1
	MOVBYT			;SET TABLE OF CONTENTS
	CALL	SETSYM		;POINT TO ".SBTTL"
3$:	GETR50			;GET RADIX-50 CHAR
	BGT	3$		;STOP AT FIRST TERMINATOR
	CALL	SETNB		;++019 SKIP TO FIRST NON-BLANK CHAR
	MOV	CHRPNT,R2	;SET POINTER
	MOVB	#TAB,-(R2)	;++019 INSERT A TAB FOR READABILITY

	.IF NDF	XLCSEQ

	MOV	LINNUM,R0
	CALL	10$
	MOVB	#CH.SUB,-(R2)

	.ENDC

	MOV	PAGNUM,R0
	CALL	10$
	MOVB	#SPACE,-(R2)
	PUTLP	R2		;OUTPUT

	.IF DF	RSX11M		;++017

.IF	NDF,R$RSTS	;IF NOT RSTS/E

	TSTB	IOFTBL+LSTCHN	;IS LISTING FILE KEPT CLOSED?
	BNE	200$		;IF NE NO
	MOV	FDBTBL+LSTCHN,R0  ;++017 PUT LISTING FILE FDB ADDR IN R0
	MOV	R0,R1		;++017 POINT R1 TO THE ...
	ADD	#F.FNB+N.FID,R1	;++017 ... FILE ID
	MOV	(R1)+,-(SP)	;++014 SAVE ...
	MOV	(R1)+,-(SP)	;++014 ... THE ...
	MOV	(R1)+,-(SP)	;++014 ... FILE ID
	CLOSE$	R0		;++017 CLOSE THE LISTING FILE
	MOV	(SP)+,-(R1)	;++014 RESTORE ...
	MOV	(SP)+,-(R1)	;++014 ... THE ...
	MOV	(SP)+,-(R1)	;++014 ... FILE ID
200$:				;

.ENDC;	NDF,R$RSTS	;IF NOT RSTS/E

	.ENDC			;++017

	RETURN
10$:
	.IF DF	RT11		;Seq number differs under RSX11M and RT-11;JR+
	MOV	#4,R4		;Allow a 4 digit line number if RT-11
	.IFF
	MOV	#5,R4		;Allow a 5 digit line number if RSX11M
	.ENDC			;					;JR-

11$:	MOVB	#SPACE,-(R2)
	MOV	R0,R1
	BEQ	12$
	CLR	R0
	DIV	#^D10,R0
	ADD	#DIG.0,R1
	MOVB	R1,(R2)
12$:	SOB	R4,11$
13$:	RETURN

	PURE	TXTBYT,D	;++017
TOCTXT:	.ASCIZ	/Table of contents/
;;;	.EVEN			;Make even because of LINKER bug	;JR

	PURE	PUREI,I		;++017

	.ENABL	LSB
PRINT::	ERROR	<>		;NULL ERROR (DON'T COUNT)
	BR	1$
ERROR::	ERROR	P		;
1$:	SETPF0			;PRINT LOCATION FIELD
	EXPR			;EVALUATE EXPRESSION
	BEQ	2$		;BRANCH IF NULL
	SETPF1			;NON-NULL, LIST VALUE
2$:	RETURN
	.DSABL	LSB

	.IF NDF	XSUBD		;++018
REM::	MOV	R5,R3		;SET TERMINATING CHARACTER
	BNE	1$		;BRANCH IF NON-NULL
	ERROR	A		;ERROR, NO DELIMITING CHARACTER
	RETURN
1$:	CALL	GETCHR		;GET THE NEXT CHARACTER
2$:	TST	R5		;END OF LINE?
	BNE	3$		;  NO
	CALL	ENDLIN		;YES, POLISH OFF LINE
	INC	GETFLG		;INHIBIT FILE CROSSING
	CALL	GETLIN		;GET NEXT LINE
	DEC	GETFLG		;ENABLE FILE CROSSING
	TST	R0		;TEST GETLIN RETURN STATUS
	BEQ	2$		;LOOP IF NO EOF
	RETURN			;EOF, EXIT
3$:	CMP	R5,R3		;IS THIS THE TERMINATOR?
	BNE	1$		;  NO
	JMP	GETNB		;YES, BYPASS AND EXIT
	.ENDC			;++018 (XSUBD -- SUBSET DIRECTIVES)


.SBTTL	CROSS	- .CROSS directive subroutine
.SBTTL	NOCROSS	- .NOCROSS directive subroutine

;+
; CROSS
;
; This routine marks the symbol(s) given, to flag that
; they may be cross referenced. .CROSS symbol is used
; to undo what .NOCROSS symbol does. In the absence of
; any argument, cross reference is again enabled.
;
; NOCROSS
;
; This routine marks the symbol(s) given, to flag that no
; cross reference will be done for references or of any
; definitions of the symbol(s). In the absence of any
; argument, cross reference is totally disabled.
;-

CROSS::	MOV	R3,-(SP)	;Save flag R3<>0 for .NOCROSS
	CALL	GSARG		;Try for first argument
	BNE	30$		;Branch if a symbol is here.
	TST	@SP		;.NOCROSS?
	BEQ	10$		;Branch if .CROSS
	BIS	#ED.CRF,EDMASK	;Flag .NOCROSS (.DSABL CRF)
	BR	99$		;Return to the caller.

10$:	BIC	#ED.CRF,EDMASK	;Re-enable cross reference.
	BR	99$		;and return to the caller.

20$:	CALL	GSARG		;Get (Another) symbol name
	BEQ	99$		;Branch if no more
30$:	CALL	SETXPR		;Setup expression registers
	CALL	SSRCH		;Find the symbol
	BNE	40$		;Branch if found in symbol table

; If .ENABL GBL is set, and we are inserting a unknown symbol
; into the symbol table, set the default global flags in insure
; that no "U" error occurs.

	BIT	#ED.GBL,EDMASK	;Is .ENABL GBL set?
	BNE	40$		;Branch if not, don't default it global.
	BISB	#DFGFLG!GLBFLG,@R3 ;Else default it global.

40$:	BITB	#REGFLG,@R3	;Defined as a register?
	BNE	50$		;Branch if so, error.
	BICB	#NCRFLG,@R3	;Assume directive is .CROSS
	TST	@SP		;.NOCROSS or .CROSS?
	BEQ	45$		;Branch if .CROSS, all set.
	BISB	#NCRFLG,@R3	;Else mark for .NOCROSS
45$:	CALL	SINSRT		;Update/insert into hash table
	BR	20$		; and try for another argument

50$:	ERROR	R		;Give "R" error.
	BR	20$		; and try for anoter argument

99$:	TST	(SP)+		;Clean .[NO]CROSS flag.
	RETURN			;Return to caller, all done.


	.END
