;  DEC/CMS REPLACEMENT HISTORY, Element REPT.MAC
;  *3    18-AUG-1986 11:26:15 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:41:55 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:43:57 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element REPT.MAC
	.NLIST							;Edit Level 01
	.ENABL	LC,GBL
	.LIST
	.TITLE	REPT  - Repeat directives, end of macro expansion processing
	.SBTTL	REPT  - Repeat directives, end of macro expansion processing
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	REPT  - Repeat directives, end of macro expansion processing
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	27-Jul-83	Update for 8-bit support.
;--


	PURE	PUREI,I

;+
; Directives .IRP arg,<list> and .IRPC arg,<string>
;-

IRP::				;++011 R3=0 IMPLIES ".IRP"
				;++011 R3=1 IMPLIES ".IRPC"
	CALL	GMARG		;++011 GET MACRO AGRUMENT
	BEQ	1$
	CALL	PROMA
	CALL	RMARG
	CALL	GMARG
	BEQ	1$
	MOV	#177777,ARGMAX	;ANY NUMBER OF ARGUMENTS
	CALL	PROMCF		;PROCESS CALL ARGUMENTS
	MOV	R1,R3		;++021 COPY VIRT LOCN OF FIRST ARG BLK
	CALL	RMARG
	CALL	GETBLK		;ALLOCATE A BASIC TEXT BLOCK
	MOV	R0,MACWRT	;++021 SAVE ADDR OF BLK BEING WRITTEN
	MOV	R1,MACWTV	;++021 AND ITS VIRT LOCN
	CLR	(R2)+
	MOV	ARGCNT,-(SP)	;USE NUMBER OF ARGS AS REPEAT COUNT
	MOV	R3,-(SP)	;++021 STORE VIRT LOCN OF FIRST ARG BLK
	MOV	R1,-(SP)	;++021 STORE VIRT LOCN OF BASIC TEXT BLK
	CALL	ENDLIN
	CALL	PROMT		;Put the .IRP body in storage as a macro
	MOV	#MT.IRP,R5	;Pass the .IRP terminating char in R5
	BR	REPTF		;Finish in common code

1$:	ERROR	A
	RETURN

;+
; Directive .REPT <count>
;-

REPT::	ABSEXP			;EVALUTE EXPRESSION
	MOV	R0,-(SP)	;SAVE COUNT
	SETPF1			;MARK THE LISTING
	CALL	GETBLK		;GET A STORAGE BLOCK
	MOV	R0,MACWRT	;++021 STORE REAL ADDR OF BLOCK TO WRITE
	MOV	R1,MACWTV	;++021 AND ITS VIRTUAL LOCN
	CLR	(R2)+		;START IN THIRD WORD
	CLR	-(SP)		;NO ARGUMENTS
	MOV	R1,-(SP)	;++021 SAVE VIRT LOCN OF BLK ON STACK
	CALL	ENDLIN		;POLISH OFF LINE
	ZAP	DMALST		;++021 EMPTY DUMMY ARG LIST--NONE FOR REPT
	CALL	PROMT		;USE MACRO STUFF
	MOV	#MT.RPT,R5	;FUDGE AN "END OF REPEAT"
REPTF:	CALL	WCIMT
	MOV	MACWTV,R1	;++021 GET VIRT LOCN OF CURRENT TEXT BLK
	UNLPG			;++021 AND UNLOCK ITS PAGE
	CALL	MPUSH		;PUSH CURRENT MACRO CONTEXT AND ...
				;SWITCH TO NEW ONE
	MOV	(SP)+,(R2)+	;++021 STORE VIRT LOCN OF BASIC ...
				;++021 TEXT BLOCK (MSBTXT)
	MOV	(SP)+,(R2)+	;++021 STORE VIRT LOCN OF FIRST ...
				;++021 ARGUMENT BLOCK (MSBARG)
	CLR	(R2)+		;CLEAR ITERATION COUNT (MSBCNT)
	TST	ENDFLG		;WAS PREMATURE EOF DETECTED?		;CD055
	BEQ	10$		;IF EQ NO				;CD055
	CLR	(SP)		;IF EOF THEN FORCE REPEAT COUNT TO ZERO	;CD055
10$:				;					;CD055
	MOV	(SP)+,(R2)	;++021 AND REPEAT (OR ARGUMENT) ...
				;++021 COUNT (MSBCNT+2)
	MOV	-6(R2),4(R2)	;++021 STORE VIRT LOCN OF BASIC ...
				;++021 TEXT BLK AS ONE BEING ...
				;++021 WRITTEN (MSBRDV)
	CALL	SETARG		;SET UP FAST MACRO ARGUMENT BUFFER	;JR
	SETCHR			;RESTORE CHARACTER
				;Fall into end of macro expansion to test loop
				; count
;+
; ENDMAC
; Handle end of macro text expansion
; If repeat/argument count exhausted or .MEXIT flag set, pops to previous
; level of macro expansion context. Otherwise resets to start of current text
; and repeats.
;-

ENDMAC::MOV	#MSBCNT,R0	;SET POINTER TO COUNT
	INC	(R0)		;BUMP IT
	CMP	(R0)+,(R0)+	;++021 HAVE WE REPEATED ENOUGH TIMES?
	BGT	MPOP		;  YES
	TST	CNDMEX		;Test if .MEXIT seen in body		;JR
	BNE	MPOP		;Yes, don't bother reexpanding this block ;JR
	MOV	#4,(R0)+	;++021 NO, INIT TEXT BLK READ PTR
	MOV	-10.(R0),(R0)	;++021 SETUP TO READ BASIC TEXT BLOCK
	RETURN

;+
; MPOP
; Pop back to previous macro expansion context.
; Returns the argument list to macro storage freespace.
; Then if this was the last active reference to this macro body, returns
; it to freespace too. Finally, copies the previous context block
; back to working storage and adds the context block to the freelist.
;-

MPOP:	CLR	CNDMEX		;CLEAR MEXIT FLAG
	MOV	#MSBARG+2,R2	;POINT ONE SLOT PAST ARGUMENT
	MOV	-(R2),R1	;++021 GET VIRT LOCN OF FIRST ARG BLK
	BEQ	1$		;BRANCH IF NULL
	CVRL2			;++021 ELSE, GET ITS REAL ADDR IN R0
	CALL	REMMAC		;REMOVE IT
1$:	MOV	-(R2),R1	;++021 VIRT LOCN OF BASIC TEXT BLK IN R1
	BEQ	2$		;BRANCH IF NULL
	CALL	DECMAC		;DECREMENT LEVEL
2$:	MOV	-(R2),R1	;++021 GET VIRT LOCN OF CONTEXT SAVE BLK
	CVRL2			;++021 GET ITS REAL ADDR IN R0
	MOV	R1,-(SP)	;++021 SAVE THE VIRTUAL LOCN
	MOV	R0,R1		;++021 AND COPY ITS REAL ADDR INTO R1
	TST	-(R2)		;POINT TO START
	CALL	XMIT0-MSBLGH	;MOVE SAVED INFO BACK INTO CONTEXT AREA
	MOV	(SP)+,R1	;++021 GET VIRT LOCN OF CONTEXT SAVE BLK
	CLR	(R0)		;CLEAR LINK
	CALL	REMMAC		;RETURN BLOCK FOR DEPOSIT
	DEC	MACLVL		;DECREMENT LEVEL COUNT
				;FALL IN TO SET CURRENT ARG SUBSTITUTION BUF
;+
; SETARG
; INITIALIZE MACRO EXPANSION ARGUMENT BUFFER
; CALL WHEN CHANGING MACRO EXPANSION CONTEXT
; MOVES ARGUMENT STRING OUT OF VIRTUAL MEMORY INTO BUFFER AT "ARGST"
; SETS "ARGVC" TO VECTOR OR BYTE OFFSETS TO START OF EACH ARGUMENT
; SETS "ARGMX" TO MAXIMUM 1 ORIGIN ARGUMENT NUMBER
;-

SETARG::MOV	#ARGVC,R3	;POINT AT ARG BUFFER
	CLR	R4		;CLEAR CURRENT OFFSET
	CLRB	(R3)+		;SET FIRST OFFSET TO ZERO
	MOV	MSBARG,R1	;GET VIRTUAL ADDR OF FIRST ARG TEXT BLK
	BNE	3$		;BRANCH IF HAVE ONE
	CLR	R3		;ELSE SET MAX NUMBER OF ARGS TO ZERO
	BR	5$		;EXIT

1$:	MOVB	R4,(R3)+	;SET NEXT ARG OFFFSET
2$:	CMP	R0,R2		;SEE IF MORE IN CURRENT TEXT BLK
	BNE	4$		;BRANCH IF YES
	MOV	-BPMB(R0),R1	;GET NEXT VIRTUAL BLOCK
3$:	CVRL			;GET REAL ADDR TO R0
	MOV	R0,R2		;COPY REAL ADDR
	ADD	#BPMB,R2	;POINT JUST PAST THIS BLOCK
	TST	(R0)+		;POINT PAST VIRTUAL THREAD WORD
4$:	INC	R4		;PRE INCREMENT BUFFER OFFSET
	MOVB	(R0)+,ARGST-1(R4) ;MOVE NEXT BYTE IN
	BGT	2$		;LOOP IF NORMAL CHARACTER
	BEQ	1$		;SET OFFSET TO NEXT POSSIBLE ARG IF NULL
	CMPB	-1(R0),#MT.EOA	;End of argument list marker?
	BNE	2$		;No, so it was a normal character
	SUB	#ARGVC,R3	;CALC NUMBER OF ARGUMENTS SEEN
5$:	MOV	R3,ARGMX	;STORE IT
	RETURN


	.END
