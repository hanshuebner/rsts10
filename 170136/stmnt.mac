;  DEC/CMS REPLACEMENT HISTORY, Element STMNT.MAC
;  *4    25-JUN-1987 17:52:46 STEVENS "Preserve permanent attribute of permanent equates =: and ==: "
;  *3    18-AUG-1986 11:27:52 WORRALL "Complete HEX listing support for version 5.5 fieldtest"
;  *2    14-APR-1986 23:57:19 SYSTEM "Update 5.4 of MACRO-11"
;  *1    28-MAR-1986 02:46:27 SYSTEM "Load MACRO-11 sources from V5.3"
;  DEC/CMS REPLACEMENT HISTORY, Element STMNT.MAC
	.NLIST							;Edit Level 02
	.ENABL	LC,GBL
	.LIST
	.TITLE	STMNT - Main statement classifier
	.SBTTL	STMNT - Main statement classifier
	.SBTTL
	.SBTTL		.IDENT	/V05.05/
	.SBTTL
	.IDENT	/V05.05/
;****************************************************************************
;*									    *
;*                   COPYRIGHT (c)  1983, 1986                              *
;*          BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.                *
;*                   ALL RIGHTS RESERVED.                                   *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************


;++
;  Facility:	MACRO-11  The PDP-11 macro assembler for RT/RSX/VMS and RSTS/E
;
;    Author:	Too many people to list here
;
;   Created:	From the dust and dirt
;
;  Abstract:	STMNT - Main statement classifier
;
;     Externals	 Description
;     ---------	 -----------
;
;      Edit	Who	Date		Description of modification
;      ----	---	----		---------------------------
;	001	Jrw	23-Jan-85	Correct invalid macro recursion
;					on macro_name-xxx inside macro.
;	002	Jrw	30-Jul-86	Remove 001 to conform with
;					documentation!
;--


	PURE	PUREI,I

;+
; LABEL, LABELF
; Handle label definitions of the form LABEL: (local) and LABEL:: (global)
; Exits by falling back to STMNT. LABELF handles local labels of the form
; nnnn$:
;-
.ENABL	LSB

LABEL::	CMP	SYMBOL,#^R.  	;PERIOD?
	BNE	10$		;++012 NO, SKIP
	ERROR	Q		;++012 YES, ERROR
	BR	150$		;++012 BRANCH TO LEAVE
10$:
	.IF NDF	XEDLSB
	BIT	#ED.LSB,EDMASK	;++017 IS ENABL LSB IN EFFECT?
	BEQ	20$		;++017 YES, DON'T CHANGE BLOCK NUMBER
	CLR	LSFLAG		;++017 CLEAR AUTO-GENERATED SYMBOL BASE
				;++017 ... AND INDICATE NEED NEW BLOCK
20$:
	.ENDC

	SSRCH			;SEARCH THE SYMBOL TABLE
	MOV	#FLAGS,R3	;++022 POINT R3 TO FLAGS WORD
	CALL	CHKNCF		;CREF the definition if not .NOCRF
	BIT	#DFGFLG,(R3)	;++022 IS DEFAULT GLOBAL BIT SET?
	BEQ	30$		;++022 IF EQ NO
	BIC	#DFGFLG!GLBFLG,(R3)  ;++022 CLEAR DEFAULT AND GLOBAL BITS
30$:	GETNB			;++022 BYPASS THE COLON
	CMP	R5,#':		;++022 IS NEXT CHAR ANOTHER COLON?
	BNE	40$		;++022 IF NE NO
	BIS	#GLBFLG,(R3)	;++022 SET GLOBAL BIT
LABELF::			;++006 ALTERNATE ENTRY FOR LOCAL LABELS
				;SYMBOL IS ZERO IF LOCAL LABEL PROCESSED ;JR
	GETNB			;++022 BYPASS THE COLON
40$:				;++022
	SETXPR			;++006 SET EXPRESSION REGISTERS
50$:	BIT	#DEFFLG,(R3)	;ALREADY DEFINED?
	BNE	70$		;  YES
	MOV	CLCFGS,R0	;NO, GET CURRENT LOCATION CHARACTERISTICS
	BIC	#377-<RELFLG>,R0	;CLEAR ALL BUT RELOCATION FLAG
	BIS	#DEFFLG!LBLFLG,R0	;FLAG AS LABEL
60$:	BIS	R0,(R3)		;SET MODE BITS
	MOV	CLCLOC,(R4)	;  AND CURRENT LOCATION
	BR	120$		;++022 BRANCH TO INSERT SYMBOL
70$:	BIT	#LBLFLG,(R3)	;DEFINED, AS LABEL?
	BEQ	90$		;++012 NO, MULTI-DEFINED ERROR
	CMP	CLCLOC,(R4)	;HAS ANYBODY MOVED?
	BNE	80$		;  YES
	CMPB	CLCSEC,(R2)	;SAME SECTOR?
	BEQ	100$		;  YES, OK
80$:	TST	PASS		;++022 IS THIS FIRST PASS?
	BEQ	90$		;++022 IF EQ YES--MULTI-DEFINED SYMBOL
	BIT	#MDFFLG,(R3)	;++022 WAS SYMBOL ALREADY MULTI-DEFINED?
	BNE	110$		;++022 IF NE YES--INHIBIT P ERROR
	ERROR	P		;++022 ELSE, SYMBOL IS JUST OUT OF PHASE
	BR	120$		;++022 BRANCH TO INSERT NEW DEFN
90$:	BIS	#MDFFLG,(R3)	;++022 SET MULTI-DEFINED FLAG
100$:	BIT	#MDFFLG,(R3)	;++012 MULTI-DEFINED LABEL?
	BEQ	120$		;++012 NO, SKIP
110$:				;++022
	ERROR	M		;++012 YES, DECLARE ERROR
120$:
	TST	SYMBOL		;TEST IF LOCAL LABEL			;JR+
	BNE	130$		;BRANCH IF NO, INSERT SYMBOL
	CALL	LINSRT		;CALL SPECIAL INSERT FOR LOCAL LABEL
	BR	140$		;DO COMMON CODE				;JR-
130$:	CALL	SINSRT		;INSERT LABEL DEFINITION IN HASH TABLE	;JR
140$:	SETPF0			;++017 PRINT THE LOCATION FIELD
150$:	SETNB			;BYPASS ANY BLANKS
	MOV	CHRPNT,LBLEND	;MARK END OF LABEL
				;FALL BACK INTO STATEMENT PROCESSOR
	.DSABL	LSB


;+
; STMNT
; Process the next MACRO-11 statement. If a label is found, it is handled
; in LABEL and this routine is reentered. If an assignment is found, it
; is handled by ASGMT. Otherwise PROPC is entered to process the opcode.
;-

STMNT::	MOV	CNDWRD,R0	;IN CONDITIONAL?
	BIS	CNDMEX,R0	;  OR MEXIT?
	BNE	40$		;  YES, BRANCH IF SUPPRESSED
5$:	GETSYM			;TRY TO SCAN A SYMBOL
	BEQ	10$		;BRANCH IF NONE
	CMP	R5,#':		;SEE IF DELIMITED BY :
	BEQ	LABEL		;BRANCH IF YES
	CMP	R5,#'=		;SEE IF DELIMITED BY =
	BEQ	ASGMT		;BRANCH IF YES
	OSRCH			;TRY FOR OPCODE
	BEQ	15$		;BRANCH IF NOT MACRO OR OPCODE
	BIT	#M$FLAG,MODE	;TEST IF MACRO DEFINITION
	BNE	3$		;BRANCH IF YES
	CRFREF			;OUTPUT A CREF REF RECORD FOR THE PST ENTRY
	BR	30$		;PROCESS THE OPCODE

3$:
.IF	NE,0
	CLR	R0		;Setup for BISB
	BISB	@SYMEND,R0	;R0 = Character AFTER symbol found with GETSYM
	TSTB	CTTBL(R0)	;EOL or ';' ?
	BLE	4$		;Branch if so, ok.
	BITB	#<CT.TAB!CT.SP>,CTTBL(R0) ;Space or tab?
	BEQ	15$		;Branch if not, can't be a macro call!
4$:
.ENDC;	NE,0

	MOV	#MACLST,ROLNDX	;KLUDGE UP THE ROLL INDEX FOR CREF
	CRFREF			;OUTPUT A CREF REF RECORD ON THE MACRO CALL
	CALLR	MACROC		;Call macro call processor

; Process local labels

10$:	.IF NDF	XEDLSB
	MOV	#10.,R2		;NOT SYMBOL, PERHAPS LOCAL SYMBOL?
	CVTNUM
	BEQ	20$		;  NO
	CMP	R5,#'$		;NUMBER, TERMINATED BY "$"?
	BNE	20$		;  NO
	GETNB
	CMP	R5,#':
	BNE	20$
	LSRCH			;SEARCH FOR LOCAL SYMBOL
	BR	LABELF		;EXIT THRU LABEL PROCESSOR
	.ENDC

; Found a symbol which is not a macro or opcode.  Check if it is in the
; symbol table.  If not, try an auto-MCALL on it.

15$:	TST	PASS		;Are we in pass 2?
	BNE	20$		;Yes, wasn't found in pass 1, don't try again
	BIT	#ED.MCL,EDMASK	;Auto-MCALL disabled?
	BNE	20$		;Yes, just try the .WORD
	SSRCH			;See if in the symbol table
	BNE	20$		;Yes, handle as .WORD
	SETSYM			;Reset char pointer and flags
	CALL	AUTMCL		;Do auto-MCALL
	SETCHR			;Restore current character
	TST	R0		;Did it work?
	BEQ	5$		;Branch if so, rescan the line in order
				; to invoke the macro.

; Handle remaining cases as ".WORD ...."

20$:	SETSYM			;RESET CHAR POINTER AND FLAGS
	TSTB	CTTBL(R5)
	BLE	70$		;NULL IF END OF LINE
	MOV	#WRDSYM,R1	;NEITHER, FUDGE ".WORD" DIRECTIVE
	MOV	#SYMBOL,R2
	CALL	XMIT4		;MOVE PST ENTRY TO "SYMBOL"
30$:	JMP	PROPC		;NOW PROCESS THE OPCODE

;
; HANDLE UNSATISFIED CONDITIONALS
;

40$:	CALL	SETDIR		;++008 UNSAT CNDTL, TEST FOR DIRECTIVE
	BEQ	50$		;++008 NOT POSSIBLE, BRANCH TO LEAVE
	OSRCH			;++008 POSSIBLE ONE FOUND, LOOK IN PST
	BIT	#DFLCND,MODE	;++008 IS IT A CONDITIONAL?
	BNE	30$		;  YES, PROCESS IT
50$:	BIS	#LC.CND,LCFLAG	;MARK AS UNSAT CONDITIONAL

; Now eat characters up until either the end of line
; or the comment field. This insures that .NLIST COM
; will work correctly inside of unsatisfied conditionals.

60$:	GETNB			;Get next non-space/tab
	TSTB	CTTBL(R5)	;Are we at a comment or EOL ?
	BGT	60$		;Loop for next character if not
				;Else done, have EOL.
;;;60$:	CLR	R5
70$:	RETURN			;IGNORE LINE

	PURE	DPURE,D		;PUT IN D-SPACE FOR I/D TESTS		;JR
WRDSYM:	.RAD50	/.WORD /	;DUMMY SYMBOL TABLE ENTRY
	.BYTE	DFLGEV,0
	.WORD	WORD
	PURE	PUREI,I		;RETURN TO CODE PSECT			;JR


;+
; ASGMT, ASGMTF
; HANDLE SYMBOL ASSIGNMENTS
; ENTER WITH THE RAD50 SYMBOL STORED IN 'SYMBOL'
; PROCESSES '=', '==', '=:' AND '==:' FORMS OF ASSIGNMENT
; ASGMTF IS AN ALTERNATE ENTRY FOR DIRECTIVES SUCH AS .NARG
;-

ASGMT::	GETNB			;BYPASS "="
	CLR	-(SP)		;ASSUME NO GLOBAL DEFINITION
	CMP	R5,#'=		;SECOND EQUAL SIGN?
	BNE	10$		;IF NE NO
	MOV	#GLBFLG,(SP)	;SET GLOBAL DEFINITION BIT
	GETNB			;BYPASS SECOND EQUAL SIGN
10$:	CMP	R5,#':		;TEST =: OR ==: CONSTRUCTION		;JR+
	BNE	20$		;NOPE
	GETNB			;SCAN TO NONBLANK IF YES
	BIS	#LBLFLG,(SP)	;FAKE A LABEL DEFINE			;JR-
20$:	MOV	#SYMBOL+4,R1	;SET ADDRESS OF MODE,SECTOR
	MOV	-(R1),-(SP)	;STACK SYMBOL
	MOV	-(R1),-(SP)
	RELEXP			;GET NON-EXTERNAL EXPRESSION
	MOV	(SP)+,(R1)+	;RESTORE SYMBOL
	MOV	(SP)+,(R1)+
	BR	ASGMT1		;BRANCH AROUND SECONDARY ENTRY

.ENABL LSB
ASGMTF::CLR	-(SP)		;CLEAR GLOBAL DEFINITION FLAG
ASGMT1:	SETPF1			;SET LISTING FIELD
	SETXPR			;SET EXPRESSION REGISTERS
	BIT	#ERR.U!ERR.A,ERRBTS ;++014 ANY ERRORS DETECTED?
	BNE	10$		;++014 BRANCH IF SOME WERE FOUND
	BIS	#DEFFLG,(R3)	;++014 ELSE, SET DEFINED FLAG
10$:	BIS	(R3),(SP)	;++014 MERGE FLAGS AND SAVE VALUE
	MOV	(R4),-(SP)
	SSRCH			;SEARCH HASH SYMBOL TABLE		;JR
	CMP	(SP),(R4)	;TEST IF EQUAL TO PREV VALUE		;JR+
	BNE	20$		;BRANCH IF NO
	TST	(SP)+		;JUNK THE VALUE
	BIT	#MDFFLG,(R3)	;ANY PREVIOUS ERROR?
	BNE	30$		;YES, REPORT
	BIT	#LBLFLG,(R3)	;PREVIOUS =: OR ==: ASSIGNMENT?		[+GTS]
	BEQ	40$		;NO					[+GTS]
	BIS	#LBLFLG,(SP)	;PRESERVE PERMANENT ASSIGNMENT STATUS	[+GTS]
	BR	40$		;IGNORE LABEL TEST FOR =: AND ==:	;JR-
20$:	MOV	(SP)+,(R4)	;RESTORE VALUE
	BIT	#LBLFLG!MDFFLG,(R3) ;++014 MULTI-DEFINED OR LABEL?
	BEQ	40$		;++014 BRANCH IF NOT
30$:	ERROR	M		;++014 YES, DECLARE "M" ERROR
	BIS	#MDFFLG,(SP)	;++014 SET MULTI-DEFINED FLAG
40$:	BIT	#GLBFLG,(R3)	;++014 IS THIS A GLOBAL?
	BEQ	50$		;++014 SKIP IF NOT
	BIT	#DEFFLG,(R3)	;++014 WAS IT DEFINED IN PASS 1?
	BNE	50$		;++014 SKIP IF IT WAS
	CALL	80$		;++014 ELSE, CALL TO SET "A" ERROR
50$:	BIT	#DFGFLG,(R3)	;DEFAULTED GLOBAL FROM REF?
	BEQ	60$		;IF EQ NO
	BIC	#DFGFLG!GLBFLG,(R3) ;CLEAR DEFAULT FLAGS
60$:	BIC	#^C<NCRFLG!GLBFLG>,@R3 ;Clear out junk flags
	BIS	(SP)+,@R3	;Merge new flags
	CMP	(R1),#^R.  	;MESSING WITH THE PC?
	BEQ	70$		;  YES
	CALL	SINSRT		;INSERT NEW VALUE IN THE HASH TABLE	;JR
CHKNCF:	BIT	#NCRFLG,@R3	;CREF disabled for this symbol?
	BNE	65$		;Branch if so, don't ref it.
	CALL	CRFDEF		;Else cref the definition
65$:	RETURN			;Finished, exit stmnt routine

70$:	BITB	#RELFLG,CLCFGS	;Are we in a relocatable PSECT?
	BNE	75$		;Branch if so, check sector value.
	BITB	#GLBFLG!RELFLG,@R3 ;Is this expression ABS?
	BR	76$		;Go find out - Merge

75$:	CMPB	@R2,CLCSEC	;This expression have the same SECTOR?
76$:	BNE	80$		;Branch if not, thats a no no!
	MOV	@R4,CLCLOC	;Else set new location counter
	RETURN			;Return to the caller.

80$:	ERROR	A		;Set general  "A" error
	RETURN
.DSABL LSB


	.END
