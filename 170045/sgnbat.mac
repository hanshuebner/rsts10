	.INCLUDE /CMN:COMMON/
	.INCLUDE /SGN:SGNCOM/
TITLE	SGNBAT,<BATCH FILE GENERATION>,0A,10-MAY-91,JDM/GW/ABC/MJG/AWL/PRL/KCG/KPH/JJT

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR MODULE SGNBAT

;+
; EDIT	 BY	   DATE			REASON
;
;  01  RVR/DRP	17-Dec-80	Added DMV11/DMP11 support.
;
;  02    DRP	04-Feb-81	Added DECnet/E V2.0 support.
;
;  03    AWL    03-Aug-81       CRA phase follows RSTS
;                               All /U:1000 to be /U:100 except for RSTS
;                               ODT phase deleted
;                               Remove references to PATCH.SAV
;                               Remove references to DPHASE
;                               Fix distribution kit part nos.
;
;   04   AWL    22-Sep-81       Remove IN: from DECNET in linking
;                               Remove warning about XVR
;
;   05   AWL    06-Oct-81       Remove /E: from RSTS link
;
;   06   RVR    13-Oct-81	Changed DMP to link into SES phase instead
;                               of XVR phase due to extreme largeness of it.
;
;   07   AWL    27-Oct-81       Add FIP pool support
;               04-Nov-81       Correct <CR><LF><LF> bug
;  
;   08   AWL    06-Nov-81       Add <FF> after copyright
;                               Change prot code for UTILTY.SAV to <122>
;                               Write SAVRES.SAV and ONLCLN.SAV to output dev
;                               Move ERR.STB to be immediately after COMMON.MAC

;   09	 PRL	01-Feb-82	Fix media part nos. for all distribution kits
;   10   PRL	02-Feb-82	Add MCP phase for RA80/UDA50 support
;   11   PRL	23-FEB-82	Change RJ2780 phase rounding from 100 to 1000
;   12	 PRL	23-Mar-82	Remove "small link" code
;   13   PRL	28-Apr-82	Remove any commented out code from 7.1
;   
;   --   KCG	21-Aug-82	Creation of 8.0 from 7.2
;   14   KCG	21-Aug-82	Fix media part nos. for all distribution kits
;   15   KCG    05-Oct-82	Fix protection codes for savres and onlcln
;   16   KCG	28-Oct-82	Remove ttsyst from ter phase.
;
;   --   KCG	29-Sep-83	Creation of 9.0 from 8.0
;   17   KCG	29-Sep-83	Added new link phase for BBR.
;  018	 KPH	20-Jan-84	Added EM2 phase, remove LIB and EMU options,
;				change input STB for CRA phase to TER.OBJ
;
;  --    JJT	07-May-84	Changes for V9.0
;  019	 KPH	26-Sep-84	Added magtape phase
;  --    JJT	23-May-85	Changes for V9.1
;  020	 JJT	23-May-85	Added TMSCP
;  021	 JJT	08-Jul-85	Include symbol table with MCP phase
;  022	 JJT	22-Oct-85	Change Link command line for V9.2 RSTS phase
;				and MVR phase
;  023	 JJT	11-Nov-85	Allow Maps to be created
;  024	 JJT	11-Nov-85	Fix error in SYSGEN.COM
;  025   JJT	05-Dec-85	Add a /Baselevel switch
;
;			[RSTS V9.3]
;  026	KPH/JJT	27-Dec-85	Changes for DECnet/E V4.0
;  027   KPH    11-Mar-86	Move SY, II, and XK drivers out of root
;  028	 JJT	17-Mar-86	Don't prompt for RJ2780 distro if baseleveling
;  029	 JJT	17-Mar-86	Fix symbol table full when linking OVR
;  030	KPH/JJT	12-May-86	Create smaller .SIL's
;  031	 JJT	14-May-86	Fix symbol table full (again) when linking OVR
;  032   VAM	31-Jul-86	Make inclusion of BBRROT, DUDSK and MUDVR
;				conditional (using 'Library search').
;
;			[RSTS V9.4]
;  033	 DRW	05-Feb-87	Add new phase GRD
;  034	 DRW	10-Feb-87	Remove Delete of GRD.MAP
;  035   VAM	29-Apr-87	Include BBR phase in SILUS for TMSCP-only gens
;
;			[RSTS V9.6]
;  036  KPH/JJT 03-Nov-87	Changes for new terminal driver and LAT
;  037  JJT	13-Nov-87	Minor fixes to edit 036
;  038	DSD	05-Feb-88	Added NOD phase
;
;			[RSTS V9.7]
;  039  JJT	08-Dec-88	Add OV2 phase
;  040	JJT	05-Jan-89	Remove RPSEEK
;  041	JJT	08-Jan-89	Add speedometer gauge
;  042	JJT	20-Jan-89	Add KBX (APT) phase
;  043	JJT	20-Jan-89	Add XTR (LINK) phase
;
;			[RSTS V10.0]
;  044  JJT	13-Mar-90	Delete RT11 overlay handler from $SYSLIB.OBJ
;
;-

	DEFORG	Q10COD

.ENABL	LC

MESNUM	=	0
MSGSEG	=	10
TAGNUM	=	0
OUTNUM	=	0

	TMPORG	OUTDAT
OUTDAT:					;START OF OUTPUT LIST
	UNORG

	TMPORG	CLRTBL			;Start of clearing table
CLRTBL:
	UNORG

.SBTTL	MACROs for phase names

.MACRO	PHASE	NAME,ST1,ST2
	.ASCII	%'ST1''NAME''ST2'%<CR><LF>
.ENDM	PHASE

.MACRO	ASCPHZ	STR1,STR2
	PHASE	RSTS,<STR1>,<STR2>
	PHASE	RJ2780,<STR1>,<STR2>
	PHASE	XVR,<STR1>,<STR2>
	PHASE	DMP,<STR1>,<STR2>
	PHASE	KVR,<STR1>,<STR2>
	PHASE	MVR,<STR1>,<STR2>
	PHASE	MCP,<STR1>,<STR2>
	PHASE	BBR,<STR1>,<STR2>                     
	PHASE	EMT,<STR1>,<STR2>
	PHASE	EM2,<STR1>,<STR2>
	PHASE	RSX,<STR1>,<STR2>
	PHASE	GEN,<STR1>,<STR2>
	PHASE	GRD,<STR1>,<STR2>
	PHASE	OPN,<STR1>,<STR2>
	PHASE	KBD,<STR1>,<STR2>
	PHASE	KBX,<STR1>,<STR2>
	PHASE	KIN,<STR1>,<STR2>
	PHASE	PKPORT,<STR1>,<STR2>
	PHASE	DLPORT,<STR1>,<STR2>
	PHASE	DSK,<STR1>,<STR2>
	PHASE	XTR,<STR1>,<STR2>
	PHASE	FIP,<STR1>,<STR2>
	PHASE	NSP,<STR1>,<STR2>
	PHASE	EVL,<STR1>,<STR2>
	PHASE	RDM,<STR1>,<STR2>
	PHASE	TRN,<STR1>,<STR2>
	PHASE	SES,<STR1>,<STR2>
	PHASE	NOD,<STR1>,<STR2>
	PHASE	UNA,<STR1>,<STR2>
	PHASE	QNA,<STR1>,<STR2>
	PHASE	DHPORT,<STR1>,<STR2>
	PHASE	DZPORT,<STR1>,<STR2>
	PHASE	VHPORT,<STR1>,<STR2>
	PHASE	TERCLS,<STR1>,<STR2>
	PHASE	FMS,<STR1>,<STR2>
	PHASE	LAT,<STR1>,<STR2>
	PHASE	CRA,<STR1>,<STR2>
	PHASE	OVR,<STR1>,<STR2>
	PHASE	OV2,<STR1>,<STR2>
.ENDM	ASCPHZ

.SBTTL	MACROS FOR BATCH GENERATION

.MACRO	OPTLIN	TEST,TEXT,?T		;OPTIONALLY ADD A LINE TO THE BATCH FILE
.NLIST
	 TST	TEST
	 BEQ	T
	 BATCH
	 .MESS
	 .ASCII	%TEXT%<CR><LF>
	 MESS.
T:
GLOBAL	<TEST>
.LIST         
.ENDM	OPTLIN

.MACRO	OPTDST	TEST,TEXT,?T		;OPTLIN WITH DISTRIBUTION MEDIA
.NLIST
	TST	TEST
	BEQ	T
	BATCH
	.MESS
	.ASCII	%IN:%<PPN>%TEXT%<CR><LF>
	MESS.
T:
GLOBAL	<TEST>
.LIST
.ENDM	OPTDST

.MACRO	OUTID				;SET UP ID AND LIST THEM FOR OUTPUT
.IRP	N,<\OUTNUM>
OUT'N:	 .ASCII	%------%
.NLIST
	TMPORG	OUTDAT
	 .WORD	OUT'N
	TMPORG	Q10MES
.ENDM
OUTNUM	=	OUTNUM+1
.LIST
.NLIST	BEX
.ENDM	OUTID

.MACRO	LABDEF	TYP,MED,LBL
.MACRO	$'TYP'MED
	.ASCII	%LBL%
.ENDM	$'TYP'MED
.ENDM	LABDEF

.MACRO	LABEL	TYP,MED
	$'TYP'MED
.ENDM	LABEL
 
.MACRO	BATLBL	TYP,MED
	BATCH
	.MESS
	LABEL	TYP,MED
	MESS.
.ENDM	BATLBL

.MACRO	PIDDEF	TYP,ID
.MACRO	P$'TYP
	.ASCII	%ID%
.ENDM	P$'TYP
.ENDM	PIDDEF

.MACRO	PACKID	TYP
	P$'TYP
.ENDM	PACKID

.MACRO	CLEAR	TYPE
.SAVE
.IF	IDN	<TYPE>,<START>
$$$$$0	=	.
	.PSECT	CLRTBL	
	.WORD	$$$$$0
.IFF	;IDN	<TYPE>,<START>
.IF	IDN	<TYPE>,<END>
$$$$$1	=	.
	.PSECT	CLRTBL	
	.WORD	$$$$$1-$$$$$0
.IFF	;IDN	<TYPE>,<END>
.ERROR	;TYPE doesn't mean anything for CLEAR
.ENDC
.ENDC
.RESTORE
.ENDM	CLEAR

.SBTTL	DEFINE MEDIA LABELS

;	The following symbols define all distribution kit media part
;	numbers (LABDEF's) and disk pack ID's (PIDDEF's). They MUST
;	be reviewed and updated for each release of RSTS.
;
;	The following media symbols are used:
;
;		MS == 1600 BPI magtape
;		M9 == 800 BPI 9-track magtape
;		M7 == 800 BPI 7-track magtape (not supported)
;		DK == RK05 disk
;		DL == RL01 disk
;		D2 == RL02 disk
;		DM == RK06 disk
;		D7 == RK07 disk
;		DT == TU56 DECtape (not supported)
;
;	The following kit symbols (and tokens) are defined:
;
;		MON == SYSGEN
;		RJE == 2780

;	SYSGEN PART NOS.

LABDEF	MON,MS,BB-H751M-BC
LABDEF	MON,M9,AP-2773M-BC
LABDEF	MON,M7,??-?????-??
LABDEF	MON,DK,AN-2771M-BC
LABDEF	MON,DL,AX-D527M-BC
LABDEF	MON,D2,BC-J026G-BC
LABDEF	MON,DM,AM-2774M-BC
LABDEF	MON,D7,AY-D526M-BC
LABDEF	MON,DT,??-?????-??

;	2780 PART NOS.

LABDEF	RJE,MS,BB-K173A-BC
LABDEF	RJE,M9,AP-2636D-BC
LABDEF	RJE,M7,??-?????-??
LABDEF	RJE,DK,AN-2633D-BC
LABDEF	RJE,DL,AX-H339D-BC
LABDEF	RJE,D2,BC-K172A-BC
LABDEF	RJE,DM,AM-C729D-BC
LABDEF	RJE,D7,AY-H340D-BC
LABDEF	RJE,DT,??-?????-??

;	DISK PACK ID'S

PIDDEF	MON,SYSGNM
PIDDEF	PAT,PATCHA
PIDDEF	RJE,ORCOAD

.SBTTL	START THE BATCH FILE

SGNBAT::	NOP		;REPLACE WITH 000003 TO ENABLE ODT
	MOV	#1,DELFIL	;ALWAYS DELETE FILES WHEN DONE
	CLRB	XRB+XRCI	; CLEAR THE CHANNEL NUMBER		;041
	EMT	377		; PREPARE TO DO A MONITOR DIRECTIVE	;041
	.POSTN			; FIND OUT THE TERMINAL WIDTH		;041
	MOV	XRB,R3		; SAVE IT				;041
	DEC	R3		;  CORRECTED FROM MONITOR'S +1		;041
	CLR	R2		;SET UP FOR THE DIVIDE			;041
	DIV	#100.,R2	;GET THE 100'S DIGIT			;041
	BISB	#'0,R2		;CONVERT IT TO ASCII			;041
	MOVB	R2,TRMWTH	;MOVE IT IN				;041
	MOV	R3,R2		;SET UP TO CONVERT THE REST TO DECIMAL	;041
	CALL	CHGDEC		;CONVERT IT				;041
	MOVB	R2,TRMWTH+1	;MOVE IN THE 10'S DIGIT			;041
	SWAB	R2		;GET AT THE UNIT DIGIT			;041
	MOVB	R2,TRMWTH+2	;MOVE IT IN				;041
	BATCH			;SET UP A JOB
	.MESS
	.ASCII	%$ASK := INQUIRE/NOPUNCTUATION ANS%<CR><LF>
	.ASCII	%$WRITE := WRITE 0%<CR><LF>
	.ASCII	%$DEASSIGN/ALL%<CR><LF>
	.ASCII	%$ON ERROR THEN GOTO DEFPIP_ERROR !SET ERROR TRAP%<CR><LF>
	.ASCII	%$DEFPIP = 1	!ASSUME SUCCESS DEFINING THE PIP CCL%<CR><LF>
	.ASCII	%$SET NOECHO/NOWARNING%<CR><LF>
	.ASCII	%$DEFINE/COMMAND/SYSTEM PIP SY:[1,2]PIP.SAV/LINE=8208%<CR><LF>
	.ASCII	%$GOTO BATCH_CONT	!SUCCESS, SO CONTINUE%<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$DEFPIP_ERROR:		!ERROR DEFINING THE PIP CCL%<CR><LF>
	.ASCII	%$ DEFPIP = 0		!MAKE THE FLAG FALSE%<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$BATCH_CONT:%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$SET DATA%<CR><LF>
	.ASCII	%$ TERM_WIDTH = %					;041+
TRMWTH:	.BYTE	40,40,40
	.ASCII	<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$RETURN := EXIT%<CR><LF>
	.ASCII	%$ON ERROR THEN GOTO ERROR_TRAP%<CR><LF>
	.ASCII	%$ _IF F$TYPE(ANSI_SCOPE) .EQS. "" THEN ANSI_SCOPE = 0%<CR><LF>
	.ASCII	%$ _IF F$TYPE(TOTAL_RUNS) .EQS. "" THEN TOTAL_RUNS = 45%<CR><LF>
	.ASCII	%$ GAUGE_ROUTINE = "GAUGE_HARD"%<CR><LF>
	.ASCII	%$ _IF .NOT. ANSI_SCOPE THEN _GOTO START%<CR><LF>
	.ASCII	%$ GAUGE_ROUTINE = "GAUGE_SCOPE"%<CR><LF>
	.ASCII	%$ _IF TERM_WIDTH .EQ. 80 THEN GAUGE_STR = -%<CR><LF>
	.ASCII	%"      10      20      30      40      50      60      70      80      90     100"%<CR><LF>
	.ASCII	%$ _IF TERM_WIDTH .GT. 80 THEN GAUGE_STR = -%<CR><LF>
	.ASCII	%"           10           20           30           40            50-%<CR><LF>
	.ASCII	%            60           70           80           90          100"%<CR><LF>
	.ASCII	%$ MOVE1 = F$CHR(27)+"7"+F$CHR(27)+"[21H"+REV%<CR><LF>
	.ASCII	%$ _WRITE/NODELIM 0 PRMPT,END_PRMPT,MOVE1,CLR_ATT,F$CHR(13),GAUGE_STR%<CR><LF>
	.ASCII	%$ _WRITE/NODELIM 0 F$CHR(27)+"[22;"+F$STRING((TERM_WIDTH-32)/2)+"H"+ -%<CR><LF>
	.ASCII	%	REV+"Percentage of Monitor completion",END_ERR%<CR><LF>
	.ASCII	%$ GOTO START%<CR><LF>
	.ASCII	<CR><LF>
	.ASCII	%$GAUGE_SCOPE:%<CR><LF>
	.ASCII	%$ NUM_OF_RUNS = NUM_OF_RUNS + 1%<CR><LF>
	.ASCII	%$ GAUGE = (NUM_OF_RUNS * TERM_WIDTH) / TOTAL_RUNS%<CR><LF>
	.ASCII	%$ _SET LOGFILE/DISABLE%<CR><LF>
	.ASCII	%$ _WRITE/NODELIM 0 MOVE1,BOLD,F$CHR(13),F$LEFT(GAUGE_STR,GAUGE),END_ERR%<CR><LF>
	.ASCII	%$ _SET LOGFILE/ENABLE%<CR><LF>
	.ASCII	%$ _RETURN%<CR><LF>
	.ASCII	<CR><LF>
	.ASCII	%$GAUGE_HARD:%<CR><LF>
	.ASCII	%$ NUM_OF_RUNS = NUM_OF_RUNS + 1%<CR><LF>
	.ASCII	%$ _IF TOTAL_RUNS         .EQ. NUM_OF_RUNS THEN -%<CR><LF>
	.ASCII	/   _WRITE 0 "Monitor creation 100% complete."/<CR><LF>
	.ASCII	%$ _IF (TOTAL_RUNS/5) * 4 .EQ. NUM_OF_RUNS THEN -%<CR><LF>
	.ASCII	/   _WRITE 0 "Monitor creation 80% complete."/<CR><LF>
	.ASCII	%$ _IF (TOTAL_RUNS/5) * 3 .EQ. NUM_OF_RUNS THEN -%<CR><LF>
	.ASCII	/   _WRITE 0 "Monitor creation 60% complete."/<CR><LF>
	.ASCII	%$ _IF (TOTAL_RUNS/5) * 2 .EQ. NUM_OF_RUNS THEN -%<CR><LF>
	.ASCII	/   _WRITE 0 "Monitor creation 40% complete."/<CR><LF>
	.ASCII	%$ _IF (TOTAL_RUNS/5)     .EQ. NUM_OF_RUNS THEN -%<CR><LF>
	.ASCII	/   _WRITE 0 "Monitor creation 20% complete."/<CR><LF>
	.ASCII	%$ _RETURN%<CR><LF>					;041-
	.ASCII	%$!%<CR><LF>
	.ASCII	%$ERROR_TRAP:%<CR><LF>
	.ASCII	%$ ON ERROR THEN GOTO ERROR_TRAP%<CR><LF>
	.ASCII	%$ GOTO 'RETURN'%<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$EXIT:%<CR><LF>
	.ASCII	%$ EXIT $STATUS%<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$BUFCHK_ERROR:%<CR><LF>
	.ASCII	%$ SAVE_SEV = $SEVERITY%<CR><LF>			;024
	.ASCII	%$ SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$ ON ERROR THEN GOTO ERROR_TRAP%<CR><LF>
	.ASCII	%$ IF SAVE_SEV .EQ. 2 THEN GOTO CONT_LINK%<CR><LF>	;024
	.ASCII	%$ IF SAVE_SEV .EQ. 4 THEN GOTO EXIT%<CR><LF>		;024
	.ASCII	%$ GOTO START2%<CR><LF>
	.ASCII	%$!%<CR><LF>
	.ASCII	%$START:%<CR><LF>
	MESS.

GLOBAL	<CHGDEC>							;041

.SBTTL	GET THE 2780 FILES IF DESIRED

.ENABL	LSB

	TST	DS2780		;2780 CONFIGURED?
	SKIP	EQ		;NO
	TST	BASLVL		;ARE WE DOING A BASELEVEL?		;028
	SKIP	NE		;YES, DON'T ASK FOR THE DISTRO		;028
	BATCH
	.MESS
	.ASCII	%$HELP_RJ:%<CR><LF>
	.ASCII	%$ WRITE ""%<CR><LF>
	.ASCII	%$ WRITE "Please mount the RJ2780 Installation media and enter the name"%<CR><LF>
	.ASCII	%$ WRITE "and unit number of the device."%<CR><LF>
	.ASCII	%$ WRITE "Valid device types are: 'MM', 'MS', 'MT', 'DM', 'DL', or 'SY'"%<CR><LF>

	.ASCII	%$ASK_RJ:%<CR><LF>
	.ASCII	%$ _set on%<CR><LF>
	.ASCII	%$ RETURN := ASK_RJ%<CR><LF>
	.ASCII	%$ WRITE ""%<CR><LF>
	.ASCII	%$ _inquire/exit=ASK_RJ TEMP "RJ2780 installation device <''DEV'> "%<CR><LF>
	.ASCII	%$ TEMP = f$edit(TEMP,-2)%<CR><LF>
	.ASCII	%$ _if TEMP .eqs. "?" then _goto HELP_RJ%<CR><LF>
	.ASCII	%$ _if TEMP .eqs. "^" then _goto ASK_RJ%<CR><LF>
	.ASCII	%$ _if TEMP .eqs. "" then TEMP = DEV%<CR><LF>
	.ASCII	%$ _if f$left(TEMP,2) .eqs.  "SY" then _goto CHECK_SY%<CR><LF>
	.ASCII	%$ _if f$left(TEMP,3) .eqs. "_SY" then _goto CHECK_SY%<CR><LF>
	.ASCII	%$ _if f$right(TEMP,f$length(TEMP)) .nes. ":" then TEMP := "''TEMP':"%<CR><LF>
	.ASCII	%$ TEMP = f$parse(TEMP,,"DEVICE")%<CR><LF>
	.ASCII	%$ _if f$left(TEMP,1) .nes. "_" then WRITE "?Invalid device"%<CR><LF>
	.ASCII	%$ DEVC = TEMP%<CR><LF>
	.ASCII	%$ UNL = ""%<CR><LF>
	.ASCII	%$ FOR = "/override=ident"%<CR><LF>
	.ASCII	%$ _if (f$parse(DEVC,,"STATUS") .and. 255) .ne. 14 then _goto MOUNT_RJ%<CR><LF>
	.ASCII	%$ UNL = "/unload"%<CR><LF>
	.ASCII	%$ FOR = "/format=DOS"%<CR><LF>
	.ASCII	%$ _goto MOUNT_RJ%<CR><LF>
	.ASCII	<CR><LF>

	.ASCII	%$RJ_ERR:%<CR><LF>
	.ASCII	%$ _set noon%<CR><LF>
	.ASCII	%$ WRITE "?Unable to mount media"%<CR><LF>
	.ASCII	%$ _goto ASK_RJ%<CR><LF>
	.ASCII	<CR><LF>

	.ASCII	%$CHECK_SY:%<CR><LF>
	.ASCII	%$ _if f$left(TARG,3) .eqs. "_SY" then _goto CONT_RJ%<CR><LF>
	.ASCII	%$ PIP SYSGEN$$:*.*/NE/NOATT=SYSGEN$:RJ2780.OBJ/NOLOG%<CR><LF>
	.ASCII	%$ PIP SYSGEN$$:*.*/NE/NOATT=SYSGEN$:RJDVRU.OBJ/NOLOG%<CR><LF>
	.ASCII	%$ PIP SYSGEN$$:*.*/NE/NOATT=SYSGEN$:RJDVRP.OBJ/NOLOG%<CR><LF>
	.ASCII	%$ PIP SYSGEN$$:*.*/NE/NOATT=SYSGEN$:DUISR.OBJ/NOLOG%<CR><LF>
	.ASCII	%$ PIP SYSGEN$$:*.*/NE/NOATT=SYSGEN$:DPISR.OBJ/NOLOG%<CR><LF>
	.ASCII	%$ _goto CONT_RJ%<CR><LF>
	.ASCII	<CR><LF>

	.ASCII	%$MOUNT_RJ:%<CR><LF>
	.ASCII	%$ RETURN := RJ_ERR%<CR><LF>
	.ASCII	%$ _mount/nowrite'FOR' 'DEVC'%<CR><LF>
	.ASCII	%$ RETURN := ASK_RJ%<CR><LF>
				;ASSIGN THE LOGICAL TO THE DEVICE
	.ASCII	%$ASSIGN 'DEVC' %
	PACKID	RJE
	.ASCII	<CR><LF>
	MESS.

GLOBAL	<DS2780,BASLVL>							;028

	BATCH			;COPY FROM MT/MM/DT TO SYS DISK
	.MESS
	.ASCII	%$PIP SYSGEN$$:*.*=%
	PACKID	RJE
	.ASCII	%:$*.OBJ%<CR><LF>
	MESS.

	BATCH			;DISMOUNT THE DISTRIBUTION TAPE OR DISK
	.MESS
	.ASCII	%$DISMOUNT'UNL' %
	PACKID	RJE
	.ASCII	%:%<CR><LF>
	.ASCII	%$DEASSIGN %
	PACKID	RJE
	.ASCII	%:%<CR><LF>
	.ASCII	%$CONT_RJ:%<CR><LF>
	.ASCII	%$RETURN := EXIT%<CR><LF>
	MESS.
                                    
.DSABL	LSB

.SBTTL	MOUNT AND ASSIGN THE DISK WITH THE SYSTEM FILES

.TAG

	BATCH			;GET LOGICAL NAME FOR SYSTEM DISK
	.MESS
	.ASCII	%$ASSIGN SYSGEN$$: IN%<CR><LF>
	MESS.

.SBTTL	MOUNT PRINTER IF NEEDED

.TAG
                        
	TST	ANYLST		;ARE LISTINGS OR MAPS DESIRED
	SKIP	EQ		;NO
	BATCH			;GET THE LINE PRINTER
	.MESS
	.ASCII	%$ASSIGN LP0: PRT%<CR><LF>
	MESS.

GLOBAL	<ANYLST>

.SBTTL	ASSEMBLE THE CONDITIONAL CODE

.TAG

.ENABL	LSB                         

10$:	BATCH			;GET RID OF SOME OLD FILES
	.MESS
	.ASCII	%$START2:%<CR><LF>
	.ASCII	%$ NUM_OF_RUNS = 0%<CR><LF>				;041
	.ASCII	%$RUN $PIP.SAV%<CR><LF>					;036
	.ASCII	%TBL.OBJ,TBL.LST/DE:NOWARN%<CR><LF>			;036
	ASCPHZ	<>,<.SAV/DE:NOWARN>					;036
	ASCPHZ	<>,<.STB/DE:NOWARN>	       				;036
	ASCPHZ	<>,<.MAP/DE:NOWARN>		       			;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	TST	LSTMAP		;ARE LISTINGS DESIRED?			;023
	BEQ	15$		;No, so clear some stuff out		;027
	JMP	20$		;YES					;027

15$:	MOV	#CLRTBL,R0	;Point to clearing table		;036
17$:	MOV	(R0)+,R1	;Point to next thing to clear		;036
	BEQ	20$		;All done here				;036
	MOV	(R0)+,R2	;Get the length				;036
18$:	CLRB	(R1)+		;Clear out a byte			;036
	SOB	R2,18$		;And loop				;036
	BR	17$		;Now loop for the whole thing		;036

GLOBAL	<MONFLG,ASMLST,DELFIL,LSTMAP,TOTRUN>				;041

20$:	BATCH			;ASSEMBLE THE CONDITIONAL MODULES
	.MESS
      	.ASCII	%$RUN $MACRO.SAV%<CR><LF>
	.ASCII	%TBL%
	CLEAR	START
	.ASCII	%,%
	.ASCII	%TBL/C%
	CLEAR	END
	.ASCII	%=%
	.ASCII	%$COMMON,$KERNEL,[]CONFIG,IN:KBDEF,%			;036
	.ASCII	%IN:CHECK,IN:TBL%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	TST	ASMLST		;WERE LISTINGS REQUESTED
	SKIP	EQ		;NO
	TST	DELFIL		;DELETING FILES?
	SKIP	NE		;YES. LISTINGS PRINTED ALREADY
	BATCH			;PRINT THE LISTINGS
	.MESS
	.ASCII	%$PIP PRT:*.*=TBL.LST%<CR><LF>				;036
	MESS.

.DSABL	LSB

GLOBAL	<DELFIL,ASMLST>

.SBTTL	LINK THE SYSTEM
                                  
.TAG

.ENABL	LSB		;NOTE: SEQUENCE BY 1 FOR GENERATED LABELS

	BATCH			;LINK UP RSTS
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%RSTS/Z,%						;023
	CLEAR	START							;036
	.ASCII	%RSTS/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,RSTS=TBL,$ERR.STB/X/B:0/U:#100/I/C%<CR><LF>		;036
	MESS.
	DEC	DS2780		;IS THERE 2780 CONFIGURED?
	BMI	20$		;NO
	BEQ	10$		;YES, WITH A DP
	MOVB	#'U,DPDU	;CHANGE DP TO DU
	MOVB	#'U,DPDU1	; IN 2 PLACES
10$:	BATCH			;LINK IN 2780 ROOT PARTS IF DESIRED
	.MESS
	.ASCII	%IN:RJDVR%
DPDU:	.ASCII	%P/C%<CR><LF>
	MESS.

GLOBAL	<DS2780>
20$:	BATCH			;CONTINUE LINK
	.MESS
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%MORBUF%<CR><LF>
	MESS.
	OPTLIN	CR29,CR029
	OPTLIN	CR26,CR026
	OPTLIN	CR1401,CR1401
	OPTLIN	KM2780,IIDVR
	OPTLIN	KMC.LP,LPDVRA
	OPTLIN	LPBEX,LPDVRX
	BATCH			;FINISH THIS LINK
	.MESS
	.ASCII	<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	.ASCII	%$ON WARNING THEN GOTO BUFCHK_ERROR%<CR><LF>
	.ASCII	%$SET ECHO%<CR><LF>
	.ASCII	%$RUN SYSGEN$$:BUFCHK%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$ON ERROR THEN GOTO ERROR_TRAP%<CR><LF>
	.ASCII	%$CONT_LINK:%<CR><LF>                                     
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041


	BATCH
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%DSK/Z,%						;023
	CLEAR	START							;036
	.ASCII	%DSK/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,DSK=%
	.ASCII	%IN:%<PPN>%DSK,DK:RSTS.STB/X/B:#117000/U:#100/I/C%<CR><LF>
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%DSKPAT%<CR><LF>
	MESS.
	OPTLIN	RKSEEK,DKSEEK
	OPTLIN	RLSEEK,DLSEEK
	OPTLIN	RMSEEK,DMSEEK
	OPTLIN	RRSEEK,DRSEEK
	OPTLIN	RBSEEK,DBSEEK
	BATCH			;FINISH THIS LINK
	.MESS
	.ASCII	<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH			;DO A SEPARATE LINK OF "TERCLS"
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%TERCLS/Z,%						;036
	CLEAR	START							;036
	.ASCII	%TERCLS/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,TERCLS=%
	.ASCII	%IN:%<PPN>%TERCLS,DK:RSTS.STB/X/B:#137000/U:#100%<CR><LF> ;036
	.ASCII	%TERPAT%<CR><LF>	;ROUND SECTION IS TERPAT	;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;042
	.MESS								;042
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;042
	.ASCII	%KBX/Z,%						;042
	CLEAR	START							;042
	.ASCII	%KBX/A/W%						;042
	CLEAR	END							;042
	.ASCII	%,KBX=%							;042
	.ASCII	%IN:%<PPN>%KBX,DK:TERCLS.STB/X/B:#117000/U:#100/C%<CR><LF> ;042
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;042
	.ASCII	%KBXPAT%<CR><LF>					;042
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;042
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;042

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%KIN/Z,%						;036
	CLEAR	START							;036
	.ASCII	%KIN/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,KIN=%							;036
	.ASCII	%IN:%<PPN>%KIN,DK:KBX.STB/X/B:#117000/U:#100/C%<CR><LF> ;042
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%KINPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH
	.MESS								;030
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%FMS/Z,%						;023
	CLEAR	START							;036
	.ASCII	%FMS/A/W%						;030
	CLEAR	END							;036
	.ASCII	%,FMS=%							;030
	.ASCII	%IN:%<PPN>%FMS,DK:KIN.STB/X/B:#117000/U:#100/C%<CR><LF>	;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%FMSPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%KBD/Z,%						;036
	CLEAR	START							;036
	.ASCII	%KBD/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,KBD=%							;036
	.ASCII	%IN:%<PPN>%KBD,DK:FMS.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%KBDPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%PKPORT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%PKPORT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,PKPORT=%						;036
	.ASCII	%IN:%<PPN>%PKPORT,DK:KBD.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII  %IN:PDVVEC/C%<CR><LF>					;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%PKDPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%DHPORT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%DHPORT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,DHPORT=%						;036
	.ASCII	%IN:%<PPN>%DHPORT,DK:PKPORT.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII  %IN:PDVVEC/C%<CR><LF>					;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%DHPPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%DLPORT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%DLPORT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,DLPORT=%						;036
	.ASCII	%IN:%<PPN>%DLPORT,DK:DHPORT.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII  %IN:PDVVEC/C%<CR><LF>					;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%DLPPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%DZPORT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%DZPORT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,DZPORT=%						;036
	.ASCII	%IN:%<PPN>%DZPORT,DK:DLPORT.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII  %IN:PDVVEC/C%<CR><LF>					;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%DZPPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH								;036
	.MESS								;036
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%VHPORT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%VHPORT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,VHPORT=%						;036
	.ASCII	%IN:%<PPN>%VHPORT,DK:DZPORT.STB/X/B:#117000/U:#100/C%<CR><LF> ;036
	.ASCII  %IN:PDVVEC/C%<CR><LF>					;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;036
	.ASCII	%VHPPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH			;DO THE CRASH DUMP LINK
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%CRA/Z,%						;023
	CLEAR	START							;036
	.ASCII	%CRA/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,CRA=%
	.ASCII	%IN:%<PPN>%CRA,DK:%					;030
	.ASCII	%VHPORT.STB/X/B:#117000/U:#100%<CR><LF>			;036
	.ASCII	%CRAPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	TST	DSDMC		;DMC11'S OR DMR11'S CONFIGURED?		;030
	BEQ	24$		;NO					;030
	MOVB	#'X,RSXSTB	;Yes, set the RSX symbol table to "X"	;030
	MOVB	#'V,RSXSTB+1	;				  "V"	;030
	MOVB	#'R,RSXSTB+2	;				  "R"	;030
	BATCH			;Yes, link the XVR phase		;026
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%XVR/Z,%						;023
	CLEAR	START							;036
	.ASCII	%XVR/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,XVR=IN:XVR,DK:CRA.STB/X/B:#117000/U:#100/I/C%<CR><LF>	;030
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%XVRPAT%<CR><LF>
	.ASCII	%XMDVRM%<CR><LF>
	.ASCII	<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

24$:	BATCH			;DO THE RSX PHASE LINK
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%RSX/Z,%						;023
	CLEAR	START							;036
	.ASCII	%RSX/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,RSX=%
	.ASCII	%IN:%<PPN>%RSX,DK:%					;030
RSXSTB:	.ASCII	%CRA.STB/X/B:#117000/U:#100/C%<CR><LF>  		;030
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%RSXPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH			;DO THE GEN PHASE LINK
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%GEN/Z,%						;023
	CLEAR	START							;036
	.ASCII	%GEN/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,GEN=%
	.ASCII	%IN:%<PPN>%GEN,DK:RSX.STB/X/B:#117000/U:#100/C%<CR><LF>  ;018
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%GENPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH			;DO THE GRD PHASE LINK			;033
	.MESS								;033
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;033
	.ASCII	%GRD/Z,%						;033
	CLEAR	START							;036
	.ASCII	%GRD/A/W%						;033
	CLEAR	END							;036
	.ASCII	%,GRD=%							;033
	.ASCII	%IN:%<PPN>%GRD,DK:GEN.STB/X/B:#117000/U:#100/C%<CR><LF> ;033
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;033
	.ASCII	%GRDPAT%<CR><LF>					;033
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;033
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	TST	DSKMC		;KMCs supported?			;027
	BEQ	30$		;No, skip the link			;027
	BATCH			;Yes, link the KVR phase		;027
	.MESS								;027
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;027
	.ASCII	%KVR/Z,%						;027
	CLEAR	START							;036
	.ASCII	%KVR/A/W%						;027
	CLEAR	END							;036
	.ASCII	%,KVR=IN:KVR,DK:GRD.STB/X/B:#117000/U:#100/C%<CR><LF>	;033
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;027
	.ASCII	%KVRPAT%<CR><LF>					;027
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	MOVB	#'K,EMTSTB	;Now set up EMT				;027
	MOVB	#'V,EMTSTB+1	; to use the				;027
	MOVB	#'R,EMTSTB+2	; KVR symbol table			;027

30$:	BATCH			;DO THE EMT LINK
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%EMT/Z,%						;023
	CLEAR	START							;036
	.ASCII	%EMT/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,EMT=%
	.ASCII	%IN:%<PPN>%EMT,DK:%					;027
EMTSTB:	.ASCII	%GRD.STB/X/B:#117000/U:#100/I/C%<CR><LF> 		;033
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%EMTPAT%<CR><LF>
	MESS.
	OPTLIN	DIAMON,DIAMON
	BATCH			;DO THE EM2 LINK			;018+
	.MESS
	.ASCII	<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%EM2/Z,%						;023
	CLEAR	START							;036
	.ASCII	%EM2/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,EM2=%
	.ASCII	%IN:%<PPN>%EM2,DK:EMT.STB/X/B:#117000/U:#100/C%<CR><LF>
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%EM2PAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;043
	.MESS								;043
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;043
	.ASCII	%XTR/Z,%						;043
	CLEAR	START							;043
	.ASCII	%XTR/A/W%						;043
	CLEAR	END							;043
	.ASCII	%,XTR=%							;043
	.ASCII	%IN:%<PPN>%XTR,DK:EM2.STB/X/B:#117000/U:#100/C%<CR><LF> ;043
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;043
	.ASCII	%XTRPAT%<CR><LF>					;043
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;043
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;043
	BATCH			;FINISH THIS LINK, START FIP		;018-
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%FIP/Z,%						;023
	CLEAR	START							;036
	.ASCII	%FIP/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,FIP=%
	.ASCII	%IN:%<PPN>%FIPLRG,DK:XTR.STB/X/B:#137000/U:#100/C%<CR><LF>;043
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%FIPPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	TST	E.MVR		;Do we need the magtape phase?		;019
	BEQ	40$		;No, not this time			;019
	BATCH			;Yes, set up for MVR phase		;019
	.MESS								;019
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;019
	.ASCII	%MVR/Z,%						;023
	CLEAR	START							;036
	.ASCII	%MVR/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,MVR=%							;019
	.ASCII	%IN:%<PPN>%MVR,DK:FIP.STB/X/B:#117000/U:#100/I/C%<CR><LF> ;022
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;019
	.ASCII	%MVRPAT%<CR><LF>					;019
	MESS.								;019
	OPTLIN	MTDVRM,MTDVRM						;019
	OPTLIN	MMDVRM,MMDVRM						;019
	OPTLIN	MSDVRM,MSDVRM						;019
	BATCH
	.MESS
	.ASCII	<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	MOVB	#'M,OPNSTB	;Set first char of OPN stb		;019
	MOVB	#'V,OPNSTB+1	;And second character			;019
	MOVB	#'R,OPNSTB+2	;And third character			;019

40$:	BATCH
	.MESS								;019
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%OPN/Z,%						;023
	CLEAR	START							;036
	.ASCII	%OPN/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,OPN=%
	.ASCII	%IN:%<PPN>%OPN,DK:%					;019
OPNSTB:	.ASCII	%FIP.STB/X/B:#117000/U:#100/C%<CR><LF>			;019
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%OPNPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	TST	E.MCP		;Need MCP and BBR phase for MSCP	;032
				; and/or TMSCP?				;032
	BEQ	80$		;NO
	MOVB	#'B,NSPSTB	;Yes, set NSP link to use "B"		;032
	MOVB	#'B,NSPSTB+1	;			  "B"		;032
	MOVB	#'R,NSPSTB+2	;			  "R"		;032
	BATCH			; and go do it.				;022
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%MCP/Z,%						;023
	CLEAR	START							;036
	.ASCII	%MCP/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,MCP=%
	.ASCII	%IN:%<PPN>%MCP,DK:OPN.STB/X/B:#117000/U:#100/I/C%<CR><LF>
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%MCPPAT%<CR><LF>
	MESS.
	OPTLIN	E.MSCP,DUDSK						;032
	BATCH								;032
	.MESS								;032
	.ASCII	<CR><LF>						;032
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;032
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

	BATCH
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%BBR/Z,%						;023
	CLEAR	START							;036
	.ASCII	%BBR/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,BBR=%
	.ASCII	%IN:%<PPN>%BBR,DK:MCP.STB/X/B:#117000/U:#100/I/C%<CR><LF>
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%BBRPAT%<CR><LF>
	MESS.
	OPTLIN	E.MSCP,BBRROT						;032
	OPTLIN	MUDVRM,MUDVRM						;032
	BATCH								;032
	.MESS								;032
	.ASCII	<CR><LF>						;032
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;032
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

GLOBAL	<DSDMC,DSDMP,E.MCP,E.MVR>					;036
GLOBAL	<MUDVRM,E.MSCP>							;020

80$:	BATCH			;Set up for DECnet links		;026
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%NSP/Z,%						;023
	CLEAR	START							;036
	.ASCII	%NSP/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,NSP=IN:NSP,DK:%					;030
NSPSTB:	.ASCII	%OPN.STB/X/B:#117000/U:#100/C%<CR><LF>			;030
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%NSPPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;026
	.ASCII	%EVL/Z,%						;026
	CLEAR	START							;036
	.ASCII	%EVL/A/W%						;026
	CLEAR	END							;036
	.ASCII	%,EVL=IN:EVL,DK:NSP.STB/X/B:#117000/U:#100/C%<CR><LF>	;026
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%EVLPAT%<CR><LF>					;026
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;026
	.ASCII	%RDM/Z,%						;026
	CLEAR	START							;036
	.ASCII	%RDM/A/W%						;026
	CLEAR	END							;036
	.ASCII	%,RDM=IN:RDM,DK:EVL.STB/X/B:#117000/U:#100/C%<CR><LF>	;026
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%RDMPAT%<CR><LF>					;026
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%TRN/Z,%						;023
	CLEAR	START							;036
	.ASCII	%TRN/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,TRN=IN:TRN,DK:RDM.STB/X/B:#117000/U:#100/C%<CR><LF>	;026
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%TRNPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%SES/Z,%						;023
	CLEAR	START							;036
	.ASCII	%SES/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,SES=IN:SES,DK:TRN.STB/X/B:#117000/U:#100/C%<CR><LF>
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%SESPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;038
	.ASCII	%NOD/Z,%						;038
	CLEAR	START							;038
	.ASCII	%NOD/A/W%						;038
	CLEAR	END							;038
	.ASCII	%,NOD=IN:NOD,DK:SES.STB/X/B:#117000/U:#100/C%<CR><LF>	;038
	.ASCII	%IN:RSTS%<CR><LF>					;038
	.ASCII	%NODPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;026
	.ASCII	%UNA/Z,%						;026
	CLEAR	START							;036
	.ASCII	%UNA/A/W%						;026
	CLEAR	END							;036
	.ASCII	%,UNA=IN:UNA,DK:NOD.STB/X/B:#117000/U:#100/C%<CR><LF>	;038
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%UNAPAT%<CR><LF>					;026
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;026
	.ASCII	%QNA/Z,%						;026
	CLEAR	START							;036
	.ASCII	%QNA/A/W%						;026
	CLEAR	END							;036
	.ASCII	%,QNA=IN:QNA,DK:UNA.STB/X/B:#117000/U:#100/C%<CR><LF>	;036
	.ASCII	%IN:RSTS%<CR><LF>					;026
	.ASCII	%QNAPAT%<CR><LF>					;026
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;036
	.ASCII	%LAT/Z,%						;036
	CLEAR	START							;036
	.ASCII	%LAT/A/W%						;036
	CLEAR	END							;036
	.ASCII	%,LAT=IN:LAT,DK:QNA.STB/X/B:#117000/U:#100/C%<CR><LF>	;036
	.ASCII	%IN:PDVVEC/C%<CR><LF>					;037
	.ASCII	%IN:RSTS%<CR><LF>					;036
	.ASCII	%LATPAT%<CR><LF>					;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	TST	DSDMP		;DMP or DMV support?			;026
	BEQ	90$		;No, not this time			;026
	MOVB	#'D,OVRSTB	;Yes, first change the OVR STB to "D"	;030
	MOVB	#'M,OVRSTB+1	;				  "M"	;030
	MOVB	#'P,OVRSTB+2	;				  "P"	;030
	BATCH			;Yes, link the DMP phase		;026
	.MESS								;026
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;026
	.ASCII	%DMP/Z,%						;026
	CLEAR	START							;036
	.ASCII	%DMP/A/W%						;026
	CLEAR	END							;036
	.ASCII	%,DMP=IN:DMP,DK:LAT.STB/X/B:#117000/U:#100/C%<CR><LF>	;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>				;026
	.ASCII	%DMPPAT%<CR><LF>					;026
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;026
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
90$:	INC	DS2780		;2780 CONFIGURED?
	BEQ	100$		;NO
	BATCH			;YES, LINK IT
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%RJ2780/Z,%						;023
	CLEAR	START							;036
	.ASCII	%RJ2780/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,RJ2780=IN:RJ2780/X/B:#117000/U:#1000/C%<CR><LF>
	.ASCII	%RSTS.STB/C%<CR><LF>
	.ASCII	%IN:D%
DPDU1:	.ASCII	%PISR%<CR><LF>
	.ASCII	%RJEPAT%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

GLOBAL	<DS2780>							;026

                                                          
100$:	BATCH			;START LINK OF OVR
	.MESS
	.ASCII	%$RUN $LINK.SAV%<CR><LF>
	.ASCII	%OVR/Z/P:#50,%						;031
	CLEAR	START							;036
	.ASCII	%OVR/A/W%						;023
	CLEAR	END							;036
	.ASCII	%,OVR=%
	.ASCII	%IN:%<PPN>%OVRLRG,DK:%					;030
OVRSTB:	.ASCII	%LAT.STB/X/B:#1000/Q/C%<CR><LF>				;036
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%TBLEXT:3000%<CR><LF><CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;041
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH								;041
	.MESS								;041
	.ASCII	%$RUN $LINK.SAV%<CR><LF>				;039+
	.ASCII	%OV2/Z/P:#50,%
	CLEAR	START
	.ASCII	%OV2/A/W%
	CLEAR	END
	.ASCII	%,OV2=%
	.ASCII	%IN:%<PPN>%OV2,DK:%
	.ASCII	%OVR.STB/X/B:#1000/Q/C%<CR><LF>
	.ASCII	%IN:%<PPN>%RSTS%<CR><LF>
	.ASCII	%O2TEXT:3000%<CR><LF><CR><LF>				;039-
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	TST	BASLVL		;DOING A BASELEVEL?			;025
	SKIP	NE		;YES, DON'T DELETE THE FILES		;025
	BATCH			;NO, DELETE THEM			;025
	.MESS                    
	.ASCII	%$PIP TBL.OBJ/DE%<CR><LF>				;036
	MESS.

GLOBAL	<DELFIL,DS2780,DST278,BASLVL>					;026

.SBTTL	CREATE THE SAVE IMAGE LIBRARY

.TAG

.ENABL	LSB        

	MOV	#MONNAM,R0	;POINT TO THE MONITOR SIL NAME
	MOV	#6.,R1		;IT IS 6 CHARACTERS LONG
	MOV	#RSTSIL,R2	;WE NEED TO CREATE IT
	MOV	#SUPSIL,R4	;SET UP TO SUPERSEDE THE MONITOR
10$:	CMPB	(R0),#40	;BLANK?
	BNE	20$		;NO
	CLRB	(R0)		;YES, CLEAR IT
20$:	MOVB	(R0),PATSIL-RSTSIL(R2) ;SET PATCH NAME
	MOVB	(R0),(R2)+	;SET NAME TO CREATE
	MOVB	(R0)+,(R4)+	;MOVE IT IN FOR THE SUPERSEDING
	SOB	R1,10$		;LOOP
	CMP	GENSYS,#"SY	;GENERATING THE SYSTEM DISK?
	BEQ	30$		;YES
	CALLX	CLEAR,R5	;NO. DO IT IN OUR ACCOUNT
	  .WORD	UNTSIL
	  .WORD	UNTSIE-UNTSIL
	CALLX	CLEAR,R5
	  .WORD	UNTPAT
	  .WORD	UNTPAE-UNTPAT
30$:	TST	SUPSED		;ARE WE SUPERSEDING A MONITOR
	BEQ	40$		;NO, CONTINUE
	BATCH
	.MESS
	.ASCII	%$SET NOON%<CR><LF>
	.ASCII	%$SET FILE/DELETABLE/LOG SYSTEM$$:%
SUPSIL:	.ASCII	%------.SIL%<CR><LF>
	.ASCII	%$SET ON%<CR><LF>
	MESS.
40$:	BATCH			;CREATE THE SIL
	.MESS      
	.ASCII	%$RUN $SILUS.SAV%<CR><LF>
UNTSIL:	.ASCII	%SYSTEM$$:%
UNTSIE:
RSTSIL:	.ASCII	%------.SIL/POS:-2/MOD:64/CL:-1,_SY:SILMAP.TMP=RSTS/C%<CR><LF>
	MESS.
	OPTLIN	DS2780,RJ2780/M/C
	OPTLIN	DSDMC,XVR/M/T/C						;030
	OPTLIN	DSDMP,DMP/M/T/C						;030
	OPTLIN	DSKMC,KVR/M/T/C						;027
	OPTLIN	E.MVR,MVR/M/T/C						;019
	OPTLIN	E.MCP,MCP/M/T/C						;030
	OPTLIN	E.MCP,BBR/M/T/C						;035
	BATCH
	.MESS
	.ASCII	%EMT/M/T/C%<CR><LF>
	.ASCII	%EM2/M/T/C%<CR><LF>
	.ASCII	%RSX/M/T/C%<CR><LF>
	.ASCII	%GEN/M/T/C%<CR><LF>
	.ASCII	%GRD/M/T/C%<CR><LF>					;033
	.ASCII	%OPN/M/T/C%<CR><LF>
	.ASCII	%KBD/M/T/C%<CR><LF>					;036
	.ASCII	%KIN/M/T/C%<CR><LF>					;036
	.ASCII	%PKPORT/M/T/C%<CR><LF>					;036
	.ASCII	%DLPORT/M/T/C%<CR><LF>					;036
	.ASCII	%XTR/M/T/C%<CR><LF>					;043
	.ASCII	%DSK/M/C%<CR><LF>
	
GLOBAL	<MONNAM,GENSYS,DSDMC,E.MCP,E.MVR,DSDMP,DSKMC>			;027
GLOBAL	<E.MSCP>							;020

	.ASCII	%FIP/M/T/C/A%<CR><LF>
	.ASCII	%NSP/M/T/C/A%<CR><LF>					;026
	.ASCII	%EVL/M/T/C/A%<CR><LF>					;026
	.ASCII	%RDM/M/T/C/A%<CR><LF>					;026
	.ASCII	%TRN/M/T/C/A%<CR><LF>					;026
	.ASCII	%SES/M/T/C/A%<CR><LF>					;026
	.ASCII	%NOD/M/T/C/A%<CR><LF>					;038
	.ASCII	%UNA/M/T/C/A%<CR><LF>					;030
	.ASCII	%QNA/M/T/C/A%<CR><LF>					;030
	.ASCII	%DHPORT/M/T/C/A%<CR><LF>				;036
	.ASCII	%DZPORT/M/T/C/A%<CR><LF>				;036
	.ASCII	%VHPORT/M/T/C/A%<CR><LF>				;036
	.ASCII	%TERCLS/M/T/C/A%<CR><LF>				;036
	.ASCII	%FMS/M/T/C/A%<CR><LF>					;036
	.ASCII	%KBX/M/T/C/A%<CR><LF>					;042
	.ASCII	%LAT/M/T/C/A%<CR><LF>					;036
	.ASCII	%CRA/M/C/A%<CR><LF>					
	.ASCII	%OVR/M/C/A%<CR><LF>				
	.ASCII	%OV2/M/C/A%<CR><LF>					;039
	.ASCII	%IN:%<PPN>%DEFALT/A%<CR><LF>			
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
	BATCH			;TYPE OUT THE MAP
	.MESS
	.ASCII	%$SET ECHO%<CR><LF>
	.ASCII	%$TYPE _SY:SILMAP.TMP%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$DELETE _SY:SILMAP.TMP%<CR><LF>
	MESS.
	TST	BASLVL		;ARE WE DOING A BASELEVEL		;025
	BNE	60$		;YES, GO AROUND UPDATING SYSLIB.OBJ	;025
	BATCH			;NOW UPDATE $SYSLIB.OBJ
	.MESS
	.ASCII	%$ _set data/end="#"%<CR><LF>				;044
	.ASCII	%RUN $LIBR.SAV%<CR><LF>                                
	.ASCII	%SY:$SYSLIB=SY:$SYSLIB/G,IN:OVLHD/U%<CR><LF>		;044
	.ASCII	%$OVRH%<CR><LF>						;044
	.ASCII	<CR><LF>						;044
	.ASCII	%# _eod%<CR><LF>					;044
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041
60$:	TST	DELFIL		;DELETING FILES?			;025
	SKIP	EQ		;NO
	BATCH			;CLEAN UP THE DISK SOME MORE
	.MESS
	.ASCII	%$RUN $PIP.SAV%<CR><LF>					;037
	ASCPHZ	<>,<.SAV/DE:NOWARN>					;036
	ASCPHZ	<>,<.STB/DE:NOWARN>	       				;036
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.								;036
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

.DSABL	LSB

GLOBAL	<DELFIL,DSDMC,E.MCP,E.MVR,SUPSED>				;036
GLOBAL	<E.MSCP,BASLVL,DSKMC>						;027

.SBTTL	DISMOUNT SOME DEVICES

.TAG

.ENABL	LSB

DISDEV:	TST	ANYLST		;USING THE PRINTER?
	BEQ	10$		;NO
	BATCH			;DEASSIGN IT
	.MESS
	.ASCII	%$DEASSIGN PRT:%<CR><LF>
	MESS.
10$:	CALLX	MEDIA,R5,DSTMED	;FIND THE DISTRO MEDIA
	 BR	20$		;DECTAPE
	 BR	20$		;MAGTAPE
	 BR	30$		;SYSTEM
	 ;NOP			;ANY DISK
	BATCH			;DISMOUNT THE DISTRO DISK
	.MESS
	.ASCII	%$DEASSIGN IN%<CR><LF>
	.ASCII	%$DISMOUNT %
	PACKID	MON
	.ASCII	%:%<CR><LF>
	MESS.
	SKIP

20$:	BATCH			;DISMOUNT THE DISTRO TAPE
	.MESS
	.ASCII	%$DEASSIGN IN:%<CR><LF>
	MESS.
	SKIP

30$:	BATCH			;DEASSIGN THE SYSTEM DISK
	.MESS
	.ASCII	%$DEASSIGN IN:%<CR><LF>
	MESS.

.DSABL	LSB

GLOBAL	<ANYLST,DSTMED>

.SBTTL	DO MONITOR AUTO-PATCHING

.ENABL	LSB

.TAG
	CLR	XPTIND		;SAY NOTHING IS MOUNTED YET
	TST	BASLVL		;ARE WE DOING A BASELEVEL		;025
	BEQ	5$		;NO, CONTINUE				;025
	JMP	ALDONE		;YES, DON'T PATCH ANYTHING		;025

5$:	TST	PATMON		;PATCH MONITOR?
	SKIP	EQ		;NOPE
	MOV	#MPTPID+6,R0	;GET POINTER TO PACK ID
	MOV	#6,R1		;6 CHARS
10$:	CMPB	-(R0),#40	;SPACE?
	BNE	20$		;NO
	CLRB	(R0)		;YES, NULL IT
20$:	MOVB	(R0),MPTID0-1(R1) ;SET ID'S
	MOVB	(R0),MPTID1-1(R1)
	MOVB	(R0),XPTPID-1(R1)
	MOVB	(R0),XPTID2-1(R1)
	SOB	R1,10$		;LOOP
	CALLX	MEDIA,R5,MPTDEV	;FIND THE MEDIUM
	 BR	30$		;DECTAPE
	 BR	40$		;MAGTAPE
	 BR	50$		;SYSTEM DISK
	 ;NOP			;ANY DISK
	MOVB	(R0)+,MPTDK	;PUT PATCH DISK NAME IN MOUNT MESSAGE
	MOVB	(R0),MPTDK+1	; AS TWO BYTES
	BATCH			;TELL USER TO MOUNT THE DISK
	.MESS
	.ASCII	%$MESSAGE MOUNT THE MONITOR PATCH FILE DISK "%
MPTID0:	.ASCII	%------" ON A DISK DRIVE%<CR><LF>
	.ASCII	%$MESSAGE READY AND WRITE PROTECT THE DRIVE%<CR><LF>
	.ASCII	%$MOUNT %
MPTDK:	.ASCII	%--:/PHY/VID=%
MPTID1:	.ASCII	%------/NOWRITE %
	MESS.
	BR	60$

GLOBAL	<PATMON,MPTPID,MPTDEV,BASLVL>					;025

30$:	BATCH			;TELL HIM TO MOUNT THE DECTAPE
	.MESS
	.ASCII	%$MESSAGE MOUNT THE MONITOR PATCH FILE DECTAPE ON A DECTAPE DRIVE%<CR><LF>
	.ASCII	%$MESSAGE SET IT TO "REMOTE" AND "WRITE LOCKED"%<CR><LF>
	.ASCII	%$MOUNT DT:/PHY/NOWRITE %
	MESS.
	BR	60$

40$:	MOVB	(R0)+,MPTMT	;PUT MAGTAPE NAME IN MOUNT MESSAGE
	MOVB	(R0),MPTMT+1	; AS TWO BYTES
	BATCH			;TELL HIM TO MOUNT THE MAGTAPE
	.MESS
	.ASCII	%$MESSAGE MOUNT THE MONITOR PATCH FILE MAGTAPE ON A MAGTAPE DRIVE%<CR><LF>
	.ASCII	%$MESSAGE WITH NO "WRITE RING" AND SET TO "ON LINE"%<CR><LF>
	.ASCII	%$MOUNT %
MPTMT:	.ASCII	%--:/PHY/NOWRITE %
	MESS.
	BR	60$

50$:	INC	SYDSTR		;FLAG SY AS THE DISTRO DEVICE
	BATCH			;ISSUE ASSIGN FOR SYSTEM DISK
	.MESS
	.ASCII	%$ASSIGN SY: PATCH%<CR><LF>
	MESS.

60$:	INC	XPTIND		;INDICATE MONITOR MEDIUM IS NOW MOUNTED
	BATCH			;DO THE PATCHING
	.MESS
	.ASCII	%$RUN $ONLPAT.SAV%<CR><LF>
	.ASCII	%SYSGEN$$:MONITR.CMD%<CR><LF>
UNTPAT:	.ASCII	%SYSTEM$$:%
UNTPAE:
PATSIL:	.ASCII	%------.SIL%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

.DSABL	LSB

GLOBAL	<MPTNAM>

.SBTTL	DO RJ2780 AUTO-PATCHING

.ENABL	LSB

.TAG
	TST	PATRJE		;PATCH 2780?
	SKIP	EQ		;NOPE
	BMI	10$		;YEP, BUT NOT SAME AS MONITOR
	MOV	MPTDEV,RPTDEV	;YEP, SAME AS MONITOR
	MOV	MPTPID,RPTPID
	MOV	MPTPID+2,RPTPID+2
	MOV	MPTPID+4,RPTPID+4
	TST	XPTIND		;IS MONITOR MEDIUM MOUNTED NOW?
	BGT	20$		;YEP, ALL SET
10$:	CALL	DODISM		;DISMOUNT ANY PREVIOUS
20$:	MOV	#RPTPID+6,R0	;GET POINTER TO PACK ID
	MOV	#6,R1		;6 CHARS
30$:	CMPB	-(R0),#40	;SPACE?
	BNE	40$		;NO
	CLRB	(R0)		;YES, NULL IT
40$:	MOVB	(R0),RPTID0-1(R1) ;SET ID'S
	MOVB	(R0),RPTID1-1(R1)
	MOVB	(R0),RPTID2-1(R1)
	MOVB	(R0),XPTPID-1(R1)
	MOVB	(R0),XPTID2-1(R1)
	SOB	R1,30$		;LOOP
	TST	XPTIND		;HAS THE MOUNT BEEN DONE ALREADY?
	BNE	90$		;YES
	CALLX	MEDIA,R5,RPTDEV	;FIND THE MEDIUM
	 BR	50$		;DECTAPE
	 BR	60$		;MAGTAPE
	 BR	70$		;SYSTEM DISK
	 ;NOP			;ANY DISK
	MOVB	(R0),RPTDK	;DISK, SET NAME
	MOVB	(R0),RPDKUT
	MOVB	(R0)+,RPDKMT
	MOVB	(R0),RPTDK+1
	MOVB	(R0),RPDKUT+1
	MOVB	(R0),RPDKMT+1
	BATCH
	.MESS
	.ASCII	%$SET ECHO%<CR><LF>
	.ASCII	%$WRITE "Mount the 2780 PATCH FILE DISK %
RPTID0:	.ASCII	%------ on a DISK DRIVE"%<CR><LF>
	.ASCII	%$WRITE "READY and WRITE PROTECT the DRIVE"%<CR><LF>
	.ASCII	%$ASK "%
RPDKUT:	.ASCII	%-- Unit: <0> "%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$ANS = F$EDIT(ANS,2+4)%<CR><LF>
	.ASCII	%$IF ANS .EQS. "" THEN ANS = "0"%<CR><LF>
	.ASCII	%$MOUNT %
RPTDK:	.ASCII	%--'ANS': %
RPTID1:	.ASCII	%------/NOWRITE/NOSHARE%<CR><LF>
	.ASCII	%$ASSIGN %
RPDKMT:	.ASCII	%--'ANS': %
	MESS.
	BR	80$

GLOBAL	<PATRJE,MPTDEV,RPTDEV,MPTPID,RPTPID>

50$:	BATCH
	.MESS
	.ASCII	%$SET ECHO%<CR><LF>
	.ASCII	%$WRITE "Mount the 2780 PATCH FILE DECTAPE on a DECTAPE DRIVE"%<CR><LF>
	.ASCII	%$WRITE "Set it to REMOTE and WRITE LOCKED"%<CR><LF>
	.ASCII	%$ASK "DT Unit: <0> "%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$ANS = F$EDIT(ANS,2+4)%<CR><LF>
	.ASCII	%$IF ANS .EQS. "" THEN ANS = "0"%<CR><LF>
	.ASCII	%$ASSIGN DT'ANS': %
	MESS.
	INC	SYDSTR			;FLAG THAT WE DON'T DISMOUNT
	BR	80$

60$:	MOVB	(R0),RPMTUT		;SET NAME
	MOVB	(R0)+,RPMTMT
	MOVB	(R0),RPMTUT+1
	MOVB	(R0),RPMTMT+1
	BATCH
	.MESS
	.ASCII	%$SET ECHO%<CR><LF>
	.ASCII	%$WRITE "Mount the 2780 PATCH FILE MAGTAPE on a MAGTAPE DRIVE"%<CR><LF>
	.ASCII	%$WRITE "with NO WRITE RING and set to ON LINE"%<CR><LF>
	.ASCII	%$ASK "%
RPMTUT:	.ASCII	%-- Unit: <0> "%<CR><LF>
	.ASCII	%$SET NOECHO/WARNING%<CR><LF>
	.ASCII	%$ANS = F$EDIT(ANS,2+4)%<CR><LF>
	.ASCII	%$IF ANS .EQS. "" THEN ANS = "0"%<CR><LF>
	.ASCII	%$ASSIGN %
RPMTMT:	.ASCII	%--'ANS': %
	MESS.
	INC	SYDSTR			;FLAG THAT WE DON'T DISMOUNT
	BR	80$

70$:	INC	SYDSTR			;FLAG SY AS THE DISTRO DEVICE
	BATCH				;ASSIGN THE SYSTEM DISK
	.MESS
	.ASCII	%$ASSIGN SY: %
	MESS.
80$:	BATCH
	.MESS
RPTID2:	.ASCII	%------%<CR><LF>
	MESS.

90$:	MOV	PATRJE,XPTIND	;INDICATE WHAT IS NOW MOUNTED
;	MOV	#RPTNAM,R0	;GET THE PATCH FILE NAME
;	MOV	#RPTNM,R1	;GET BUCKET
;	MOV	#19.,R3		;19. CHARS
;100$:	MOVB	(R0)+,(R1)+	;SET NAME
;	SOB	R3,100$
	MOV	#RPTSIL,R0	;GET .SIL NAME AND UNIT
	MOV	#UNTPAT,R1	;GET SOURCE VERSION
	MOV	#9.+6.,R3	;THIS MANY TO MOVE...
110$:	MOVB	(R1)+,(R0)+	;MOVE IT
	SOB	R3,110$
	BATCH
	.MESS
	.ASCII	%$RUN $ONLPAT.SAV%<CR><LF>
RPTNM:	.ASCII	%SYSGEN$$:RJ2780.CMD%<CR><LF>
RPTSIL:	.ASCII	%SYSTEM$$:------.SIL%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

.DSABL	LSB

GLOBAL	<PATRJE,RPTNAM>

.SBTTL	DO RSX RTS AUTO-PATCHING

.ENABL	LSB

.TAG
	TST	PATRSX		;PATCH RSX RTS?
	SKIP	EQ		;NOPE
	BMI	10$		;YEP, BUT NOT SAME AS MONITOR
	MOV	MPTDEV,RSXDEV	;YEP, SAME AS MONITOR
	MOV	MPTPID,RSXPID
	MOV	MPTPID+2,RSXPID+2
	MOV	MPTPID+4,RSXPID+4
	TST	XPTIND		;IS MONITOR MEDIUM MOUNTED NOW?
	BGT	20$		;YEP, ALL SET
10$:	CALL	DODISM		;DISMOUNT ANY PREVIOUS
20$:	MOV	#RSXPID+6,R0	;GET POINTER TO PACK ID
	MOV	#6,R1		;6 CHARS
30$:	CMPB	-(R0),#40	;SPACE?
	BNE	40$		;NO
	CLRB	(R0)		;YES, NULL IT
40$:	MOVB	(R0),RSXID0-1(R1) ;SET ID'S
	MOVB	(R0),RSXID1-1(R1)
	MOVB	(R0),RSXID2-1(R1)
	MOVB	(R0),XPTPID-1(R1)
	MOVB	(R0),XPTID2-1(R1)
	SOB	R1,30$		;LOOP
	TST	XPTIND		;HAS THE MOUNT BEEN DONE ALREADY?
	BNE	90$		;YES
	CALLX	MEDIA,R5,RSXDEV	;FIND THE MEDIUM
	 BR	50$		;DECTAPE
	 BR	60$		;MAGTAPE
	 BR	70$		;SYSTEM DISK
	 ;NOP			;ANY DISK
	MOVB	(R0)+,RSXDK	;DISK, SET NAME
	MOVB	(R0),RSXDK+1
	BATCH
	.MESS
	.ASCII	%$MESSAGE MOUNT THE RSX RTS PATCH FILE DISK "%
RSXID0:	.ASCII	%------" ON A DISK DRIVE%<CR><LF>
	.ASCII	%$MESSAGE READY AND WRITE PROTECT THE DRIVE%<CR><LF>
	.ASCII	%$MOUNT %
RSXDK:	.ASCII	%--:/PHY/VID=%
RSXID1:	.ASCII	%------/NOWRITE %
	MESS.
	BR	80$

GLOBAL	<PATRSX,MPTDEV,RSXDEV,MPTPID,RSXPID>

50$:	BATCH
	.MESS
	.ASCII	%$MESSAGE MOUNT THE RSX RTS PATCH FILE DECTAPE ON A DECTAPE DRIVE%<CR><LF>
	.ASCII	%$MESSAGE SET IT TO "REMOTE" AND "WRITE LOCKED"%<CR><LF>
	.ASCII	%$MOUNT DT:/PHY/NOWRITE %
	MESS.
	BR	80$

60$:	MOVB	(R0)+,RSXMT	;SET NAME
	MOVB	(R0),RSXMT+1
	BATCH
	.MESS
	.ASCII	%$MESSAGE MOUNT THE RSX RTS PATCH FILE MAGTAPE ON A MAGTAPE DRIVE%<CR><LF>
	.ASCII	%$MESSAGE WITH NO "WRITE RING" AND SET TO "ON LINE"%<CR><LF>
	.ASCII	%$MOUNT %
RSXMT:	.ASCII	%--:/PHY/NOWRITE %
	MESS.
	BR	80$

70$:	INC	SYDSTR			;FLAG SY AS THE DISTRO DEVICE
	BATCH				;ASSIGN THE SYSTEM DISK
	.MESS
	.ASCII	%$ASSIGN SY: %
	MESS.
80$:	BATCH
	.MESS
RSXID2:	.ASCII	%------%<CR><LF>
	MESS.
90$:	MOV	PATRSX,XPTIND	;INDICATE WHAT IS NOW MOUNTED
	BATCH
	.MESS
	.ASCII	%$RUN $ONLPAT.SAV%<CR><LF>
	.ASCII	%SYSGEN$$:RSXRTS.CMD%<CR><LF>
	.ASCII	%SYSTEM$$:RSX.RTS%<CR><LF>
	.ASCII	%$ GOSUB 'GAUGE_ROUTINE'%<CR><LF>			;041
	MESS.
	INC	TOTRUN		;INC THE TOTAL NUMBER OF RUNS		;041

.DSABL	LSB

GLOBAL	<PATRSX,RSXNAM>

.SBTTL	DO AUTO-PATCH MEDIA DISMOUNT(S)

.TAG
	CALL	DODISM		;DO ANY REMAINING DISMOUNT
	SKIP			; THEN CONTINUE

.ENABL	LSB

DODISM:	TST	XPTIND		;ANY DISMOUNT TO DO?
	BEQ	10$		;NOPE
	TST	SYDSTR		;IS IT THE SYSTEM DISK
	BNE	5$		;YES
	BATCH			;DO THE DISMOUNT
	.MESS
	.ASCII	%$DISMOUNT %
XPTPID:	.ASCII	%------:%<CR><LF>
	MESS.

5$:	BATCH			;DO THE DEASSIGN
	.MESS
	.ASCII	%$DEASSIGN %
XPTID2:	.ASCII	%------:%<CR><LF>
	MESS.
	CLR	XPTIND		;INDICATE NOTHING MOUNTED NOW
	CLR	SYDSTR		;INDICATE SYSTEM DISK IS NOT DISTRO DEVICE
10$:	RETURN			;EXIT

XPTIND:	.WORD	0		;WHAT IS MOUNTED INDICATOR
SYDSTR:	.WORD	0		;SYSTEM DISK IS DISTRO INDICATOR

.DSABL	LSB

.SBTTL	FINISH UP AND GET OUT

.TAG

ALDONE:									;025

	BATCH			;END THE BATCH STREAM
	.MESS
	.ASCII	%$IF DEFPIP THEN DELETE/COMMAND/SYSTEM PIP%<CR><LF>
	.ASCII	%$!	IF WE DEFINED THE PIP CCL, THEN DELETE IT%<CR><LF>
	.ASCII	%$ _IF ANSI_SCOPE THEN _WRITE/NODEL 0 END_PRMPT%<CR><LF> ;041
	.ASCII	%$EXIT 1%<CR><LF>
	MESS.
	RETURN				;EXIT

	TMPORG	OUTDAT
	.WORD	0			;TERMINATE THE LIST
	UNORG

	TMPORG	CLRTBL
	 .WORD	0			;End the CLRTBL list		;036
	UNORG

.END
