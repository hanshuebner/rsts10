	.INCLUDE /CMN:COMMON/
	.INCLUDE /SGN:SGNCOM/
TITLE	SGNANS,<SYSGEN CONFIGURATION ANSWER PRINTER>,0A,10-MAY-91,JJT/KPH

	.SBTTL	SGNANS EDIT HISTORY
;+
; EDIT	 BY	  DATE			REASON
;
;  00	JJT	19-Apr-84	Subprogram creation
; 001	KPH	25-Sep-84	Remove resident overlay stuff
; 002	JJT	07-Jan-86	V9.3 changes
; 003	KPH	11-Mar-86	Remove "IBM interconnect" question
; 004	JJT	12-Mar-86	Change MSCP question to a yes/no question
;
;			[RSTS V9.6]
;  005  KPH	05-Nov-87	Remove terminal driver stuff
;  006	JJT	03-Mar-88	Remove KMC and statistic questions
;
;			[RSTS V9.7]
;  007	JJT	05-Jan-89	Remove unsupp hardware questions
;-

	
	.MACRO	MOVANS	NAME,MESAGE
GLOBAL	<NAME>
	MOV	#MESAGE+32.,R1		;GET THE ADDRESS OF THE MESSAGE
	MOVB	NAME,(R1)		;MOVE FIRST BYTE OF NAME
	MOVB	NAME+1,1(R1)		;MOVE SECOND BYTE OF NAME
	.ENDM				;END OF MACRO

	DEFORG	Q11COD

MESNUM	=	0
MSGSEG	=	11
TAGNUM	=	0



	.SBTTL	SYSGEN CONFIGURATION ANSWER PRINTER

SGNANS::NOP
	CALL	REGSAV,R5		;SAVE EVERYBODY
	TELL				;PRINT A HEADER
	.MESS
	.ASCII	<CR><LF>
	.ASCII	%The following is a list of the current%<CR><LF>
	.ASCII	%defaults:%<CR><LF>
	.ASCII	<CR><LF><LF>
	MESS.

	MOVANS	ARK11,RK11
	TELL
	.MESS
RK11:	.ASCII	%RK05's ?                        ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ARK11,R2		;GET THE ADDRESS OF THE # OF RK05'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTRL			;YES, MOVE ONTO THE RL02'S
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTRL			;NOTHING THERE; ONTO THE RL02'S
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;MOVE THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	CMP	#1,R2			;IS THERE MORE THAN ONE
	BHIS	PRTRL			;NO, GO PRINT THE RL02'S

	MOVANS	ARKSEK,RKSEK
	TELL
	.MESS
RKSEK:	.ASCII	%Overlapped seek ?               ??%<CR><LF><LF>
	MESS.


PRTRL:	MOVANS	ARL11,RL11
	TELL
	.MESS
RL11:	.ASCII	%RL01/RL02's ?                   ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ARL11,R2		;GET THE ADDRESS OF THE # OF RL01'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTRM			;YES, MOVE ONTO THE RK06'S
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTRM			;NOTHING THERE; ONTO THE RK06'S
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;GET THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	CMP	#1,R2			;IS THERE MORE THAN ONE
	BHIS	PRTRM			;NO, GO PRINT THE RK06'S

	MOVANS	ARLSEK,RLSEK
	TELL
	.MESS
RLSEK:	.ASCII	%Overlapped seek ?               ??%<CR><LF><LF>
	MESS.

PRTRM:	MOVANS	ARK06,RK06
	TELL
	.MESS
RK06:	.ASCII	%RK06/RK07's ?                   ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ARK06,R2		;GET THE ADDRESS OF THE # OF RK06'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTRR			;YES, MOVE ONTO THE RM03'S	;007
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTRR			;NOTHING THERE; ONTO THE RM03'S	;007
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;GET THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	CMP	#1,R2			;IS THERE MORE THAN ONE
	BHIS	PRTRR			;NO, GO PRINT THE RM03'S	;007

	MOVANS	ARMSEK,RMSEK
	TELL
	.MESS
RMSEK:	.ASCII	%Overlapped seek ?               ??%<CR><LF><LF>
	MESS.

PRTRR:	MOVANS	ARM03,RM03
	TELL
	.MESS
RM03:	.ASCII	%Disks on DR controller ?        ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ARM03,R2		;GET THE ADDRESS OF THE # OF RM03'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTRB			;YES, MOVE ONTO THE RP04'S
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTRB			;NOTHING THERE; ONTO THE RP04'S
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;GET THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	CMP	#1,R2			;IS THERE MORE THAN ONE
	BHIS	PRTRB			;NO, GO PRINT THE RP04'S

	MOVANS	ARRSEK,RRSEK
	TELL
	.MESS
RRSEK:	.ASCII	%Overlapped seek ?               ??%<CR><LF><LF>
	MESS.

PRTRB:	MOVANS	ARP04,RP04
	TELL
	.MESS
RP04:	.ASCII	%Disks on DB controller ?        ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ARP04,R2		;GET THE ADDRESS OF THE # OF RP04'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTMS			;YES, MOVE ONTO THE MSCP'S
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTMS			;NOTHING THERE; ONTO THE MSCP'S
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;GET THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	CMP	#1,R2			;IS THERE MORE THAN ONE
	BHIS	PRTMS			;NO, GO PRINT THE MSCP'S

	MOVANS	ARBSEK,RBSEK
	TELL
	.MESS
RBSEK:	.ASCII	%Overlapped seek ?               ??%<CR><LF><LF>
	MESS.

PRTMS:	MOVANS	AMSCP,MSCP
	TELL
	.MESS
MSCP:	.ASCII	%MSCP support ?                  ??%<CR><LF><LF>	;004
	MESS.

	MOVANS	ATU16,TU16
	TELL
	.MESS
TU16:	.ASCII	%TU16/TE16/TU45/TU77's ?         ??%<CR><LF><LF>
	MESS.

	MOVANS	ATU10,TU10
	TELL
	.MESS
TU10:	.ASCII	%TU10/TE10/TS03's ?              ??%<CR><LF><LF>
	MESS.

	MOVANS	ATS11,TS11
	TELL
	.MESS
TS11:	.ASCII	%TS11/TSV05/TU80's ?             ??%<CR><LF><LF>
	MESS.

	MOVANS	ATMSCP,TMSCP
	TELL
	.MESS
TMSCP:	.ASCII	%TMSCP tape drives ?             ??%<CR><LF><LF>
	MESS.

	MOVANS	ALP,LP
	TELL
	.MESS
LP:	.ASCII	%Printers ?                      ??%<CR><LF><LF>
	MESS.

	MOVANS	ARX01,RX01
	TELL
	.MESS
RX01:	.ASCII	%RX01/RX02's ?                   ??%<CR><LF><LF>
	MESS.

	MOVANS	ACR,CDR
	TELL
	.MESS
CDR:	.ASCII	%CR11/CM11 card reader ?         ??%<CR><LF><LF>
	MESS.

	MOVANS	ACD,CD
	TELL
	.MESS
CD:	.ASCII	%CD11 card reader ?              ??%<CR><LF><LF>
	MESS.
	CMPB	#'Y,ACR			;CHECK FOR A CR11 CARD READER
	BEQ	PCDCOD			;YES, GO PRINT THE CARD DECODE TABLE
	CMPB	#'Y,ACD			;CHECK FOR A CD11 CARD READER
	SKIP	NE			;NO CARD READER, GO HANDLE PAPER TAPE
PCDCOD:	MOV	#CDCOD+30.,R1		;GET THE ADDRESS OF THE TEXT
	CMPB	#<CR>,ACDCOD+3		;IS THE TEXT ONLY 3 CHARACTERS LONG
	BNE	PCDCD2			;NO, LEAVE THE STARTING POSITION ALONE
	MOVB	#40,(R1)+		;MOVE THE STARTING POSITION BY ONE
PCDCD2:	MOVB	ACDCOD,(R1)+		;MOVE IN THE FIRST CHAR OF ACDCOD
	MOVB	ACDCOD+1,(R1)+		;MOVE IN THE SECOND CHARACTER
	MOVB	ACDCOD+2,(R1)+		;MOVE IN THE THIRD CHARACTER
	MOVB	ACDCOD+3,(R1)+		;MOVE IN THE FOURTH CHARACTER
	TELL
	.MESS
CDCOD:	.ASCII	%Card decode ?                 ????%<CR><LF><LF>
	MESS.

	.TAG
	MOVANS	ADMC11,DMC11
	TELL
	.MESS
DMC11:	.ASCII	%DMC11's/DMR11's ?               ??%<CR><LF><LF>
	MESS.

	MOVANS	ADMP11,DMP11
	TELL
	.MESS
DMP11:	.ASCII	%DMP11's/DMV11's ?               ??%<CR><LF><LF>
	MESS.

	CLR	R1			;CLEAR WHERE WE STORE THE NUMBER
	MOV	#ADMP11,R2		;GET THE ADDRESS OF THE # OF DMP11'S
	CMPB	#'?,(R2)		;IS THE NUMBER UNKNOWN?
	BEQ	PRTKMC			;YES, MOVE ONTO THE KMC11'S
	MOVB	(R2),R1			;GET THE FIRST CHARACTER
	SWAB	R1			;PUT IT IN THE HIGH BYTE
	BISB	1(R2),R1		;GET THE SECOND CHARACTER
	BIC	#"00,R1			;CONVERT FROM ASCII TO BINARY
	BEQ	PRTKMC			;NOTHING THERE; ONTO THE KMC11'S
	CLR	R2			;INIT THE COUNTER
	MOVB	R1,R2			;MOVE THE UNITS TO R2
	CLRB	R1			;CLEAR THE UNITS FROM R1
	SWAB	R1			;GET THE 10'S TO THE LOW BYTE
	MUL	#10.,R1			;MAKE IT INTO THE ACTUAL NUMBER
	ADD	R1,R2			;ADD IN THE 10'S
	MOV	R2,NUMINT		;STORE THE NUMBER OF INTERFACES

	CLR	MXUNIT			;START AT UNIT 0
DPUNTL:	MOV	MXUNIT,R2		;GET THE CURRENT UNIT
	CMP	R2,NUMINT		;ALL DONE?
	BEQ	PRTKMC			;YES
	CALL	CHGDEC			;MAKE THE NUMBER ASCII
	MOV	R2,DPUNTN		;MOVE IT IN
	MOV	MXUNIT,R1		;GET THE CURRENT UNIT AGAIN
	MUL	#3,R1			;MULTIPLY BY 3 TO GET THE OFFSET
	ADD	#XD0UN,R1		;ADD IN THE ADDRESS OF THE XD TABLE
	MOVB	(R1),DPUNTN+20.		;MOVE IN THE FIRST CHARACTER
	MOVB	1(R1),DPUNTN+21.	;MOVE IN THE SECOND CHARACTER

	TELL
	.MESS
	.ASCII	%DMP11  unit %
DPUNTN:	.ASCII	%00 tributaries ?    ??%<CR><LF><LF>
	MESS.

	INC	MXUNIT			;MOVE ON TO THE NEXT UNIT
	BR	DPUNTL			;DO THE NEXT UNIT

PRTKMC:	MOVANS	ASILNK,SILNK						;006
	TELL
	.MESS
SILNK:	.ASCII	%Simultaneous IBM links ?        ??%<CR><LF><LF>
	MESS.

	.TAG
	MOVANS	ARJ278,RJ278
	CMPB	#'Y,ARJ278			;WAS THERE RJ2780 SUPPORT
	BNE	PRTRJ				;NO, DON'T TEST FOR /Q OR /P
	CMPB	#'Y,AQRJ27			;WAS IT THE Q-BUS VERSION
	BNE	CHKDP				;NO, GO CHECK FOR DP11
	MOV	#RJ278+33.,R1			;GET THE ADDRESS OF THE TEXT
	MOVB	#'/,(R1)+			;MOVE IN FIRST HALF OF "/Q"
	MOVB	#'Q,(R1)			;MOVE IN THE SECOND HALF
	BR	PRTRJ				;GO PRINT OUT THE TEXT

CHKDP:	CMPB	#'P,ARJDEV+1			;IS IT THE DEVICE DP11
	BNE	PRTRJ				;NO, GO PRINT OUT THE TEXT
	MOV	#RJ278+33.,R1			;GET THE ADDRESS OF THE TEXT
	MOVB	#'/,(R1)+			;MOVE IN FIRST HALF OF "/P"
	MOVB	#'P,(R1)			;MOVE IN THE SECOND HALF

PRTRJ:	TELL
	.MESS
RJ278:	.ASCII	%RJ2780 support ?                ?? %<CR><LF><LF>
	MESS.

	MOVANS	AJBMAX,JBMAX
	TELL
	.MESS
JBMAX:	.ASCII	%Maximum jobs ?                  ??%<CR><LF><LF>
	MESS.

	MOV	#SBUF+31.,R1			;GET THE ADDRESS OF THE TEXT
	MOVB	ASBUF+1,(R1)+			;MOVE IN FIRST CHAR OF ASBUF
	MOVB	ASBUF+2,(R1)+			;MOVE IN SECOND CHAR OF ASBUF
	MOVB	ASBUF+3,(R1)			;MOVE IN THIRD CHAR OF ASBUF
	TELL
	.MESS
SBUF:	.ASCII	%Small buffers ?                ???%<CR><LF><LF>
	MESS.

	MOVANS	AEMTLG,EMTLG
	TELL
	.MESS
EMTLG:	.ASCII	%EMT Logging ?                   ??%<CR><LF><LF>
	MESS.

	CALL	REGRES,R5		;RESTORE EVERYBODY
	RETURN				;GO BACK TO THE ROOT SEGMENT
	TMPORG	Q11DAT
NUMINT:	.WORD	0			;TEMP AREA FOR NUMBER OF INTERFACES
MXUNIT:	.WORD	0			;TEMP AREA FOR CURRENT UNIT NUMBER
	UNORG

GLOBAL	<CHGDEC,XD0UN,ACDCOD,ASBUF,AQRJ27,ARJDEV>			;005
GLOBAL	<REGSAV,REGRES>

	.END
