	.IIF NDF S$$GTB	.NLIST
	.IF	DF	S$$GTB

	.TITLE	SGTBL

	.IFF

	.TITLE	SEGDF

	.ENDC

	.IDENT	/09.05/
;
; COPYRIGHT (c)	1985 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED
; OR COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA 16-MAY-74
;
; MODIFIED FOR RSX-11M/M-PLUS V4.1/V2.1 BY:
;
;	C. B. Petrovic
;	J. M. Salman
;
;
; MODIFIED BY:
;
;	C. B. PETROVIC	14-NOV-86	09.05
;		CBP200	ADD OPTION 'RNDSEG'
;
;
;
;+
;
; LOCAL MACROS
;
; DEFINE SEGMENT DESCRIPTOR OFFSETS, LENGTHS AND FLAGS
;
;SEGDF$ [DEF$G]
;
; WHERE:
;
;	DEF$G CAUSES SEGMENT DESCRIPTOR PARAMETERS TO BE
;	DEFINED GLOBALLY.
;
; THE FOLLOWING OFFSETS ARE SPECIFIED:
;
; TASK-BUILDER SEGMENT DESCRIPTOR OFFSETS:
;
;
;	S$GSTS = SEGMENT STATUS (LOW BYTE). HIGH BYTE IS RESERVED.
;
;		*** NOTE ***
;
; THE FOLLOWING TWO LOCATIONS MUST BE ADJACENT AND IN THE SEQUENCE
; SHOWN BELOW
;
;	S$GBLK = DISK BLOCK ADDRESS OF SEGMENT RELATIVE TO HEADER
;	S$GBRO = R-O DISK BLOCK ADDRESS OF SEGMENT RELATIVE TO HEADER
;	S$GLDA = VIRTUAL LOAD ADDRESS OF SEGMENT
;	S$GLNG = LENGTH OF SEGMENT IN BYTES
;	S$GUP  = LINK UP
;	S$GDWN = LINK DOWN
;	S$GNXT = LINK NEXT (LINK RIGHT)
;	S$GPRV = LINK PREVIOUS (LINK LEFT)
;	S$GNME = TWO WORDS CONTAINING RAD. 50 SEGMENT NAME
;	S$GWDP = VIRTUAL ADDRESS OF WINDOW BLOCK DESCRIPTOR.
;	S$GCST = CONTROL SECTION TABLE LIST. THE FIRST WORD CONTAINS
;		 THE NUMBER OF SUB-LISTHEADS WHICH ARE IN THE FOLLOW-
;		 ING WORDS.
;
;		*** NOTE ***
;
; THE FOLLOWING TWO LOCATIONS MUST BE ADJACENT AND IN THE SEQUENCE
; SHOWN BELOW.
;
;	S$GRW = LENGTH OF READ/WRITE MEMORY ALLOCATION IN BYTES
;	S$GRO = LENGTH OF READ/ONLY MEMORY ALLOCATION IN BYTES
;	S$GNTB = NUMBER OF GLOBAL SYMBOL ENTRIES IN SEGMENT
;	S$GSTB = SYMBOL TABLE LIST. THE FIRST WORD CONTAINS THE
;		 NUMBER OF SUBLISTHEADS WHICH ARE IN THE FOLLOW-
;		 ING WORDS.
;	S$GUND = COUNT OF UNDEFINED SYMBOLS WITHIN THE SEGMENT
;	S$GVAD = HIGHEST VIRTUAL ADDRESS IN THE SEGMENT
;	S$GELT = TWO-WORD ELEMENT DESCRIPTOR LISTHEAD
;	S$GSPL = SUPERVISOR LOAD LISTHEAD (2 WORDS) AND COUNT OF
;		 ENTRIES (1 WORD)
;	S$GATL = AUTOLOAD LISTHEAD (2 WORDS) AND COUNT OF AUTO-
;		 LOAD ENTRIES (1 WORD)
;	S$GMEM = HIGHEST PHYSICAL ADDRESS IN SEGMENT
;	S$GROB = BASE VIRTUAL ADDRESS OF READ/ONLY ROOT
;
;		*** NOTE ***
;
; THE FOLLOWING 10 LOCATIONS MUST BE ADJACENT
;
;	S$GSUP = START OF SEGMENT SUPERVISOR MODE VECTORS RELATIVE TO
;		 SUPERVISOR LOAD SECTION.
;	S$GSUP+2 = VIRTUAL ADDRESS OF SUPERVISOR LOAD SECTION
;
;	S$GAUT = START OF SEGMENT AUTOLOAD VECTORS RELATIVE TO AUTOLOAD
;		 SECTION.
;	S$GAUT+2 = VIRTUAL ADDRESS OF AUTOLOAD SECTION
;	S$GREG = START OF REGION DESCRIPTORS RELATIVE TO START OF REGION
;		 DESCRIPTOR SECTION
;	S$GREG+2 = VIRTUAL ADDRESS OF REGION DESCRIPTOR SECTION
;	S$GSEG = START OF SEGMENT DESCRIPTORS RELATIVE TO START OF SEGMENT
;		 DESCRIPTOR SECTION
;	S$GSEG+2 = VIRTUAL ADDRESS OF SEGMENT DESCRIPTOR SECTION
;	S$GWND = START OF WINDOW DESCRIPTORS RELATIVE TO START OF WINDOW
;		 DESCRIPTOR SECTION
;	S$GWND+2 = VIRTUAL ADDRESS OF WINDOW DESCRIPTOR SECTION
;
;	S$GSEQ = TWO-WORD SEQUENCE ALLOCATION LISTHEAD
;	S$GLGH = LENGTH OF SEGMENT DESCRIPTOR
;
;
;
; THE FOLLOWING LOCATIONS ARE SPECIFICALLY FOR AN I/D TASK AND WILL BE
; ALLOCATED ONLY IF THE USER IS BUILDING SUCH A TASK. SOME OF THE ORIGINAL
; OFFSETS THAT WERE INCLUDED FOR ALL TASKS REGARDLESS OF WHETHER OR NOT
; AN I/D TASK WAS BEING BUILT HAVE BEEN REMOVED FROM THE ORIGINAL CODE
; THAT WAS DISTRIBUTED WITH RSX-11M V4.0 AND RSX-11M-PLUS V2.0. THESE FEW
; OFFSETS ARE NOW AGGLOMERATED WITH THE NEWLY DEFINED OFFSETS NECESSARY
; TO SUPPORT OVERLAID I/D TASKS. IN ESSENCE, THE SEGMENT DESCRIPTOR WILL
; REVERT BACK TO THE LENGTH IT WAS WHEN RSX-11M V3.2 WAS SHIPPED.
;
;	S$GBWD = DISK BLOCK ADDRESS OF THE D-SPACE SEGMENT RELATIVE TO HEADER *
;	S$GBOD = R/O DATA DISK BLOCK ADDRESS OF D-SPACE SEGMENT RELATIVE TO
;		 HEADER
;	S$GDLD = TASK-VIRTUAL LOAD ADDRESS OF D-SPACE SEGMENT *
;	S$GDLN = LENGTH OF D-SPACE SEGMENT IN BYTES *
;	S$GDWP = VIRTUAL ADDRESS OF D-SPACE WINDOW BLOCK POINTER *
;	S$GRWD = READ/WRITE DATA MEMORY ALLOCATION IN BYTES
;	S$GROD = READ-ONLY DATA MEMORY ALLOCATION IN BYTES
;	S$GDVA = HIGHEST D-SPACE VIRTUAL ADDRESS IN SEGMENT *
;	S$GDME = HIGNEST D-SPACE PHYSICAL ADDRESS IN SEGMENT *
;	S$GBOD = BASE VIRTUAL ADDRESS OF READ-ONLY DATA ROOT
;	S$GDAL = START OF D-SPACE AUTOLOAD VECTORS RELATIVE TO AUTOLOAD
;		 SECTION *
;	S$GDAL+2 = TASK-VIRTUAL ADDRESS OF D-SPACE AUTOLOAD SECTION $$ALVD *
;	S$GDWD = START OF D-SPACE WINDOW DESCRIPTORS RELATIVE TO
;		 START OF WINDOW DESCRIPTOR SECTION $$WNDS *
;	S$GDWD+2 = TASK-VIRTUAL ADDRESS OF WINDOW DESCRIPTOR SECTION $$WNDS *
;	S$GDLG = LENGTH OF THE D-SPACE SEGMENT DESCRIPTOR EXTENSION *
;
;
;	NOTE:	THE DEFINITIONS FOLLOWED BY '*' DENOTE NEW OFFSETS RATHER THAN
;		THOSE THAT WERE MOVED FROM THE MAIN BODY OF THE SEGMENT
;		DESCRIPTOR.
;
;
; SEGMENT DESCRIPTOR FLAGS (IN S$GSTS):
;
;		*** NOTE ***
;
; THE POSITION OF THE FOLLOWING FOUR FLAGS MUST CORRESPOND TO THE LOCATION
; OF THE TASK-RESIDENT FLAG BITS.
;
;
;	SG$DES = SEGMENT DESCRIPTOR FLAG (ALWAYS SET)
;	SG$MEM = SEGMENT IN MEMORY (1 = NO, 0=IN MEMORY)
;	SG$DSK = SEGMENT HAS DISK ALLOCATION (1 = NO, 0 = YES)
;	SG$RES = SEGMENT IS RESIDENT OVERLAY (1 = YES, 0 = NO)
;
;	SG$PHY = SEGMENT HAS PHYSICAL MEMORY ALLOCATION(1 = YES, 0=NO)
;	SG$RO = SEGMENT IS READ-ONLY (1 = YES, 0 = NO)
;	SG$GBL = SEGMENT NAME IS GLOBAL (1 = YES, 0 = NO)
;
;	SG$ATL = SEGMENT IS AUTOLOADABLE (1=YES, 0=NO)
;	SG$RND = SEGMENT IS TO BE ROUNDED UP TO NEXT APR (1=YES, 0=NO)
;
; TASK-RESIDENT SEGMENT DESCRIPTOR OFFSETS:
;
;	T$RBLK = DISK BLOCK ADDRESS(BITS 11 - 0)
;	        SEGMENT FLAGS(BITS 15 - 12)
;	T$RLDA = VIRTUAL LOAD ADDRESS OF SEGMENT
;	T$RLNG = LENGTH OF SEGMENT IN BYTES
;	T$RUP  = LINK UP
;	T$RDWN = LINK DOWN
;	T$RNXT = LINK NEXT
;	T$RNME = SEGMENT NAME (2-WORD RADIX 50)
;	T$RWDP = TASK-RESIDENT WINDOW BACKPOINTER
;
; SPACE FOR THE SEGMENT NAME IS ONLY ALLOCATED WHEN A REFERENCE
; TO '$LOAD' IS PRESENT OR THE STRUCTURE CONTAINS RESIDENT SEGMENTS.
; SPACE FOR T$RWND IS ONLY ALLOCATED WHEN THE STRUCTURE CONTAINS RESI-
; DENT SEGMENTS.
;
; TASK-RESIDENT SEGMENT DESCRIPTOR EXTENSION OFFSETS FOR I/D TASKS:
;
;	T$DBLK = D-SPACE DISK BLOCK ADDRESS (BITS 11 - 0)
;	T$DLDA = D-SPACE VIRTUAL LOAD ADDRESS
;	T$DLNG = D-SPACE SEGMENT LENGTH IN BYTES
;	T$DWDP = D-SPACE WINDOW DESCRIPTOR POINTER
;
; WHEN THE D-SPACE EXTENSION IS ALLOCATED, THE SEGMENT NAME AND I-SPACE
; WINDOW POINTER (T$RNME AND T$RWDP) ARE ALWAYS ALLOCATED AS WELL, EVEN
; IF THE TASK DOES NOT USE MANUAL LOAD OR MEMORY RESIDENT OVERLAYS.
;
; TASK-RESIDENT SEGMENT DESCRIPTOR FLAGS (IN T$RBLK BITS 15 - 12):
;
;	TR$DES = TASK-RESIDENT DESCRIPTOR FLAG (ALWAYS SET)
;	TR$MEM = SEGMENT IS IN MEMORY (1 = NO, 0 = YES)
;	TR$DSK = SEGMENT HAS DISK ALLOCATION (1 = NO, 0 = YES)
;	TR$LOD = SEGMENT IS LOADED INTO MEMORY (1 = YES, 0 = NO)
;
; TASK-RESIDENT SEGMENT DESCRIPTOR D-SPACE FLAG (IN T$RLDA BIT 0):
;
;	TR$DSP = SEGMENT HAS D-SPACE (1 = YES, 0 = NO)
;
;-
;

	.MACRO	SEGDF$,$$$GBL
	.ASECT
.=0
S$GSTS:	.BLKW	1
S$GBLK:	.BLKW	1
S$GBRO:	.BLKW	1
S$GLDA:	.BLKW	1
S$GLNG:	.BLKW	1
S$GUP:	.BLKW	1
S$GDWN:	.BLKW	1
S$GNXT:	.BLKW	1
S$GPRV:	.BLKW	1
S$GNME:	.BLKW	2
S$GWDP:	.BLKW	1

	.IF DF	R$$CST

S$GCST:	.BLKW	33.

	.IFF

S$GCST:	.BLKW	2.

	.ENDC	;R$$CST
S$GRW:	.BLKW	1
S$GRO:	.BLKW	1
S$GNTB:	.BLKW	1
S$GSTB:	.BLKW	33.
S$GUND:	.BLKW	1
S$GVAD:	.BLKW	2
S$GELT:	.BLKW	2
S$GSPL:	.BLKW	3
S$GATL:	.BLKW	3
S$GMEM:	.BLKW	2
S$GROB:	.BLKW	1
S$GSUP:	.BLKW	2
S$GAUT:	.BLKW	2
S$GREG:	.BLKW	2
S$GSEG:	.BLKW	2
S$GWND:	.BLKW	2
S$GSEQ:	.BLKW	2
S$GLGH:
S$GBWD:
S$GDBK:	.BLKW	1
S$GBOD:	.BLKW	1
S$GDLD:	.BLKW	1
S$GDLN:	.BLKW	1
S$GDWP:	.BLKW	1
S$GRWD:	.BLKW	1
S$GROD:	.BLKW	1
S$GDVA:	.BLKW	2
S$GDME:	.BLKW	2
S$GODB:	.BLKW	1
S$GDAL:	.BLKW	2
S$GDWD:	.BLKW	2
S$GDLG = .-S$GLGH
SG$RND=1000
SG$ATL=400
SG$DES=200
SG$DSK=100
SG$LOD=040
SG$MEM=020
SG$RO=010
SG$RES=004
SG$PHY=002
SG$GBL=001
.=0
T$RBLK:	.BLKW	1
T$RLDA:	.BLKW	1
T$RLNG:	.BLKW	1
T$RUP:	.BLKW	1
T$RDWN:	.BLKW	1
T$RNXT:	.BLKW	1
T$RNME:	.BLKW	2
S$ZSEG:
T$RWDP:	.BLKW	1
T$DBLK:	.BLKW	1
T$DLDA:	.BLKW	1
T$DLNG:	.BLKW	1
T$DWDP:	.BLKW	1
S$ZIDX = T$DWDP+2-T$DBLK
TR$DES=100000
TR$MEM=010000
TR$DSK=040000
TR$LOD=020000
TR$DSP=000001
	.PSECT
	.IF	IDN	<$$$GBL>,<DEF$G>
	.GLOBL	SG$DES,SG$DSK,SG$GBL,SG$LOD,SG$MEM,SG$PHY,SG$RES,SG$RO
	.GLOBL	SG$ATL,SG$RND
	.GLOBL	TR$DES,TR$DSK,TR$LOD,TR$MEM
	.GLOBL	TR$DSP
	.GLOBL	S$ZIDX
	.GLOBL	S$GSTS,S$GBLK,S$GBRO,S$GLDA,S$GLNG,S$GUP,S$GDWN,S$GNXT
	.GLOBL	S$GPRV,S$GNME,S$GCST,S$GRO,S$GRW,S$GSTB,S$GUND
	.GLOBL	S$GVAD,S$GELT,S$GSPL,S$GATL,S$GMEM,S$GROB,S$GSEG,S$GSEQ
	.GLOBL	S$GLGH,S$GREG,S$GWND,S$GSUP,S$GAUT,S$GWDP,S$GNTB
	.GLOBL	S$GBWD
	.GLOBL	S$GDBK,S$GBOD,S$GDLD,S$GDLN,S$GDWP,S$GRWD,S$GROD
	.GLOBL	S$GDVA,S$GDME,S$GODB,S$GDAL,S$GDWD,S$GDLG
	.GLOBL	S$ZSEG
	.ENDC
	.MACRO	SEGDF$,A
	.ENDM
	.ENDM

	.IF	DF	S$$GTB

	SEGDF$	DEF$G

	.IFF

	SEGDF$

	.ENDC

	.IIF DF S$$GTB	.END

	.IIF NDF S$$GTB	.LIST
