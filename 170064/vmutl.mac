	.TITLE	VMUTL
	.IDENT	/03.01/
;
;		COPYRIGHT (c) 1983 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERRED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; C. MONIA 03-MAR-74
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	03.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;
; VIRTUAL MEMORY UTILITIES
;
;+
; **-$CVLOK-SUBROUTINE TO CONVERT AND LOCK A PAGE IN MEMORY
;
; INPUTS:
;
;	R1=VIRTUAL ADDRESS TO BE CONVERTED
;
; OUTPUTS:
;
;	R0=CONVERTED (REAL) ADDRESS
;	R1=VIRTUAL ADDRESS
;	   SPECIFIED PAGE IS LOCKED IN CORE
;
; THE CONTENTS OF R2 ARE PRESERVED
;-
	PURE.I			; READ-ONLY I-SPACE

$CVLOK::			;
	MOV	R2,-(SP)	; SAVE R2
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CALL	$LCKPG		; LOCK PAGE IN MEMORY
	MOV	(SP)+,R2	; RESTORE R2
	RETURN			;

;+
; **-$LNKVM-SUBROUTINE TO LINK AN ITEM TO A LIST IN VIRTUAL STORE
;
;
; THIS ROUTINE IS CALLED TO LINK AN ITEM TO A LIST IN VIRTUAL STORE.
; THE LISTHEAD IS ASSUMED TO HAVE THE FOLLOWING FORMAT:
;
;	LSTHD:	.WORD	FIRST	; POINTER TO FIRST (0 IF NONE)
;		.WORD	LAST	; POINTER TO LAST (LISTHEAD IF NONE)
;
; INPUTS:
;
;	R0=VIRTUAL LISTHEAD ADDRESS
;	R1=VIRTUAL ADDRESS OF ITEM TO BE LINKED
;	R2=REAL OFFSET OF LINK TO NEXT
;
; OUTPUTS:
;
;	THE ITEM IS LINKED AT THE END OF THE SPECIFIED
;	LIST. THE OLD LAST ITEM IS WRITE MARKED.
;
; ALL REGISTER CONTENTS ARE PRESERVED
;-
	PURE.I			; READ-ONLY I-SPACE

$LNKVM::			;
	SAVVR			; SAVE VOLATILE REGISTERS

;
; AT THIS POINT THE STACK CONTAINS THE FOLLOWING:
;
;	SP:	ADDRESS OF REGISTER RESTORE ROUTINE
;	SP+2:	SAVED R0-VIRTUAL ADDRESS OF LISTHEAD
;	SP+4:	SAVED R1-VIRTUAL ADDRESS OF NEW LAST
;	SP+6:	SAVED R2-REAL OFFSET OF LINK-TO-NEXT
;

	INC	R0		; POINT TO SECOND WORD OF VIRTUAL LISTHEAD
	MOV	R0,R1		; SET VIRTUAL ADDRESS
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CALL	$WRMPG		; WRITE MARK THE PAGE
	MOV	(R0),R1		; GET VIRTUAL ADDRESS OF LAST
	MOV	4(SP),(R0)	; SET NEW LAST
	CMP	R1,2(SP)	; LIST EMPTY?
	BNE	10$		; IF NE NO
	MOV	4(SP),-(R0)	; SET THIS ENTRY AS FIRST
	BR	20$		;
10$:				;
	CALL	$CVRL		; CONVERT OLD LAST TO REAL
	CALL	$WRMPG		; WRITE-MARK PAGE
	ADD	6(SP),R0	; POINT TO REAL ADDRESS OF NEXT LINK
	MOV	4(SP),(R0)	; SET NEW LAST
20$:				;
	RETURN			;

;+
; **-$GNVI-SUBROUTINE TO FETCH NEXT ITEM FROM A LINKED LIST IN VIRTUAL STORE
;
; INPUTS:
;
;	R1=VIRTUAL ADDRESS OF CURRENT ITEM
;	R2=REAL OFFSET OF LINK TO NEXT.
;
; OUTPUTS:
;
;	C-CLEAR
;	R0=REAL ADDRESS OF NEXT ITEM
;	R1=VIRTUAL ADDRESS OF NEXT ITEM
;
;	C-SET
;
;	NO MORE ITEMS IN LIST
;	R0,R1 CLEARED
;-
	PURE.I			; READ-ONLY I-SPACE

$GNVI::				;
	CLC			; CLEAR CARRY
	ROR	R2		; CONVERT REAL OFFSET TO VIRTUAL
	ADD	R2,R1		; COMPUTE VIRTUAL ADDRESS OF LINK NEXT
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	MOV	(R0),R1		; GET VIRTUAL ADDRESS OF NEXT
	SEC			; ASSUME NO MORE ENTRIES
	MOV	R1,R0		; COPY VIRTUAL ADDRESS (MAY BE ZERO)
	BEQ	10$		; IF EQ, NO MORE ENTRIES
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CLC			; SET SUCCESS
10$:				;
	RETURN			;

	.END

