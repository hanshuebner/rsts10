	.TITLE	ALALO
	.IDENT	/08.03/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA 17-MAR-74
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	08.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	4-MAY-82	08.02
;		CBP050		CONVERT TO MODIFIED FORMAT AUTOLOAD VECTOR
;				GENERATION TO FACILITATE I/D AUTOLOAD
;				SUPPORT AS WELL AS SELECTIVE INCLUSION OF
;				ONLY THOSE AUTOLOADABLE SYMBOLS ACTUALLY
;				REFERENCED BY THE USER TASK.
;
;	C. B. PETROVIC	7-NOV-83	08.03
;		CBP114		ADD TRACE OF SYMBOL ENTRY AND/OR
;				SELECTED VIRTUAL MEMORY PAGES AND
;				INSERT 'BPT' TO TRAP THE UNLIKLY 
;				POSSIBILITY OF USING A V.A. OF
;				ZERO FOR THE AUTOLOAD SYMBOL
;
;
;
;
; AUTOLOAD VECTOR ALLOCATION
;
;
;+
; **-$ALALO-AUTOLOAD VECTOR ALLOCATION
;
; THIS ROUTINE IS CALLED IN PHASE 4 TO ASSIGN ADDRESSES TO
; ALL AUTOLOAD VECTORS.
;
; INPUTS:
;
;	NONE.
;
; OUTPUTS:
;
;	ALL AUTOLOAD VECTORS ARE ASSIGNED ABSOLUTE ADDRESSES.
;-

	.IF DF D$ALAL & D$TRAC

	S$YLNK	=	0	; Local definition

	.ENABL	LC
;
	.PSECT	TRPT$D,RO,D

$TRPS0:	.WORD	-1		; Phase on which to dump symbol data
$TRSY0:	.WORD	0		; Real memory address of symbol
$TRSM0:				; Reference label...
;
; The following offsets define the basic symbol table entry.
;
	TRC S$YLNK,^/%NS$YLNK - link to next symbol................%P%N/
	TRC S$YM,^/S$YM -     symbol name......................%2R%N/
	TRC S$YFLG,^/S$YFLG - symbol flags byte..................%P%N/
	TRC S$YVAL,^/S$YVAL - symbol value.......................%P%N/
	TRC S$YCMT,^/S$YCMT - control section entry address......%P%N/
	TRC S$YSEG,^/S$YSEG - address of defining segment........%P%N/

	.PSECT	TRPT$D,RO,D
	.WORD	-1		; Flag the end of the list

	.PSECT	TRPT$D,RO,D

$TRPS1:	.WORD	-1		; Phase on which to dump symbol data
$TRSY1:	.WORD	0		; Real memory address of symbol
$TRSM1:				; Reference label...
;
; The following offsets define the symbol table entry extension for
; autoloadable symbols originating from an overlaid super-mode library.
;
	TRC S$YVOX,^/S$YVOX - same as S$YVOF,but for super-mode..%P%N/
	TRC S$YCVX,^/S$YCVX - pseudo-indirect symbol table entry.%P%N/

	.PSECT	TRPT$D,RO,D
	.WORD	-1		; Flag the end of the list

	.PSECT	TRPT$D,RO,D

$TRPS2:	.WORD	-1		; Phase on which to dump symbol data
$TRSY2:	.WORD	0		; Real memory address of symbol
$TRSM2:				; Reference label...
;
; The following offsets define the symbol table entry extension for
; autoloadable symbols originating from an overlaid library.
;
	TRC S$YVOF,^/S$YVOF - offset value into $$ALVC...........%P%N/
	TRC S$YCVT,^/S$YCVT - pseudo-indirect symbol table entry.%P%N/

	.PSECT	TRPT$D,RO,D
	.WORD	-1		; Flag the end of the list

		.IF DF D$ALA0

	.PSECT	TRPT$D,RO,D

$TRWPH::.WORD	-1		; Phase on which to dump the window blk	
$TRWCS:	.WORD	0		; Real memory address of current window	
$TRWIN:				; Reference label...
;
	TRC	W.NID,^"%NWindow ID/Base APR   - %P - W.NID/W.NAPR%N"
	TRC	W.NBAS,^/Base virtual address - %P - W.NBAS%N/
	TRC	W.NSIZ,^/Window size (64b blks)-%P - W.NSIZ%N/
	TRC	W.NRID,^/Region ID            - %P - W.NRID%N/
	TRC	W.NOFF,^/Offset in partition  - %P - W.NOFF%N/
	TRC	W.NLEN,^/Length to map        - %P - W.NLEN%N/
	TRC	W.NSTS,^/Window status word   - %P - W.NSTS%N/
	TRC	W.NLGH,^/Window flags word    - %P - W.NLGH%N/
	TRC	W$NREG,^/Address of reg. desc - %P - W$NREG%N/
;
	.PSECT	TRPT$D,RO,D
	.WORD	-1		; Flag the end of the list
;

		.ENDC	; D$ALA0

;
	.ENDC	; D$ALAL & D$TRAC

	PURE.I			; READ-ONLY I-SPACE


	.ENABL	LSB

$ALALO::

	.IF DF D$ALAL & D$VMDP

	MOV	$PHASE,$VMPHZ	; SET TRACE ON...
	MOV	#0,$VMSEG	; ...FOR THE ROOT SEGMENT'S...
	BIS	#100000,$VMPAG	; ...VIRTUAL PAGE REQUESTS...
	MOV	#$ALALO,$VMIDN	; ...AND SET THE IDENTIFIER

		.IFTF	; D$ALAL & D$VMDP

	MOV	#ALALO,R0	; SET ADDRESS OF PROCESSOR FOR PHASE 
				; CONTROL ROUTINE
	CALL	$PCTRL		; PROCESS ALL SEGMENTS

		.IFT	; D$ALAL & D$VMDP

	MOV	#-1,$VMPHZ	; SET TRACE OFF...
	MOV	#0,$VMPAG	; ...RESET VIRTUAL MEMORY PAGE...
	MOV	#1,$VMIDN	; ...AND RESET THE IDENTIFIER

		.IFTF	; D$ALAL & D$VMDP

	RETURN

	.ENDC	; D$ALAL & D$VMDP

;
; AUTOLOAD VECTOR ALLOCATION
;
; THIS ROUTINE IS CALLED FOR EACH SEGMENT IN THE ALLOCATION.
;

ALALO:	SAVRG			;SAVE NONVOLITILE REGISTERS
	MOV	$CRSEG,R5	;GET ADDRESS OF CURRENT SEGMENT
	MOV	S$GAUT(R5),R4	; GET BASE ADDRESS OF AUTOLOAD VECTORS
	MOV	S$GAUT+2(R5),R3	; GET ADDRESS OF AUTOLOAD SECTION
	ADD	#S$GATL,R5	; POINT TO AUTOLOAD LISTHEAD
	CALL	20$		;
	BR	40$		;

20$:	MOV	(R5),R5		;GET ADDRESS OF NEXT IN LIST
	BNE	30$		;IF NE GOT ONE
	RETURN			;
30$:				;
	MOV	2(R5),R1	; GET VIRTUAL ADDRESS OF INDIRECT SYMBOL

	BEQ	301$		; IF EQ, TRAP HERE...
	CMP	#-1,R1		; IS THE V.A. A -1?
	BEQ	301$		; IF EQ TO -1, TRAP ALSO
	BR	302$		; IF NEITHER, FORGET THE WHOLE THING
301$:
	BPT
302$:
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CALL	$WRMPG		; WRITE MARK PAGE

	.IF DF D$ALAL & D$TRAC

	CALL	SYMDP0		; DISPLAY THE STRUCTURE BEFORE PROCESSING

	.ENDC	; D$ALAL & D$TRAC

	BIT	#SY$ATL,S$YFLG(R0) ; IS THE SYMBOL AUTOLOADABLE??
	BEQ	300$		   ; IF EQ, NO...
	MOV	R1,-(SP)	   ; IF NE, YES...SAVE THE VIRTUAL ADDRESS
				   ; OF THE FOUND SYMBOL...
	BR	310$
300$:
	MOV	S$YVAL(R0),-(SP)   ; SAVE THE SYMBOL'S VIRTUAL ADDRESS
310$:
	BISB	#<SY$REL!SY$ATR>,S$YFLG(R0) ;++036 SET REL., AUTOLOAD REF. FLAGS
	BICB	#SY$IND,S$YFLG(R0) ; CLEAR INDIRECT FLAG
	BIT	#SY$ATL,S$YFLG(R0) ; IS THIS AN AUTOLOADABLE SYMBOL??
	BEQ	330$		   ; IF EQ, NO...PROCESS NORMALLY
	BIT	#SY$SUP,S$YFLG(R0) ; BUT IS IT A SUPER-MODE SYMBOL??
	BEQ	320$		   ; IF EQ, NO...BUT IT IS AN AUTOLOADABLE ONE!
	MOV	R4,S$YVOX(R0)	   ; YES, AUTOLOADABLE...SAVE THE $$ALVC OFFSET
	MOV	R3,S$YCVX(R0)	   ; SAVE THE ADDRESS OF THE AUTOLOAD SECTION

	.IF DF D$ALAL & D$TRAC

	CALL	SYMDP1		; DISPLAY THE STRUCTURE BEFORE PROCESSING

	.ENDC	; D$ALAL & D$TRAC

	BR	340$		   ; NO...JUST A REG'LAR SUPER-MODE SYMBOL
				   ; THAT NEEDS AN AUTOLOAD VECTOR...(THROUGH
				   ; THE NORMAL CHANNELS!!)
320$:
	MOV	R4,S$YVOF(R0)	   ; SAVE THE $$ALVC OFFSET IN THE EXTENDED
	MOV	R3,S$YCVT(R0)	   ; SAVE THE ADDRESS OF THE AUTOLOAD SECTION

	.IF DF D$ALAL & D$TRAC

	CALL	SYMDP2		; DISPLAY THE STRUCTURE BEFORE PROCESSING

	.ENDC	; D$ALAL & D$TRAC

	BR	340$
330$:
	MOV	R4,S$YVAL(R0)	   ; SAVE THE OFFSET VALUE
	MOV	R3,S$YCMT(R0) 	   ; SET THE ADDRESS OF THE AUTOLOAD SECTION
340$:
	CMP	$CRVSG,$RTSEG	; ROOT?
	BNE	35$		; IF NE NO
	BIT	#SY$SUP,S$YFLG(R0) ; SYMBOL FROM SUP MODE LIB?
	BEQ	35$		; IF EQ NO
	TST	(SP)+		; CLEAN STACK
	BR	36$		;
35$:
	MOV	(SP)+,2(R5)	; SET AUTOLOAD LIST ENTRY TO REAL SYMBOL
36$:
	ADD	#S$ZATL,R4	; POINT TO NEXT AUTOLOAD ENTRY POINT
	BR	20$		; GO AGAIN

40$:
	MOV	$CRSEG,R5	; GET ADDRESS OF CURRENT SEGMENT
	MOV	S$GSUP(R5),R4	; GET BASE ADDRESS OF SUPERVISOR LOAD VECTOR
	MOV	S$GSUP+2(R5),R3	; GET ADDRESS OF SUPERVISOR LOAD SECTION
	ADD	#S$GSPL,R5	; POINT TO SUPERVISOR LOAD LISTHEAD
	CALL	20$		;
	RETURN

	.DSABL	LSB
	.IF DF D$ALAL & D$TRAC

	.ENABL	LSB

SYMDP0:
	CALL	$SAVAL		; Save all registers
	MOV	$PHASE,$TRPS0	; Set phase to dump
	MOV	R0,$TRSY0	; Set the current segment address
	MOV	#$TRSM0,R0	; Point to the list
	BR	10$		; join common code
;
SYMDP1:
	CALL	$SAVAL		; Save all registers
	MOV	$PHASE,$TRPS1	; Set phase to dump
	MOV	R0,$TRSY1	; Set the current segment address
	MOV	#$TRSM1,R0	; Point to the list
	BR	10$		; join common code
;
SYMDP2:
	CALL	$SAVAL		; Save all registers
	MOV	$PHASE,$TRPS2	; Set phase to dump
	MOV	R0,$TRSY2	; Set the current segment address
	MOV	#$TRSM2,R0	; Point to the list
10$:
;	CMP	$RTSEG,$CRVSG	; are we processing the root segment?
;	BNE	20$		; if ne, no...just exit
	CALL	$TRACE		; display the symbol data

		.IF DF D$ALA0

	MOV	$CRSEG,R5	; copy current segment address
	MOV	S$GWDP(R5),R1	; get window block pointer
	CALL	$CVRL		; convert to real
	MOV	$PHASE,$TRWPH	; set phase to dump
	MOV	R0,W.NID(R0)	; display real address of window block
	MOV	R0,$TRWCS	; set the current window block address
	MOV	#$TRWIN,R0	; point to the list
	CALL	$TRACE		; display the window block data

		.ENDC	; D$ALA0

20$:
	RETURN

	.DSABL	LSB

	.ENDC	; D$ALAL & D$TRAC



	.END
