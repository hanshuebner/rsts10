	.TITLE	P5CEL
	.IDENT	/04.02/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 11-JAN-75
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	04.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	J. M. SALMAN	06-OCT-82	04.02
;		JMS077		COMPLETE CBP039.
;
;
;
; OUTPUT THE TASK BUILDER CREF FOR EACH ELEMENT
;
; EQUATED SYMBOLS
;

CRFSH=000001			; PRODUCE NARROW CREF FORMAT (1 = YES)

;
; MACRO LIBRARY CALLS
;

	.MCALL	PUT$S

;
; LOCAL DATA
;
; CREF HEADER DATA (ADJACENCY ASSUMED)
;
	IMPURE			; READ/WRITE D-SPACE

$$=.

CRFNM:	.RAD50	/TKB   /	; TASK NAME
CRFID:	.WORD	0		; TASK I/D
CRFTIM:	.BLKW	5.		; CREATION TIME
CRFLG:	.BLKW	1		; HEADER FLAGS WORD

HDSIZ=.-$$

;
; LOCAL SYMBOL STORAGE
;

LCLSYM:	.BLKW	6.		;

;
; CREF DATA RECORD BUFFER (ADJACENCY ASSUMED)
;

$$=.

SYM:	.BLKW	2		; SYMBOL NAME (2-WORD, RADIX 50)
MODN:	.BLKW	2		; MODULE NAME (2-WORD, RADIX 50)
SYVAL:	.BLKW	1		; SYMBOL VALUE (2-WORD, RADIX 50)
SYFLG:	.BLKB	1		; SYMBOL FLAGS
SYFMT:	.BLKB	1		; FORMAT BYTE

DSIZ=.-$$

;
; MODULE FUNCTION DETAILS:
;
;+
; **-$P5CEL-CREATE THE CROSS REFERENCE FOR EACH ELEMENT IN THE SEGMENT
;
; INPUTS:
;
;	PHASE THREE SYMBOL AND SECTION TABLES
;
; OUTPUTS:
;
;	THE CREF FILE FOR EACH ELEMENT IS PRODUCED
;
;-
	PURE.I			; READ-ONLY I-SPACE


$P5CEL::			;
	SAVRG			; SAVE NON-VOLATILE REGISTERS
	CALL	$WSINI		; INITIALIZE PATH LIST
10$:				;
	CALL	$GTBYT		; GET RECORD LENGTH
	BCS	20$		; IF C/S-EOF(ILLEGAL FORMAT)
	MOV	R0,R3		; SAVE RECORD LENGTH
	CALL	$GTWRD		; GET BLOCK TYPE
	SUB	#2,R3		; ADJUST BYTE COUNT
	CMP	R0,#LGBLK	; LEGAL BLOCK TYPE
	BLOS	30$		; IF LOS YES
20$:				;
	CLR	R0		; FORCE ILLEGAL FORMAT
30$:				;
	ASL	R0		; MAKE WORD INDEX
	CALL	@DSPVCT(R0)	; CALL BLOCK DEPENDANT ROUTINE
	BR	10$		; GO AGAIN

;
; DISPATCH VECTOR TABLE
;

	PURE.D			; READ-ONLY D-SPACE
DSPVCT:				;
	.WORD	ILFMT		; BLOCK 0-ILLEGAL BLOCK TYPE
	.WORD	STGSD		; BLOCK 1-START GSD
	.WORD	ENGSD		; BLOCK 2-END GSD
	.WORD	RPEAT		; BLOCK 3-TXT
	.WORD	RPEAT		; BLOCK 4-RLD
	.WORD	RPEAT		; BLOCK 5-ISD
	.WORD	MODND		; BLOCK 6-MODULE END
LGBLK=<.-DSPVCT-2>/2

	PURE.I			; READ-ONLY I-SPACE
;
; START GSD -BLOCK TYPE 1
;

STGSD:				;
	MOV	#LCLSYM+2,R4	; GET ADDRESS TO STORE SYMBOL
	MOV	#4,R5		; SET REPEAT COUNT
10$:				;
	CALL	$GTWRD		; GET A WORD
	MOV	R0,(R4)+	; SAVE IN TEMP BUFFER
	SOB	R5,10$		; REPEAT
	SUB	#8.,R3		; ADJUST FOR SYMBOL ENTRY
	MOV	#LCLSYM,R1	; GET ADDRESS OF SYMBOL DESCRIPTOR
	MOVB	S$CNT(R1),R2	; GET TYPE OF GSD ENTRY
	CMP	R2,#LGTYP	; LEGAL TYPE ?
	BHI	ILFMT		; IF HI ILLEGAL FORMAT
	ASL	R2		; MAKE WORD INDEX
	MOV	$CRSEG,R0	; GET ADDRESS OF CURRENT SEGMENT
	CALL	@GSDVCT(R2)	; DISPATCH TO ROUTINE
	TST	R3		; ANY MORE TO PROCESS
	BGT	STGSD		; IF GT GO AGAIN
	RETURN			;

;
; GSD ENTRY TYPE DISPATCH TABLE
;

	PURE.D			; READ-ONLY D-SPACE
GSDVCT:				;
	.WORD	MODNME		; MODULE NAME
	.WORD	SCTNME		; SECTION NAME
	.WORD	INTSYM		; INTERNAL SYMBOL
	.WORD	XFRADR		; TRANSFER ADDRESS
	.WORD	SYMDCL		; SYMBOL DECLARATION
	.WORD	SCTNME		; PROGRAM SECTION NAME
	.WORD	VIDENT		; VERSION IDENTIFICATION
	.WORD	VSTNME		; VIRTUAL SECTION NAME
	.WORD	CMPRT		; COMPLETION ROUTINE NAME
LGTYP=<.-GSDVCT-2>/2

	PURE.I			; READ-ONLY I-SPACE
;
; ILLEGAL FORMAT-BLOCK TYPE 0
;

ILFMT:				;
	MOV	$INPPT,R2	; GET INPUT FILE RECORD BLOCK
	MOV	R$NAME(R2),R2	; GET ADDRESS OF NAME STRING
	MOV	(PC)+,R1	; DIAGNOSTIC
	.BYTE	E$R14,S$V2	; FATAL-NO RETURN
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE
;
; MODULE NAME
;

	.ENABL	LSB

MODNME:				;
	MOV	S$GNME(R0),SYM	; SET SEGMENT NAME
	MOV	S$GNME+2(R0),SYM+2 ; ...
	MOVB	#1,SYFMT	; SET FORMAT NUMBER
	MOV	S$YM(R1),MODN	; SAVE MODULE NAME
	MOV	S$YM+2(R1),MODN+2 ; ...
	CMP	$NUMSG,#1	; MORE THAN ONE SEGMENT?
	BEQ	5$		; IF EQ NO
	CALL	28$		; OUTPUT CREF RECORD
5$:				;
	RETURN			;

;
; SECTION AND PROGRAM SECTION NAME
;

SCTNME:				;
	RETURN			;

;
; INTERNAL SYMBOL
;

INTSYM:				;
	RETURN			;

;
; TRANSFER ADDRESS
;

XFRADR:				;

;
; VIRTUAL SECTION NAME
;

VSTNME:				;

;
; SUPERVISOR MODE LIBRARY COMPLETION ROUTINE
;

CMPRT:

	RETURN			;

;
; SYMBOL DECLARATION
;

SYMDCL:				;
	MOV	#SYM,R2		; GET ADDRESS TO STORE SYMBOL DATA
	MOV	S$YM(R1),(R2)+	; STORE SYMBOL NAME
	MOV	S$YM+2(R1),(R2)+ ; ...
	MOVB	S$YFLG(R1),R2	; GET FLAGS BYTE
	BICB	#^C<SY$DEF!SY$REL>,R2	;++036 CLEAR ALL BUT DEF. AND REL. FLAGS
	MOVB	R2,SYFLG	; SET FLAGS
	CALL	$WSRCS		; SEARCH FOR SYMBOL
	BCS	30$		; IF C/S SYMBOL NOT IN TABLE
	MOV	R1,R4		; SAVE PATH FLAG
	MOVB	S$YFLG(R0),R5	; SAVE SYMBOL FLAGS
	CLR	R2		; ASSUME DEFINITION NOT FOUND
	BITB	#SY$DEF,R5	; DEFINITION FOUND?
	BEQ	20$		; IF EQ NO
	BITB	#SY$IND,R5	; INDIRECT DEFINITION?
	BEQ	10$		; IF EQ NO
	MOV	S$YVAL(R0),R1	; GET ADDRESS OF REAL ENTRY
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
10$:				;
	MOV	S$YVAL(R0),R2	; GET SYMBOL VALUE
	BITB	#SY$REL,R5	; RELOCATABLE SYMBOL
	BEQ	20$		; IF EQ NO
	ADD	$OFFST,R2	; ADD OFFSET BIAS
20$:				;
	MOV	R2,SYVAL	; SET SYMBOL VALUE
	TST	R4		; FOUND IN CURRENT SEGMENT?
	BNE	27$		; IF NE NO
	BICB	#^C<SY$ATR!SY$ATL!SY$IND>,R5 ; CLEAR ALL BUT AUTOLOAD FLAGS
	BISB	R5,SYFLG	; MERGE FLAGS
	BITB	#SY$IND,R5	; SYMBOL DEFINED IN OTHER SEGMENT?
	BEQ	27$		; IF EQ NO
23$:				;
	MOV	SP,$WSEXT	; FORCE SEARCH OF ALL TREES
	CALL	@(SP)+		; SEARCH FOR REAL DEFINITION
	BCC	25$		; IF C/C HAVE SYMBOL
	CLR	$WSEXT		; RESET  SEARCH EXTENT FLAG
	BICB	#SY$IND,SYFLG	; CLEAR INDIRECT FLAG
	BR	270$		;
25$:				;
	CLR	$WSEXT		; RESET SEARCH EXTENT FLAG
	BITB	#SY$IND,S$YFLG(R0) ; INDIRECT DEFINITION?
	BNE	23$		; IF NE NO CONTINUE SEARCH
	BITB	#SY$DEF,S$YFLG(R0) ; DEFINITION?
	BEQ	23$		; IF EQ NO
	BITB	#SY$REL,S$YFLG(R0) ; RELOCATABLE SYMBOL??
	BEQ	26$		; IF EQ, NO
	ADD	$OFFST,SYVAL	; YES, INCLUDE OFFSET BIAS
26$:
	CMP	$CRVSR,$RTSEG	; FOUND IN ROOT SEGMENT?
	BEQ	23$		; IF EQ YES
27$:				;
	INC	(SP)+		; CLEAN STACK
270$:				;
	CLRB	SYFMT		; SET FORMAT NUMBER
28$:				;
	MOV	#SYM,R1		; POINT TO SYMBOL BUFFER
	MOV	#DSIZ,R2	; SET RECORD SIZE
	BR	PUTS		; PUT THE RECORD
30$:				;
	RETURN			;

	.DSABL	LSB

;
; BLOCK TYPE 6 - END OF MODULE
;

MODND:				;
	TST	(SP)+		; REMOVE RETURN
	RETURN			;


;
; VERSION IDENTIFIER
;

VIDENT:				;
	RETURN			;

;
; END GSD
;

ENGSD:				;


;
; IGNORE REMAINDER OF RECORD
;

RPEAT:				;
	CLR	$NBYTE		; FORCE READ OF NEXT RECORD
	RETURN			;

;
; PUT A CREF RECORD
;

PUTS:				;
	MOV	$CRFPT,R0	; GET ADDRESS OF CREF FDB
	MOV	R2,F.RSIZ(R0)	; SET MAX RECORD LENGTH
	PUT$S	R0,R1,R2	; OUTPUT THE RECORD
	BCC	10$		; IF C/C OUTPUT OK
	MOV	R$NAME(R0),R2	; GET ADDRESS OF RECORD BLOCK
	MOV	#<S$V2*400!E$R25>,R1 ; GET ERROR/SEVERITY
	CALL	$ERMSG		; FATAL, NO RETURN
10$:				;
	RETURN			;

;+
; **-$CRFHD-OUTPUT THE CREF HEADER
;
; THIS SUBROUTINE IS CALLED TO WRITE THE CREF HEADER RECORD
; INTO THE CREF FILE.
;
; INPUTS:
;
;	$BLTIM=CREATION TIME OF TASK
;
; OUTPUTS:
;
;	CREF FILE HEADER RECORD IS WRITTEN
;
;-

$CRFHD::			;
	MOV	#$BLTIM,R0	; GET TIME OF CREATION
	MOV	#CRFTIM,R2	; GET ADDRESS TO STORE TIME
	MOV	#5,R1		; SET WORD COUNT
10$:				;
	MOV	(R0)+,(R2)+	; COPY CREATION TIME
	SOB	R1,10$		; ...
	CLR	(R2)		; ASSUME WIDE FORMAT
	BIT	#WI$DE,$SWTCH	; WIDE FORMAT WANTED?
	BNE	20$		; IF NE YES
	MOV	#CRFSH,(R2)	; SET FLAG FOR NARROW FORMAT
20$:				;
	MOV	#CRFNM,R1	; GET ADDRESS OF HEADER RECORD BUFFER
	MOV	#HDSIZ,R2	; GET HEADER SIZE
	BR	PUTS		; OUTPUT HEADER

	.END
