	.IF NDF	W$$OPT

	.TITLE	INIDM

	.ENDC

	.IF DF	W$$OPT

	.TITLE	INIDMX

	.ENDC

	.IDENT	/00.04/
;
;		COPYRIGHT (c) 1990 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERRED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; C. MONIA 30-JUL-76
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	00.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	25-JAN-83	00.02
;		CBP075		CORRECT CHECKING AND SETTING OF DYNAMIC MEMORY
;				POOL IF A TASK IS EXACTLY ON A 32. WORD
;				BOUNDARY.
;
;	C. B. PETROVIC	31-MAR-83	00.03
;		CBP081		CORRECT CBP075 TO PROPERLY CALCULATE THE
;				ADDRESS LIMITS FOR CORE POOL IF THE TASK
;				IS RUNNING ON AN UNMAPPED SYSTEM.
;
;	L. M. PETERSON	18-JUN-90	00.04
;		LMP148		ADD SUPPORT FOR OPTIMIZED VERSION OF TKB (HFT)
;
;
; INITIALIZE DYNAMIC MEMORY
;
; MACRO LIBRARY CALLS
;

	.MCALL	DIR$,GPRT$,GTSK$

;
; LOCAL DATA
;
; TASK IMAGE MEMORY LIMITS
;
	IMPURE			; READ/WRITE D-SPACE

LIMIT:	.LIMIT			;

;
; 'GET PARTITION PARAMTERS' DPB
;

PDPB:	GPRT$	,TBUF		;

;
; 'GET TASK PARAMTERS' DPB
;

TDPB:	GTSK$	TBUF		;

;
; PARAMETER BUFFER
;

TBUF:	.BLKW	16.		;

;+
; **-$INIDM-INITIALIZE DYNAMICALLY ALLOCATED STORAGE
;
; THIS SUBROUTINE IS CALLED TO ESTABLISH THE INITIAL STATE
; OF THE CORE POOL REFERENCED BY THE SUBROUTINES WHICH ALLO-
; CATE AND DEALLOCATE CORE BLOCKS. THE POOL CONSISTS OF ALL
; MEMORY EXTENDING FROM THE END OF THE TASK IMAGE TO THE LAST
; PHYSICAL LOCATION OWNED BY THE TASK.
;
; INPUTS:
;
;	R0=ADDRESS OF FREE CORE POOL LISTHEAD
;
; OUTPUTS:
;
;	R0=FIRST ADDRESS IN TASK
;	R1=ADDRESS FOLLOWING TASK IMAGE
;	R2=SIZE OF CORE POOL
;
;	ANY PREVIOUS TASK MEMORY EXTENSION IS DE-ALLOCATED. THE
;	REMAINING FREE CORE AREA IS ALLOCATED TO THE MEMORY POOL.
;-
	PURE.I			; READ-ONLY I-SPACE

$INIDM::			;
	MOV	LIMIT+2,R2	; GET ADDRESS OF CORE POOL
	ADD	#3,R2		; ROUND UP TO NEXT 4-BYTE BOUNDARY
	BIC	#3,R2		; ...
	CLR	R1		; RESET TASK SIZE
	CALL	$EXTSK		; ...
	DIR$	#PDPB		; GET PARTITION PARAMETERS
	MOV	R0,-(SP)	; SAVE R0
	MOV	$DSW,R0		; SAVE STARTING VIRTUAL ADDRESS OF PARTITION
	DIR$	#TDPB		; GET TASK PARAMETERS
	ADD	TBUF+32,R0	; CALCULATE TASK TOP ADDRESS
	CMP	R2,R0		; IS ACTUAL TASK SIZE < WINDOW 0 SIZE?
	BLO	10$		; IF LOWER, YES...ALL'S OK
	CLR	@(SP)+		; IF SAME OF HIGHER, NO...ALL TAPPED OUT
	MOV	R0,R1		; SET LAST ADDRESS IN TASK
	SUB	TBUF+32,R0	; CALCULATE TASK VIRTUAL STARTING ADDRESS
	CLR	R2		; SET NO FREE POOL
	RETURN
10$:
	SUB	TBUF+32,R0	; RESET TASK STARTING ADDRESS
	MOV	R2,@(SP)+	; SET ADDRESS OF FREE POOL
	MOV	R2,-(SP)	; SAVE ADDRESS OF CORE POOL
	CLR	(R2)+		; CLEAR FIRST WORD OF DYNAMIC STORE
	MOV	TBUF+32,(R2)	; SET PHYSICAL SIZE OF TASK
	SUB	R0,(SP)		; COMPUTE APPARENT TASK SIZE
	MOV	R0,R1		; COPY BASE ADDRESS OF TASK
	ADD	(R2),R1		; COMPUTE NEXT ADDRESS AFTER TASK
	SUB	(SP)+,(R2)	; SET SIZE OF FREE POOL
										;LMP148
	.IF DF	W$$OPT								;LMP148
										;LMP148
	MOV	R2,-(SP)	; SAVE ADDRESS OF FREE POOL SIZE		;LMP148
										;LMP148
	.ENDC									;LMP148
										;LMP148
	MOV	(R2),R2		; GET SIZE OF POOL
										;LMP148
	.IF DF	W$$OPT								;LMP148
										;LMP148
; FOR OPTIMIZED HFT, EXTEND TASK D-SPACE IMMEDIATELY TO 28KW			;LMP148
										;LMP148
	CMP	R1,#T$KMAX	; TASK AT MAX. ALLOWABLE SIZE?			;LMP148
	BHIS	17$		; IF HIS YES					;LMP148
	MOV	#T$KMAX,-(SP)	; GET TASK INCREMENT (IN BYTES)			;LMP148
	SUB	R1,(SP)								;LMP148
	MOV	(SP)+,R1							;LMP148
	ADD	R1,R2		; UPDATE SIZE OF POOL				;LMP148
	CALL	$EXTSK		; EXTEND THE TASK				;LMP148
	BCS	17$		; IF C/S EXTEND FAILED				;LMP148
	BR	20$		; RELEASE BLOCK TO POOL				;LMP148
17$:				;						;LMP148
	TST	(SP)+		; CLEAN STACK					;LMP148
	MOV	#$FRHD,R2	; GET ADDRESS OF FREE POOL HEADER		;LMP148
	MOV	(PC)+,R1	; GET ERROR/SEVERITY				;LMP148
	.BYTE	E$R4,S$V2	; NO DYNAMIC MEMORY AVAILABLE			;LMP148
	CALL	$ERMSG		; ISSUE FATAL ERROR (NO RETURN)			;LMP148
										;LMP148
20$:										;LMP148
	MOV	R2,@(SP)+	; UPDATE FREE POOL SIZE HERE TOO		;LMP148
										;LMP148
	.ENDC									;LMP148
										;LMP148
	RETURN			;

	.END
