	.TITLE	RSRCH
	.IDENT	/01.01/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 19-APR-74
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	01.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;
;
; REAL-MEMORY SEARCH AND INSERT PACKAGE
;
; EQUATED SYMBOLS
;
; OFFSET TO KEY
;

SYM=000002			;

;+
; DATA STRUCTURES:
;
; EACH ITEM IN THE LIST IS ASSUMED TO HAVE THE FOLLOWING FORMAT:
;
;	ITEM:	.WORD	NEXT	; LINK TO NEXT (0=LAST)
;		.WORD	VAL	; FIRST HALF OF KEY VALUE
;		.WORD	VAL	; SECOND HALF OF KEY VALUE
;		.WORD	DATA	; ANY DATA
;		  .		;
;		  .		;
;		  .		;
;		  .		;
;		.WORD	DATA	; END OF ITEM
;-
;+
; **-$ISYMR-INSERT ITEM IN LEXICALLY ORDERED LIST
;
; INPUTS:
;
;	R0=LISTHEAD ADDRESS
;	R1=ADDRESS OF ITEM TO BE INSERTED
;
; OUTPUTS:
;
;	NONE
;
; THIS ROUTINE IS CALLED TO INSERT AN ITEM IN A LIST WHOSE KEY VALUES ARE
; IN LEXICAL ORDER.
;-
	PURE.I			; READ-ONLY I-SPACE

$ISYMR::			;
	MOV	R0,R2		; SAVE ADDRESS OF CURRENT
	MOV	(R0),R0		; GET NEXT ITEM
	BEQ	10$		; IF EQ DONE
	CMP	SYM(R0),SYM(R1) ; CHECK FIRST HALF OF KEY
	BLO	$ISYMR		; IF LO, GO AGAIN
	BHI	10$		; IF HI, FOUND PLACE TO INSERT
	CMP	SYM+2(R0),SYM+2(R1) ; CHECK SECOND HALF OF KEY
	BLO	$ISYMR		; IF LO GO AGAIN
10$:				;
	MOV	R1,(R2)		; LINK NEW ITEM TO PREVIOUS
	MOV	R0,(R1)		; LINK CURRENT TO NEW
	RETURN			;
;+
; **-$SRCHR-SEARCH LIST IN REAL MEMORY FOR KEY VALUE
;
; INPUTS:
;
;	R0=LISTHEAD ADDRESS
;	R1=ADDRESS OF CONTAINING KEY VALUE
;
; OUTPUTS:
;
;	C-CLEAR=KEY VALUE IN LIST
;	R0=ADDRESS OF ITEM CONTAINING VALUE
;
;	C-SET=KEY VALUE NOT IN LIST
;
; THIS ROUTINE IS CALLED TO SEARCH A LIST AS DESCRIBED UNDER 'DATA STRUCTURES
; FOR AN ITEM CONTAINING THE SPECIFIED KEY CONTAINED IN S$YM(R1), AND S$YM+2(R1)
;-
	PURE.I			; READ-ONLY I-SPACE

$SRCHR::			;
	SEC			; ASSUME KEY NOT IN LIST
	MOV	(R0),R0		; GET NEXT ITEM
	BEQ	10$		; IF EQ NOT IN LIST
	CMP	SYM(R0),SYM(R1)	; CHECK FIRST HALF OF KEY
	BNE	$SRCHR		; IF NE GO AGAIN
	CMP	SYM+2(R0),SYM+2(R1) ; CHECK SECOND HALF OF KEY
	BNE	$SRCHR		; IF NE GO AGAIN
10$:				;
	RETURN			;

	.END
