	.TITLE	SCVTR
	.IDENT	/04.02/
;
; COPYRIGHT (c)	1987 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D.N. CUTLER 23-NOV-72
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	04.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	L. M. PETERSON	5-NOV-87	4.02
;		LMP098		MODIFY $DC TO SUPPORT NEW LIBR OPTION PARAMETER
;				FOR LIBRARY D-SPACE RESERVATION 
;
; SCAN CONVERSION ROUTINES
;+
; **-$AS-ASCII CONVERSION
;
; INPUTS:
;
;	R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;	R5=ADDRESS TO STORE CONVERTED VALUE.
;
; OUTPUTS:
;
;	UP TO 2 ASCII CHARACTERS ARE MOVED TO THE SPECIFIED ADDRESS
;	BLANK FILLED.
;		R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;		R2=TERMINAL CHARACTER.
;		R5=ADDRESS TO STORE NEXT CONVERTED VALUE.
;-
	PURE.I			; READ-ONLY I-SPACE

$AS::	MOV	#"  ,(R5)+	;BLANK FILL OUTPUT WORD
	MOV	#'A,R1		;SET LOW LIMIT
	MOV	#'Z,-(SP)	;SET HIGH LIMIT
	MOVB	(R0)+,R2	;GET NEXT BYTE
	CMP	R2,R1		;WITHIN RANGE?
	BLO	10$		;IF LO NO
	CMP	R2,(SP)		;WITHIN RANGE?
	BHI	10$		;IF HI NO
	MOVB	R2,-2(R5)	;STORE FIRST CHARACTER
	MOVB	(R0)+,R2	;GET NEXT CHARACTER
	CMP	R2,R1		;WITHIN RANGE?
	BLO	10$		;IF LO NO
	CMP	R2,(SP)		;WITHIN RANGE?
	BHI	10$		;IF HI NO
	MOVB	R2,-1(R5)	;STORE SECOND BYTE
	MOVB	(R0)+,R2	;GET NEXT BYTE
10$:	TST	(SP)+		;CLEAN STACK
	BR	RR2		;SKIP TRAILING BLANKS

;+
; **-$DC-SIGNED DECIMAL CONVERSION
; **-$OT-SIGNED OCTAL CONVERSION
;
; INPUTS:
;
;	R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;	R5=ADDRESS TO STORE CONVERTED VALUE.
;
; OUTPUTS:
;
;	NUMBER IS CONVERTED AND STORED IN THE SPECIFIED ADDRESS.
;	TRAILING BLANKS AND HT'S ARE BYPASSED.
;		R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;		R2=TERMINAL CHARACTER.
;		R5=ADDRESS TO STORE NEXT CONVERTED VALUE.
;-
	PURE.I			; READ-ONLY I-SPACE

$DCC::	
	CMPB	#':,(R0)	; IS NEXT CHARACTER COLON (OPTIONAL PARAMETER)?
	BNE	$DC		; IF NE, NO
	INC	R0		; NOTHING TO CONVERT, BUMP TO NEXT CHARACTER
	BR	OT2		; SET DEFAULT AND EXIT
$DC::	MOV	#$CDTB,R2	;SET FOR DECIMAL CONVERSION
	BR	OT1		;
$OT::	MOV	#$COTB,R2	;SET FOR OCTAL CONVERSION
OT1:
	TSTB	(R0)		; IS NEXT CHARACTER A NULL (END-OF-STRING)?
	BNE	OT3		; IF NE, NO...CHECK FURTHER
OT2:	MOV	#-1,(R5)+	; YES, SET DEFAULT INDICATOR
	BR	RR2		; AND EXIT
OT3:
	CLR	-(SP)		; ASSUME A POSITIVE INTEGER
	CMPB	#'+,(R0)	;LEADING PLUS SIGN?
	BEQ	10$		;IF EQ YES
	CMPB	#'-,(R0)	;LEADING MINUS SIGN?
	BNE	20$		;IF NE NO
	DEC	(SP)		;CHANGE TO NEGATIVE NUMBER
10$:	INC	R0		;BYPASS SIGN CHARACTER
20$:	CALL	(R2)		;CONVERT NUMBER TO BINARY
	TST	(SP)+		;PLUS OR MINUS?
	BEQ	30$		;IF EQ PLUS
	NEG	R1		;MAKE RESULT NEGATIVE
30$:	MOV	R1,(R5)+	;STORE PARAMETER
	BR	RR2		;

;+
; **-$DV-DEVICE/UNIT CONVERSION
;
; INPUTS:
;
;	R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;	R5=ADDRESS TO STORE CONVERTED VALUE.
;
; OUTPUTS:
;
;	THE DEVICE NAME AND UNIT ARE CONVERTED AND STORED IN
;	THE SPECIFIED ADDRESSES.
;		R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;		R2=TERMINAL CHARACTER.
;		R5=ADDRESS TO STORE NEXT CONVERTED VALUE.
;-
	PURE.I			; READ-ONLY I-SPACE

$DV::	CALL	$AS		;CONVERT DEVICE NAME
	DEC	R0		;BACKUP TO TERMINATOR
	CALL	$OT		;CONVERT UNIT NUMBER
	RETURN			;

;+
; **-$RP-RAD50 CONVERSION/PERIOD TERMINATOR
; **-$RR-RAD50 CONVERSION/PERIOD RAD50 CHARACTER
;
; INPUTS:
;
;	R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;	R5=ADDRESS TO STORE CONVERTED VALUES.
;
; OUTPUTS:
;
;	TWO RAD50 WORDS ARE CONVERTED AND STORED IN THE SPECIFIED
;	ADDRESS. TRAILING BLANKS AND HT'S ARE BYPASSED.
;		R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;		R2=TERMINAL CHARACTER.
;		R5=ADDRESS TO STORE NEXT CONVERTED VALUE.
;-
	PURE.I			; READ-ONLY I-SPACE

$RP::	CLR	R1		;SET FOR PERIOD TERMINATOR
	BR	RR1		;
$RR::	MOV	SP,R1		;SET FOR PERIOD RAD50 CHARACTER
RR1:	MOV	R1,-(SP)	;SAVE PERIOD DISPOSITION FLAG
	CLR	(R5)+		;CLEAR TWO WORDS
	CLR	(R5)+		;
	CALL	$CAT5		;CONVERT FIRST HALF
	MOV	R1,-4(R5)	;STORE FIRST HALF OF RESULT
	BCS	20$		;IF CS DONE
	MOV	(SP),R1		;RETRIEVE FLAG
	CALL	$CAT5		;CONVERT SECOND HALF
	MOV	R1,-2(R5)	;SAVE SECOND HALF OF RESULT
	BCS	20$		;IF CS DONE
10$:	MOV	(SP),R1		;RETRIEVE FLAG
	CALL	$CAT5		;SKIP TO END OF RAD50 FIELD
	BCC	10$		;IF CC GO AGAIN
20$:	TST	(SP)+		;CLEAN STACK
RR2:	CMPB	#' ,R2		;BLANK TERMINATOR?
	BEQ	10$		;IF EQ YES
	CMPB	#HT,R2		;HT TERMINATOR?
	BNE	20$		;IF NE NO
10$:	MOVB	(R0)+,R2	;BYPASS BLANK OR HT
	BNE	RR2		;IF NE GO AGAIN
20$:	RETURN			;

;+
; **-$SETNB-SET NONBLANK
;
; INPUTS:
;
;	R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;
; OUTPUTS:
;
;	LEADING BLANKS AND HT'S ARE BYPASSED.
;		R0=ADDRESS OF NEXT BYTE IN INPUT BUFFER.
;-
	PURE.I			; READ-ONLY I-SPACE

$SETNB::CMPB	#' ,(R0)	;BLANK?
	BEQ	10$		;IF EQ YES
	CMPB	#HT,(R0)	;HT?
	BNE	20$		;IF NE NO
10$:	INC	R0		;INCREMENT TO NEXT BYTE
	BR	$SETNB		;GO AGAIN
20$:	RETURN			;

	.END
