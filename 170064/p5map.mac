	.TITLE	P5MAP
	.IDENT	/11.04/
;
; COPYRIGHT (c)	1983,1991 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA 27-JAN-74
;
;
; Previously Modified By:
;
;	J. A. Kasson
;	C. B. Petrovic
;	J. M. Salman
;
; MODIFIED BY:
;
;	T. Lekas	11-Apr-83	11.03
;		TL292		Get the system default page length
;				if there is one.
;
;	C. Katz		23-Apr-91	11.04
;		CMK001		Add RSTS Conditionals
;
; OUTPUT THE TASK BUILDER MAP
; MACRO LIBRARY CALLS
;

	.MCALL	CLOSE$,OFNB$W
	.MCALL	QIOW$,DIR$

;
;++036 LOCAL DATA
;++036
;++036 TIME PARAMETERS FOR THS BUILD
;++036
	IMPURE			; READ/WRITE D-SPACE

$TITLE::.BLKW	8.		;TITLE  BUFFER
$STTLE::.BLKW	2		;SUBITLE BBUFFER
$BLTIM::.BLKW	8.		;TIME BUFFER
$NCLNM::.BLKW	1		;NUMBER OF LISTING COLUNMS
$MXLIN::.BLKW	1		; Maximum number of lines per page
				; less 6 for header/trailer
;
; QIOW ATTACH AND DETACH DPB'S
;
CODPB:	QIOW$	IO.ATT,2,2



;
; MODULE FUNCTION DETAILS
;
;+
; **-$P5MAP-OUTPUT TASK BUILDER MAP
;
; THIS ROUTINE IS CALLED TO WRITE THE TASK BUILDER
; MAP FILE.
;
;
; INPUTS:
;
;	TABLES CONSTRUCTED IN PHASE 3
;
; OUTPUTS:
;
;	THE TASK BUILDER MAP FILE IS WRITTEN
;
;+
	PURE.I			; READ-ONLY I-SPACE

$P5MAP::
	SAVRG			; SAVE NON-VOLATILE REGISTERS
	CALL	$PGLEN		; Get the system default lines per page
	TST	R0		; Is there one?
	BNE	5$		; If NE yes - use it
	MOV	#P$LNTH+6,R0	; If not use the task build default
5$:	SUB	#6,R0		; Get the number of lines after the header
	MOV	R0,$MXLIN	; And store it for later use
	MOV	$INPPT,R0	; GET INPUT FILE RECORD BLOCK
	CALL	$STRCB		; SET FDB RESIDENT
	MOV	#$SWTCH,R5	; GET ADDRESS OF SWITCH WORD
	BIT	#MA$PF,(R5)	; MAP FILE SPECIFIED ?
	BEQ	15$		; IF EQ NO
	MOV	$MAPPT,R0	; GET MAP FILE RECORD BLOCK POINTER
	MOV	R0,R4		; SAVE MAP RECORD BLOCK POINTER
	CALL	$STRCB		; SETUP RECORD BLOCK
	MOV	R4,R0		; RETRIEVE POINTER
	OFNB$W	R0		; OPEN MAP FILE
	BCC	10$		; IF C/C OKAY
	MOV	R$NAME(R0),R2	; GET ADDRESS OF NAME STRING
	MOV	(PC)+,R1	; GET ERROR/SEVERITY
	.BYTE	E$R11,S$V0	; DIAGNOSTIC
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE
	BIC	#MA$PF,(R5)	; CLEAR MAP FILE OPTION SWITCH
	BR	15$		; OUTPUT ONLY UNDEFINED SYMBOLS VIA CO
10$:				;
	BITB	#FD.TTY,F.RCTL(R4)	;TERMINAL DEVICE?
	BEQ	11$		;IF EQ NO
	MOVB	F.LUN(R4),CODPB+Q.IOLU	;SET LUN
	MOV	#IO.ATT,CODPB+Q.IOFN	;INSERT ATTACH FUNCTION
	DIR$	#CODPB		;ATTACH TERMINAL
11$:
	CLR	$MPFLG		; CLEAR MAP BUFFER FLAG
	MOV	#7,$NCLNM	;INITIALIZE FOR WIDE LISTING
	BIT	#WI$DE,$SWTCH	;NARROW LISTING?
	BNE	12$		;IF NE NO
	MOV	#4,$NCLNM	;SET FOR NARROW LISTING
12$:
	CALL	$MPHDG		; OUTPUT MAP HEADING
	CALL	$MPOLD		;OUTPUT OVERLAY DESCRIPTOR
15$:				;
	MOV	#P5RSC,R0	; GET PHASE CONTROL ROUTINE ADDRESS
	CALL	$PCTRL		; CALL PHASE CONTROL ROUTINE
	MOV	#P5MAP,R0	; GET PHASE CONTROL ROUTINE ADDRESS
	CALL	$PCTRL		; CALL PHASE CONTROL ROUTINE
	BIT	#MA$PF,(R5)	; MAP FILE REQUIRED
	BEQ	20$		; IF EQ NO
	.IF	NDF,R$RSTS
	BITB	#FD.TTY,F.RCTL(R4) ; TERMINAL DEVICE?
	BEQ	17$		; IF EQ NO
	MOV	#IO.DET,CODPB+Q.IOFN	;INSERT DETACH FUNCTION
	DIR$	#CODPB		;DETACH TERMINAL
17$:
	.ENDC
	CALL	$MPSTS		; PRINT TASK BUILDER STATISTICS
	.IF	DF,R$RSTS
	MOV	#IO.DET,CODPB+Q.IOFN 
	DIR$	#CODPB		
	.ENDC			

20$:				;
	CALLR	$P5CRF		;++036 CONDITIONALLY OUTPUT CREF FILE

;
; RESET THE BASE ADDRESS FOR ALL SECTIONS WITHIN THE
; SEGMENT PRIOR TO DISPLAYING THE ALLOCATION FOR
; EVERY ELEMENT
;

P5RSC:				;
	SAVRG			; SAVE THE NON-VOLATILE REGISTERS
	MOV	$CRSEG,R0	; GET ADDRESS OF SECTION
	ADD	#S$GCST,R0	; POINT TO SECTION TABLE
	MOV	#$ISED,-(SP)	; PUSH ADDRESS OF SYMBOL EDIT ROUTINE
10$:				;
	CALL	@(SP)+		; GET NEXT ENTRY
	BCS	20$		; IF C/S NO MORE
	BITB	#CS$IND,C$SFLG(R0) ; INDIRECT ENTRY?
	BNE	10$		; IF NE YES
	BITB	#CS$REL,C$SFLG(R0) ; ABS SECTION?
	BEQ	10$		; IF EQ YES
	MOV	C$SBSE(R0),C$SCUR(R0) ; RESET CURRENT BASE
	BITB	#CS$VSC,C$SFLG+1(R0) ; VIRTUAL SECTION?
	BEQ	15$		; IF EQ NO
	CLR	C$SCUR(R0)	; CLEAR CURRENT BASE
15$:				;
	CALL	$WRMPG		; WRITE-MARK PAGE
	BR	10$		; GO AGAIN
20$:				;
	RETURN			;


;
; MAP OUTPUT ROUTINE FOR EACH SEGMENT
;
;

P5MAP:				;
	SAVRG			; SAVE NON-VOLATILE REGISTERS
	CALL	$WSINI		; INITIALIZE WHOLE-SEARCH ALGORITHM
	BIT	#MA$PF,$SWTCH	; MAP FILE SPECIFIED?
	BEQ	30$		; IF EQ NO
	MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT
	CALL	$ADRSM		; SET ADDRESS LIMITS
	CALL	$MPSEG		; OUTPUT SEGMENT NAME
10$:				;
	BIT	#LG$SH,$SWTCH	;SHORT MAP?
	BNE	30$		;IF NE YES
	MOV	#$ISED,-(SP)	; SET TO OUTPUT SELECTED ELEMENTS
	MOV	$CRSEG,R0	; GET REAL ADDRESS OF CURRENT SEGMENT
	ADD	#S$GCST,R0	; POINT TO CONTROL SECTION TABLE
5$:				;
	CALL	@(SP)+		; GET NEXT SECTION
	BCS	8$		; IF C/S DONE
	BITB	#CS$IND,C$SFLG(R0) ; SECTION DEFINED IN THIS SEGMENT?
	BEQ	7$		; IF EQ YES
	MOV	C$SBSE(R0),R1	; GET ADDRESS OF REAL ENTRY
	CALL	$CVRL		; CONVERT TO REAL
7$:				;
	CALL	$WRMPG		; WRITE-MARK PAGE
	SUB	C$SLGS(R0),C$SCUR(R0) ; RESET CURRENT BASE
	CLR	C$SLGS(R0)	; RESET LENGTH IN SEGMENT
	BR	5$		; GET NEXT SECTION
8$:				;
	MOV	#$STIMP,-(SP)	; SET TO OUTPUT SELECTED ELEMENTS
20$:				;
	CALL	@(SP)+		; SETUP NEXT INPUT FILE
	BCS	30$		; IF C/S NO MORE TO PROCESS
	CALL	$P5MEL		; SCAN ELEMENT
	BR	20$		; GO AGAIN

;
; OUTPUT ANY UNDEFINED SYMBOLS
;

30$:				;
	MOV	$CRSEG,R0	; GET ADDRESS OF CURRENT SEGMENT
	TST	S$GUND(R0)	; ANY UNDEFINED SYMBOLS?
	BEQ	40$		; IF EQ NO
	MOV	R0,R2		; COPY DESCRIPTOR ADDRESS
	ADD	#S$GNME-2,R2	; POINT TO SEGMENT NAME
	MOV	R2,-(SP)	; SAVE ADDRESS
	MOV	(R2),-(SP)	; SAVE CONTENTS
	MOV	S$GUND(R0),(R2) ; SETUP PARAMETER BLOCK
	MOV	(PC)+,R1	; GET ERROR/SEVERITY
	.BYTE	E$R28,S$V0	; DIAGNOSTIC
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE
	MOV	(SP)+,@(SP)+	; RESTORE DESCRIPTOR CONTENTS
40$:				;
	BIT	#MA$PF,$SWTCH	; MAP FILE SPECIFIED?
	BEQ	P5MEX		; IF EQ NO
	CALL	$MPUND		; FLUSH OUTPUT AND UNDEFINED SYMBOLS
	RETURN
P5MEX:				;
	BIT	#NO$DIA,$SWOVR	;DIAGNOSTIC MESSAGES WANTED?
	BNE	10$		; IF NE NO
	MOV	$CRSEG,R0	;GET ADDRESS OF CURRENT SEGMENT
	TST	S$GUND(R0)	;ANY UNDEFINES?
	BEQ	10$		;IF EQ NO
	MOV	#IO.ATT,CODPB+Q.IOFN	;INSERT ATTACH FUNCTION
	MOV	#2,CODPB+Q.IOLU	;INSERT LUN
	DIR$	#CODPB		;ATTACH TERMINAL
	MOV	#$MPPUT,R1	;ADDRESS OF OUTPUT ROUTINE
	CALL	$MPGUN		;GET UNDEFINED SYMBOL
	MOV	#1,R2		;BUFFER LENGTH IN BYTES
	MOV	#$OUTBF,R1	;OUTPUT BUFFER
	MOV	#SPA,(R1)	;INSERT SPACE INTO OUTPUT BUFFER
	CALL	$PUTCO		;OUTPUT CARRIAGE RETURN
	MOV	#IO.DET,CODPB+Q.IOFN	;INSERT DETACH FUNCTION
	DIR$	#CODPB	;DETACH TERMINAL
10$:
	RETURN			;

	.END
