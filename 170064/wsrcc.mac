	.TITLE	WSRCC
	.IDENT	/00.01/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 27-SEP-75
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	00.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;
; LOCAL DATA
;
; CURRENT PATH LIST ADDRESS
;
	IMPURE			; READ/WRITE D-SPACE

PATH:	.BLKW	1		;

;
; SYMBOL DESCRIPTOR ADDRESS
;

SYMDIS:	.BLKW	1		;

;+
; **-$WSRCC-PERFORM WHOLE SEARCH FOR SECTION NAME
;
; THIS ROUTINE IS CALLED TO SEARCH FOR A .PSECT THAT IS
; DEFINED  ON A PATH INTERSECTING THE CURRENT SEGMENT.
;  PRIOR TO CALLING THIS ROUTINE $WSINI MUST BE
; INVOKED TO BUILD THE PATH LIST CONTAINING THE VIRTUAL
; ADDRESSES OF ALL SUCH SEGMENTS. THE SEARCH IS ORDERED
; IN SEQUENCE ACCORDING TO ENTRIES IN THIS LIST. THIS
; ORDERING RESULTS IN THE FOLLOWING SEARCH PATTERN:
;
;	THE CURRENT SEGMENT
;	ALL SEGMENTS TOWARDS THE ROOT
;	ALL SEGMENTS UP-TREE FROM THE CURRENT SEGMENT
;	ALL CO-TREES
;
; EACH TIME THE SECTION NAME IS FOUND, A CO-ROUTINE CALL
; IS MADE TO THE CALLER WITH C/CLEAR AND A VALUE IN R1
; THAT DESCRIBES WHERE THE SECTION NAME WAS FOUND. WHEN
; ALL PATHS HAVE BEEN SEARCHED, THIS ROUTINE EXITS VIA
; A RETURN WITH C/SET.
;
; INPUTS:
;
;	R1=ADDRESS OF SYMBOL DESCRIPTOR
;	$PATH=ADDRESS OF PATH LIST CONSTRUCTED BY $WSINI
;
; OUTPUTS:
;
;	C/CLEAR -- FOUND SECTION, EXIT IS VIA CO-ROUTINE CALL
;
;		R0=REAL ADDRESS OF DESCRIPTOR
;		R1=PATH FLAG SET AS FOLLOWS:
;
;			R1=0; FOUND IN CURRENT SEGMENT
;			R1<0; FOUND TOWARDS THE ROOT
;			R1=1; FOUND UP-TREE
;			R1=2; FOUND IN CO-TREE
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1
;
;		$CRVSM=VIRTUAL ADDRESS OF FOUND SECTION
;		$CRVSR=VIRTUAL ADDRESS OF FOUND SEGMENT
;
;	C/SET -- ALL SEGMENTS SEARCHED, EXIT IS VIA RETURN
;		 WITH R1 CLEARED.
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1
;
;-
	PURE.I			; READ-ONLY I-SPACE

$WSRCC::			;
	MOV	$PATH,PATH	; SET CURRENT PATH LIST ADDRESS
	MOV	R1,SYMDIS	; SAVE DESCRIPTOR ADDRESS
10$:				;
	MOV	PATH,R2		; GET CURRENT PATH LIST ADDRESS
	MOV	(R2)+,R1	; GET VIRTUAL ADDRESS OF SEGMENT
	BEQ	20$		; IF EQ SEARCHED ALL SEGMENTS
	MOV	(R2)+,-(SP)	; PUSH PATH FLAG
	MOV	R2,PATH		; SAVE PATH LIST ADDRESS
	CALL	$CVLOK		; CONVERT TO REAL, LOCK IN MEMORY
	MOV	R1,$CRVSR	; SAVE CURRENT SEARCH SEGMENT
	MOV	SYMDIS,R1	; GET ADDRESS OF DESCRIPTOR
	ADD	#S$GCST,R0	; OFFSET TO SECTION TABLE LISTHEAD
	CALL	$SRCH		; SEARCH FOR SYMBOL
	ROL	-(SP)		; SAVE C/BIT
	MOV	R0,-(SP)	; SAVE REAL ADDRESS OF SECTION
	MOV	R1,$CRVSM	; SAVE VIRTUAL ADDRES OF SECTION
	MOV	$CRVSR,R1	; GET VIRTUAL ADDRESS OF SEARCH SEGMENT
	CALL	$UNLPG		; UNLOCK PAGE
	MOV	(SP)+,R0	; RESTORE R0
	ROR	(SP)+		; RESTORE C/BIT
	MOV	(SP)+,R1	; RESTORE PATH FLAG
	BCS	10$		; IF C/S SYMBOL NOT FOUND
	CALL	@(SP)+		; CALL THE CALLER
	BR	10$		; GO AGAIN
20$:				;
	SEC			; TERMINATE SEARCH
	RETURN			;

	.END
