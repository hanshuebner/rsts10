	.TITLE	P3PRE
	.IDENT	/08.07/
;
; COPYRIGHT (c)	1990 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 05-FEB-76
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	08.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	4-MAY-82	08.02
;		CBP050		CONVERT TO MODIFIED FORMAT AUTOLOAD VECTOR
;				GENERATION TO FACILITATE I/D AUTOLOAD
;				SUPPORT AS WELL AS SELECTIVE INCLUSION OF
;				ONLY THOSE AUTOLOADABLE SYMBOLS ACTUALLY
;				REFERENCED BY THE USER TASK.
;
;	C. B. PETROVIC	7-JUN-82	08.03
;		CBP051		ADD AUTOLOAD SUPPORT FOR USER-MODE
;				I/D TASKS.
;
;	J. M. SALMAN	02-SEP-82	08.04
;		JMS067		SUPPORT I/D VERSIONS OF OVERLAY CONTROL
;				ROUTINES: OVIDL, OVIDR, OVIDC.
;
;	J. M. SALMAN	01-OCT-82	08.05
;		JMS073		DON'T INSERT AUTOLOAD SECTIONS FOR SINGLE
;				SEGMENT TASKS EXCEPT WHEN LINKING TO AN
;				OVERLAID LIBRARY.
;
; MODIFIED FOR RSX-11M-PLUS AND MICRO/RSX V4.0 BY:
;
;	L. M. PETERSON	6-JUN-86	08.06
;		LMP045		ADD SUPPORT FOR OTS OPTIMIZATION (ADD
;				$FSTIN AND $MAF__ ENTRY POINTS)
;
; MODIFIED FOR RSX-11M-PLUS AND MICRO/RSX V4.4 BY:
;
;	L. M. PETERSON	2-FEB-90	08.07
;		LMP145A		ALLOW USERS TO INSERT GBLDEFS FOR $MAK__
;				ENTRY POINTS (TO CHOOSE OLD STYLE OTS MODULE
;				FOR MR-DR OVERLAYS THAT DON'T RELOAD DR OVERLAYS
;				IF NOT DISPLACED)
;
; PERFORM PRELIMINARY SYMBOL TABLE PROCESSING
;
; LOCAL MACROS
;
; DEFINE CANNED SECTION TABLE ENTRIES
;
; SECTN	NAME,FLAGS,SEG
;
; WHERE:
;
;	NAME=SECTION NAME
;	OFFSET=OFFSET IN SEGMENT DESCRIPTOR TO RECEIVE SECTION ADDRESS.
;	       BLANK IF NONE.
;	FLAGS=SECTION FLAGS BYTE CONTENTS
;	SEG='ROOT' IF SECTION IS DEFINED IN ROOT SEGMENT ONLY
;

	.MACRO	SECTN	NAME,FLAGS,OFFSET,SEG
.=.-2
$$0=.
	.WORD	0
	.WORD	0
$$$=.
.=.-4
	.RAD50	/NAME/
.=$$$
	.BYTE	FLAGS
	.IF B	SEG
	.BYTE	0
	.IFF
	.BYTE	-1
	.ENDC
	.IF NB	OFFSET
	.WORD	OFFSET
	.IFF
	.WORD	0
	.ENDC
SCTLGH=.-$$0
	.WORD	0
	.ENDM

;
; LOCAL DATA
;
; COMMON STORAGE SHARED WITH MODULE 'PRCLM'
;
;	*** NOTE ***
;
; THE CONTENTS OF THE SECTION DEFINED BELOW MUST MATCH
; THE SECTION CONTENTS SPECIFIED IN MODULE 'PRCLM'.
;

	.PSECT	PRCL$D,RW,D,GBL,REL,OVR

CRSCT:	.BLKW	10.		; CURRENT SECTION DATA
CRVSC:	.BLKW	1		; VIRTUAL ADDRESS OF CURRENT SEGMENT
LOADNM:	.RAD50	/$LOAD/		; NAME OF MANUAL LOAD ROUTINE
MODN:	.BLKW	1		; FIRST HALF OF MODULE NAME
LCLSYM:	.BLKW	12.		; LOCAL SYMBOL STORAGE
SRCPF:	.BLKW	1		; SEARCH PATH FLAG
SRVSG:	.BLKW	1		; VIRTUAL ADDRESS OF SEARCH SEGMENT
SYDEF:	.BLKW	1		; SYMBOL DEFINITION FLAG
SYENT:	.BLKW	2		; SYMBOL ENTRY ADDRESS (VA IN WORD 1,
				; RA IN WORD 2).
SYFLG:	.BLKW	1		; CURRENT SYMBOL FLAGS
CMPVA:	.BLKW	1		; VIRTUAL ADDRESS OF COMPLETION ROUTINE


;
; GSD DISPATCH VECTOR TABLE
;
; THIS TABLE CONTAINS THE ADDRESS OF SUBROUTINES WITHIN MODULE
; 'PRCLM' THAT PROCESS SPECIFIED GSD RECORD TYPES. PRIOR TO
; ISSUING A SUBROUTINE CALL TO ANY OF THESE ENTRY POINTS, THE
; FOLLOWING MUST BE SETUP:
;
; INPUTS:
;
;	R0=REAL ADDRESS OF SEGMENT DESCRIPTOR
;	R1=ADDRESS OF LOCAL SYMBOL DESCRIPTOR (LCLSYM)
;	R4=ADDRESS OF DUMMY ELEMENT DECRIPTOR
;	R5=REAL ADDRESS OF SEGMENT DESCRIPTOR
;	CRSCT=CURRENT SECTION DATA (SETUP BY PSTNME OR SCTNME)
;	MODN=NAME OF SEGMENT BEING PROCESSED
;	$CRELM=ADDRESS OF DUMMY ELEMENT DESCRIPTOR
;	$CRSEG=REAL ADDRSS OF SEGMENT DESCRIPTOR
;	$CRVEL=0 (VIRTUAL ADDRESS OF CURRENT ELEMENT DESCRIPTOR)
;	$CRVSG=VIRTUAL ADDRESS OF SEGMENT DESCRIPTOR
;
;
;	*** NOTE ***
;
; THE CONTENTS OF THIS TABLE ARE ESTABLISHED BY MODULE 'PRCLM'.
; ANY CHANGE IN THAT MODULE MUST BE REFLECTED HEREIN.
;

	.PSECT	GSDV$D,RW,D,GBL,REL,OVR

MODNME:	.BLKW	1		; MODULE NAME
SCTNME:	.BLKW	1		; SECTION NAME
INTSYM:	.BLKW	1		; INTERNAL SYMBOL
XFRADR:	.BLKW	1		; TRANSFER ADDRESS
SYMDCL:	.BLKW	1		; SYMBOL DECLARATION
PSTNME:	.BLKW	1		; PROGRAM SECTION NAME
VIDENT:	.BLKW	1		; VERSION IDENTIFICATION
VSTNME:	.BLKW	1		; VIRTUAL ARRAY NAME
CMPRT:	.BLKW	1		; COMPLETION ROUTINE NAME

;
; DUMMY ELEMENT DESCRIPTOR
;
	IMPURE			; READ/WRITE D-SPACE

DUMMY:	.WORD	0		; LINK TO NEXT
	.BLKW	1		; ADDRESS OF CMT TABLE
	.BLKW	1		; HIGHEST SECTION NUMBER
	.WORD	0		; ELEMENT SWITCH WORD
	.WORD	0		; MODULE IDENTIFICATION
	.WORD	0		; ...
	.WORD	0		; MODULE NAME
	.WORD	0		; ...
	.WORD	0		; VIRTUAL ADDRESS OF CMT TABLE

;
; SYMBOL ENTRY FOR OVERLAY CONTROL ROUTINE
;

MARKS:	.RAD50	/$MA/		; FIRST HALF OF NAME
	.BLKW	1		; SECOND HALF OF NAME
	.BLKB	1		; FLAGS
	.BYTE	0		; UNUSED

;
; SECTION ENTRY LIST
;
; THE SECTIONS DESIGNATED AS 'ROOT' ARE INCLUDED IN THE MAIN
; ROOT SEGMENT ONLY. ALL OTHERS ARE INCLUDED IN EACH SEGMENT OF
; THE TASK.
SCTNM0:
	.WORD	0		; DUMMY WORD AT BEGINNING OF TABLE
				;
	SECTN	$$ALVI,<CS$ACC!CS$REL>,S$GAUT+2
				;
				; AUTOLOAD VECTOR SECTION FOR I/D TASKS
				; SPLIT INTO I-SPACE AND D-SPACE
				; .PSECT $$ALVI,RO,I,LCL,REL,CON
				;
	SECTN	$$ALVD,<CS$ACC!CS$TYP!CS$REL>,S$GDAL+2
				;
				; .PSECT $$ALVD,RO,D,LCL,REL,CON
				;
;

SCTNM1:
	.WORD	0
	SECTN	$$SLVC,<CS$ACC!CS$REL>,S$GSUP+2
				; SUPER-MODE VECTOR SPACE, (RO,I,LCL,REL,CON)
SCTNM:	.WORD	0				; DUMMY ZERO AT START OF TABLE

	SECTN	$$ALVC,<CS$ACC!CS$REL>,S$GAUT+2
				; AUTOLOAD VECTOR SPACE, (RO,I,LCL,REL,CON)
SCTNM2:
	SECTN	$$RGDS,<CS$REL!CS$TYP>,S$GREG+2,ROOT ; REGION DESCRIPTOR
RTSPC:	SECTN	$$RTS,<CS$ACC!CS$ALO!CS$GBL!CS$REL>
				; SEGMENT RETURN POINT, (RO,I,GBL,REL,OVR)
	SECTN	$$SGD0,<CS$ALO!CS$REL!CS$TYP>,,ROOT ; DELIMITING SECTION FOR SEG
	SECTN	$$SGD1,<CS$REL!CS$TYP>,S$GSEG+2,ROOT ; SEGMENT DESCRIPTORS
	SECTN	$$SGD2,<CS$ALO!CS$REL!CS$TYP>,,ROOT ; DELIMITING SECTION FOR SEG
	SECTN	$$WNDS,<CS$REL!CS$TYP>,S$GWND+2,ROOT ; WINDOW DESCRIPTORS

;
; TASK SWITCH WORD
;

TSKSW:	.BLKW	1		;

;
; VIRTUAL ARRAY WINDOW INCREMENT
;

$VSWND::.WORD	0		;

;+
; **-$P3PRE-PERFORM PHASE 3 PRELIMINARY PROCESSING
;
; THIS SUBROUTINE IS CALLED PRIOR TO PHASE 3 ELEMENT PROCESSING
; TO INITIALIZE THE SYMBOL TABLES WITH THE FOLLOWING ENTRIES:
;
;	. GLOBAL SEGMENT NAMES
;	. GLOBAL REFERENCES
;	. PROGRAM SECTION ENTRIES FOR AUTOLOAD VECTORS, SEGMENT
;	  TABLES, SEGMENT RETURN POINT, WINDOW DESCRIPTORS  AND
;	  REGION DESCRIPTORS.
;
; THESE ENTRIES ARE MADE THROUGH CALLS TO SUBROUTINES WITHIN MODULE
; 'PRCLM'. THE INPUTS ARE SETUP TO SIMULATE THOSE FROM AN ACTUAL MODULE.
;
;-
	PURE.I			; READ-ONLY I-SPACE


	.ENABL	LSB

$P3PRE::			;
	SAVRG			; SAVE VOILITILE REGISTERS
	MOV	$TSKNM,R1	; GET ADDRESS OF TASK FILE NAME BLOCK
	CALL	$CVRL		; CONVERT TO REAL
	MOV	E$LSWT(R0),TSKSW ; COPY TASK FILE SWITCH WORD
	CLR	R1		; SET TO INITIALIZE ALLOCATOR
	CALL	$ALSVB		; INITIALIZE SMALL BLOCK ALLOCATION
	CMP	$NUMSG,#1	; TASK OVERLAID?
	BEQ	100$		; IF EQ YES
	MOV	#P3PRE,R0	; GET ADDRESS OF PHASE CONTROL ROUTINE
	CALL	$PCTRL		; CALL PHASE CONTROL ROUTINE
90$:
	RETURN
100$:
	BIT	#OV$RLB,$SWOVR	; LINKING TO AN OVERLAID LIBRARY?
	BEQ	120$		; IF EQ NO
	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT SEGMENT
	CALL	$CVRL		; CONVERT TO REAL
	CALL	$WRMPG		; WRITE MARK THE PAGE
	MOV	R0,R5
	MOV	#SCTNM,R3	; POINT TO $$ALVC (ASSUME NON-I/D TASK)
	BIT	#ID$ATA,$SWTCH	; BUILDING AN I/D TASK?
	BEQ	110$		; IF EQ NO
	MOV	#SCTNM0,R3	; POINT TO SECTIONS $$ALVI AND $$ALVD
	CALL	900$		; AND INSERT THEM GENTLY
	MOV	#SCTNM2-2,R3	; POINT TO THE REST OF THE SECTIONS
110$:	CALL	900$		; AND INSERT THEM
120$:
	BIT	#SU$PLB,$SWOVR	; LINKING TO SUPERVISOR MODE LIBRARY?
	BEQ	90$		; IF EQ NO
	TST	$CMPRT		; BUILDING SUPERVISOR-MODE LIBRARY?
	BNE	90$		; IF NE YES
	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CALL	$WRMPG		; WRITE MARK PAGE
	MOV	R0,R5		;
	MOV	#SCTNM1,R3	; POINT TO SECTION NAME
	CALL	900$		; INSERT SYMBOL
	RETURN			;

;
; PERFORM PHASE DEPENDANT PRE-PROCESSING
;

P3PRE:				;
	SAVRG			; SAVE THE NONVOLATILE REGISTERS
	CALL	$WSINI		; INITIALIZE SEARCH ALGORITHM
	MOV	$CRVSG,R1	; GET VIRTUAL ADDRESS OF SEGMENT DESCRIPTOR
	CALL	$WRMPG		; WRITE-MARK THE PAGE
	MOV	$CRSEG,R5	; GET REAL ADDRESS OF SEGMENT
	CMP	R1,$RTSEG	; AT MAIN ROOT?
	BEQ	1$		; IF EQ, YES					;LMP145A
	JMP	9$								;LMP145A
1$:	MOV	R5,R0		; COPY ADDRESS OF SEGMENT			;LMP145A
	ADD	#S$GSTB,R0	; POINT TO SYMBOL TABLE				;**-2
	MOV	#MARKS-S$YM,R1	; GET ADDRESS OF DESCRIPTOR LESS OFFSET
	MOV	#^RRKS,S$YM+2(R1) ; SET SECOND HALF OF NAME
	MOVB	#SY$GBL,R2	; ASSUME NOT BUILDING LIBRARY
	CMP	$SZSEG,#S$ZSEG+2 ; TASK HAVE RESIDENT OVERLAYS
	BLO	50$		; IF LO NO
	MOV	#^RRKR,S$YM+2(R1) ; RESET NAME
5$:				;
	BIT	#CL$STR,$SWOVR	; ARE WE LINKING TO A CLUSTER LIBRARY?
	BEQ	50$		; IF EQ, NO
	MOV	#^RRKC,S$YM+2(R1) ; RESET NAME TO '$MARKC'
50$:
	BIT	#ID$ATA,$SWTCH	; BUILDING AN I/D TASK?
	BEQ	52$		; IF EQ NO
	SUB	#<^RRKS-^RRDS>,S$YM+2(R1) ; REFERENCE AN I/D MARKS BROTHER
					  ; ($MARDS, $MARDR, OR $MARDC)
	MOV	#S$ZSEG+2,$SZSEG ; ALLOCATE FULL SIZE SEGMENT DESCRIPTORS
52$:
	TST	$AFLG		; USING AUTOLOAD?
	BEQ	53$		; IF EQ, NO
	BIT	#SW$NH,TSKSW	; BUILDING RESIDENT LIBRARY?
	BNE	53$		; IF NE, YES - STICK TO OLD ORIGINAL VERSION
	SUB	#<^RRKS-^RFKS>,S$YM+2(R1) ; REFERENCE THE $MAF__ VERSION
53$:
	BIT	#SW$NH,TSKSW	; TASK HAVE HEADER?
	BEQ	6$		; IF EQ YES
	BISB	#SY$WK,R2	; SET WEAK QUALIFIER
6$:				;
	MOVB	R2,S$YFLG(R1)	; SET FLAGS
	CALL	$SRCH		; SEARCH FOR SYMBOL
	BCS	65$		; IF CS, NO ENTRY				;LMP145A
	MOV	#MARKS-S$YM,R1	; GET ADDRESS OF DESCRIPTOR LESS OFFSET		;LMP145A
	ADD	#<^RRKS-^RFKS>,S$YM+2(R1) ; CHG REF BACK TO ORIGINAL VERSION	;LMP145A
65$:										;**-2
	MOV	#S$YLGH,R1	; GET LENGTH OF ENTRY
	CALL	$ALSVB		; ALLOCATE SMALL BLOCK
	MOV	$ASCT,S$YCMT(R0) ; SET SECTION ADDRESS
	MOV	#MARKS,R2	; POINT TO LOCAL DESCRIPTOR LESS OFFSET
	TST	(R0)+		; POINT TO NAME
	MOV	(R2)+,(R0)+	; SETUP NAME
	MOV	(R2)+,(R0)+	; ...
	MOV	(R2),(R0)	; SETUP FLAGS
	BITB	#SY$WK,(R0)	; WEAK REFERENCE?
	BNE	7$		; IF NE YES
	INC	S$GUND(R5)	; INCREMENT SEGMENT UNDEFINED COUNT
	INC	$MSYMC		; INCREMENT MASTER UNDEFINED COUNT
7$:				;
	MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT
	ADD	#S$GSTB/2,R0	; POINT TO SYMBOL
	CALL	$SRCHI		; SEARCH FOR INSERTION
	CALL	$ISYM		; INSERT SYMBOL
8$:
	BIT	#SW$NH,TSKSW	; BUILDING RESIDENT LIBRARY?
	BNE	9$		; IF NE, YES - DON'T INSERT $FSTIN SYMBOL
	CMP	#1,$NUMSG	; SINGLE SEGMENT TASK?
	BEQ	9$		; IF EQ, YES - DON'T INSERT $FSTIN SYMBOL
	TST	$AFLG		; USING AUTOLOAD?
	BEQ	83$		; IF EQ, NO
	CMP	$SZSEG,#S$ZSEG+2 ; USING MEMORY RESIDENT OVERLAYS?
	BLO	83$		; IF LO NO
	BIT	#FO$MAP,$SWOVR	; USING FAST MAP OTS ROUTINE?
	BNE	9$		; IF NE, YES
83$:	MOV	#S$YLGH,R1	; GET LENGTH OF ENTRY
	CALL	$ALSVB		; ALLOCATE SMALL BLOCK FOR IT
	MOV	$ASCT,S$YCMT(R0)  ; SET SECTION ADDRESS
	MOV	#^R$FS,2(R0)	; SET UP FASTMAP ENTRY POINT NAME
	MOV	#^RTIN,4(R0)	; $FSTIN
	BISB	#<SY$DEF!SY$GBL!SY$REL>,S$YFLG(R0) ; SET FLAGS
	MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT
	ADD	#S$GSTB/2,R0	; POINT TO SYMBOL
	CALL	$SRCHI		; SEARCH FOR INSERTION
	CALL	$ISYM		; INSERT SYMBOL
9$:				;
	BIT	#SU$PLB,$SWOVR	; LINKING TO SUPERVISOR MODE LIBRARY?
	BEQ	910$		; IF EQ NO
	TST	$CMPRT		; BUILDING A SUPERVISOR-MODE LIBRARY?
	BNE	910$		; IF NE YES
	MOV	#SCTNM1,R3	; POINT TO SECTION NAME
	CALL	900$		; INSERT SECTION NAME
910$:
	BIT	#ID$ATA,$SWTCH	; BUILDING AN I/D TASK??
	BEQ	905$		; IF EQ, NO...INSERT $$ALVC
	MOV	#SCTNM0,R3	; IF NE, YES..INSERT $$ALVI AND $$ALVD
	CALL	900$
	MOV	#SCTNM2-2,R3	; POINT TO THE REST OF THE SECTIONS TO ENTER,
				; BUT REMEMBER THAT THE MACRO THAT GENERATES
				; THE SECTION TABLE BACKS THE MACRO'S 'PC'
				; UP BY TWO BYTES...
	BR	900$		; AND STUFF 'EM!
905$:
	MOV	#SCTNM,R3	; POINT TO SECTION NAME LIST
900$:
	MOV	#MODN,R0	; POINT TO MODULE NAME
	MOV	S$GNME(R5),(R0)+ ; SET NAME OF SEGMENT
	MOV	S$GNME+2(R5),(R0) ; ...
	MOV	#DUMMY,R4	; GET ADDRESS OF DUMMY ELEMENT DESCRIPTOR
	CLR	E$LCMT(R4)	; CLEAR ADDRESS OF CMT TABLE
	MOV	#-1,E$LNUM(R4)	; RESET NUMBER OF HIGHEST SECTION
	MOV	R4,$CRELM	; SET ADDRESS OF DUMMY DESCRIPTOR
	CLR	$CRVEL		; CLEAR VIRTUAL DESCRIPTOR ADDRESS
10$:				;
	CALL	INSCT		; INSERT SECTION IN SEGMENT
	BCS	20$		; IF C/S NO MORE TO INSERT
	CMP	R3,#RTSPC+SCTLGH-2 ; INSERTED AUTO RETURN POINT?
	BNE	10$		; IF NE NO
	BITB	#SG$GBL,S$GSTS(R5) ; GLOBAL SEGMENT NAME?
	BEQ	10$		; IF EQ NO
	MOV	#LCLSYM+2,R0	; POINT TO LOCAL DESCRIPTOR
	MOV	S$GNME(R5),(R0)+ ; INSERT NAME
	MOV	S$GNME+2(R5),(R0)+ ; ...
	MOV	#<SY$DEF!SY$GBL!SY$REL>,(R0)+ ; SET FLAGS
	CLR	(R0)		; OFFSET INTO SECTION IS ZERO
	CALL	INSYM		; INSERT SYMBOL IN SEGMENT
	BR	10$		; GO AGAIN
20$:				;
	MOV	#DUMMY,R0	; GET ADDRESS OF DUMMY ELEMENT DESCR.
	CALLR	$DLCMT		; RETURN CMT TABLE TO POOL

	.DSABL	LSB


;
; INSERT SECTION ENTRY IN R3 INTO TABLE
;

INSCT:				;
	SEC			; ASSUME NO MORE ENTRIES IN SECTION LIST
	MOV	#LCLSYM+2,R0	; POINT TO LOCAL DESCRIPTOR
	MOV	(R3)+,(R0)+	; COPY SECTION NAME
	BEQ	30$		; IF EQ AT END OF LIST
	MOV	(R3)+,(R0)+	; COPY SECOND HALF OF NAME
	MOV	(R3)+,(R0)+	; COPY FLAGS
	CLR	(R0)		; CLEAR LENGTH
	TSTB	-(R0)		; ROOT SEGMENT ONLY?
	BEQ	10$		; IF EQ NO
	CMP	$CRVSG,$RTSEG	; AT ROOT?
	BNE	20$		; IF NE NO
10$:				;
	CLRB	(R0)		; CLEAR HIGH FLAGS BYTE
	BIT	#SW$NH,TSKSW	; BUILDING RESIDENT LIBRARY?
	BEQ	15$		; IF EQ NO
	CMP	#1,$NUMSG	; IS THIS AN OVERLAID LIBRARY?
	BEQ	15$		; IF EQ, NO...SINGLE SEGMENT
	MOVB	#CS$RES,(R0)	; FLAG SECTION AS TASK-RESIDENT
15$:				;
	MOV	R5,R0		; COPY REAL ADDRESS OF SEGMENT
	MOV	#LCLSYM,R1	; GET ADDRESS OF LOCAL DESCRIPTOR
	CALL	@PSTNME		; ENTER SECTION IN TABLES
	MOV	R5,R0		; GET ADDRESS OF SEGMENT DESCRIPTOR
	ADD	(R3),R0		; OFFSET TO PROPER SLOT IN DESCRIPTOR
	CMP	R0,R5		; NO OFFSET?
	BEQ	20$		; IF EQ NO OFFSET TO BE SETUP
	MOV	CRVSC,(R0)	; STORE SECTION ADDRESS
20$:				;
	TST	(R3)+		; CLEAR C, ADVANCE TO NEXT ENTRY
30$:				;
	RETURN			;

;
; INSERT A GLOBAL SYMBOL IN SEGMENT.
;
; LOCAL SYMBOL DESCRIPTOR AND CURRENT SECTION MUST BE SETUP
;

INSYM:				;
	MOV	#LCLSYM,R1	; GET ADDRESS OF LOCAL DESCRIPTOR
	MOV	R5,R0		; COPY ADDRESS OF SEGMENT DESCRIPTOR
	CALLR	@SYMDCL		; ENTER SYMBOL IN TABLE

	.END
