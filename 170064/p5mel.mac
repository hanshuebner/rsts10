	.TITLE	P5MEL
	.IDENT	/04.02/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA 27-JAN-74/ J.A. KASSON 20-APR-76
;
; OUTPUT THE TASK BUILDER MAP FOR EACH ELEMENT
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	04.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	J. M. SALMAN	06-OCT-82	04.02
;		JMS077		COMPLETE CBP039.
;
;
; LOCAL DATA
;
	IMPURE			; READ/WRITE D-SPACE

SYMPT:	.BLKW	1		;SYMBOL BUFFER POINTER
T1:	.BLKW	1		;TEMP STORAGE
;
; LOCAL SYMBOL STORAGE
;

LCLSYM:	.BLKW	6		;

;
; MODULE FUNCTION DETAILS:
;
;+
; **-$P5MEL-OUTPUT THE TASK BUILDER MAP FOR EACH ELEMENT IN THE SEGMENT
;
; INPUTS:
;
;	PHASE THREE TABLES
;
; OUTPUTS:
;
;	A MAP OF EACH ELEMENT IS PRODUCED
;
;-
	PURE.I			; READ-ONLY I-SPACE

$P5MEL::			;
	SAVRG			; SAVE NON-VOLATILE REGISTERS
	MOV	$CRELM,R4	; GET ADDRESS OF CURRENT ELEMENT
	BIT	#SW$MA,E$LSWT(R4) ; ELEMENT INCLUDED IN MAP?
	BEQ	5$		; IF EQ YES
	JMP	MODN1		; ELSE TERMINATE ELEMENT PROCESSING
5$:				;
	MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT
	CALL	$ADRSM		; SET ADDRESS LIMITS
	CALL	P5ELT		; OUTPUT ELEMENT NAME
10$:				;
	CALL	$GTBYT		; GET RECORD LENGTH
	BCS	20$		; IF C/S-EOF(ILLEGAL FORMAT)
	MOV	R0,R3		; SAVE RECORD LENGTH
	CALL	$GTWRD		; GET BLOCK TYPE
	SUB	#2,R3		; ADJUST BYTE COUNT
	CMP	R0,#LGBLK	; LEGAL BLOCK TYPE
	BLOS	30$		; IF LOS YES
20$:				;
	CLR	R0		; FORCE ILLEGAL FORMAT
30$:				;
	ASL	R0		; MAKE WORD INDEX
	CALL	@DSPVCT(R0)	; CALL BLOCK DEPENDANT ROUTINE
	BR	10$		; GO AGAIN

;
; DISPATCH VECTOR TABLE
;

	PURE.D			; READ-ONLY D-SPACE

DSPVCT:				;
	.WORD	ILFMT		; BLOCK 0-ILLEGAL BLOCK TYPE
	.WORD	STGSD		; BLOCK 1-START GSD
	.WORD	ENGSD		; BLOCK 2-END GSD
	.WORD	RPEAT		; BLOCK 3-TXT
	.WORD	RPEAT		; BLOCK 4-RLD
	.WORD	RPEAT		; BLOCK 5-ISD
	.WORD	MODND		; BLOCK 6-MODULE END
LGBLK=<.-DSPVCT-2>/2

	PURE.I			; READ-ONLY I-SPACE

;
; START GSD -BLOCK TYPE 1
;

STGSD:				;
	MOV	#LCLSYM+2,R4	; GET ADDRESS TO STORE SYMBOL
	MOV	#4,R5		; SET REPEAT COUNT
10$:				;
	CALL	$GTWRD		; GET A WORD
	MOV	R0,(R4)+	; SAVE IN TEMP BUFFER
	SOB	R5,10$		; REPEAT
	SUB	#8.,R3		; ADJUST FOR SYMBOL ENTRY
	MOV	#LCLSYM,R1	; GET ADDRESS OF SYMBOL DESCRIPTOR
	MOVB	S$CNT(R1),R2	; GET TYPE OF GSD ENTRY
	CMP	R2,#LGTYP	; LEGAL TYPE ?
	BHI	ILFMT		; IF HI ILLEGAL FORMAT
	ASL	R2		; MAKE WORD INDEX
	MOV	$CRSEG,R0	; GET ADDRESS OF CURRENT SEGMENT
	CALL	@GSDVCT(R2)	; DISPATCH TO ROUTINE
	TST	R3		; ANY MORE TO PROCESS
	BGT	STGSD		; IF GT GO AGAIN
	RETURN			;

;
; GSD ENTRY TYPE DISPATCH TABLE
;

	PURE.D			; READ-ONLY D-SPACE

GSDVCT:				;
	.WORD	MODNME		; MODULE NAME
	.WORD	SCTNME		; SECTION NAME
	.WORD	INTSYM		; INTERNAL SYMBOL
	.WORD	XFRADR		; TRANSFER ADDRESS
	.WORD	SYMDCL		; SYMBOL DECLARATION
	.WORD	SCTNME		; PROGRAM SECTION NAME
	.WORD	VIDENT		; VERSION IDENTIFICATION
	.WORD	SCTNME		;VIRTUAL ARRAY STORAGE SECTION
	.WORD	CMPRT		; COMPLETION ROUTINE
LGTYP=<.-GSDVCT-2>/2

	PURE.I			; READ-ONLY I-SPACE

;
; MODULE NAME
;

MODNME:				;
	RETURN			;

;
; SECTION AND PROGRAM SECTION NAME
;

SCTNME:				;
	ADD	#S$GCST,R0	; POINT TO SECTION NAME
	CALL	$SRCH		; SEARCH FOR SYMBOL
	BCS	ILFMT		; IF C/S ILLEGAL FORMAT
	MOV	#LCLSYM,R1	; GET ADDRESS OF LOCAL SYMBOL
	CALLR	$MPSCT		; OUTPUT SECTION NAME

;
; INTERNAL SYMBOL
;

INTSYM:				;
	RETURN			;

;
; TRANSFER ADDRESS
;

XFRADR:				;
	RETURN			;

;
; SYMBOL DECLARATION
;

SYMDCL:				;
	BITB	#SY$DEF,S$YFLG(R1) ; SYMBOL DEFINITION?
	BEQ	20$		; IF EQ NO
	ADD	#S$GSTB,R0	; POINT TO SYMBOL TABLE
	CALL	$SRCH		; SEARCH FOR SYMBOL NAME
	BCS	70$		; IF C/S CHECK IF SELECTIVE MODULE
	BITB	#SY$DEF,S$YFLG(R0) ; DEFINITION?
	BEQ	70$		;++039 IF EQ NO, CHECK IF SELECTIVE MODULE
	CALL	P5SYM		; OUTPUT SYMBOL NAME
	BR	60$		;
20$:				;
	BITB	#SY$WK,S$YFLG(R1);WEAK REFERENCE
	BNE	60$		; IF NE WEAK

	MOV	#$WSRCS,-(SP)	; SET ADDRESS OF SEARCH ROUTINE
30$:				;
	CALL	@(SP)+		; SEARCH FOR SYMBOL
	BCS	50$		; IF C/S NOT THERE
	BLE	35$		;IF LE FOUND ON PATH DOWN
	CMP	$CRVSR,$RTSEG	;FOUND IN MAIN ROOT
	BNE	40$		;IF NE, UNDEFINED REFERENCE
35$:
	BITB	#SY$DEF,S$YFLG(R0) ; DEFINITION ?
	BEQ	30$		; IF EQ-NO CONTINUE SEARCH
	TST	(SP)+		; CLEAN STACK
	BR	60$		; EXIT
40$:				;
	TST	(SP)+		; CLEAN STACK
50$:				;
	MOV	#LCLSYM,R0	; GET ADDRESS OF LOCAL SYMBOL DESCRIPTOR
	CALL	P5USY		; OUTPUT UNDEFINED SYMBOL REFERENCE
60$:				;
	RETURN			;
70$:				;
	BITB	#SY$WK,LCLSYM+S$YFLG;WEAK DEFINITION?
	BNE	80$		;IF NE YES- IGNORE
	MOV	$CRELM,R1	; GET ADDRESS OF ELEMENT DESCRIPTOR
	BIT	#SW$SS,E$LSWT(R1) ; SELECTIVE EXTRACTION MODULE ?
	BEQ	ILFMT		; IF EQ ILLEGAL FORMAT
80$:
	RETURN			;

;
; VERSION IDENTIFIER
;

VIDENT:				;
	RETURN			;

;
; END GSD
;

ENGSD:				;
	BR	RPEAT		;
;
; ILLEGAL FORMAT-BLOCK TYPES 0 - 6
;

ILFMT:				;
	MOV	$INPPT,R2	; GET INPUT FILE RECORD BLOCK
	MOV	R$NAME(R2),R2	; GET ADDRESS OF NAME STRING
	MOV	(PC)+,R1	; DIAGNOSTIC
	.BYTE	E$R14,S$V2	; FATAL-NO RETURN
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE

;
; BLOCK TYPE 6 - MODULE END
;

MODND:				;
	TST	(SP)+		; REMOVE RETURN
	MOV	$CRELM,R4	; GET ELEMENT DESCRIPTOR ADDRESS
MODN1:				;
	MOV	E$LCMT(R4),R3	; GET CMT TABLE ADDRESS
	BEQ	30$		; IF EQ NONE
	MOV	E$LNUM(R4),-(SP) ; GET HIGHEST SECTION NUMBER
	INC	(SP)		; CONVERT TO LOOP COUNT
10$:				;
	MOV	(R3)+,R1	; GET ADDRESS OF ENTRY
	CALL	$CVRL		; CONVERT TO REAL
	CALL	$WRMPG		; WRITE-MARK PAGE
	MOV	(R3)+,R1	; GET MAX LENGTH OF ENTRY
	BITB	#<CS$LIB!CS$ALO>,C$SFLG(R0) ; LIB. OR OVR SECTION?
	BNE	20$		; IF NE YES, DON'T UPDATE LENGTH
	BITB	#CS$REL,C$SFLG(R0) ; ABS SECTION
	BEQ	20$		; IF EQ YES
	ADD	R1,C$SCUR(R0)	; UPDATE CURRENT OFFSET ADDRESS
20$:				;
	DEC	(SP)		; DECREMENT COUNT
	BGT	10$		; IF GT GO AGAIN
	TST	(SP)+		; CLEAN STACK
30$:				;
	RETURN			;

;
; IGNORE REMAINDER OF RECORD
;

RPEAT:				;
	CLR	$NBYTE		; FORCE READ OF NEXT RECORD
	RETURN			;

;
; COMPLETION ROUTINE
;

CMPRT:
	ADD	#S$GSTB,R0	; POINT TO THE SYMBOLTABLE
	CALL	$SRCH		; SEE IF THE SYMBOL'S THERE
	BCC	10$		; IF C CLEAR, YES.
	MOV	#LCLSYM,R0	; NO, POINT TO THE LOCAL SYMBOL STORAGE
	CALL	P5USY		; AND WRITE THE SYMBOL OUT AS UNDEFINED
10$:
	RETURN			; THEN LEAVE...
;
;
	.PSECT	MTX3,RO,D,GBL

	.NLIST	BEX		; JUST TO SAVE PAPER
;
	.ENABLE LC
FMT8:	.ASCIZ	/%2NFile: %X  Title: %2R  Ident: %2R%N/;
FMT9:	.ASCIZ	/    <%2R>: %P %P %P %U.%N/;
FMT35:	.ASCIZ	/ >>>>>>>>>>>> Undefined reference: %2R%2N/
FMT56:	.ASCIZ	/%7S/
	.DSABLE LC

	.EVEN
	.LIST	BEX

	PURE.I			; READ-ONLY I-SPACE

;+
; **-P5ELT-MAP ELEMENT
;
; THIS ROUTINE IS CALLED TO WRITE AN ELEMENT NAME INTO THE LOAD
; MAP FILE.
;
; INPUTS:
;
;	$CRELM=ADDRESS OF CURRENT ELEMENT DESCRIPTOR.
;
; OUTPUTS:
;
;	ELEMENT NAME IS WRITTEN INTO THE LOAD MAP FILE.
;-

P5ELT:
	CALL	$MPFSH		;FLUSH SYMBOL BUFFER
	MOV	$INPPT,R1	;GET INPUT FILE RECORD BLOCK
	CALL	$MPFLE		;SET UP FILE NAME
	MOV	$CRELM,R1	;GET ADDRESS OF ELEMENT DESCRIPTOR
	MOV	E$LMOD(R1),(R2)+;INSERT MODULE NAME
	MOV	E$LMOD+2(R1),(R2)+;
	MOV	E$LIDT(R1),(R2)+;INSERT VERSION IDENTIFICATION
	MOV	E$LIDT+2(R1),(R2)+;
	MOV	#FMT8,R1	;GET ADDRESS OF FORMAT
	CALL	$MPOUT		;
	RETURN

;+
; **-$MPSCT-MAP SECTION
;
; THIS ROUTINE IS CALLED TO WRITE A SECTION NAME INTO THE LOAD
; MAP FILE.
;
; INPUTS:
;
;	R0=ADDRESS OF SECTION TABLE ENTRY.
;	R1=ADDRESS OF GSD ENTRY.
;
; OUTPUTS:
;
;	SECTION NAME IS WRITTEN INTO THE LOAD MAP FILE.
;
;	**NOTE**
;
; PAGE BUFFER CONTAINING SYMBOL MAY BE DISPLACED
;
;-

$MPSCT:
	MOV	R1,-(SP)	; SAVE ADDRESS OF GSD ENTRY
	MOV	R0,-(SP)	; SAVE SECTION ENTRY ADDRESS
	CALL	$MPFSH		; FLUSH SMBOL BUFFER
	MOV	$NCLNM,T1	;REINITIALIZE COLUNM COUNT
	MOV	(SP),R0		; RETRIEVE ENTRY ADDRESS
	MOV	R2,(SP)		; SAVE BUFFER ADDRESS
	BITB	#CS$IND,C$SFLG(R0);INDIRECT ENTRY?
	BEQ	10$		;IF EQ NO
	MOV	C$SBSE(R0),R1	; GET VIRTUAL ADDRESS OF REAL ENTRY
	CALL	$CVRL		; CONVERT TO READ ADDRESS
10$:				;
	MOV	(SP)+,R2	; RETRIEVE ADDRESS OF BUFFER
	MOV	(SP)+,R1	; RETRIEVE ADDRESS OF GSD ENTRY
	CALL	$MPCHK		; CHECK SECTION NAME
	MOV	C$SCUR(R0),(R2)	;GET CURRENT SECTION BASE
	MOV	(R2)+,(R2)+	;COPY SECTION BASE ADDRESS
	MOV	C$SBSE(R1),(R2)	;INSERT LENGTH OF SECTION
	CALL	$MPCAL		;CALCULATE ENDING ADDRESS AND RELOCATE
	MOV	#FMT9,R1	;GET ADDRESS OF FORMAT
	CMP	$ABSNM,$SYMBF	;ABS SECTION?
	BEQ	20$		;IF EQ YES
	CMP	$SYMBF,(PC)+	;BLANK CONTROL SECTION?
	.RAD50	/. B/		;
	BNE	15$		;IF NE NO
	TST	$SYMBF+10	;ZERO LENGTH?
	BEQ	20$		;IF EQ YES
15$:	JMP	$MPOUT		;OUTPUT SECTION NAME
20$:	INCB	$MPFLG+1	;SET ABS SECTION WAITING FLAG
30$:	RETURN			;
;+
; **-P5USY-UNDEFINED SYMBOL REFERENCE
;
; THIS ROUTINE IS CALLED TO OUTPUT AN UNDEFINED SYMBOL REFERENCE FOR
; A MODULE.
;
; INPUTS:
;
; 	R0=ADDRESS OF SYMBOL DESCRIPTOR.
;
; OUTPUTS:
;
;	UNDEFINED SYMBOL REFERENCE IS WRITTEN INTO MAP FILE.
;-

P5USY:	MOV	R0,-(SP)	;SAVE ENTRY ADDRESS
	MOV	#FMT9,R1	;GET ADDRESS OF FORMAT
	TSTB	$MPFLG+1	;ABS SECTION WAITING?
	BEQ	10$		;IF EQ NO
	CALL	$MPOUT		;OUTPUT SECTION NAME
10$:	CALL	$MPFSH		;FLUSH ANY SYMBOLS IN BUFFER
	MOV	$NCLNM,T1	;RE-INITIALIZE COLUNM COUNT
	MOV	(SP)+,R0	;RETRIEVE ENTRY ADDRESS
	MOV	S$YM(R0),(R2)+	;INSERT SYMBOL NAME
	MOV	S$YM+2(R0),(R2)	;
	MOV	#FMT35,R1	;GET ADDRESS OF FORMAT
	CALL	$MPOUT		;OUTPUT UNDEFINED SYMBOL REFERENCE
	RETURN			;

;+
; **-P5SYM-MAP SYMBOL
;
; THIS ROUTINE IS CALLED TO WRITE A SYMBOL NAME INTO THE LOAD
; MAP FILE.
;
; INPUTS:
;
;	R0=ADDRESS OF SYMBOL DESCRIPTOR.
;
; OUTPUTS:
;
;	SYMBOL IS WRITTEN INTO THE LOAD MAP FILE.
;-

P5SYM:
	MOV	#FMT9,R1	;GET ADDRESS OF FORMAT
	MOV	R0,-(SP)	;SAVE SYMBOL DESCRIPTOR ADDRESS
	TSTB	$MPFLG+1	;ABS SECTION WAITING?
	BEQ	5$		;IF EQ NO
	CALL	$MPOUT		;OUTPUT SECTION NAME
5$:	MOV	SYMPT,R2	;ASSUME BUFFER NOT EMPTY
	TST	$MPFLG		;ANYTHING IN BUFFER?
	BNE	10$		;IF EQ NO
	MOV	#FMT56,R1
	CALL	$MPOUT
	MOV	#$SYMBF,R2
10$:	MOV	(SP)+,R0	;RETRIEVE SYMBOL DESCRIPTOR ADDRESS
	CALL	$MPSYM
20$:	INC	$MPFLG		;UPDATE MAP BUFFER FLAG
	MOV	R2,SYMPT	;SET NEW BUFFER POINTER
	DEC	T1		;END OF BUFFER?
	BNE	30$		;IF NE NO
	CALL	$MPFSH		;YES-FLUSH SYMBOL BUFFER
	MOV	$NCLNM,T1	;RESTORE COLUNM COUNT
30$:	RETURN			;

	.END
