	.TITLE	ALSGD
	.IDENT	/06.04/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA	14-MAR-74
;
; MODIFIED BY:
;
;	C. B. PETROVIC		26-FEB-82	06.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC		7-JUN-82	06.02
;		CBP051		ADD AUTOLOAD SUPPORT FOR USER-MODE
;				I/D TASKS.
;
;	C. B. PETROVIC	19-OCT-83	06.03
;		CBP116		ADD SUBLISTS TO P-SECT TABLES TO SPEED 
;				UP SEARCH.
;
;	C. B. PETROVIC	18-MAR-85	06.04
;		CBP162		ADD CONDITIONAL ASSEMBLY PARAMETER TO
;				P-SECTION SUBLIST
;
;
;
;+
; **-$ALSGD-ALLOCATE SEGMENT DESCRIPTOR
;
; THIS ROUTINE IS CALLED TO ALLOCATE A SEGMENT DESCRIPTOR IN VIRTUAL
; MEMORY. STORAGE IS ALLOCATED AND THE DESCRIPTOR IS INITIALIZED.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	R0=REAL ADDRESS OF DESCRIPTOR
;	R1=VIRTUAL ADDRESS OF DESCRIPTOR
;	SEGMENT COUNT IS INCREMENTED.
;-
	PURE.I			; READ-ONLY I-SPACE

$ALSGD::MOV	#S$ZSEQ,R1	;GET SIZE OF SEQUENCE LIST ENTRY
	CALL	$ALBLK		;ALLOCATE STORAGE
	MOV	$ASCT,2(R0)	; SET ADDRESS OF ABS SECTION ENTRY
	MOV	R0,-(SP)	;SAVE ADDRESS FOR LATER
	MOV	#S$GLGH,R1	;GET SIZE OF SEGMENT DESCRIPTOR
	BIT	#ID$ATA,$SWTCH	; ARE WE BUILDING AN I/D TASK?
	BEQ	10$		; IF EQ, NO...CONVENTIONAL, USE NORMAL LENGTH
				; INTERNAL SEGMENT DESCRIPTOR.
	ADD	#S$GDLG,R1	; IF NE, YES...ALLOCATE D-SPACE EXTENSION ALSO
10$:
	CALL	$ALVRT		; ALLOCATE VIRTUAL MEMORY
	MOV	#L$HCNT-1,S$GSTB(R0) ;++038 SET LISTHEAD COUNT FOR SYMBOLS

	.IF DF	R$$CST

	MOV	#L$HCNT-1,S$GCST(R0) ; SET LISTHEAD COUNT FOR P-SECTIONS

	.ENDC	;R$$CST

	MOVB	#<SG$DES!SG$MEM>,S$GSTS(R0) ; SET STATUS
	MOV	R1,S$GNXT(R0)	; SET VIRTUAL ADDRESS OF NEXT
	MOV	R1,S$GPRV(R0)	; SET VIRTUAL ADDRESS OF PREVIOUS
	MOV	R1,S$GELT+2(R0)	; SETUP ELEMENT LISTHEAD
	ADD	#<S$GELT/2>,S$GELT+2(R0) ; LAST POINTS TO FIRST INITALLY
	MOV	R0,R2		;COPY ADDRESS OF BLOCK
	ADD	#S$GATL,R2	;POINT TO AUTOLOAD LIST
	MOV	R2,2(R2)	;LAST POINTS TO FIRST
	MOV	(SP),S$GSEQ(R0)	;INITIALIZE SEQUENCE ALLOCATION LISTHEAD
	MOV	(SP)+,S$GSEQ+2(R0);
	INC	$NUMSG		;INCREMENT NUMBER OF SEGMENTS
	RETURN			;

	.END
