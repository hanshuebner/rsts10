	.TITLE	WSRFS
	.IDENT	/00.02/
;
; COPYRIGHT (c) 1985 BY DIGITAL EQUIPMENT CORPORATION
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 23-SEP-75
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	00.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;
;	C. B. PETROVIC	20-MAR-85	00.02
;		CBP163		ADD SECOND DEFAULT TASK SWITCH WORD
;				IN PREPARATION FOR THE ELIMINATION
;				OF THE SLOW TASK BUILDER (STK) AND
;				ADD THE /SL SWITCH.
;
;
;
;
; SYMBOL TABLE WHOLE SEARCH ROUTINE
;
; LOCAL DATA
;
; CURRENT PATH LIST ADDRESS
;

	IMPURE			; READ/WRITE D-SPACE
PATH:	.BLKW	1		;

;
; SYMBOL DESCRIPTOR
;

SYM:	.BLKW	2		;
	.WORD	0		;
;+
; **-$WSRCS-PERFORM WHOLE SEARCH OF SYMBOL TABLES
;
; THIS SUBROUTINE IS CALLED TO SEARCH FOR A GLOBAL SYMBOL
; IN A SEGMENT THAT IS ON A COMMON PATH WITH THE CURRENT
; SEGMENT BEING PROCESSED. PRIOR TO CALLING THIS ROUTINE
; SUBROUTINE $WSINI MUST BE INVOKED TO BUILD THE
; PATH LIST CONTAINING THE VIRTUAL ADDRESS OF ALL SEGMENTS
; THAT ARE VISIBLE FROM THE CURRENT SEGMENT.
;
; THE CURRENT SEGMENT IS SEARCHED ON THE INITIAL CALL. IF THE
; SYMBOL IS FOUND, A CO-ROUTINE CALL IS MADE TO THE CALLER WITH
; THE C-BIT CLEAR. SUBSEQUENT CO-ROUTINE CALLS ARE MADE TO SEEK
; ADDITIONAL SYMBOL TABLE ENTRIES IN THE STRUCTURE. THE SEARCH
; FOR THESE ENTRIES IS PERFORMED BY REFERENCING THE MASTER SYMBOL
; TABLE AND THE PATH LIST. ALL SYMBOLS OF THE SPECIFIED NAME WITHIN
; THE TABLE ARE SCANNED EXTRACTING THE VIRTUAL ADDRESS OF THE
; SEGMENT DESCRIPTOR AND CORRESPONDING ENTRY. THE PATH LIST
; IS THEN SEARCHED FOR A MATCH ON SEGMENT DESCRIPTOR ADDRESS
; FOR EACH TABLE ENTRY FOUND. A CO-ROUTINE CALL IS MADE TO THE
; CALLER FOR EACH MATCH.
;
; WHEN NO MORE ENTRIES REMAIN, THE ROUTINE EXITS VIA A RETURN
; WITH THE C-BIT SET. CALLER MAY TERMINATE THE SEARCH BY REMOVING
; THE CO-ROUTINE ADDRESS FROM THE STACK.
;
; INPUTS:
;
;	R1=ADDRESS OF SYMBOL DESCRIPTOR
;	$CRSEG=REAL ADDRESS OF CURRENT SEGMENT
;	$CRVSG=VIRTUAL ADDRESS OF CURRENT SEGMENT
;
; IF TASK HAS MORE THAN ONE SEGMENT, THE FOLLOWING ADDITIONAL
; INPUTS ARE REQUIRED:
;
;	$PATH=ADDRESS OF PATH LIST BUILT BY $WSINI
;	$SGLST=BUFFER TO CONTAIN SEGMENTS AND SYMBOL ADDRESSES
;	$SYMHD=LISTHEAD FOR MASTER SYMBOL TABLE
;	$WSEXT=SEARCH EXTENT FLAG. IF CLEAR, THE SEARCH IS CONFINED
;	       TO THE CURRENT CO-TREE AND MAIN ROOT. ELSE THE SEARCH
;	       EXTENT COVERS ALL CO-TREES.
;
; OUTPUTS:
;
;	C/CLEAR -- FOUND SYMBOL, EXIT IS VIA CO-ROUTINE CALL.
;
;		R0=REAL ADDRESS OF DESCRIPTOR
;		R1=PATH FLAG. ONE OF THE FOLLOWING
;		   VALUES IS RETURNED:
;
;			R1=0; FOUND IN CURRENT SEGMENT
;			R1<0; FOUND TOWARDS THE ROOT
;			R1=1; FOUND UP-TREE
;			R1=2; FOUND IN CO-TREE
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1.
;
;		$CRVSM=VIRTUAL ADDRESS OF FOUND SYMBOL
;		$CRVSR=VIRTUAL ADDRESS OF FOUND SEGMENT
;
;	C/SET -- NO FURTHER ENTRIES CAN BE FOUND. EXIT IS
;	         VIA A RETURN WITH R1 CLEARED.
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1
;
;-
	PURE.I			; READ-ONLY I-SPACE

$WSRFS::
	MOV	$CRSEG,R0	; GET REAL ADDRESS OF CURRENT SEGMENT
	ADD	#S$GSTB,R0	; OFFSET TO SYMBOL TABLE LISTHEAD
	MOV	$CRVSG,$CRVSR	; SET VIRTUAL ADDRESS OF SEARCH SEGMENT
	MOV	#SYM,R2		; GET ADDRESS OF DESCRIPTOR
	MOV	S$YM(R1),(R2)+	; COPY SYMBOL NAME
	MOV	S$YM+2(R1),(R2) ; ...
	CALL	$SRCH		; SEARCH FOR SYMBOL
	BCS	10$		; IF C/S NOT IN CURRENT SEGMENT
	MOV	R1,$CRVSM	; RECORD VIRTUAL ADDRESS OF SYMBOL
	CLR	R1		; SET PATH FLAG=CURRENT
	CALL	@(SP)+		; CALL THE CALLER
10$:				;
	MOV	$SGLST,R1	; GET ADDRESS OF SEGMENT LIST
	BEQ	80$		; IF EQ NONE
	MOV	R3,-(SP)	; SAVE R3
	MOV	R1,R3		; COPY ADDRESS OF SEGMENT LIST
	MOV	#$SYMHD,R0	; GET ADDRESS OF MASTER TABLE
	MOV	#SYM-6,R1	; GET ADDRESS OF DESCRIPTOR LESS OFFSET
	MOV	#$ISEDP,-(SP)	; SET TO SCAN MASTER TABLE
20$:				;
	CLR	(R3)		; ASSUME END OF LIST
	CALL	@(SP)+		; FETCH AN ENTRY FROM MASTER LIST
	BCS	30$		; IF C/S END OF LIST
	ADD	#6,R0		; OFFSET TO SYMBOL NAME
	CMP	SYM,(R0)+	; NAME MATCH?
	BNE	25$		; IF NE NO
	CMP	SYM+2,(R0)+	; CHECK SECOND HALF OF NAME
	BNE	25$		; IF NE NO MORE MATCHES POSSIBLE
	MOV	(R0)+,(R3)+	; COPY SEGMENT DESCRIPTOR ADDRESS
	MOV	(R0)+,(R3)+	; COPY ADDRESS OF SYMBOL
	BR	20$		; CONTINUE SCAN
25$:				;
	INC	(SP)+		; TERMINATE SCAN
30$:				;
	MOV	(SP)+,R3	; RESTORE R3
	MOV	$PATH,R0	; GET PATH LIST ADDRESS
40$:				;
	CMP	(R0)+,(R0)+	; STEP TO NEXT PATH LIST ENTRY
50$:				;
	TST	(R0)		; REACHED END OF PATH LIST?
	BEQ	70$		; IF EQ YES
	TST	$WSEXT		; SEARCH EXTENDED TO ALL TREES?
	BNE	55$		; IF NE YES
	CMP	$CRVSG,$RTSEG	; SEARCHING FROM MAIN ROOT?
	BEQ	55$		; IF EQ YES
	CMP	(R0),$RTSEG	; FOUND MAIN ROOT?
	BEQ	55$		; IF EQ YES
	CMP	2(R0),#2	; IN CO TREE?
	BEQ	40$		; IF EQ YES, STEP TO NEXT ENTRY
55$:				;
	MOV	$SGLST,R1	; GET SEGMENT LIST ADDRESS
	CMP	-(R1),-(R1)	; ADJUST LIST POINTER
60$:				;
	CMP	(R1)+,(R1)+	; POINT TO NEXT SEGMENT LIST ENTRY
	TST	(R1)		; REACHED END OF SEGMENT LIST?
	BEQ	40$		; IF EQ YES, GET NEXT SEGMENT ON PATH
	CMP	(R1),(R0)	; SEGMENT ON PATH HAVE SYMBOL?
	BNE	60$		; IF NE NO
	MOV	R0,PATH		; MARK CURRENT POSITION IN PATH LIST
	MOV	2(R0),-(SP)	; COPY PATH FLAG
	MOV	(R1)+,$CRVSR	; COPY VIRTUAL ADDRESS OF SEGMENT
	MOV	(R1),$CRVSM	; COPY VIRTUAL ADDRESS OF SYMBOL
	MOV	(R1),R1		; GET VIRTUAL ADDRESS OF SYMBOL
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CLC			; SET SUCCESS
	MOV	(SP)+,R1	; RETRIEVE PATH FLAG
	CALL	@(SP)+		; CALL THE CALLER
	MOV	PATH,R0		; RETRIEVE PATH ADDRESS
	BR	40$		; CONTINUE SCAN
70$:				;
	CLR	R1		; CLEAR R1
80$:				;
	SEC			; FLAG END OF SEARCH
	RETURN			;

	.END
