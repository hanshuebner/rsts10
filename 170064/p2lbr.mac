	.TITLE	P2LBR
	.IDENT	/12.16/

;
;
; COPYRIGHT (c) 1988,1991 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED
; OR COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
;
; D. N. CUTLER/C. MONIA 19-DEC-73
;
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	J. A. KASSON
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	15-FEB-82	12.01
;		CBP035		FIX CHECKING OF LIBRARY FILE FLAG BITS AND
;				CORRECT THE SETTING OF A LIBRARY FILES' FLAG
;				BITS IN THE ALLOCATED ELEMENT DESCRIPTOR FOR
;				THAT LIBRARY ELEMENT.
;
;	C. B. PETROVIC	16-FEB-82	12.02
;		CBP036		ALLOW SEARCH OF A LIBRARY FILE THAT IS
;				'HIDDEN' BY PRIMARY LIBRARY. THIS ALLOWS
;				A USER TASK TO TAKE ADVANTAGE OF BOTH
;				LIBRARIES' .STB AND .TSK FILES. THIS FEATURE
;				WAS IN THE DISTRIBUTION VERSION OF TKB THAT
;				WENT OUT WITH V3.2 BUT JAK130 SAW FIT
;				TO REMOVE FOR SOME OBSCURE REASON.
;
; 	C. B. PETROVIC	26-FEB-82	12.03
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	11-MAR-82	12.04
;		CBP042		PRINT CORRECT LIBRARY FILE WHEN TWO
;				LIBRARIES ARE LINKED TOGETHER BUT DO
;				NOT RESIDE ON THE SAME DEVICE AND IN THE
;				SAME UIC (SPR 42008A).
;
;	J. M. SALMAN	30-SEP-82	12.05
;		JMS072		ADD LD$TYP BIT TO LIBRARY FLAGS WORD TO
;				DISTINGUISH DATA COMMONS FROM LIBRARIES.
;
;	J. M. SALMAN	01-OCT-82	12.06
;		JMS073		DON'T INSERT AUTOLOAD SECTIONS FOR SINGLE
;				SEGMENT TASKS EXCEPT WHEN LINKING TO AN
;				OVERLAID LIBRARY.
;
;	C. B. PETROVIC	04-OCT-82	12.07
;		CBP058		FIX PROBLEM OF CLEARING THE LD$ACC BIT IN
;				THE LIBRARY DESCRIPTOR IN THE LABEL BLOCK
;				FOR A TASK WHICH LINKS TO BOTH A SUPER-MODE
;				LIBRARY AND A DATA COMMON.
;
;	J. S. SALMAN	06-OCT-82	12.08
;		JMS077		COMPLETE CBP039.
;
;	C. B. PETROVIC	26-MAY-83	12.09
;		CBP090		ADD TEST FOR MEMORY-RESIDENT OVERLAY STRUCTURE
;				FOR ALL BUT FIRST ELEMENT OF A CLUSTER LIBRARY
;				GROUP.
;
; MODIFIED FOR RSX-11M-PLUS V4.1 BY:
;
;	L. M. PETERSON	28-OCT-87	12.10
;		LMP098		ADD SUPPORT TO RESERVE LIBRARY D-SPACE
;
; MODIFIED FOR RSX-11M-PLUS V4.2 BY:
;
;	L. M. PETERSON	9-MAY-88	12.11
;		LMP111		FIX PROBLEM WITH CLSTR,LIBR SEQUENCE
;				(RESLIBS GET ID'ED AS CLUSTER LIBS, WHICH
;				FOULS UP P5ELM TEST FOR OLD-STYLE LIBRARIES)
;
;	L. M. PETERSON	20-JUL-88	12.12
;		LMP117		FIX LMP098 SO IT WORKS WITH LIBRARIES LINKED
;				TO SUPERVISOR LIBRARIES SINCE THIS M+ FEATURE
;				MAKES THE LABEL BLOCK LONGER
;
;	L. M. PETERSON	7-JAN-89	12.13
;		LMP126		ALLOW RW ACCESS TO SUPERVISOR-MODE LIBRARIES
;				(reconstructed by LBM to propogate .COR across zero 
;				of master pack for CPR v1 before M-PLUS v4.2 ship)
;	L. M. PETERSON	12-JUL-89	12.14
;		LMP135		Set label block definitions with LBLDF$ macro 
;				instead of declaring them 
;
;	L. M. PETERSON	1-OCT-89	12.15
;		LMP140A		Change VAX-11 assembly time conditional to
;				runtime FEAT$ test
;
; MODIFIED FOR RSTS V10.1 BY:
;
;	C. M. KATZ	19-APR-91	12.16
;		CMK001		Add RSTS conditional code
;
; PHASE 2 RESIDENT LIBRARY REQUEST PROCESSING
;
; MACRO LIBRARY CALLS
;

	.MCALL	CLOSE$,CSI$,GET$S,NMBLK$,OFNB$R,FEAT$S,FEADF$
	FEADF$
	CSI$

;
; LOCAL DATA
;
; ADDRESS OF LABEL BLOCK BUFFER
;
	IMPURE			; READ/WRITE D-SPACE

LBADR:	.BLKW	1		;

;
; D-SPACE APRS FROM LIBRARY
;

LBAPR:	.BLKW	1

;
; LIBRARY DEFAULT NAMEBLOCK
;

	.IF	DF,R$RSTS	;++RSTS V8.0					;TWH001
LBDSD:	.BLKW	1		;++RSTS V8.0 WORD FOR DATASET DESCRIPTOR ADDR	;TWH001
	.ENDC			;++RSTS V8.0					;TWH001
LBRNB:	NMBLK$

;
; MODULE FUNCTION-DETAILS
;
;+
;
; **-$LIBR -PROCESS RESIDENT LIBRARY REQUEST
; **-$COMMN-PROCESS RESIDENT COMMON REQUEST
;
; INPUTS:
;
;	R3:	NUMBER OF OPTION PARAMETERS SPECIFIED
;	R5:	POINTER TO START OF OPTION DATA ($PARM)
;
;	$PARM CONTAINS A CSI BLOCK WITH THE LIBRARY DATASET DESCRIPTORS
;	SETUP. THE LIBRARY FILE SWITCH WORD AND APR NUMBER ARE IN
;	LOCATIONS $PARM+C.SIZE AND $PARM+C.SIZE+2 RESPECTIVELY.
;
; OUTPUTS:
;
;	THE RESIDENT LIBRARY LIST IS BUILT.
;	ELEMENT DESCRIPTORS FOR EACH REFERENCED LIBRARY
;	ARE LINKED TO THE ELEMENT LISTHEAD FOR
;	THE ROOT SEGMENT.
;
;
;	(A)	THE LIBRARY NAME MUST BE UNIQUE,
;
;	(B)	THE AREA OF MEMORY ALLOCATED TO THE
;		LIBRARY MUST NOT INTERSECT MEMORY ALLOCATED
;		TO OTHER LIBRARIES OR TO THE TASK ITSELF,
;
;	(C)	THE TOTAL NUMBER OF REFERENCED LIBRARIES MUST BE
;		7 OR LESS.
;
;	IF ANY OF THE ABOVE TESTS FAIL, THE
;	REQUEST IS REJECTED.
;-
	PURE.I			; READ-ONLY I-SPACE

	.ENABL	LSB

$COMMN::
	BIS	#LD$TYP,C.SIZE(R5) ; SET 'COMMON' BIT
$LIBR::				;
	CALL	$SAVAL		; SAVE ALL REGISTERS
	MOV	#-1,LBAPR	; INITIALIZE LBAPR
	MOV	$INIPT,R0	; GET ADDRESS OF INPUT FILE FDB
	CALL	$STRCB		; SETUP RECORD BLOCK
	MOV	#L$BXFR,R1	; GET SIZE OF BLOCK TO ALLOCATE
	ADD	#$LBXL,R1	; INCLUDING SPACE FOR EXTRA WINDOWS
	CALL	$ALBLK		; ALLOCATE BLOCK
	MOV	R0,LBADR	; SAVE ADDRESS OF BLOCK
	MOV	#S.FNBW,R1	; GET SIZE OF FILE NAME BLOCK IN WORDS
	MOV	#LBRNB,R0	; GET ADDRESS OF NAME BLOCK
10$:				;
	CLR	(R0)+		; CLEAR NAME BLOCK
	SOB	R1,10$		; ...
	MOV	#<S$V1*400!E$R66>,R3 ; ASSUME PIC LIBRARY BEING BUILT
	BIT	#SW$NH,$TKSW	; BUILDING LIBRARY?
	BEQ	20$		; IF EQ NO
	BIT	#SW$PI,$TKSW	; PIC LIBRARY?
	BNE	40$		; IF NE YES, ERROR
20$:				;
	.IF	NDF,R$RSTS	;++RSTS V10.1
	FEAT$S	#FE$EXE		; RUNNING ON VAX-11?
	BCS	22$		; IF CS, ASSUME NO
	CMP	#IS.SET,$DSW	; VAX-11?
	BNE	22$		; IF NE, NO
	MOV	#^REXE,LBRNB+N.FTYP ; SET DEFAULT FILE TYPE TO EXE
	BR	23$		; CONTINUE
	.ENDC			;++RSTS V10.1
22$:
	MOV	#^RTSK,LBRNB+N.FTYP ; SET DEFAULT FILE TYPE TO TSK
23$:
	MOV	#"SY,LBRNB+N.DVNM ; SET DEFAULT DEVICE TYPE
	MOV	R5,R2		; SET ADDRESS OF DATA SET DESCRIPTOR
	ADD	#C.DSDS,R2	; OFFSET TO DATASET DESCRIPTORS
	.IF	DF,R$RSTS	;++RSTS V8.0					;TWH001
	MOV	R2,LBDSD	;++RSTS V8.0	SAVE DATASET DESCRIPTOR		;TWH001
	.ENDC			;++RSTS V8.0					;TWH001
	CALL	PRFND		; PARSE/FIND FILE
	MOV	#LBRNB,R1	; GET ADDRESS OF NAME BLOCK
	MOV	#S.FNBW,R2	; GET SIZE OF NAME BLOCK IN WORDS
	ADD	#F.FNB,R0	; POINT TO FILE NAME BLOCK
30$:				;
	MOV	(R0)+,(R1)+	; COPY NAMEBLOCK
	SOB	R2,30$		; ...
	ADD	#N.FID-S.FNB,R1	; POINT TO FILE I/D
	CLR	(R1)+		; RESET I/D
	CLR	(R1)+		; ...
	CLR	(R1)		; ...
	MOV	#^RSTB,LBRNB+N.FTYP ; RESET FILE TYPE
	MOV	C.SIZE(R5),R2	; GET SWITCH WORD
	BIT	#LD$TYP,C.SIZE(R5) ; LIBRARY OR COMMON?
	BNE	34$		; IF NE, COMMON
	MOV	C.SIZE+4(R5),R4	; GET APRS TO RESERVE
	BMI	34$		; IF EQ, NONE
	CMP	#377,R4		; VALID APRS?
	BGT	33$		; IF GT, YES
	MOV	#<S$V1*400!E$R67>,R3 ; INVALID APR -  ERROR
	JMP	ERXT
33$:
	MOV	R4,LBAPR	; SAVE APRS TO RESERVE	
34$:
	MOV	C.SIZE+2(R5),R4	; GET APR NUMBER (BASE)
	BMI	50$		; IF MI, THEN DEFAULT
35$:
	MOV	R4,-(SP)	; SAVE IT FOR MANIPULATION
	.REPT	4		; GOTTA SHIFT IT INTO POSITION
	ASL	(SP)
	.ENDR
	BISB	(SP)+,R2	; CLEAN STACK AND SAVE APR NUMBER
	MOV	#<S$V1*400!E$R67>,R3 ; ASSUME ILLEGAL APR NUMBER
	CMP	R4,#7.		; VALID APR?
	BHI	40$		; IF HI NO
	BIS	#LD$RSV,R2	; SET APR RESERVATION FLAG
	BIT	#MP$SY,$SWTCH	; MAPPED SYSTEM?
	BEQ	50$		; IF EQ NO IGNORE APR
	ASR	R4		; CONVERT APR TO ADDRESS
	ROR	R4		; ...
	ROR	R4		; ...
	ROR	R4		; ...
	BR	60$		;
40$:				;
	JMP	ERXT		; TAKE ERROR EXIT
50$:				;
	CLR	R4		; NO APR SPECIFIED
60$:				;
	MOV	LBADR,R5	; GET ADDRESS OF LIBRARY LIST
	MOV	#<S$V1*400!E$R68>,R3 ; ASSUME LIBRARY FILE I/O ERROR
	OFNB$R	$INIPT		; OPEN TASK IMAGE FILE
	BCS	610$		; IF C/S ERROR
	MOVB	#R.FIX,F.RTYP(R0) ; SET RECORD TYPE=FIXED LENGTH
	MOV	#512.,F.RSIZ(R0) ; SET RECORD SIZE
	MOVB	#FD.PLC,F.RACC(R0) ; ACCESS=PARTIAL LOCATE MODE
	GET$S	R0		; READ FIRST LABEL BLOCK
610$:
	BCC	6101$		; IF CC, CONTINUE
	JMP	110$		; ELSE ERROR
6101$:
	MOV	F.NRBD+2(R0),R1	; GET ADDRESS OF RECORD BUFFER
	TST	LBAPR		      ; RESERVED LIBRARY D-APRS W/OPTION?
	BPL	6103$		      ; IF NE, YES
	CMP	#000401,L$BLRL(R1)    ; CHECK LABEL REVISION NUMBER
	BGT	6103$		      ; IF GT, OLD LIB W/ D-APRS UNRESERVED
	MOV	R1,R3		      ; SET UP FOR POSSIBLE EXTRA LBL BLK LENGTH
	MOV	L$BWND(R3),R0	      ; CHK FOR M+ FEATURES (LARGER LABEL BLOCK)
	SWAB	R0		      ; SET UP TO TEST FOR SYSTEM ID
	CMPB	#4,R0		      ; BUILT WITH M+ FEATURES?
	BNE	6102$		      ; IF NE, NO
	ADD	#$LBXL,R3	      ; ADD IN EXTRA LABEL BLOCK LENGTH
6102$:
	MOV	L$BAPR(R3),LBAPR      ; GET LIBRARY D-SPACE APRS
6103$:
	MOV	#<S$V1*400!E$R100>,R3 ; ASSUME ERROR
	BIT	#SW$NH,$TKSW	; BUILDING A LIBRARY?
	BEQ	62$		; IF EQ NO
	TST	$CMPRT		; BUILDING A SUPERVISOR-MODE LIBRARY?
	BEQ	61$		; IF EQ NO - CAN NOT REFERENCE SUPER LIB
	TST	$SUPLF		; YES - CAN ONLY REFERENCE A SUPER LIB
	BEQ	110$		; IF EQ ERROR
	BR	63$		; REFERENCE OK
61$:
	TST	$SUPLF		; BUILDING NON-SUPLIB CAN'T BE SUPLIB
	BNE	63$		; IF NE, LINKING TO SUPER-MODE LIBRARY
	BR	65$		;
62$:
	TST	$SUPLF		; SUPERVISOR LIBRARY?
	BEQ	65$		; IF EQ NO
63$:
	MOV	#<S$V1*400!E$R99>,R3 ; ASSUME AN ERROR
	BIT	#TS$SUP,L$BFLG(R1) ; BUILT AS SUPERVISOR LIBRARY?
	BEQ	110$		; IF EQ NO - ERROR
	BIS	#LD$SUP,R2	; SET SUPERVISOR LIBRARY FLAG
	BIS	#SU$PLB,$SWOVR	; FLAG LINKINK TO SUPERVISOR MODE LIBRARY
65$:
	BIT	#TS$PIC,L$BFLG(R1) ; TASK PIC?
	BEQ	70$		; IF EQ NO
	BIS	#LD$REL,R2	; SET PIC FLAG
	BIT	#MP$SY,$SWTCH	; SYSTEM MAPPED?
	BNE	70$		; IF NE YES
	BIS	#LD$RSV,R2	; FLAG RESERVED APR
70$:				;
	BIT	#TS$RES,L$BFLG(R1) ; LIBRARY HAVE RESIDENT OVERLAYS
	BEQ	71$		; IF EQ, NO...
	BIS	#LD$RES,R2	; IF NE, YES...FLAG IT AS SUCH
71$:
	TST	$CURCL		; CURRENT LIBRARY PART OF CLUSTER?
	BEQ	75$		; IF EQ NO
	BIS	#LD$CLS,R2	; FLAG LIBRARY AS PART OF CLUSTER
	MOV	L$BMXV(R1),R0	; GET MAX VIRTUAL ADDRESS
	SUB	L$BSA(R1),R0	; SUB START ADDR TO GET LENGTH
	BIC	#17777,R0	; CONVERT TO APR INDEX
	ASL	R0		;
	ROL	R0		;
	ROL	R0		;
	ROL	R0		;
	MOVB	R0,$PARM	; SAVE SIZE IN PARMAATER LIST
75$:
	CMP	(R1)+,(R1)+	; POINT TO TASK DATA BLOCK
	MOV	R5,R0		; COPY LIBRARY LIST POINTER
	MOV	#16.,-(SP)	; PUSH MAX. NUMBER OF LIBRARIES
80$:				;
	MOV	#<L$BLIB-L$BPAR>/2,-(SP) ; PUSH SIZE OF BLOCK IN WORDS
90$:				;
	MOV	(R1)+,(R0)+	; COPY LIBRARY DESCRIPTOR
	DEC	(SP)		; LOOP
	BNE	90$		; ...
	INC	(SP)+		; CLEAN STACK
	BIT	#LD$REL,<L$DFLG-L$DCUR>(R0) ; PIC LIBRARY?
	BEQ	95$		; IF EQ NO
	BIS	#LD$RSV,<L$DFLG-L$DCUR>(R0) ; SET APR RESERVATION FLAG
95$:				;
	DEC	(SP)		; DECREMENT LIBRARY BLOCK COUNT
	BNE	80$		; IF NE MOVE NEXT BLOCK
	INC	(SP)+		; CLEAN STACK
	MOV	LBADR,R5	; GET ADDRESS OF LIBRARY BLOCK
	CMP	-(R5),-(R5)	; ADJUST R5 TO MATCH OFFSETS
	MOV	R2,L$BFLG(R5)	; SET FLAG WORD
	MOV	#LBRNB+N.FNAM,R0 ; POINT TO FILE NAME
	MOV	(R0)+,L$BPAR(R5) ; SETUP LIBRARY NAME
	MOV	(R0),L$BPAR+2(R5) ; ...
	BIT	#MP$SY,$SWTCH	; SYSTEM MAPPED?
	BEQ	100$		; IF EQ NO
	BIT	#LD$REL,R2	; LIBRARY PIC
	BEQ	100$		; IF EQ NO
	SUB	L$BSA(R5),L$BMXV(R5) ; REMOVE ADDRESS BIAS FROM LIBRARY
	SUB	L$BSA(R5),L$BHGV(R5) ; ...
	MOV	#<S$V1*400!E$R67>,R3 ; ASSUME NO ROOM FOR LIBRARY
	MOV	R4,L$BSA(R5)	; SET NEW BIAS
	ADD	R4,L$BHGV(R5)	; RECOMPUTE TOP ADDRESS IN WINDOW ZERO
	ADD	R4,L$BMXV(R5)	; RECOMPUTE TOP VIRTUAL ADDRESS OF LIBRARY
	BCS	110$		; IF C/S ERROR
100$:				;
	CLOSE$	$INIPT		; CLOSE TASK FILE
	BR	130$		;
110$:				;
	CLOSE$	$INIPT		; CLOSE TASK FILE
120$:				;
	JMP	ERXT		; REPORT ERROR
130$:				;
	CMP	#16.,$LBRHD+4	; TOO MANY LIBRARIES REFERENCED ?
	BLO	205$		; IF LO YES
	CLR	LBRNB+N.FVER	; RESET FILE VERSION
	CALL	FNDLF		; AND FIND THE LIBRARY FILE
	CLR	LBRNB+N.FNAM+4	; RESET THE THIRD WORD OF THE NAME
140$:				;
	MOV	#<S$V1*400!E$R71>,R3 ; ASSUME INVALID APR RESERVATION
	MOV	#DSPVCT,R0	; GET DISPATCH TABLE ADDRESS
	MOV	L$BFLG(R5),R1	; GET FLAGS
	BIT	#LD$SUP,R1	; IS THIS A SUPER-MODE 'HIDDEN' LIBRARY
	BEQ	145$		; IF EQ, NO...USER-MODE
	MOV	SP,$SUPLF	; YES, FLAG THIS AS A SUPER-MODE LIBRARY
	BIS	#SU$PLB,$SWOVR	; AND SIGNAL THE NECESSITY FOR SUPER-MODE
				; TREATMENT FOR LATER WHEN WE NEED SUPER-MODE
				; VECTORS AND OTHER SUCH STUFF.
145$:
	BIT	#LD$RSV,R1	; APR RESERVED?
	BEQ	150$		; IF EQ NO
	CMP	(R0)+,(R0)+	; ADJUST TABLE ADDRESS
150$:				;
	BIT	#LD$REL,R1	; LIBRARY PIC?
	BEQ	160$		; IF EQ NO
	TST	(R0)+		; ADJUST TABLE ADDRESS
160$:				;
	JMP	@(R0)+		; DISPATCH ON TABLE ADDRESS

	PURE.D			; READ-ONLY D-SPACE

DSPVCT:	.WORD	ABCHK2		; ADDRESS BOUND CHECK
	.WORD	ABCHK1		; ADDRESS BOUND CHECK IF UNMAPPED
	.WORD	ERXT		; APR RESERVED FOR ABS. LIBRARY
	.WORD	ABCHK2		; CHECK ADDRESS BOUND IF APR RESERVED

	PURE.I			; READ-ONLY I-SPACE

ABCHK1:
	CLR	R2		; CLEAR TOP ADDRESS LIMIT
	BIT	#MP$SY,$SWTCH	; SYSTEM MAPPED?
	BNE	200$		; IF NE YES
ABCHK2:
	MOV	#<S$V1*400!E$R80>,R3  ; ASSUME INCORRECT ADDRESS ALIGNMENT
	MOV	L$BSA(R5),R1	; GET STARTING ADDRESS OF LIBRARY
	BIT	$ADBND,R1	; ALIGNMENT OK?
	BNE	213$		; IF NE NO
	MOV	L$BMXV(R5),R2	; GET TOP VIRTUAL ADDRESS IN LIBRARY
	SUB	R1,R2		; COMPUTE LENGTH
	ADD	#100,R2		; ROUND TO 32W BLOCKS
	BIC	#77,R2		; ...
	ROL	R2		; CONVERT TO 32W BLOCKS
	ROL	R2		; ...
	ROLB	R2		; ...
	SWAB	R2		; ...
200$:				;
	MOV	R5,R0		; COPY CURRENT LIBRARY BLOCK ADDRESS
	CMP	(R0)+,(R0)+	; POINT TO LIBRARY NAME
	BIT	#LD$SUP,L$BFLG(R5) ; SUPERVISOR-MODE LIBRARY?
	BEQ	201$		; IF EQ NO
	CALL	$VTKMP		; YES - VERIFY ADDR BOUNDS BUT NOT PARTITION
	BR	202$
201$:
	CALL	$VLBMP		; VERIFY ADDRESS BOUNDS
202$:
	MOV	#<S$V1*400!E$R61>,R3 ; ASSUME BOUNDARY ERROR
205$:				;
	BCS	120$		; IF C/S ERROR
210$:				;
	MOV	#<S$V1*400!E$R67>,R3 ; ASSUME TOO MANY LIBRARIES
	MOV	#$LBRHD+4,R4	; POINT TO LIBRARY COUNT
	INC	(R4)		; INCREMENT COUNT
	CMP	(R4),#W$NDWS	; TOO MANY LIBRARY REFERENCES?
	BLO	211$		; IF LO NO
2101$:
	JMP	ERXT		; YES - TAKE ERROR EXIT
211$:
	MOV	L$BSEG(R5),R1	; GET SIZE OF SEGMENT DESCRIPTORS
	CMP	R1,#S$ZSEG+2	; LIBRARY HAVE RESIDENT OVERLAYS?
	BLO	212$		; IF LO, NO
	MOV	R1,$SZSEG	;  SET SIZE OF SEGMENT DESCRIPTORS
	BIS	#OV$RLB,$SWOVR	; SET OVERLAID LIBRARY BIT
212$:				;
	MOV	#<S$V1*400!E$R92>,R3 ; ASSUME LIBRARY OFFSET TOO LARGE
	MOV	$LBOFF,R1	; GET TASK OFFSET
	ADD	L$BOFF(R5),R1	; ADD LIBRARY OFFSET
	BCS	2101$		; IF C/S ERROR
	MOV	R1,$LBOFF	; SAVE OFFSET
	MOVB	L$BWND(R5),R1	; GET NUMBER OF WINDOWS
	TST	$CURCL		; CLUSTER LIBRARY?
	BEQ	2121$		; IF EQ NO
	CMP	R1,$CLWND	; NUMBER OF WINDOWS > CURRENT MAX FOR CLUSTER?
	BLE	2122$		; IF LE	NO
	MOV	R1,$CLWND	; MAKE THIS MAX NEEDED FOR CLUSTER
	BR	2122$		;
2121$:
	ADD	R1,$MXWND	; UPDATE NUMBER OF WINDOWS
2122$:
	MOV	#<S$V1*400!E$R88>,R3 ; ASSUME LIBRARY REFERENCES OVERLAID LIBR.
	CMP	L$BLDZ(R5),L$BMXZ(R5) ; LIBRARY OVERLAID?
	BEQ	215$		; IF EQ NO
	BIT	#SW$NH,$TKSW	; BUILDING LIBRARY?
213$:				;
	BEQ	215$		;++RSTS	CAN'T QUITE REACH IT WITH A	;REG001
	JMP	ERXT		;++RSTS	 BRANCH DUE TO ++RSTS CODE	;REG001
;	BNE	ERXT		; IF NE YES, ERROR
215$:				;
	MOV	L$BFLG(R5),R3	; GET FLAGS
	MOV	#L$DLGH,R1	; GET LENGTH OF ENTRY
	CALL	$ALBLK		; ALLOCATE BLOCK
	MOV	R0,@-(R4)	; LINK TO OLD LAST
	MOV	R0,(R4)		; SET NEW LAST
	TST	(R0)+		; STEP PAST LINK WORD FOR COPY
	CMP	(R5)+,(R5)+	; ADJUST LIBRARY LIST POINTER
	MOV	#L$DLGH-6/2,R1	; SET NUMBER OF WORDS TO COPY (EXCLUDE L$DAPR)
220$:				;
	MOV	(R5)+,(R0)+	; COPY ENTRY
	SOB	R1,220$		; ...
	MOV	LBAPR,2(R0)	; COPY LIBRARY DAPRS (-1 IF OLD LIB W/NO DAPRS)
	TST	$SUPLF		; LINKING TO SUPERVISOR MODE LIBRARY?
	BEQ	221$		; IF EQ NO
2200$:
	CALL	$ALEL2		; ALLOCATE ELEMENT DESCR. WITH WORD FOR
				; COMPLETION ROUTINE
	BR	222$		;
221$:
	TST	$CLSHD		; CLUSTER LIBRARIES?
	BNE	2200$		; IF NE YES
	CALL	$ALEL1		; ALLOCATE LARGE ELEMENT DESCR.
222$:
	CALL	$LCKPG		; LOCK DESCRIPTOR IN MEMORY
	MOV	(R4),E$LLGH(R0)	; SET ADDRESS OF LIBRARY LIST ENTRY
	MOV	R1,-(SP)	; SAVE DESCRIPTOR VIRTUAL ADDRESS
	MOV	$LBSWT,R1	; GET LIBRARY FILE SWITCH WORD
	BIC	#^C<SW$MA>,R1	; CLEAR ALL BUT MAP SWITCH
	BIS	#SW$RL,R1	; SET RESIDENT LIBRARY ELEMENT FLAG
	BIT	#LD$SUP,R3	; IS THIS A SUPER-MODE LIBRARY?
	BEQ	225$		; IF EQ NO
	BIS	#SW$SUP,R1	; SET FLAG
	BIT	#LD$SMV,R3	; SUPER-MODE VECTORS WANTED?			;LMP126
	BEQ	225$		; IF EQ, YES					;LMP126
	BIS	#SW$SV,R1	; SET FOR NO VECTORS
225$:
	TST	$CURCL		; CLUSTER LIBRARIES?
	BEQ	226$		; IF EQ NO
	MOV	$CURCV,E$LLGH+2(R0) ; SET VIRTUAL ADDRESS OF CLUSTER
	BIS	#SW$CLS,R1
226$:
	MOV	R1,E$LSWT(R0)	; SET ELEMENT SWITCH WORD
	MOV	R0,R1		; SAVE REAL ADDRESS OF DESCRIPTOR
	CALL	$GTRT		; GET ADDRESS OF ROOT SEGMENT IN R0
	ADD	#S$GELT,R0	; POINT TO ELEMENT DESCRIPTOR
	MOV	(R0)+,E$LNXT(R1) ; SET ADDRESS OF LINK-NEXT
	BNE	230$		; IF NE HAVE LINK NEXT
	MOV	(SP),(R0)	; THIS FILE ALSO LAST IN LIST
230$:				;
	MOV	(SP)+,R1	; RETRIEVE ADDRESS OF ELEMENT DESCR.
	MOV	R1,-(R0)	; MAKE THIS ELEMENT FIRST
	CALL	$UNLPG		; UNLOCK PAGE
	TST	(R5)		; REACHED END OF LIST?
	BEQ	EXIT		; IF EQ YES
	CMP	-(R5),-(R5)	; ADJUST POINTER TO MATCH OFFSETS
	JMP	130$		; GO AGAIN

	.DSABL	LSB
;
; FIND CURRENT STB FILE
;

FNDLF:				;
	MOV	#LBRNB+N.FNAM,R1 ; POINT TO FILE NAME
	MOV	L$BPAR(R5),(R1)+ ; SET FILENAME
	MOV	L$BPAR+2(R5),(R1)+ ; ...
	.IF	NDF,R$RSTS	;++RSTS V8.0					;TWH001
	CLR	R2		; CLEAR DATASET POINTER
	.IFF			;++RSTS V8.0					;TWH001
	MOV	LBDSD,R2	;++RSTS V8.0	RESTORE DATASET POINTER		;TWH001
	.ENDC			;++RSTS V8.0					;TWH001

;
; PARSE FIND .TSK OR .STB FILE
;

PRFND:				;
	MOV	$INIPT,R0	; GET ADDRESS OF RECORD BLOCK
	MOV	F.DSPT(R0),-(SP) ; SAVE ADDRESS OF DATASET DESCRIPTOR
	MOV	F.DFNB(R0),-(SP) ; SAVE ADDRESS OF DEFAULT NAMEBLOCK
	MOV	R2,F.DSPT(R0)	; SET ADDRESS OF DATASET DESCRIPTOR
	MOV	#LBRNB,F.DFNB(R0) ; SET ADDRESS OF DEFAULT NAME BLOCK
	CALL	$PRFND		; PARSE/FIND THE FILE
	BCS	10$		; IF C=1, THEN FILE NOT FOUND
	MOV	(SP)+,F.DFNB(R0) ; RESTORE ADDRESS OF DEFAULT NAME BLOCK
	MOV	(SP)+,F.DSPT(R0) ; RESTORE ADDRESS OF DATASET DESCRIPTOR
	RETURN			;
10$:				;
	CMP	(SP)+,(SP)+	; REMOVE OLD F.DFNB AND F.DSPT
	INC	(SP)+		; REMOVE RETURN ADDRESS FROM STACK
	MOV	R1,R2		; SET ADDRESS OF FILENAME BLOCK
	ADD	#N.FNAM,R2	; POINT TO FILENAME
	MOV	#<S$V1*400!E$R62>,R1 ; SET ERROR CODE, FATAL
	CALLR	$ERMSG		; REPORT ERROR AND EXIT
ERXT:				;
	CALL	$P2OPE		; REPORT ERROR

;
; RETURN LIBRARY BLOCK TO DYNAMIC STORAGE AND EXIT
;

EXIT:				;
	.IF	DF,R$RSTS	;++RSTS V9.7				;REG001
	TST	$TKRTS+4	;++RSTS V9.7 IS THIS A HISEG?		;REG001
	BEQ	10$		;++RSTS V9.7 NO, CONTINUE NORMALLY	;REG001
	CLR	$TKRTS+4	; CLEAR THE ERROR INDICATOR		;REG001
	MOV	R0,-(SP)	;++RSTS V9.7	GET SCRATCH REG		;REG001
	MOV	$LBRHD+2,R0	;++RSTS V9.7	GET BLOCK		;REG001
	MOV	L$DNME(R0),$TKRTS ;++RSTS V9.7 SAVE BOTH PARTS 		;REG001
	MOV	L$DNME+2(R0),$TKRTS+2 ;++RSTS V9.7 ...OF THE NAME	;REG001
	MOV	(SP)+,R0	;++RSTS V9.7 RESTORE THE SCRATCH REGISTER;REG001
10$:									;REG001
	.ENDC			;++RSTS V9.7				;REG001
	MOV	#$PARM+C.SIZE+4,R0 ; RESET DAPR BITMASK TO DEFAULT
	MOV	#-1,(R0)	; FOR POSSIBLE NEXT LIBRARY
	CLR	$SUPLF		; CLEAR FLAG
	MOV	LBADR,R2	; GET ADDRESS OF LIBRARY BLOCK
	MOV	#L$BPRI,R1	; GET SIZE OF ALLOCATION
	MOV	#$FRHD,R0	; GET LISTHEAD ADDRESS
	CALLR	$RLCB		; RELEASE CORE BLOCK

	.END
