	.TITLE	P5MDS
	.IDENT	/17.08/
;
; COPYRIGHT (c)	1986 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; D. N. CUTLER/C. MONIA 27-JAN-74
;
; PHASE 5 MODULE SCAN
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	J. A. KASSON
;	C. B. PETROVIC
;
; MODIFIED BY:
; MODIFIED FOR RSX-11M/M-PLUS V4.1/V2.1 BY:
;
;	C. B. PETROVIC
;
;
;	D. P. RABAHY	29-APR-85	17.04
;		DPR018		DON'T COMPRESS /CM TASKS
;
; MODIFIED FOR RSX-11M-PLUS AND MICRO/RSX V4.0 BY:
;
;	L. M. PETERSON	14-MAY-86	17.08
;		LMP045		ADD SUPPORT FOR OTS OPTIMIZATION (ADD $RTVAL
;				AND RESET $FSTMP SYMBOL TABLE ENTRY)
;
; MACRO LIBRARY CALLS
;

	.MCALL	CLOSE$,OFNB$U

;
; LOCAL DATA
;
	IMPURE			; READ/WRITE D-SPACE

TSKSW:	.BLKW	1		; TASK SWITCH WORD

$RTVAL::.BLKW	1		; SEGMENT ADDRESS OF CURRENT TREE ROOT

$RLTBL::.BLKW	15.		; TABLE OF RESIDENT LIBRARY SGD1 VA'S
$RLCNT::.BLKW	1		; COUNT OF RESIDENT LIBRARIES IN $RLTBL

FSTNM:	.RAD50	/$FSTIN/	; FAST MAP INITIALIZATION ROUTINE ENTRY POINT
RTSNM:	.RAD50	/$$RTS/		; ENTRY POINT FOR DUMMY RETURN IN OVDAT RTS

; AUTOLOAD ENTRY POINT NAME
;

$ALSYM::.RAD50	/.NAUTO/
ALSYM:	.BLKW	2		; ALTERNATE SYMBOL NAME STORAGE SO WE CAN LOOP
				; THRU ALL THE POSSIBLE ALTERNATE AUTOLOAD
				; ENTRYPOINT NAMES FOR OVERLAID SUPER-MODE
				; LIBRARIES. THE NAME WILL BE COPIED FROM
				; $ALSYM AND THE SECOND HALF WILL BE INCREMENTED
				; BY ONE FOR EACH SUPER-MODE LIBRARY THAT WAS
				; SPECIFIED, THUS THE NAMES WHICH CAN BE SEARCHE
				; FOR ARE .NAUTO THRU .NAUTW.

;
; AUTOLOAD VECTOR PROTOTYPE - CONVENTIONAL TASK
;

$ALVCT::JSR	PC,@.NAUTO	; INDIRECT CALL TO $AUTO
;
; AUTOLOAD VECTOR PROTOTYPE - USER I/D TASK (PLACED IN THE PSECT $$ALVD)
;
;	WE ARE MULTIPLEXING THE USE OF THE VECTOR PROTOTYPE FOR A CONVENTIONAL
;	TASK TO CONSERVE SPACE AND EXECUTION TIME. RATHER THAN ALLOCATING A
;	SEPARATE AREA, ONLY THE I-SPACE PART OF THE VECTOR WILL BE NEW.
;
$ALVD::
$ALADR::.BLKW	1		; CALLED SEGMENT DESCRIPTOR ADDRESS
	.BLKW	1		; ADDRESS OF REAL AUTOLOAD ENTRY POINT
$ALVAL::.WORD	0		; TASK-VIRTUAL ADDRESS OF .NAUTO
	.BLKW	8.		; TASK-VIRTUAL ADDRESSES OF ALTERNATE
				; AUTOLOAD ENTRYPOINTS .NAUTP THRU .NAUTW
;
; AUTOLOAD VECTOR PROTOTYPE - USER I/D TASK (PLACED IN THE PSECT $$ALVI)
;
$ALVI::	MOV	(PC)+,-(SP)	; SET ADDRESS OF AUTOLOAD PACKET IN D-SPACE
$ALVDP::.WORD	0		; SEGMENT DESCRIPTOR / TARGET ENTRYPOINT
$ALVIA::JMP	@.NAUTO		; CALL $AUTO THRU THE IMPURE AREA VECTOR
;
; SUPERVISOR MODE LIBRARY OFFSET - USED TO SHOW WHICH OF THE POSSIBLE
;				   EIGHT LIBRARIES IS BEING PROCESSED.
;



;
; SUPERVISOR MODE VECTOR PROTOTYPE
;

$SLVCT:: MOV	#0,-(SP)	; COMPLETION ROUTINE ADDRESS
$SLADR:: CSM	#0		; ADDRESS OF SUPERMODE ROUTINE ADDR


;+
; **-$P5MDS-PHASE 5 MODULE SCAN
;
; THIS ROUTINE IS CALLED TO DO THE PHASE 5 MODULE SCAN OF ALL SEG-
; MENTS IN THE ALLOCATION. AS EACH SEGMENT IS CONSIDERED, THE ELE-
; MENT LIST IS SCANNED. THE SCAN STARTS WITH THE FIRST ELEMENT IN
; THE LIST AND CONTINUES TO THE END OF THE LIST. AS EACH ELEMENT
; IS CONSIDERED, THE NECESSARY RELOCATION IS PERFORMED AND THE RE-
; SULTANT TEXT IS WRITTEN INTO THE TASK IMAGE.FILE.
;
; INPUTS:
;
;	NONE.
;
; OUTPUTS:
;
;	NONE.
;-
	PURE.I			; READ-ONLY I-SPACE

$P5MDS::SAVRG			;SAVE NONVOLITILE REGISTERS
	BIT	#TS$KF,$SWTCH	; TASK IMAGE FILE SPECIFIED?
	BEQ	50$		; IF EQ NO
	CLR	$RLCNT		; CLEAR COUNT OF RESIDENT LIBRARIES
	MOV	$TSKNM,R1	; GET ADDRESS OF TASK FILE NAME BLOCK
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	MOV	E$LSWT(R0),TSKSW ; GET TASK SWITCHES
	BIT	#SW$NH,TSKSW	; BUILDING RESIDENT LIBRARY?
	BNE	10$		; IF NE, YES - NO $FSTIN TO DEAL WITH
	CMP	#1,$NUMSG	; SINGLE SEGMENT TASK?
	BEQ	10$		; IF EQ, YES - NO $FSTIN OR $$RTS TO DEAL WITH
	TST	$AFLG		; USING AUTOLOAD?
	BEQ	5$		; IF EQ, NO - RESET $FSTIN
	CMP	$SZSEG,#S$ZSEG+2 ; TASK HAVE RESIDENT OVERLAYS
	BLO	5$		; IF LO NO - RESET $FSTIN
	BIT	#FO$MAP,$SWOVR	; USING FAST MAP OTS ROUTINE?
	BNE	10$		; IF NE, YES - LET $FSTIN RESOLVE ITSELF
5$:	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT SEGMENT
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	ADD	#S$GCST,R0	; POINT TO SECTION TABLE FOR ROOT
	MOV	#RTSNM-S$YM,R1	; POINT TO AUTOLOAD SEGMENT SECTION
	CALL	$SRCH		; SEARCH FOR SECTION
	BCC	6$		; IF CC, FOUND ENTRY
	BPT
6$:
	MOV	R0,-(SP)	; SAVE REAL ADDRESS OF CSECT SYMBOL
	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT SEGMENT
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	ADD	#S$GSTB,R0	; POINT TO SYMBOL TABLE
	MOV	#FSTNM-S$YM,R1	; REAL ADDRESS OF SYMBOL
	CALL	$SRCH		; SEARCH FOR SYMBOL
	BCC	7$		; IF CC, FOUND ENTRY
	BPT
7$:
	MOV	(SP)+,R1	; GET ADDRESS OF RTS
	MOV	C$SBSE(R1),S$YVAL(R0) ; SET $FSTIN TO $$RTS RETURN	
10$:
	MOV	$INPPT,R0	; GET INPUT FILE RECORD BLOCK
	CALL	$STRCB		; SET FDB RESIDENT
20$:	CLR	$BFFLG		;SET BUFFER FLAG FALSE
	CLR	$WRSEG		;CLEAR SEGMENT BEING WRITTEN INTO
	CLR	R0		; ZERO A COUNTER/POINTER REGISTER
	MOV	$ALSYM,ALSYM	; COPY THE AUTOLOAD NAME TO WORK AREA
22$:
	MOV	$ALSYM+2,ALSYM+2
	ADD	R0,ALSYM+2	; MODIFY THE NAME WE HAVE TO LOOK FOR...
				; ON THE FIRST PASS, WE'LL LOOK FOR .NAUTO,
				; AND EACH SUCCESSIVE PASS WE'LL LOOK FOR THE
				; NEXT NAME UNTIL WE'VE EXHAUSTED THE SUPER-
				; MODE LIBRARY COUNT CONTAINED IN $SUPOF
	MOV	R0,-(SP)	; SAVE R0
	MOV	#ALSYM,R5	; POINT TO THE NAME WE'RE LOOKING FOR
	CALL	25$		; AND FETCH THE TASK-VIRTUAL ADDRESS
	MOV	(SP)+,R0	; RESTORE R0
	MOV	R0,R2		; COPY BEFORE WE...
	ASL	R2		; TURN IT INTO AN ADDRESS
	MOV	R1,$ALVAL(R2)	; SAVE ADDRESS OF .NAUT'X'
	INC	R0		; BUMP THE COUNT
	CMP	R0,$SUPOF	; DID WE LOOK FOR ALL THE ENTRYPOINTS?
	BLE	22$		; IF LE, NO...LOOK FOR MORE
				; IF GT, YES...WE'RE FINISHED
	BR	55$		;

;
; FIND SYMBOL
;
;	INPUTS:
;		R5=ADDRESS OF SYMBOL NAME
;	OUTPUTS:
;		R1= ADDRESS OF SYMBOL (0=NOT FOUND)
;

25$:
	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT SEGMENT
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	ADD	#S$GSTB,R0	;POINT TO SYMBOL TABLE
	MOV	R5,R1		; ADDRESS OF SYMBOL
	SUB	#S$YM,R1	;CALCULATE PROPER OFFSET
	CALL	$SRCH		;SEARCH FOR SYMBOL
	BCS	40$		; IF CS NOT THERE
	BITB	#SY$DEF,S$YFLG(R0);SYMBOL DEFINITION?
	BEQ	40$		;IF EQ NO
	BITB	#SY$IND,S$YFLG(R0);INDIRECT REFERENCE?
	BEQ	30$		;IF EQ NO
	MOV	S$YVAL(R0),R1	; GET V/A OF REAL SYMBOL
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
30$:	MOV	S$YVAL(R0),R1	;GET SYMBOL VALUE
	BITB	#SY$REL,S$YFLG(R0);ABS SYMBOL?
	BEQ	50$		; IF EQ YES
	ADD	$OFFST,R1	;ADD OFFSET BIAS
	BR	50$		;
40$:
	CLR	R1		; SYMBOL NOT FOUND
50$:
	RETURN
55$:
	MOV	#P5MDS,R0	; GET PHASE CONTROL ROUTINE ADDRESS
	CALL	$PCTRL		;CALL PHASE CONTROL ROUTINE
	TST	$CLSHD		; CLUSTER LIBRARIES?
	BEQ	56$		; IF EQ NO

; IF WE ARE BUILDING AN OVERLAYED TASK, THEN OUR CURRENT TASK VIRTUAL ADDRESS
; CONTEXT HAS LEFT US POINTING TO THE HIGHEST SEGMENT.  WE MUST RESTORE THE
; CONTEXT BACK TO THE ROOT SO THAT WE CAN PATCH THE SEGMENT DESCRIPTORS (ET AL)
; IN THE ROOT.  SPECIFICALLY, $$SGD1.

	MOV	$RTSEG,R0	; GET VA OF ROOT
	CALL	$ADRST		; SET UP CURRENT CONTEXT TO POINT TO ROOT
	CALL	$P5CLS		; PATCH SEGMENT DESCRIPTORS FPR CLUSTER LIBS.
56$:
	CALL	$FINFL		;FINISH TASK IMAGE FILE
	CALL	PTCHK		; LOOK FOR BAD PATCHES
	CMP	#1,$NUMSG	; OVERLAYS?
	BEQ	67$		; IF EQ NO
	BIT	#SW$CM, TSKSW		; VMS/AME COMPATIBLITY-MODE?
	BNE	67$			; IF NE, YES, DON'T COMPRESS
	BIT	#SW$MU,TSKSW	; MULTIUSER TASK?
	BEQ	60$		; IF NE NO
	MOV	#2,R0		; SET R-O OFFSET
	BR	65$		; GO COMPRESS
60$:
	BIT	#SW$NH,TSKSW	; LIBRARY?
	BEQ	67$		; IF EQ NO
	CLR	R0		; SET R-W OFFSET
65$:
	CALL	$CMPRS		; COMPRESS FILE
	BR	70$		; FILE WAS CLOSED IN $CMPRS
67$:
	MOV	$RTSEG,R1	; GET VIRTUAL ADDRESS OF ROOT
	CALL	$CVLOK		; CONVERT TO REAL ADDRESS
	MOV	$ROBLK,$REBLK	; SET LAST BLOCK
	MOV	S$GBRO(R0),$ROBLK ; GET FIRST R-O BLOCK
	CLR	R1		; ASSUME THERE'S NO D-SPACE READ-ONLY LENGTH
	BIT	#ID$ATA,$SWTCH	; BUILDING AN I/D TASK??
	BEQ	680$		; IF EQ, NO..CONVENTIONAL
	MOV	S$GROD(R0),R1	; GET THE READ-ONLY D-SPACE LENGTH
	ADD	#777,R1		; ROUND UP TO THE NEXT DISK BLOCK BOUNDARY
	BIC	#777,R1
680$:
	MOV	S$GRO(R0),R0	; GET R-O LENGTH
	ADD	R1,R0		; ADD THE I- AND D-SPACE LENGTHS
	BEQ	69$		; IF EQ NO R/O
	MOV	#<256.*2>,R1	; GET LENGTH OF BLK
	CALL	$DIV		; CALCULATE NUMBER OF BLKS
	TST	R1		;
	BEQ	68$		;
	INC	R0		; ROUND UP
68$:
	ADD	$ROBLK,R0	; ADD TO STARTING R-O BLK
	MOV	R0,$REBLK	; LAST R-O BLK
69$:
	DEC	$REBLK		; BACK OFF ON LAST BLOCK
	CLOSE$	$TSKPT		;CLOSE TASK IMAGE FILE
70$:	RETURN			;
80$:				;
	MOV	#<S$V0*400!E$R25>,R1 ; UNABLE TO RE-OPEN TASK FILE
	MOV	R$NAME(R0),R2	; GET ADDRESS OF NAME STRING
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE
	BIC	#TS$KF,$SWTCH	; CLEAR TASK IMAGE OPTION BIT
	RETURN			; EXIT
;
; SEGMENT RELOCATION
;
; THIS ROUTINE IS CALLED FOR EACH SEGMENT IN THE ALLOCATION.
;

P5MDS:	SAVRG			;SAVE NONVOLITILE REGISTERS
	MOV	$CRVSG,R0	; GET VIRTUAL ADDRESS OF CURRENT SEGMENT
	CALL	$ADRST		;SET ADDRESS LIMITS
	MOV	#$STINP,-(SP)	; SET ADDRESS OF INPUT SETUP ROUTINE
20$:	CALL	@(SP)+		;SET UP NEXT INPUT FILE
	BCS	P5MDS1		;IF CS NO MORE
	CALL	$P5ELM		;PROCESS ELEMENT
	BR	20$		;GO AGAIN
P5MDS1:				; OUTPUT SEGMENT TABLES, AUTOLOAD VECTORS
	CALLR	$P5EOS		; PERFORM END-OF-SEGMENT CLEANUP

 ;
;	THIS ROUTINE SCANS THE PATCH LIST FOR PATCHES THAT
;	COULD NOT BE APPLIED.
;

PTCHK:
	MOV	#$PATHD,R5	; GET PATCH LISTHEAD
10$:
	MOV	(R5),R5		; GET NEXT IN LIST
	BEQ	20$		; IF EQ END OF LIST
	MOV	R5,R2		;
	TST	(R2)+		; SKIP OVER LINK WORD
	TST	(R2)+		; SIGN BIT SET IF PATCH HAS BEEN APPLIED
	BMI	10$		; IF MINUS GO TO NEXT IN LIST
	MOV	#<S$V0*400!E$R97>,R1 ;
	CALL	$ERMSG		; OUTPUT ERROR MESSAGE
	BR	10$		; CONTINUE
20$:
	RETURN


	.END
