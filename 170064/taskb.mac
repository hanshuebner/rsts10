	.IF NDF	W$$OPT
	.TITLE	TASKB
	.IFF 	;W$$OPT DEFINED
	.TITLE	TASKBX
	.ENDC
	.NLIST CND

	.IF DF R$$PRO

	.IF DF D$EBUG 

	.IDENT	/M41D02/

	.IFF

	.IDENT	/M41.02/

	.ENDC	; D$EBUG 


	.IFF

	.IF DF D$EBUG 

	.IDENT	/M41D02/

	.IFF

	.IDENT	/M41.02/

	.ENDC	; D$EBUG 



	.ENDC

;
;		COPYRIGHT (c) 1990 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERRED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
; NOTE ** IN ORDER THAT THERE BE A DISTINCT DIFFERENCE IN VERSION
;	  IDENTIFICATION BETWEEN THE RSX-11M/M+ TASKBUILDER AND THE
;	  P/OS TASKBUILDER DISTRIBUTED WITH THE P/OS TOOLKIT, THE
;	  IDENT MUST  A L W A Y S  BE .01 GREATER THAN THAT OF THE
;	  RSX-11M/M+ TASKBUILDER.
;
;
; D. N. CUTLER/C. MONIA 14-FEB-74
;
; RSX-11D/M TASK BUILDER
;
;
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	M40.03
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	4-MAY-82	M40.04
;		CBP050		CONVERT TO MODIFIED FORMAT AUTOLOAD VECTOR
;				GENERATION TO FACILITATE I/D AUTOLOAD
;				SUPPORT AS WELL AS SELECTIVE INCLUSION OF
;				ONLY THOSE AUTOLOADABLE SYMBOLS ACTUALLY
;				REFERENCED BY THE USER TASK.
;
;	C. B. PETROVIC	7-JUN-82	M40.05
;		CBP051		ADD AUTOLOAD SUPPORT FOR USER-MODE
;				I/D TASKS.
;
;
;	C. B. PETROVIC	03-SEP-82	M40.06
;		CBP056		ADD AUTOLOAD SUPPORT FOR USER-MODE
;				I/D TASKS, PHASE 2. CREATION AND
;				OUTPUT OF TASK-RESIDENT SEGMENT
;				DESCRIPTORS.
;
;	C. B. PETROVIC	04-OCT-82	M40.10
;		CBP059		MODIFY MAP OUTPUT FORMAT TO REFLECT AN
;				I/D TASK MEMORY MAP.
;
;	J. M. Lawler	29-JUN-82	M40.11
;		JML112		TRANSLATE ALL REFERENCES OF LB:[1,1]
;				TO LB:[1,5] FOR P/OS TOOL KIT
;
;
;	C. B. PETROVIC	7-NOV-83	M41.00
;		CBP114		ADD TRACE OF SEGMENT DESCRIPTORS AND 
;				WINDOW DESCRIPTORS.
;
;	C. B. PETROVIC	9-JAN-84	M41D00
;		CBP119		ADD SST HANDLER FOR INTERNAL USE
;
;	P. K. M. WEISS	23-OCT-84	M41.01
;		PKW072		ADD LOGICAL NAME SUPPORT
;
;	L. M. PETERSON	20-NOV-90	M41.02
;		LMP148		CONDITIONALIZE TO MAKE OPTIMIZED VERSION (HFT)
;
;
; MACRO LIBRARY CALLS
;

	.IF	NDF	R$$11M

	.MCALL	CLOSE$,EXIT$S,OPEN$W

	.IFF

	.MCALL	CLOSE$,EXIT$S

	.IF DF D$SVTK

;
; Macros necessary for SST handling
;
	.MCALL	SVTK$S,SNPBK$,SNAP$,GLUN$S

	.ENDC	; D$SVTK


	.IF DF	R$$PRO		; P/OS

	.MCALL	FINIT$,FDBDF$,FDOP$A

	.ENDC	; DF R$$PRO
	.ENDC
;
; LOCAL DATA
;
	IMPURE			; READ/WRITE D-SPACE


	.IF DF	R$$PRO

$TASK::	.RAD50	/PAB/		;DEFAULT TASK NAME

FDB:	FDBDF$			;FDB FOR ROOT PARSE CALLS
	FDOP$A	3,RSX

RSX:	.WORD	$LBSIZ,$RSXLB	;DATA SET DESCRIPTOR FOR
	.WORD	$RSZ,$RSXID	;FOR RSX LIBRARY ACCOUNT
	.WORD	0,0		;LB:[1,1]

PRO:	.WORD	$PLBSZ,$PROLB	;DATA SET DESCRIPTOR FOR
	.WORD	$PSZ,$PROID	;FOR P/OS LIBRARY ACCOUNT
	.WORD	0,0		;LB:

$RDID::.BLKW	5		;SAVE ID FOR LB:[1,1]
$PDID::.BLKW	5		;SAVE ID FOR LB:[1,5]
	IDSIZ = . - $RDID	;SIZE TO ZERO

$RSXLB::.ASCII	/LB:/		;LIBRARY DEVICE NAME
	$LBSIZ == . - $RSXLB

$RSXID:: .ASCII	/[1,1]/		;LIBRARY UIC
	$RSZ == . - $RSXID

$PROLB:	.ASCII	/LB:/		;LIBRARY DEVICE FOR P/OS
	$PLBSZ == . - $PROLB

$PROID:: .ASCII	/[1,5]/		;LIBRARY UIC
	$PSZ == . - $PROID

$PRMPT:: .BYTE	12,15		;
$TSK::	.ASCII	/PAB/		;SAVE AREA FOR 3 CHAR TASK NAME
	.ASCII	/>/
	$PSIZ == . - $PRMPT

	.EVEN

	.ENDC	; DF R$$PRO


SPSAV:	.BLKW	1		;SAVED INITIAL STACK POINTER
$VERSN::.WORD	0		;++037 VERSION IDENTIFICATION
	.WORD	0		;++037
	.EVEN

;+
; **-$TASKB-ENTRY TO TASK BUILDER
;-
	PURE.I			; READ-ONLY I-SPACE

$TASKB::
	MOV	#$VERSN,R0	;++037 GET ADDRESS OF VERSION NUMBER
	TST	(R0)		;++037 RESTART?
	BNE	10$		;++037 IF NE NO
	MOV	R3,(R0)+	;++037 SET FIRST HALF OF VERSION
	MOV	R4,(R0)		;++037 SET SECOND HALF OF VERSION
10$:				;++037

	.IF	NDF	R$$11M

	OPEN$W	$CMOPT		; OPEN COMMAND OUTPUT FILE
	BCS	$QUIT		; IF C/S LEAVE QUIETELY

	.ENDC


	.IF DF 	R$$PRO

; Some people want taskbuilder to always prompt with PAB> rather
; than calculating a task name
;
;	MOV	$TASK,R1	;DEFAULT RAD50 TASK NAME
;	CALL	$GTKNM		;FIGURE OUT TASK NAME
;	MOV	#$TSK,R0	;BUFFER TO RECEIVE ASCII CHARACTERS
;	CALL	$C5TA		;CONVERT RAD50 TO ASCII TASK NAME
	FINIT$			;INIT FCS PRIOR TO PARSE CALL
	MOV	#$RDID+IDSIZ,R5 ;POINT PAST DIRECTORY SAVE AREA
	MOV	#<IDSIZ/2>,R0	;NUMBER OF WORDS
100$:	CLR	-(R5)		;INITIALIZE DIRECTORY ID'S TO ZERO
	SOB	R0,100$		;
	MOV	#FDB,R0		;ADDRESS OF SCRATCH FDB
	MOV	R0,R1		;COPY FDB ADDRESS TO CALCULATE
	ADD	#F.FNB,R1	;ADDRESS OF FILE NAME BLOCK
	MOV	#RSX,R2		;PARSE RSX LIBRARY ACCOUNT
	CLR	R3		;NO DEFAULT NAME BLOCK
	BISB	#FL.AEX,F.FLG(R0) ;TELL .PARSE NOT TO TRY TO EXPAND IT
	CALL	.PARSE		;PARSE FOR DIRECTORY ID, DEVICE NAME
	BCS	300$		;IF CS, ASSUME NO SUCH DIRECTORY
	MOV	R1,R3		;COPY FILE NAME POINTER
	ADD	#N.DID,R3	;POINT TO RETURNED DIRECTORY ID
	CLR	4(R3)		;ALWAYS ZERO FCS SCRATCH WORD
	MOV	#5,R4		;SAVE N.DID (DIRECTORY ID) AND
200$:	MOV	(R3)+,(R5)+	;N.DVNM, N.UNIT (DEVICE NAME
	SOB	R4,200$		;AND UNIT) FROM NAME BLOCK
300$:	MOV	#PRO,R2		;PARSE P/OS LIBRARY ACCOUNT
	CLR	R3		;NO DEFAULT NAME BLOCK
	CALL	.PARSE		;GET FILE ID FOR DIRECTORY [1,5]
	BCS	500$		;IF CS, NO SUCH DIRECTORY
	MOV	#$PDID,R5	;ADDR OF DIRECTORY SAVE AREA
	ADD	#N.DID,R1	;POINT TO DIRECTORY ID
	CLR	4(R1)		;ALWAYS CLEAR FCS SCRATCH WORD
	MOV	#5,R4		;NUMBER OF WDS IN NAME BLOCK
400$:	MOV	(R1)+,(R5)+	;SAVE DIRECTORY ID
	SOB	R4,400$		;DEVICE NAME AND UNIT
500$:

	.ENDC	;R$$PRO

	MOV	SP,SPSAV	;SAVE INITIAL STACK POINTER
	MOV	#EX$SUC,$EXSTS	; ASSUME SUCCESS
TASKB1:	MOV	SPSAV,SP	;RETRIEVE SAVED STACK POINTER
	MOV	#$SWTCH,R5	;GET ADDRESS OF SWITCH OPTION WORD
	MOV	#$PHASE,R4	;GET ADDRESS OF PHASE NUMBER

	.IF DF D$SVTK

	SVTK$S	#$SSTV,#8.	; Set up the SST vectors.

	.ENDC	; D$SVTK

	CALL	$BLDSG		;BUILD SEGMENT DESCRIPTION
	ADD	#2,(R4)		;UPDATE PHASE NUMBER
	CALL	$P2OPT		;PROCESS OPTIONS
	INC	(R4)		;INCREMENT PHASE NUMBER
	CALL	$P3PRE		; PERFORM PREPROCESSING FOR PHASE 3
	CALL	$P3MDS		;CALL PHASE 3 MODULE SCAN
	INC	(R4)		;INCREMENT PHASE NUMBER
	CALL	$P4MAL		;CALL PHASE 4 MEMORY ALLOCATION
	INC	(R4)		;INCREMENT PHASE NUMBER
	BIT	#TS$KF,(R5)	;TASK IMAGE FILE SPECIFIED?
	BEQ	20$		;IF EQ NO
10$:	CALL	$P5MDS		;CALL PHASE 5 MODULE SCAN
20$:				;
	CALL	$P5MAP		; OUTPUT MAP FILE, UNDEFINED SYMBOLS
30$:				;
	INC	(R4)		; INCREMENT PHASE NUMBER
	BIT	#ST$BF,(R5)	;SYMBOL FILE SPECIFIED?
	BEQ	$RSTRT		;IF EQ NO
	CALL	$P6STB		;CALL PHASE 6 SYMBOL TABLE ROUTINE
$RSTRT::			;
										;LMP148
	.IF NDF	W$$OPT								;LMP148
	CLOSE$	$WRKPT		; CLOSE WORK FILE				;LMP148
	.ENDC									;LMP148
										;LMP148
	BIT	#EN$DR,$SWTCH	; END OF RUN?					;**-1
	BEQ	TASKB1		;IF EQ NO
$QUIT::

	.IF	NDF	R$$11M

	CLOSE$	$CMOPT		; CLOSE COMMAND OUTPUT FILE

	.ENDC

	CLOSE$	$CMIPT		;CLOSE COMMAND INPUT FILE
										;LMP148
	.IF NDF	W$$OPT								;LMP148
	CLOSE$	$WRKPT		; CLOSE WORK FILE				;LMP148
	.ENDC									;LMP148
										;LMP148
	MOV	$EXSTS,R0	; GET EXIT STATUS				;**-1
	CALL	$EXST		; EXIT AND RETURN STATUS


	.IF DF	W$$OPT								;LMP148
										;LMP148
;+ DUMMY - HFT task root definition for virtual program section			;LMP148
										;LMP148
										;LMP148
	.PSECT	DUMMY,RW,D,GBL,REL,OVR						;LMP148
										;LMP148
	.ENDC	;W$$KST								;LMP148
										;LMP148
										;LMP148
	.IF DF D$TRAC

	.ENABL	LC
;
;+ Subroutine TRACE
;
; This routine is primarily for debugging the I & D development effort
; but can be used for other purposes. Its primary function is dumping to
; the ODT LUN (.ODTL1) selected offsets within the internal data structure
; descriptors. The routine monitors the internal taskbuilder phase number
; and dumps the list of internal data structure descriptor offsets defined
; by the macro TRC.
;
; Use:
;	MOV	R0,-(SP)	; save R0
;	MOV	phase_num,$TRxPH ; Phase on which to trace the current structure
;	MOV	cur_str,$TRCSP	; real address of the structure to trace
;	MOV	#$TRLST,R0	; point to the list of things to dump
;	CALL	$TRACE		; and do it...
;	MOV	(SP)+,R0	; restore R0.
;
;
; Note that the 'x' represents a unique identifier for a given
; structure. The current convention is as follows:
;
;		'S' - Segment descriptor
;		'W' - Window descriptor
;		'E' - Element descriptor
;
; Inputs:	R0 points to the trace list
; Outputs:	A trace listing will be produced on the .ODTL1 device.
;
; The Trace List must have the following format:
;
;	.PSECT	TRPT$D,RO,D
;$TRxPH::	.WORD	-1			; phase on which to dump the seg desc.
;$TRCSP::	.WORD	0			; address of current structure
;$TRLST::					; reference label
;
;	TRC	OFFSET1,^/%NOFFSET1 - %P%N/
;	TRC	OFFSET2,^/OFFSET2 - %P%N/
;			.
;			.
;			.
;			.
;			.
;	TRC	OFFSETn,^/OFFSETn - %P%N/
;
;	.PSECT	TRPT$D,RO,D
;
;	.WORD	-1			; flag the end of the list
;
; All registers are preserved across the call.
;
; Local data area
;
	IMPURE
;
CURSTR:	.BLKW	1			; real address of current structure
OUTBF:	.BLKB	80.			; output buffer area
;
	.ENABLE	MCL			; Enable Auto Mcall
;
	PURE.I

$TRACE::
	CALL	$SAVAL			; save all registers
	MOV	R0,R3			; get address of trace list
	BEQ	20$			; if eq, no data to dump
	CMP	$PHASE,-4(R3)		; we need to dump the data??
	BNE	20$			; if ne, no...ignore the request
	MOV	-2(R3),CURSTR		; save address of current structure
10$:
	MOV	(R3)+,R2		; get the segment desc. offset
	BMI	20$			; if lt, quit...end of list
	ADD	CURSTR,R2		; create a real address
	MOV	(R3)+,R1		; get the address of the format string
	MOV	#OUTBF,R0		; point to output block
	CALL	$EDMSG			; format the string
	QIOW$S	#IO.WVB,.ODTL1,#1,,,,<#OUTBF,R1,#0> ; scribble it out...
	BR	10$			; do again...
20$:
	RETURN

	.ENDC	; D$TRAC

	.IF DF D$DVBP
;
; Subroutine $DVDBP
;
;	Display debug data from list pushed onto the stack
;
; Call sequence:
;
;	MOV	#PN,-(SP)	; put parameters
;	MOV	#PN-1,-(SP)	; on the stack
;	...
;	MOV	#P0,-(SP)	; last one first
;	MOV	#FMTADR,-(SP)	; address of ASCIZ format string
;	MOV	#PHASEN,$DVDEB	; set phase number to trace on
;	CALL	$DVDBP		; call print routine
;	ADD	#2*N,SP		; remove parameters from the stack
;	CLR	$DVDEB		; clear phase to prevent unwanted tracing
;
; The format string is scanned in a manner similar to $EDMSG and
; the resulting string is output to the device referenced by
; .TRLUN.
;
	IMPURE			; impure data section
;
; define local data
;
$DVDEB::.WORD	0		; 0=> do not display format information
				; N=> display debug information for
				; $PHASE = 'N'
.TRLUN::.WORD	0		; LUN for trace output
$PC::	.WORD	0		; area for saved PC
$SP::	.WORD	0		; area for saved Stack Pointer

	PURE.D			; pure data section

DISFMT:	.ASCIZ	<15><12>/%I/ 	; display format control string
;
; Format and display the input parameters
;
	PURE.I			; pure code section
;
$DVDBP::
	TST	$DVDEB		; does the user want to see this?
	BEQ	100$		; if eq, no...exit quietly
	CMP	$PHASE,$DVDEB	; do the phase numbers agree?
	BNE	100$		; if ne, no...again, exit quietly
	CALL	$SAVAL		; if eq, yes..save all registers for the caller
	ALUN$S	.TRLUN,#"TI,#0	; assign the trace to TI:
	MOV	SP,R2		; point to the call parameters
	MOV	SP,$SP		; save the stack pointer
	ADD	#20,R2		; point to format address
	SUB	#180.,SP	; create the display buffer
	MOV	#DISFMT,R1	; set format string pointer
	MOV	SP,R0		; and set output buffer
	CALL	$EDMSG		; format the buffer
	MOV	R0,R1		; copy buffer end
	MOV	SP,R0		; point to start
	SUB	R0,R1		; and compute size
	QIOW$S	#IO.WVB,.TRLUN,#31.,,,,<R0,R1,#40> ; output the buffer
	MOV	$SP,SP		; remove line buffer by restoring the stack
100$:				; pointer saved previously.
	CLR	$PC		; zero the caller's PC
	RETURN			; and return to caller

	.ENDC	; D$DVBP

	.IF DF D$VMDP

	.MCALL	SNPBK$,SNAP$,GLUN$S

;
; Subroutine $VMDMP
;
;	This routine monitors the Tasbuilder internal phase number
;	and the virtual page and will dump, in snapshot format, the
;	selected virtual page on TI:. The phase number and virtual
;	page are selectable via the 'GBLPAT' option at build time
;	or by re-assembling the module and rebuilding. This value is
;	set to -1 to preclude tracing any virtual memory activity. It
;	is set by the various routines which selectivly turn on the
;	trace feature.
;
;	This routine will trace the selected virtual page
;	during the selected phase for all segments if the
;	value in $VMSEG is -1. If that value is anything
;	else, only the the root segment's references to
;	the selected virtual page will be traced.
;
;	If the high bit of $VMPAG is set, all virtual memory
;	page activity will be traced. The fact that only the
;	low byte is used is only temporary since the virtual
;	memory routines will be modified (or rewritten) in the
;	future to expand it's capablilties. For now, however,
;	the low byte will contain the actual virtual page number
;	and the high BIT will determine if the low byte will be
;	used. If the bit is clear, then the low byte is valid,
;	else the low byte is ignored.
;
;	The location $VMPAD is used to trace virtual memory activity
;	when the real memory address is already known, but not held
;	in R0. If that valueis zero, then the contents of R0 will be
;	the real memory address. If the contents are non-zero, then the
;	value in R0 will be ignored.

	IMPURE

$VMPHZ::.WORD	-1		; Phase on which to shapshot...
$VMPAG::.WORD	0		;  ...this virtual memory page...
$VMSEG::.WORD	-1		;   ...for these segments.........
$VMPAD::.WORD	0		; Real memory address, if there is one...
$VMIDN::.WORD	1		; Identification field for snap block
;
; Define the Snap Block with defaults of:
;
;	SC.HDR!SC.OVL!SC.STK!SC.WRD
;
	SNPBK$	SY,0,SC.HDR!SC.OVL!SC.STK!SC.WRD,1,1
;
; Define storage for the LUN information on TI:
;
..LNBK::
	.BLKW	6.

	PURE.I

$VMDMP::
	CALL	$SAVAL		; Save the general registers
	TST	$VMSEG		; We want to trace all segments?
	BMI	10$		; If MI, yes...bypass the next test
	CMP	$RTSEG,$CRVSG	; Is this the root segment?
	BNE	40$		; If ne, no...bypass
10$:
	CMP	$PHASE,$VMPHZ	; Is this the selected phase?
	BNE	40$		; If NE, no...bypass
	TST	$VMPAG		; We want to trace all virtual pages
	BMI	20$		; If MI, yes...bypass the next test
	SWAB	R1		; Position virtual block to low byte
	CMPB	R1,$VMPAG	; Is this the desired page?
	BNE	40$		; If NE, no...bypass
	SWAB	R1		; Yes, but first straigten the virtual block
20$:
	GLUN$S	#2.,#..LNBK	; Get LUN information for TI:
	MOV	..LNBK+G.LUNA,..SPBK+SB.DEV ; Set ASCII device name
	MOVB	..LNBK+G.LUNU,..SPBK+SB.UNT ; Set physical device number
	MOV	R0,-(SP)	; Save R0 for a while...
	TST	$VMPAD		; Do we have a real memory address here?
	BNE	35$		; If NE, then the real address is in $VMPAD
	MOV	R0,$VMPAD	; If EQ, then the real memory address is
				; in R0...copy to $VMPAD
35$:
	MOV	#..SPBK,R0	; Get address of snap control block
	MOV	$VMIDN,SB.ID(R0); Set identification for the snap dump
	MOV	$VMPAD,SB.LM1(R0) ; Set low address for first snapshot frame
	MOV	$VMPAD,SB.LM1+2(R0) ; Copy low address for first snapshot frame
	ADD	#P$GSIZ,SB.LM1+2(R0) ; Calculate high address for first snapshot
	MOV	$PAGLS,SB.LM1+4(R0)  ; Set low address of resident page list
	MOV	$PAGLS,SB.LM1+6(R0)  ; Copy low address of resident page list
	BEQ	30$		; If EQ, there is none
	ADD	#<P$GSIZ-P$GHD>,SB.LM1+6(R0) ; Calculate ending address
				; of resident page list...
30$:
	MOV	(SP)+,R0	; Restore original contents of R0
	SNAP$			; Display the page and the resident page
				; list if there is one...
40$:
	RETURN			; Now exit...

	.ENDC	; D$VMDP


	.IF DF D$SVTK

;
; This section of code is internal use only and will be conditionalized
; on the definition of D$SVTK. It will remain in the source code as an
; aid to debugging.
;

	.PSECT	$$SSTI,RO,I,GBL		; Program section for SST handler

$SST0::
	MOV	#0,..SPBK+SB.ID		; Set snap identifier - Odd addr.
	BR	$SST
$SST1::
	MOV	#1,..SPBK+SB.ID		; Set snap identifier - Mem. prot.
	BR	$SST
$SST2::
	MOV	#2,..SPBK+SB.ID		; Set snap identifier - T-bit/BPT
	BIS	#SC.WRD,..SPBK+SB.CTL	; Set word dump of Overlay Impure Area
	MOV	@#N.OVPT,..SPBK+SB.LM1	; Set address of Overlay Impure Area
	MOV	@#N.OVPT,..SPBK+SB.LM1+2 ; Copy the address
	ADD	#24,..SPBK+SB.LM1+2	; Calculate ending address
	BR	$SST
$SST3::
	MOV	#3,..SPBK+SB.ID		; Set snap identifier - IOT exec.
	BR	$SST
$SST4::
	MOV	#4,..SPBK+SB.ID		; Set snap identifier - Res. Inst.
	BR	$SST
$SST5::
	MOV	#5,..SPBK+SB.ID		; Set snap identifier - Non-RSX EMT
	BR	$SST
$SST6::
	MOV	#6,..SPBK+SB.ID		; Set snap identifier - TRAP Exec.
	BR	$SST
$SST7::
	MOV	#7,..SPBK+SB.ID		; Set snap identifier - Fltg. Pt. Exc.
$SST::
	GLUN$S	#2.,#..LNBK		; Get LUN information for TI:
	MOV	..LNBK+G.LUNA,..SPBK+SB.DEV ; Set ASCII device name
	MOVB	..LNBK+G.LUNU,..SPBK+SB.UNT ; Set physical device number
	SNAP$				; Execute a snapshot
	EXIT$S				; And exit

	.PSECT	$$SSTD,RW,D,GBL		; Program section for SST handler
					; vector table
$SSTV::
	.WORD	$SST0			; Odd address or non-existant memory.
	.WORD	$SST1			; Memory protect violation.
	.WORD	$SST2			; T-bit trap or BPT execution.
	.WORD	$SST3			; IOT execution trap.
	.WORD	$SST4			; Reserved instruction execution.
	.WORD	$SST5			; Non-RSX EMT execution .
	.WORD	$SST6			; TRAP instruction execution.
	.WORD	$SST7			; Floating point exception.


	.PSECT	$SNAP,RW,D,GBL		; Program section for the snap block

;
; Define the Snap Block with defaults of:
;
	SNPFMT=	SC.HDR!SC.OVL!SC.STK
;
	SNPBK$	SY,0,SNPFMT,1,1,0,0,0,0,0,0,0,0
;
; Define storage for the LUN information on TI:
;
..LNBK::
	.BLKW	6.

	.ENDC	; D$SVTK

	.END	$TASKB
