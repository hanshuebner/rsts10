	.TITLE	ACMOD
	.IDENT	/01.01/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 09-FEB-76
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	01.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
; PHASE 3 COMMON SUBROUTINES
;
; LOCAL DATA
;
	IMPURE			; READ/WRITE D-SPACE

CUREF:	.BLKW	1		; CURRENT REFERENCE
REFHD:	.WORD	0		; REFERENCE LISTHEAD
	.WORD	.-2		; LAST POINTS TO FIRST INITIALLY

;+
; **-$ACMOD-ALLOCATE A CONCATENATED MODULE DESCRIPTOR
;
; THIS SUBROUTINE IS CALLED TO ALLOCATE A DESCRIPTOR FOR MODULES
; CONTAINING CONCATENATED ELEMENTS.
;
; INPUTS:
;
;	R4=ADDRESS OF CURRENT ELEMENT DESCRIPTOR
;
; OUTPUTS:
;
;	R0=REAL ADDRESS OF DESCRIPTOR
;	R1=VIRTUAL ADDRESS OF DESCRIPTOR
;	$CRELM=REAL ADDRESS OF NEW DESCRIPTOR

;	PAGE CONTAINING DESCRIPTOR IS WRITE MARKED
;
;-
	PURE.I			; READ-ONLY I-SPACE

$ACMOD::			;
	MOV	#E$LMND,R1	; GET SIZE OF BLOCK NEEDED
	CALL	$ALSVB		; ALLOCATE VIRTUAL MEMORY
	DEC	E$LNUM(R0)	; SET HIGHEST SECTION NUMBER TO -1
	MOV	E$LSWT(R4),E$LSWT(R0) ; COPY SWITCH WORD OF PARENT ELEMENT
	MOV	R0,$CRELM	; SET ELEMENT DESCRIPTOR ADDRESS
	RETURN			;

;+
; **-$BLDRF-ALLOCATE A SYMBOL REFERENCE ENTRY
;
; THIS ROUTINE IS CALLED TO ALLOCATE A TWO-WORD REFERENCE LIST
; ENTRY WHENEVER AN UNDEFINED GLOBAL SYMBOL IS FOUND. THE LIST
; ENTRIES CONTAIN THE VIRTUAL ADDRESSES OF UNDEFINED SYM-
; BOLS WITHIN THE SEGMENT CURRENTLY BEING PROCESSED.
;
; INPUTS:
;
;	R1=VIRTUAL ADDRESS OF REFERENCE
;	REFHD=REFERENCE LISTHEAD
;
; OUTPUTS:
;
;	ENTRY IS THREADED INTO THE REFERENCE LIST.
;
; ALL REGISTER CONTENTS ARE PRESERVED
;
;-

	.ENABL	LSB

$BLDRF::			;
	SAVVR			; SAVE VOLATILE REGISTERS
	MOV	R1,-(SP)	; SAVE VIRTUAL ADDRESS OF REFERENCE
	MOV	#4,R1		; GET SIZE OF BLOCK
	CALL	$ALBLK		; ALLOCATE CORE BLOCK
	MOV	R0,@REFHD+2	; LINK TO OLD LAST
	MOV	R0,REFHD+2	; SET NEW LAST
	MOV	(SP)+,2(R0)	; RECORD VIRTUAL ADDRESS OF REFERENCE
	RETURN			;

;+
; **-$EDRF-EDIT REFERENCE LIST
;
; THIS SUBROUTINE IS CALLED TO INITIALIZE A SCAN OF THE REFERENCE LIST.
; AS EACH LIST ELEMENT IS SCANNED, THE VIRTUAL AND REAL ADDRESS OF THE
; REFERENCE ARE OBTAINED AND A CO-ROUTINE CALL IS MADE TO THE CALLER
; WITH THE C-BIT CLEAR. A CO-ROUTINE CALL CAUSES THE NEXT ENTRY TO BE
; OBTAINED AS DESCRIBED. WHEN NO FURTHER ENTRIES REMAIN TO BE PRO-
; CESSED THE ROUTINE EXITS VIA A RETURN WITH THE C-BIT SET. THE
; CALLING ROUTINE MAY TERMINATE PROCESSING BY REMOVING THE RETURN
; ADDRESS FROM THE STACK.
;
; INPUTS:
;
;	REFHD=REFERENCE LISTHEAD
;
; OUTPUTS:
;
;	C/CLEAR - NEXT ENTRY FOUND
;
;	R0=REAL ADDRESS OF UNDEFINED SYMBOL
;	R1=VIRTUAL ADDRESS OF UNDEFINED SYMBOL
;
;	EXIT IS VIA A COROUTINE CALL
;
;	C/SET - NO FURTHER ENTRIES TO BE PROCESSED
;
;	EXIT IS VIA A RETURN
;
;-

$EDRF::				;
	MOV	REFHD,CUREF	; SET CURRENT REFERENCE ADDRESS
10$:				;
	MOV	CUREF,R1	; GET ADDRESS OF CURRENT ENTRY
	SEC			; ASSUME END OF LIST
	BEQ	30$		; IF EQ END OF LIST
	MOV	(R1)+,CUREF	; SET ADDRESS OF NEXT
	MOV	(R1),R1		; GET VIRTUAL ADDRESS OF ENTRY
	CALL	$CVRL		; CONVERT TO REAL ADDRESS
	CLC			; SET SUCCESS
	CALL	@(SP)+		; CALL THE CALLER
	BR	10$		; GO AGAIN

;+
; **-$RLREF-FLUSH ALL REFERENCE LIST ENTRIES
;
; THIS SUBROUTINE IS CALLED TO RETURN ALL REFERENCE LIST ENTRIES
; TO DYNAMIC STORAGE.
;
; INPUTS:
;
;	REFHD=REFERENCE LISTHEAD
;
; OUTPUTS:
;
;	ALL REFERENCE LIST ENTRIES ARE RETURNED TO DYNAMIC STORAGE
;
;-

$RLREF::			;
	MOV	REFHD,R2	; GET ADDRESS OF ENTRY
	BEQ	20$		; IF EQ LIST NOW EMPTY
	MOV	(R2),REFHD	; SET ADDRESS OF NEXT
	CALL	RLEASE		; RELEASE ENTRY
	BR	$RLREF		; GO AGAIN
20$:				;
	MOV	#REFHD,REFHD+2	; LAST POINTS TO FIRST
30$:				;
	RETURN			;

;
; RELEASE A REFERENCE LIST ENTRY
;

RLEASE:				;
	MOV	#4,R1		; GET SIZE OF ENTRY
	MOV	#$FRHD,R0	; SET ADDRESS OF LISTHEAD
	CALLR	$RLCB		; RELEASE CORE BLOCK

;+
; **-$DELRF-REMOVE SPECIFIED REFERENCE LIST ENTRY
;
; THIS SUBROUTINE IS CALLED TO SEARCH FOR AND REMOVE AN ENTRY
; IN THE REFERENCE LIST WHOSE SECOND WORD MATCHES A SPECIFIED VIR-
; TUAL ADDRESS. THE ENTRY IS UNLINKED AND RETURNED TO DYNAMIC STORAGE.
;
; INPUTS:
;
;	R1=VIRTUAL ADDRESS OF GLOBAL SYMBOL
;
; OUTPUTS:
;
;	C/CLEAR - REFERENCE LIST ENTRY FOUND AND RELEASED
;
;	C/SET - SPECIFIED REFERENCE LIST ENTRY DOES NOT EXIST
;
; ALL REGISTER CONTENTS ARE PRESERVED
;
;-

$DELRF::			;
	SAVVR			; SAVE THE VOLATILE REGISTERS
	MOV	#REFHD,R2	; GET ADDRESS OF REFERENCE LIST
40$:				;
	MOV	R2,R0		; SET ADDRESS OF PREVIOUS
	MOV	(R0),R2		; GET ADDRESS OF NEXT
	SEC			; ASSUME END OF LIST
	BEQ	60$		; IF EQ END OF LIST
	CMP	2(R2),R1	; FOUND ENTRY?
	BNE	40$		; IF NE NO
	MOV	(R2),(R0)	; RELINK REMAINING ENTRIES
	BNE	50$		;
	MOV	R0,REFHD+2	; SET NEW LAST
50$:				;
	CALL	RLEASE		; RELEASE ENTRY
	CLC			; CLEAR CARRY
60$:				;
	RETURN			;

	.DSABL	LSB

	.END
