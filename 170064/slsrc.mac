	.TITLE	SLSRC
	.IDENT	/00.03/
;
; COPYRIGHT (c)	1983 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE IS FURNISHED  UNDER A LICENSE AND MAY BE USED OR
; COPIED ONLY IN ACCORDANCE WITH THE TERMS OF SUCH LICENSE.
;
;
; C. MONIA 23-SEP-75
;
; MODIFIED BY:
;
;	C. B. PETROVIC	26-FEB-82	00.01
;		CBP039		ADD CORRECT .PSECT DEFINITIONS TO
;				ALLOW TKB TO BE LINKED AS AN I/D TASK.
;
;	C. B. PETROVIC	7-NOV-83	00.02
;		CBP115		CORRECT SETTING OF $CVRSM AND $CRVSR
;				WHEN SEARCHING ALL TREE STRUCTURES
;				FOR MULTIPLE DEFINITIONS.
;
;	C. B. PETROVIC	20-MAR-85	00.03
;		CBP163		ADD SECOND DEFAULT TASK SWITCH WORD
;				IN PREPARATION FOR THE ELIMINATION
;				OF THE SLOW TASK BUILDER (STK) AND
;				ADD THE /SL SWITCH.
;
;
;
; SYMBOL TABLE WHOLE SEARCH ROUTINE (SLOW VERSION)
;
; LOCAL DATA
;
; CURRENT PATH LIST ADDRESS
;
	IMPURE			; READ/WRITE D-SPACE

PATH:	.BLKW	1		;

;
; SYMBOL NAME
;

SYM:	.BLKW	2		;

;+
; **-$WSRCS-PERFORM WHOLE SEARCH OF SYMBOL TABLES
;
; THIS SUBROUTINE IS CALLED TO SEARCH FOR A GLOBAL SYMBOL
; IN A SEGMENT THAT IS ON A COMMON PATH WITH THE CURRENT
; SEGMENT BEING PROCESSED. PRIOR TO CALLING THIS ROUTINE
; SUBROUTINE $WSINI MUST BE INVOKED TO BUILD THE
; PATH LIST CONTAINING THE VIRTUAL ADDRESS OF ALL SEGMENTS
; THAT ARE VISIBLE FROM THE CURRENT SEGMENT.
;
; THE CURRENT SEGMENT IS SEARCHED ON THE INITIAL CALL. IF THE
; SYMBOL IS FOUND, A CO-ROUTINE CALL IS MADE TO THE CALLER WITH
; THE C-BIT CLEAR. SUBSEQUENT CO-ROUTINE CALLS ARE MADE TO SEEK
; ADDITIONAL SYMBOL TABLE ENTRIES IN THE STRUCTURE. THE SEARCH
; FOR THESE ENTRIES IS PERFORMED BY REFERENCING THE LOCAL SYMBOL
; TABLE WITHIN EACH OVERLAY SEGMENT. A CO-ROUTINE CALL IS MADE
; TO THE CALLER FOR EACH SYMBOL FOUND.
;
; WHEN NO MORE ENTRIES REMAIN, THE ROUTINE EXITS VIA A RETURN
; WITH THE C-BIT SET. CALLER MAY TERMINATE THE SEARCH BY REMOVING
; THE CO-ROUTINE ADDRESS FROM THE STACK.
;
; INPUTS:
;
;	R1=ADDRESS OF SYMBOL DESCRIPTOR
;	$CRSEG=REAL ADDRESS OF CURRENT SEGMENT
;	$CRVSG=VIRTUAL ADDRESS OF CURRENT SEGMENT
;
; IF TASK HAS MORE THAN ONE SEGMENT, THE FOLLOWING ADDITIONAL
; INPUTS ARE REQUIRED:
;
;	$PATH=ADDRESS OF PATH LIST BUILT BY $WSINI
;	$WSEXT=SEARCH EXTENT FLAG. IF CLEAR, THE SEARCH IS CONFINED
;	       TO THE CURRENT CO-TREE AND MAIN ROOT. ELSE THE SEARCH
;	       EXTENT COVERS ALL CO-TREES.
;
; OUTPUTS:
;
;	C/CLEAR -- FOUND SYMBOL, EXIT IS VIA CO-ROUTINE CALL.
;
;		R0=REAL ADDRESS OF DESCRIPTOR
;		R1=PATH FLAG. ONE OF THE FOLLOWING
;		   VALUES IS RETURNED:
;
;			R1=0; FOUND IN CURRENT SEGMENT
;			R1<0; FOUND TOWARDS THE ROOT
;			R1=1; FOUND UP-TREE
;			R1=2; FOUND IN CO-TREE
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1.
;
;		$CRVSM=VIRTUAL ADDRESS OF FOUND SYMBOL
;		$CRVSR=VIRTUAL ADDRESS OF FOUND SEGMENT
;
;	C/SET -- NO FURTHER ENTRIES CAN BE FOUND. EXIT IS
;	         VIA A RETURN WITH R1 CLEARED.
;
;	CONDITION CODES REFLECT THE CONTENTS OF R1
;
;-
	PURE.I			; READ-ONLY I-SPACE

$WSRSL::
	MOV	$CRSEG,R0	; GET REAL ADDRESS OF CURRENT SEGMENT
	ADD	#S$GSTB,R0	; OFFSET TO SYMBOL TABLE LISTHEAD
	MOV	$CRVSG,$CRVSR	; SET VIRTUAL ADDRESS OF SEARCH SEGMENT
	MOV	#SYM,R2		; GET ADDRESS OF DESCRIPTOR
	MOV	S$YM(R1),(R2)+	; COPY SYMBOL NAME
	MOV	S$YM+2(R1),(R2) ; ...
	CALL	$SRCH		; SEARCH FOR SYMBOL
	BCS	10$		; IF C/S NOT IN CURRENT SEGMENT
	MOV	R1,$CRVSM	; RECORD VIRTUAL ADDRESS OF SYMBOL
	CLR	R1		; SET PATH FLAG=CURRENT
	CALL	@(SP)+		; CALL THE CALLER
10$:				;
	MOV	$SGLST,R1	; SEGMENT LIST CREATED?
	BEQ	40$		; IF EQ NO
	MOV	$PATH,PATH	; SET PATH LIST ADDRESS
20$:				;
	MOV	PATH,R0		; GET PATH LIST ADDRESS
	CMP	(R0)+,(R0)+	; POINT TO NEXT ENTRY
	MOV	R0,PATH		; SAVE ADDRESS
	MOV	(R0)+,R1	; GET VIRTUAL ADDRESS OF SEGMENT
	BEQ	40$		; IF EQ END OF LIST
	TST	$WSEXT		; SEARCH ALL CO-TREES?
	BNE	30$		; IF NE YES
	CMP	$CRVSG,$RTSEG	; AT ROOT?
	BEQ	30$		; IF EQ YES, SEARCH ALL SEGMENTS
	CMP	R1,$RTSEG	; FOUND ROOT SEGMENT?
	BEQ	30$		; IF EQ YES, SEARCH SEGMENT
	CMP	(R0),#2		; SEGMENT IN CO-TREE?
	BEQ	20$		; IF EQ YES
30$:				;
	MOV	(R0),-(SP)	; SAVE PATH FLAG
	MOV	R1,-(SP)	; SAVE VIRTUAL ADDRESS OF SEGMENT
	CALL	$CVRL		; CONVERT TO REAL MEMORY ADDRESS
	ADD	#S$GSTB,R0	; POINT TO THE SYMBOL TABLE LIST
	MOV	#<SYM-S$YM>,R1	; ADJUST ADDRESS OF SYMBOL TO LOOK FOR
	CALL	$SRCH		; AND SEE IF IT'S THERE
	BCC	35$		; IF C-CLEAR, WE HAVE A MATCH
	CMP	(SP)+,(SP)+	; IF C-SET, NO MATCH...ELIMINATE TOP
				; TWO ITEMS ON STACK
	BR	20$		; AND GO AGAIN...
35$:
	MOV	R1,$CRVSM	; SET VIRTUAL ADDRESS OF FOUND SYMBOL
	MOV	(SP)+,$CRVSR	; SET VIRTUAL ADDRESS OF FOUND SEGMENT
	MOV	(SP)+,R1	; SET PATH FLAG
	CALL	@(SP)+		; CALL THE CALLER
	BR	20$		; NOW LOOK FOR MORE
40$:				;
	SEC			; SET CARRY
	RETURN			;

	.END
