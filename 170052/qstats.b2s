2!		PROGRAM		: QSTATS
5!		VERSION		: V10.1
6!		EDIT		: A
7!		EDIT DATE	: 10-MAY-91
10	EXTEND
11	!								      &
									      &
									      &
	!		  C O P Y R I G H T				      &
									      &
									      &
  !		      Copyright (C) 1979, 1991 by			      &
  !	        Digital Equipment Corporation, Maynard, Mass.		      &
  !									      &
  !									      &
  !	This software is furnished under a license and may be used and	      &
  !	copied  only  in accordance with the terms of such license and	      &
  !	with the  inclusion  of  the  above  copyright  notice.   This	      &
  !	software  or  any  other copies thereof may not be provided or	      &
  !	otherwise made available to any other person.  No title to and	      &
  !	ownership of the software is hereby transferred.		      &
  !									      &
  !	The information in this software is subject to change  without	      &
  !	notice  and should not be construed as a commitment by Digital	      &
  !	Equipment Corporation.						      &
  !									      &
  !	DIGITAL assumes no responsibility for the use  or  reliability	      &
  !	of its software on equipment that is not supplied by DIGITAL.	      &
  !									      &
  !*******************************************************************	      &

20	!								      &
	!								      &
	!								      &
	!	M O D I F I C A T I O N    H I S T O R Y		      &
	!								      &
	!								      &
	!								      &

21	! VER/ED	EDIT DATE	REASON				      &
	!								      &

100	!								      &
	!								      &
	!								      &
	!	P R O G R A M   D E S C R I P T I O N			      &
	!								      &
	!								      &
	!	This program collects selected monitor statistics at	      &
	!  a user specified interval storing the data on a file for	      &
	!  postprocessing by the program LQSTAT.  The data is placed in a     &
	!  user specified output file.  The names of the collected	      &
	!  variables are stored in another output file (extension .DIR).      &
	!								      &
	!  Note that the data files are left around in case someone elses     &
	!  program wishes to use them.					      &
	!								      &

300	!								      &
	!								      &
	!								      &
	!	I / O    C H A N N E L S				      &
	!								      &
	!								      &
	!     CHANNEL #		USED FOR				      &
	!								      &
	!	1		storing of the named variables		      &
	!			and some control information about the	      &
	!			experiment. (this is the DIRECTORY, hence     &
	!			the extent of ".DIR")			      &
	!								      &
	!	2		storing of the sampled values, the VALUE      &
	!			file , hence the extent ".VAL"		      &
	!								      &
									      &

400	!								      &
	!								      &
	!	V A R I A B L E    D E F I N I T I O N S		      &
	!								      &
   !									      &
   !	ACTUAL.TIME%							      &
   !	AT.FILE%							      &
   !	BASE.STATS%	monitor statistics tables base			      &
   !	C%		utility variable				      &
   !	CACHE.BASE%	cache statistics table base			      &
   !	CACHE.TIME	number of UPTICS the CPU spends in cache code of the  &
   !			 monitor					      &
   !	CACHE.PRI.0	The CPU was running at indicated priority and	      &
   !	 thru		 cache code was active				      &
   !	CACHE.PRI.5							      &
   !	CHDCNT		number of CHENUE used for data caching		      &
   !	CHEINV		not used					      &
   !	CHENUE		number of cache blocks used			      &
   !	CHENUM		not used					      &
   !	CHERST		not used					      &
   !	CHFCNT		number of CHENUE used for FIP			      &
   !	CPU.PRI.4	CPU executing 'slow device' interrupt routine	      &
   !	CPU.PRI.5	CPU executing 'fast device' interrupt routine	      &
   !	D5%								      &
   !	D6%								      &
   !	DISK.BASE%	disk statistics table base			      &
   !	DISK.NAME$							      &
   !	DISK.SELECT%	<>0 means user wants to skip some disks		      &
   !	DUMMY$								      &
   !	END.TIME$	time this run ended				      &
   !	F.NAME$		filename prefix					      &
   !	FIP.IDLE	number of UPTICS for which FIP was not actually	      &
   !			 running					      &
   !	FIP.NEEDED	number of UPTICS for which at least one job requested &
   !			 FIP service					      &
   !	FIP.CODE.WAIT	number of UPTICS for which FIP was waiting for a      &
   !			 system overlay code segment to be loaded to memory   &
   !	FIP.DISK.WAIT	number of UPTICS FIP was waiting for a disk transfer  &
   !			 to complete					      &
   !	FIP.OTHER.WAIT	number of UPTICS the file processor was waiting for   &
   !			 some other system service			      &
   !	FIP.SAT.WAIT	number of UPTICS FIP was waiting for a copy of a      &
   !			 disk's storage allocation table		      &
   !	FIP.WAITING	number of UPTICS for which FIP was in use but was     &
   !			 waiting for some other process to complete	      &
   !	FREE.SMALL.BUFF	number of free small buffers			      &
   !	I		utility floating point variable			      &
   !	I%		utility variable				      &
   !	IDENT.STG$	version level					      &
   !	INSTALL.READS	number of I/O's that were installed into	      &
   !			 the cache					      &
   !	IO.TIME		number of UPTICS the CPU was executing a device	      &
   !			 interrupt service routine			      &
   !	ITEMP		utility variable				      &
   !	ITEMP%		utility variable				      &
   !	J%		utility variable				      &
   !	JSTATS.BASE%	Job/CPU statistics table base			      &
   !	KB.CHAR.IN	the number of characters input from all terminals     &
   !			 within the UPTICS interval			      &
   !	KB.CHAR.OUT	the number of characters output to all terminals      &
   !			 within the UPTICS interval			      &
   !	LOST.TIME	idle time till selected job in main-memory	      &
   !	MCLU.READS.CAS	number of multi-cluster reads that were cached	      &
   !	MCLU.READS.NOTC	number of multi-cluster reads not cached	      &
   !	NOLOOK.READS	number of I/O operations not considered	within	      &
   !			 the SIN.TOT.READS count (data cache not	      &
   !			 enabled file)					      &
   !	NOW%		channel #					      &
   !	NULL.TIME	number of UPTICS for which the CPU was idle	      &
   !	NUM.ITEMS							      &
   !	NUM.SAMPLE%	number of samples collected			      &
   !	NUMBER.DISKS%	number of configured disks			      &
   !	NUMERIC.DATA							      &
   !	OLD.UPTIME							      &
   !	SYS.UNCHARGED							      &
   !	P								      &
   !	PROMPT.LINE$	question to ask user				      &
   !	Q%								      &
   !	Q$								      &
   !	SEG.READS	number of cache reads that were segmented	      &
   !			 (that is, spanned clusters)			      &
   !	SYS.CHARGED							      &
   !	SIN.DATA.HITS							      &
   !	SIN.DATA.READS	number of SIN.TOT.READS performed for data	      &
   !			 cache (requires data cache enable for		      &
   !			 user I/O)					      &
   !	SIN.DIR.HITS	number of SIN.DIR.READS found in the cache	      &
   !	SIN.DIR.READS	number of SIN.TOT.READS performed for FIP	      &
   !	SIN.TOT.HITS	number of SIN.TOT.READS found in the cache	      &
   !	SIN.TOT.READS	number of single cluster reads performed totally      &
   !			 in the system (sum of directory and data reads)      &
   !	SLEEP.TIME%	inter-sample sleep time				      &
   !	START.PTR%							      &
   !	START.TIME$	time this run started				      &
   !	STR.DATA$							      &
   !	TEMP								      &
   !	TEMP$								      &
   !	TEST.NAME$	name of this test				      &
   !	TICKS		clock interrupts per second. Dividing by TICKS	      &
   !			converts clock interrupts to seconds.		      &
   !	UPTIME		seconds elapsed since stats buffer cleared	      &
   !	USED.TIME%							      &
   !	W.NAME$		file being opened				      &
   !	WRITE.CHECKED	number of writes that were checked to see	      &
   !			 if block in cache				      &
   !	WRITE.HITS	number of WRITE.CHKD found in cache		      &

800	!								      &
									      &
									      &
	!	F U N C T I O N / S U B R O U T I N E    D E S C .	      &
									      &
									      &
   !	FUNCTION/SUBROUTINE		USE				      &
   !									      &
   !	FNASK%( )	ask a question, get yes/no answer		      &
   !	FNC( )		get 32-bit cache info				      &
   !	FND( )		get disk info					      &
   !	FNJ( )		get 32-bit job info				      &
   !	FNL( )		write and count labels				      &
   !	FNSD%( )	get disk statistics				      &
   !	FNW%( )		write info and count records			      &
									      &

900	!								      &
	!								      &
	!								      &
	!	D I M E N S I O N    S T A T E M E N T S		      &
	!								      &
	!								      &
	!								      &
									      &

910	DIM	MTR1%(30%),MTR2%(30%),					      &
		DISK.LAB$(32%),						      &
		DISK.ITEM(5%,5%),D1.TYPE$(5%),D2.TYPE$(5%),		      &
		DISK.ASK%(32%)						      &
	!								      &
	!	DEFINITION OF DIM VARIABLES				      &
	!  VARIABLE			USE				      &
	!    MTR1%		CONTAINS MONITOR STATISTICS TABLE 1	      &
	!    MTR2%		CONTAINS MONITOR STATISTICS TABLE 2	      &
	!  DISK.LAB$		LOADED WITH THE DEVICE NAMES FOR	      &
	!				DISKS ON SYSTEM			      &
	!  DISK.ITEM		USED AS TEMPORARY STORE FOR THE STATISTICS    &
	!				OF A DISK BEING EXAMINED	      &
	!			(0,*) -> SWAPS				      &
	!			(1,*) -> USER (FILE)			      &
	!			(2,*) -> SAT				      &
	!			(3,*) -> OVERLAY			      &
	!			(4,*) -> DIRECTORY			      &
	!			(5,*) -> DECTAPE (IGNORED)		      &
	!			(*,0) -> READ MISS ACCESSES		      &
	!			(*,1) -> READ MISS BLOCKS		      &
	!			(*,2) -> WRITE ACCESSES			      &
	!			(*,3) -> WRITE BLOCKS			      &
	!			(*,4) -> READ HIT ACCESSES		      &
	!			(*,5) -> READ HIT BLOCKS		      &
	!  D1.TYPE$		LABELS THE FIRST CLASS OF DISK OPERATIONS     &
	!				FROM A SYSTEM USAGE ASPECT	      &
	!  D2.TYPE$		LABELS THE ACCESS TYPE OPERATION (READ/WRITE) &
	!				METRICS				      &
	!  DISK.ASK(UNIT)	-1 MEANS IGNORE THIS DISK.		      &
	!								      &

950	EXTERNAL WORD FUNCTION DSKPEK(WORD,WORD)			      &

999	!								      &
	!								      &
	!								      &
	!	S T A R T    O F    P R O G R A M			      &
	!								      &
	!								      &
	!								      &

1000	ON ERROR GOTO 19000						      &
		! SET UP STANDARD ERROR TRAP.				      &
	\ TEMP$=SYS(CHR$(6%)+CHR$(-21%)+CHR$(-1%))			      &
		! DROP TEMPORARY PRIVILEGES.				      &

1010	IDENT.STG$="V10.1-A"						      &

1020	PRINT IF CCPOS(0%)						      &
	\ PRINT "QSTATS";CHR$(9%);IDENT.STG$;CHR$(9%);			      &
	 CVT$$(RIGHT(SYS(CHR$(6%)+CHR$(9%)+CHR$(0%)),3%),4%)		      &
	! PRINT THE SYSTEM HEADER					      &

1040	BASE.STATS% = PEEK(156%)					      &
	\ DISK.BASE% = SWAP%(CVT$%(RIGHT(SYS(CHR$(6%)+CHR$(-29%)),29%)))      &
	\ JSTATS.BASE% = PEEK(BASE.STATS%+2%)				      &
	\ CACHE.BASE% = PEEK(BASE.STATS%+6%)				      &
		! GET THE MONITOR STATISTICS TABLES BASE.		      &
		! GET THE DISK STATS BASE, JOB/CPU BASE, AND CACHE BASE.      &
	\ IF (DISK.BASE%=0% OR JSTATS.BASE%=0% OR CACHE.BASE%=0%) THEN	      &
		PRINT "?Statistics not available"			      &
	\	GOTO 32767						      &
		! DISK AND JSTATS ARE 0 IF MONITOR STATS NOT CONFIGURED.      &
		! ALL MUST BE CONFIGURED FOR QSTATS TO RUN.		      &

1050		D1.TYPE$(0%)	=	"SWAP"				      &
	\	D1.TYPE$(1%)	=	"FILE"				      &
	\	D1.TYPE$(2%)	=	"SAT"				      &
	\	D1.TYPE$(3%)	=	"OVER"				      &
	\	D1.TYPE$(4%)	=	"DIR"				      &
	\	D1.TYPE$(5%)	=	"DECT"				      &
	\	D2.TYPE$(0%)	=	"R.PHY.CNT"			      &
	\	D2.TYPE$(1%)	=	"R.PHY.BLK"			      &
	\	D2.TYPE$(2%)	=	"WRT.CNT"			      &
	\	D2.TYPE$(3%)	=	"WRT.BLK"			      &
	\   	D2.TYPE$(4%)	=	"R.CHE.CNT"			      &
	\	D2.TYPE$(5%)	=	"R.CHE.BLK"			      &
		! SET UP SOME OF THE DISK COLUMN LABELS.		      &
	\ CHANGE SYS(CHR$(6%) + CHR$(-3%)) TO MTR1%			      &
	\ MTR1%(J%) = MTR1%(J%)+SWAP%(MTR1%(J%+1%))			      &
			FOR J% = 5% TO 29% STEP 2%			      &
		! GET THE MONITOR TABLES PART 1				      &
	\ CHANGE SYS(CHR$(6%) + CHR$(-12%)) TO MTR2%			      &
	\ MTR2%(J%) = MTR2%(J%) + SWAP%(MTR2%(J%+1%))			      &
			FOR J% = 3% TO 29% STEP 2%			      &
		! GET THE MONTIOR TABLES PART 2				      &
	\ FREES%=MTR2%(3%)						      &
		! TO GET # OF FREE SMALL BUFFERS.			      &

1100	!								      &
	!								      &
	!								      &
	!	M A I N    L I N E    C O D E				      &
	!								      &
	!								      &
	!								      &

2050	INPUT "Generic file prefix for files <QSTAT>";F.NAME$		      &
	\ F.NAME$ = CVT$$(F.NAME$,254%)					      &
	\ F.NAME$ = "QSTAT" 	IF F.NAME$ = ""				      &
		! GET THE FILENAME PORTION OF EACH OUTPUT FILE WE'LL OPEN.    &
	\ W.NAME$ = F.NAME$ + ".DIR"					      &
	\ OPEN W.NAME$  FOR OUTPUT AS FILE #1%				      &
		! OPEN THE DIRECTORY FILE				      &
	\ W.NAME$ = F.NAME$ + ".VAL"					      &
	\ OPEN W.NAME$ FOR OUTPUT AS FILE #2%				      &
		! OPEN THE VALUES FILE					      &

2060	INPUT "Inter-sample sleep time <60%> ";DUMMY$			      &
	\ DUMMY$ = CVT$$(DUMMY$,-2%)					      &
	\ DUMMY$ = "60" UNLESS LEN(DUMMY$)				      &
	\ SLEEP.TIME%	=  VAL(DUMMY$)					      &
		! REQUEST THE AMOUNT OF TIME TO SLEEP BETWEEN SAMPLES	      &
	\ START.PTR%	=	0%					      &
	\ INPUT "Experiment name <*TEST*>";TEST.NAME$			      &
	\ TEST.NAME$ = "*TEST*" UNLESS LEN(TEST.NAME$)			      &
		! REQUEST NAME OF EXPERIMENT				      &

2240	NUM.SAMPLE%	=	1%					      &
	\ START.TIME$	=	TIME$(0%) + " " +DATE$(0%)		      &
	\ NUM.ITEMS	=	0.					      &
	\ NUMBER.DISKS%   =	DSKPEK(DISK.BASE%,0%) AND 255%		      &
	\ NOW%	= 1%							      &
	\ DISK.SELECT%=FNASK%("Do you want selected disk units")	      &
									      &

2400	I=FNL(" UPTICS")						      &
	\ I=FNL("[FREE.SMALL.BUFF]")					      &
	\ I=FNL(" SIN.TOT.READS")					      &
	\ I=FNL(" SIN.TOT.HITS")					      &
	\ I=FNL(" SIN.DIR.READS")					      &
	\ I=FNL(" SIN.DIR.HITS")					      &
	\ I=FNL(" SIN.DATA.READS")					      &
	\ I=FNL(" SIN.DATA.HITS")					      &
	\ I=FNL(" NOLOOK.READS")					      &
	\ I=FNL(" INSTALL.READS")					      &
	\ I=FNL(" MCLU.R.CACHED")					      &
	\ I=FNL(" MCLU.R.NOTCD")					      &
	\ I=FNL(" SEG.READS")						      &
	\ I=FNL(" WRITE.CHKD")						      &
	\ I=FNL(" WRITE.HITS")						      &
	\ I=FNL("[CHENUE]")						      &
	\ I=FNL("[CHFCNT]")						      &
	\ I=FNL("[CHDCNT]")						      &
	\ I=FNL("%SYS.CHARGED.TICS")					      &
	\ I=FNL("%LOST.TICS")						      &
	\ I=FNL("%SYS.UNCH.TICS")					      &
	\ I=FNL("%NULL.TICS")						      &
	\ I=FNL("%USER.TICS")						      &
	\ I=FNL("%CHARGED.TICS")					      &
	\ I=FNL("%UNCHARGED.TICS")					      &
	\ I=FNL("%FIP.NEEDED")						      &
	\ I=FNL("%FIP.IDLE")						      &
	\ I=FNL("%FIP.WAITING")						      &
	\ I=FNL("%FIP.CODE.WAIT")					      &
	\ I=FNL("%FIP.DISK.WAIT")					      &
	\ I=FNL("%FIP.SAT.WAIT")					      &
	\ I=FNL("%FIP.OTHER.WAIT")					      &
	\ I=FNL("%FIP.CPU")						      &
	\ I=FNL("%IO.TIME")						      &
	\ I=FNL("%CACHE.TIME")						      &
	\ I=FNL(" KB.CHAR.IN")						      &
	\ I=FNL(" KB.CHAR.OUT")						      &
	\ GOSUB 10100							      &
	\ FOR N% = 0% TO (NUMBER.DISKS% -1%)				      &
	\	DISK.NAME$ = " " + DISK.LAB$(N%)			      &
	\	IF DISK.ASK%(N%) THEN					      &
			PRINT DISK.NAME$;				      &
			  " is not mounted - it will be ignored"	      &
	\		GOTO 2460					      &
		! PLOW THRU ALL THE DISKS, SKIPPING THOSE NOT MOUNTED.	      &

2440		GOTO 2450 IF DISK.SELECT%=0%				      &
	\	PROMPT.LINE$="Should"+DISK.NAME$+" be ignored"		      &
	\	DISK.ASK%(N%)=FNASK%(PROMPT.LINE$)			      &
	\	GOTO 2460 IF DISK.ASK%(N%)<>0%
2450		FOR C%  = 0% TO 4%					      &
	\		FOR I%  = 0% TO 5%				      &
	\		  ITEMP=FNL(DISK.NAME$+D1.TYPE$(C%)+"."+D2.TYPE$(I%)) &
	\		NEXT I%						      &
	\	NEXT C%
2460	NEXT N%								      &
	\ NOW%	= 2%							      &

2500	GOSUB 10000							      &
									      &

3000	!	WRITE THE WONDERFUL THINGS				      &
		I%=FNW%(UPTIME		)				      &
	\	I%=FNW%(FREE.SMALL.BUFF	)				      &
	\	I%=FNW%(SIN.TOT.READS	)				      &
	\	I%=FNW%(SIN.TOT.HITS	)				      &
	\	I%=FNW%(SIN.DIR.READS	)				      &
	\	I%=FNW%(SIN.DIR.HITS	)				      &
	\	I%=FNW%(SIN.DATA.READS	)				      &
	\	I%=FNW%(SIN.DATA.HITS	)				      &
	\	I%=FNW%(NOLOOK.READS	)				      &
	\	I%=FNW%(INSTALL.READS	)				      &
	\	I%=FNW%(MCLU.READS.CAS	)				      &
	\	I%=FNW%(MCLU.READS.NOTC )				      &
	\	I%=FNW%(SEG.READS	)				      &
	\	I%=FNW%(WRITE.CHECKED	)				      &
	\	I%=FNW%(WRITE.HITS	)				      &
	\	I%=FNW%(CHENUE		)				      &
	\	I%=FNW%(CHFCNT		)				      &
	\	I%=FNW%(CHDCNT		)				      &
	\	I%=FNW%(SYS.CHARGED	)				      &
	\	I%=FNW%(LOST.TIME	)				      &
	\	I%=FNW%(SYS.UNCHARGED	)				      &
	\	I%=FNW%(NULL.TIME	)				      &
	\	I%=FNW%(USER		)				      &
	\	I%=FNW%(CHARGED		)				      &
	\	I%=FNW%(UNCHARGED	)				      &
	\	I%=FNW%(FIP.NEEDED	)				      &
	\	I%=FNW%(FIP.IDLE	)				      &
	\	I%=FNW%(FIP.WAITING	)				      &
	\	I%=FNW%(FIP.CODE.WAIT	)				      &
	\	I%=FNW%(FIP.DISK.WAIT	)				      &
	\	I%=FNW%(FIP.SAT.WAIT	)				      &
	\	I%=FNW%(FIP.OTHER.WAIT	)				      &
	\	I%=FNW%(FIP.CPU		)				      &
	\	I%=FNW%(IO.TIME		)				      &
	\	I%=FNW%(CACHE.TIME	)				      &
	\	I%=FNW%(KB.CHAR.IN	)				      &
	\	I%=FNW%(KB.CHAR.OUT	)				      &
	\	FOR N% = 0% TO NUMBER.DISKS% - 1%			      &
	\		GOTO 3005 IF DISK.ASK%(N%)<>0%			      &
	\		ITEMP% = FNSD%(N%)				      &
	\	 	FOR C% = 0% TO 4%				      &
	\			FOR I% = 0% TO 5%			      &
	\				ITEMP%=FNW%( DISK.ITEM(C%,I%) )	      &
	\			NEXT I%					      &
	\		NEXT C%
3005		NEXT N%							      &
									      &

3010	GOTO 3090 IF START.PTR% = 0%					      &
		! FIRST TIME THRU, GO DETACH				      &
	\ USED.TIME% = UPTIME - OLD.UPTIME				      &
	\ ACTUAL.TIME% = ACTUAL.TIME% - (USED.TIME% - SLEEP.TIME%)	      &
	\ GOTO 3100							      &
		! SKIP THE DETACH					      &

3090	START.PTR% = 1%							      &
	\ ACTUAL.TIME% = SLEEP.TIME%					      &
	\ Q$ = SYS(CHR$(6%)+CHR$(-7%)) ! CONTROL/C THING		      &
	\ PRINT "Detaching . . ."					      &
	\ Q$ = SYS(CHR$(6%)+CHR$(7%))  ! DETACH JOB			      &

3100	OLD.UPTIME = UPTIME						      &
	\ SLEEP ACTUAL.TIME%						      &
		! SLEEP AWHILE.						      &

3110	NUM.SAMPLE% = NUM.SAMPLE% + 1%					      &
	\ GOTO 2500							      &
		! ANOTHER SAMPLE BY THE BOARDS - GO DO ANOTHER		      &

9000	!								      &
	!								      &
	!								      &
	!	P R O G R A M    C L E A N    U P			      &
	!								      &
	!								      &
	!								      &
	! CLOSE FILES, ETC.						      &

9900	NOW% = 1%							      &
		! PRINT "END OF FILE AT ";AT.FILE%			      &
	\ PRINT #NOW%, "$$$HEADER$$$"					      &
	\ TEMP	=	NUM.SAMPLE%					      &
	\ I%	=	FNW%(TEMP)					      &
	\ I%	=	FNW%(NUM.ITEMS)					      &
	\ I%	=	FNW%(TICKS)					      &
	\ TEMP	=	NUMBER.DISKS%					      &
	\ I%	=	FNW%(TEMP)					      &
	\ I%	=	FNW%(AT.FILE%)					      &
	\ END.TIME$ =	TIME$(0%) + " " + DATE$(0%)			      &
	\ I	=	FNL(START.TIME$)				      &
	\ I	=	FNL(END.TIME$)					      &
	\ I 	=	FNL(TEST.NAME$)					      &
	\ CLOSE #1%,#2%							      &
	\ PRINT IF CCPOS(0%)						      &
	\ PRINT "Number of samples collected = ";NUM1$(NUM.SAMPLE%)	      &
		! PRINT "END OF FILE AT ";AT.FILE%			      &
	\ GOTO 32767							      &
									      &

10000	!								      &
	!								      &
	!								      &
	!		S U B R O U T I N E S				      &
	!								      &
	!								      &
	!  This routine extracts the data from the monitor statistics area    &
	!  (by the use of peek functions) and converts those measurements     &
	!  in ticks to seconds as required.				      &
	!								      &
	!  CACHE.BASE%, JSTATS.BAS, and DISK.BASE% must all be defined.	      &
	!  Retrieve cache values, Job/CPU values, and disk (total device)     &
	!  values. Data is stored as 16-bit or 32-bit integers.		      &
	!								      &
	!  Items stored are described in list of variables at program start.  &
	!
10010		SIN.TOT.READS	=	FNC(0%)				      &
	\	SIN.DIR.READS	=	FNC(4%)				      &
	\	SIN.TOT.HITS	=	FNC(8%)				      &
	\	SIN.DIR.HITS	=	FNC(12%)			      &
	\	CHERST		=	PEEK(CACHE.BASE%+16%)		      &
	\	CHENUM		=	PEEK(CACHE.BASE%+18%)		      &
	\	CHENUE		=	PEEK(CACHE.BASE%+20%)		      &
	\	CHFCNT		=	PEEK(CACHE.BASE%+22%)		      &
	\	CHDCNT		=	PEEK(CACHE.BASE%+24%)		      &
	\	CHEINV		=	PEEK(CACHE.BASE%+26%)		      &
	\	SIN.DATA.READS	=	FNC(28%)			      &
	\	SIN.DATA.HITS	=	FNC(32%)			      &
	\	NOLOOK.READS	=	FNC(36%)			      &
	\	INSTALL.READS	=	FNC(40%)			      &
	\	MCLU.READS.CAS	=	FNC(44%)			      &
	\	MCLU.READS.NOTC =	FNC(48%)			      &
	\	SEG.READS	=	FNC(52%)			      &
	\	WRITE.CHECKED	=	FNC(56%)			      &
	\	WRITE.HITS	=	FNC(60%)			      &
		! GET CACHE INFO: PEEKS ARE 16-BIT, FNC'S 32-BIT	      &

10030		TICKS		=	PEEK(JSTATS.BASE%)		      &
	\	UPTIME		=	FNJ(2%)/TICKS			      &
	\	FREE.SMALL.BUFF	=	PEEK(FREES%+2%)			      &
	\	SYS.CHARGED	=	FNJ(8%)/TICKS			      &
	\	LOST.TIME	=	FNJ(12%)/TICKS			      &
	\	SYS.UNCHARGED	=	FNJ(16%)/TICKS			      &
	\	NULL.TIME	=	FNJ(20%)/TICKS			      &
	\	USER		=	UPTIME - NULL.TIME - LOST.TIME -      &
					SYS.CHARGED - SYS.UNCHARGED	      &
	\	CHARGED		=	USER + SYS.CHARGED		      &
	\	UNCHARGED	=	NULL.TIME + LOST.TIME + SYS.UNCHARGED &
	\	FIP.NEEDED	=	FNJ(24%)/TICKS			      &
	\	FIP.IDLE	=	FNJ(28%)/TICKS			      &
	\	FIP.WAITING	=	FNJ(32%)/TICKS			      &
	\	FIP.CPU		=	FIP.NEEDED - FIP.WAITING	      &
	\	FIP.CODE.WAIT	=	FNJ(36%)/TICKS			      &
	\	FIP.DISK.WAIT	=	FNJ(40%)/TICKS			      &
	\	FIP.SAT.WAIT	=	FNJ(44%)/TICKS			      &
	\	FIP.OTHER.WAIT	=	FNJ(48%)/TICKS			      &
	!	CPU.PRI.0	=	FNJ(52%)/TICKS			      &
	!	CPU.PRI.1	=	FNJ(56%)/TICKS			      &
	!	CPU.PRI.2	=	FNJ(60%)/TICKS			      &
	!	CPU.PRI.3	=	FNJ(64%)/TICKS			      &
	\	CPU.PRI.4	=	FNJ(68%)/TICKS			      &
	\	CPU.PRI.5	=	FNJ(72%)/TICKS			      &
	\	IO.TIME		=	CPU.PRI.4 + CPU.PRI.5		      &
	\	CACHE.PRI.0	=	FNJ(78%)/TICKS			      &
	\	CACHE.PRI.1	=	FNJ(82%)/TICKS			      &
	\	CACHE.PRI.2	=	FNJ(86%)/TICKS			      &
	\	CACHE.PRI.3	=	FNJ(90%)/TICKS			      &
	\	CACHE.PRI.4	=	FNJ(94%)/TICKS			      &
	\	CACHE.PRI.5	=	FNJ(98%)/TICKS			      &
	\	CACHE.TIME	=	CACHE.PRI.0 + CACHE.PRI.1 +	      &
					CACHE.PRI.2 + CACHE.PRI.3 +	      &
					CACHE.PRI.4 + CACHE.PRI.5	      &
	\	KB.CHAR.IN	=	FNJ(110%)			      &
	\	KB.CHAR.OUT	=	FNJ(114%)			      &
		! GET ITEMS BASED ON JSTATS (FNJ MEANS 32-BIT)		      &
		!	CPU.PRI.0	CPU executing user program	      &
		!	CPU.PRI.1	CPU executing the null job	      &
		!	CPU.PRI.2	not used by RSTS		      &
		!	CPU.PRI.3	CPU executing monitor code	      &

10090 !		END OF THE DEFINITION OF CACHE  & JOB STATS		      &
		RETURN							      &

10100	!	SUBROUTINE TO DEFINE THE NAMES OF THE DISKS		      &
	!	USES INFORMATION FROM THE MONITOR TABLES		      &
	!		==========================			      &
	UNTCNT%=MTR1%(19%)						      &
	\ D6% = 0%							      &
	\ FOR D5% = 0% TO MTR2%(9%)-2%	STEP 2%				      &
	\	DISK$=CVT%$(SWAP%(PEEK(MTR2%(5%)+D5%)))			      &
	\	FOR UN% = 0% TO PEEK(MTR1%(5%)+D5%)			      &
	\		DISK.LAB$(D6%) = DISK$ + NUM1$(UN%) + ":"	      &
	\		DISK.ASK%(D6%)=0%				      &
	\		DISK.ASK%(D6%)=-1% IF PEEK(UNTCNT%)<0%		      &
	\	 	D6% = D6% + 1%					      &
	\		UNTCNT%=UNTCNT%+2%				      &
	\	NEXT UN%						      &
	\ NEXT D5%
10190	RETURN								      &

15000	!								      &
	!								      &
	!								      &
	!	P R O G R A M M E R    D E F I N E D			      &
	!		F U N C T I O N S				      &
	!								      &
	!								      &

15010	DEF* FNSD%(U%)							      &
	!								      &
	! FUNCTION:	FNSD%	This function loads the DISK.ITEM array	      &
	!			with the disk statistics for the selected     &
	!			disk unit = U%.  The data is extracted by     &
	!			the peek function "FND"			      &
	! PARAMETER	U%	UNIT TO EXTRACT VALUES FOR (FIP UNIT NUMBER)  &
	!								      &

15015	FOR C% = 0% TO 4%						      &
	\	FOR I% = 0% TO 5%					      &
	\		DISK.ITEM(C%,I%) = FND(C%,U%,I%)		      &
	\	NEXT I%							      &
	\ NEXT C%							      &
	\ FNSD% = 1%							      &
		! C% MEANING:						      &
		! 0	SWAP						      &
		! 1	FILE						      &
		! 2	SAT						      &
		! 3	OVERLAY						      &
		! 4	DIRECTORY					      &
		! 5	DECTAPE (NOT USED)				      &
		!							      &
		! I% MEANING:						      &
		! 0	READ MISS ACCESSES				      &
		! 1	READ MISS BLOCKS				      &
		! 2	WRITE ACCESSES					      &
		! 3	WRITE BLOCKS					      &
		! 4	READ HIT ACCESSES				      &
		! 5	READ HIT BLOCKS
15090	FNEND								      &

15100	DEF* FNC(P%) =	(32768. + (PEEK(CACHE.BASE% + P%) EQV 32767%))+	      &
			(PEEK(CACHE.BASE%+P%+2%)*65536.)		      &
	!								      &
	! FUNCTION:	FNC	Extract a 32-bit cache statistics	      &
	!			integer from the monitor area and convert     &
	!			it to floating point.			      &
	! PARAMETER	P%	Address for the PEEK			      &
									      &

15200	DEF* FNJ(P%) =	(32768. + (PEEK(JSTATS.BASE%+P%) EQV 32767%)) +	      &
			(PEEK(JSTATS.BASE%+P%+2%)*65536.)		      &
	!								      &
	! FUNCTION	FNJ	Extract a 32-bit job statistics integer	      &
	!			from the monitor area and convert it to	      &
	!			floating point.				      &
	! PARAMETER	P%	Address for the PEEK			      &

15300	DEF* FND(XFR.TYP%,FIP.UNIT%,IDX%)				      &
	!								      &
	! FUNCTION:	FND		Extract the disk statistics from the  &
	!				monitor area			      &
	! PARAMETERS	XFR.TYP%	TRANSFER TYPE (0-5)		      &
	!				  0	SWAPS			      &
	!				  1	USER			      &
	!				  2	SATT			      &
	!				  3	OVERLAY			      &
	!				  4	DIRECTORY		      &
	!				  5	DECTAPE BUFFER		      &
	!		FIP.UNIT%	UNIT NUMBER			      &
	!		IDX%		READ/WRITE INDEX (0-5)		      &
	!				  0	READ MISS ACCESSES	      &
	!				  1	READ MISS BLOCKS	      &
	!				  2	WRITE     ACCESSES	      &
	!				  3	WRITE     BLOCKS	      &
	!				  4	READ HIT  ACCESSES	      &
	!				  5	READ HIT  BLOCKS	      &
									      &

15305	Q% = (XFR.TYP%*NUMBER.DISKS% + FIP.UNIT%) * 6% + IDX%		      &
	\ Q% = Q%*4%							      &
	\ P = (32768. + (DSKPEK(DISK.BASE%,Q%+2%) EQV 32767%)) +	      &
	      (DSKPEK(DISK.BASE%,Q%+4%)*65536.)				      &
	\ FND =	P							      &
	! XFR.TYP% INDICATES WHICH OF THE 6 TYPES OF DISK TRANSFER DATA	      &
	!  WHICH ARE LOGGED IS TO BE EXTRACTED. ALL DISK UNITS FOR THE	      &
	!  TYPE ARE STORED TOGETHER, ORDERED BY FIP UNIT NUMBER.	      &
	!								      &
	! FOR EACH UNIT IN A TYPE, 6 32-BIT QUANTITIES ARE STORED (IDX)	      &
	!								      &
	! OR:								      &
	!								      &
	!	SWAP							      &
	!	  FIP UNIT 0		     (OFFSET=IDX*4)		      &
	!		READ MISS ACCESSES	0			      &
	!		READ MISS BLOCKS	4			      &
	!		WRITE     ACCESSES	8			      &
	!		WRITE     BLOCKS	12			      &
	!		READ HIT  ACCESSES	16			      &
	!		READ HIT BLOCKS		20			      &
	!	  FIP UNIT 1						      &
	!		READ MISS ACCESSES				      &
	!			.					      &
	!		READ HIT BLOCKS					      &
	!	  FIP UNIT 2 THRU MAX					      &
	!	FILE							      &
	!	  FIP UNIT 0						      &
	!		READ MISS ACCESSES				      &
	!			.					      &
	!		READ HIT BLOCKS					      &
	!	  FIP UNIT 1 THRU MAX					      &
	!	SAT							      &
	!	  FIP UNIT 0, ETC.					      &
	!								      &
	! XFR.TYP * MAX UNITS + THIS UNIT GETS US TO THE RIGHT SPOT IN	      &
	!  THE RIGHT TRANSFER TYPE.					      &
	! BUMP PAST 6 ENTRIES EACH FOR THE UNITS BEFORE US IN THIS CATEGORY.  &

15390	FNEND								      &

15400	DEF* FNW%(NUMERIC.DATA)						      &
	!								      &
	!	FUNCTION:	F N W %					      &
	!	PURPOSE:	To write information to the channel and	      &
	!			count the number records written	      &
	!								      &

15410	PRINT #NOW%, NUM1$(NUMERIC.DATA)				      &
	\ AT.FILE% = AT.FILE% + 1%
15440	FNW% 	=	AT.FILE%
15490	FNEND								      &

15500	DEF* FNL(STR.DATA$)						      &
	!								      &
	!	FUNCTION:	F N L					      &
	!	PURPOSE:	To write the labels into the directory	      &
	!			file and count the number of labels (and      &
	!			thus the number of variables being used	      &
	!			in the experiment			      &
	!
15510	PRINT #NOW%, STR.DATA$						      &
	\ NUM.ITEMS = NUM.ITEMS + 1.
15530	FNL	=	NUM.ITEMS
15590	FNEND								      &

15600	DEF* FNASK%(PROMPT$)						      &
	! FUNCTION	FNASK%		ISSUE A PROMPT AND WAIT FOR YES/NO    &
	!				 RESPONSE.			      &
	! PARAMETER	PROMPT$		QUESTION TO ASK			      &
	! RETURNS	FNASK%		-1 = YES			      &
	!			 	 0 = NO				      &

15610	PRINT IF CCPOS(0%)						      &
	\ PRINT PROMPT$; " (Yes/No) <No>";				      &
	\ INPUT LINE Q$							      &
	\ Q$ = CVT$$(Q$,-2%)						      &
	\ Q$ = "N" UNLESS LEN(Q$)					      &
	\ Q$=LEFT(Q$,1%)						      &
	\ IF Q$="Y" THEN						      &
		FNASK%=-1%						      &
	ELSE	IF Q$="N" THEN						      &
			FNASK%=0%					      &
		ELSE	PRINT "?Please answer Yes or No"		      &
	\		GOTO 15610					      &
		! PRINT PROMPT AND GET A Y OR N ANSWER			      &

15620	FNEND								      &

19000	!								      &
	!								      &
	!								      &
	!	E R R O R    T R A P    H A N D L I N G    R O U T I N E      &
	!								      &
	!								      &
	!								      &

19010	RESUME 32767 IF ERR=11% AND (ERL=2050% OR ERL=2060%)		      &
	\ RESUME 19090 UNLESS ERR=28%					      &
	\ START.PTR% = 2%						      &
	\ PRINT "Re-attached "						      &
	\ RESUME 9000							      &
		! CATCH CTRL/Z ON INPUT.				      &
		! CATCH CTRL/C ON ATTACH AND CONTINUE CLEAN-UP.		      &

19090	GOTO 32767 IF ERL=19090%					      &
	\ E$=" at line "+NUM1$(ERL)					      &
	\ E$=" - "+W.NAME$ IF ERL=2050%					      &
	\ PRINT "?QSTATS - ";						      &
	  CVT$$(RIGHT(SYS(CHR$(6%)+CHR$(9%)+CHR$(ERR)),3%),4%);E$	      &
	! ALL ERRORS ARE FATAL						      &
	!								      &
	!19090	PRINT "ROUTINE ";ERN$;" HAS ERROR ";ERR;" AT LINE ";ERL	      &
	! GOTO 32767							      &

32767	END
