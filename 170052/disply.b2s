1	!		PROGRAM		: DISPLY.B2S (DISPLY.BAS) (VT50.DPY)  &
	!		VERSION		: V10.1				      &
	!		EDIT		: A				      &
	!		EDIT DATE	: 10-MAY-91			      &
	!								      &
									      &
									      &
	!		  C O P Y R I G H T				      &
									      &
									      &
	!		      Copyright (C) 1974, 1991 by		      &
	!	        Digital Equipment Corporation, Maynard, Mass.	      &
	!								      &
	!								      &
	!	This software is furnished under a license and may be used and &
	!	copied  only  in accordance with the terms of such license and &
	!	with the  inclusion  of  the  above  copyright  notice.   This &
	!	software  or  any  other copies thereof may not be provided or &
	!	otherwise made available to any other person.  No title to and &
	!	ownership of the software is hereby transferred.	      &
	!								      &
	!	The information in this software is subject to change  without &
	!	notice  and should not be construed as a commitment by Digital &
	!	Equipment Corporation.					      &
	!								      &
	!	DIGITAL assumes no responsibility for the use  or  reliability &
	!	of its software on equipment that is not supplied by DIGITAL. &
	!								      &
	!*******************************************************************  &
									      &

20	!								      &
									      &
									      &
	!	M O D I F I C A T I O N    H I S T O R Y		      &
									      &
									      &
									      &
	! WHO	VER/ED		EDIT DATE	REASON			      &
									      &
	! KMF 	 9.0/01		22-MAY-84	ADD PRIV CHECK		      &
	! 					MEMORY CONTROL BLOCK	      &
	! KCG 	 9.0/02		18-APR-85	Add correct memory table      &
	!					display			      &
	! DLS	 9.2/01		16-JUL-85	Replace PEEKs into the JDB    &
	!					with data returned by UU.SYS  &
	! DLS	 9.2/03		10-DEC-85	Put back the /KBnn: switch    &
	! DLS	 9.3/11		15-MAY-86	Fix disk structure display to &
	!					reflect monitor disk table    &
	!					changes			      &
	! DLS	 9.3/18		07-NOV-86	Added DLA to disk display     &
	! REG	 9.6/05		28-JAN-88	Fix sy/b and PK display	      &
	! JJT	V10.1-A		25-Feb-88	Fully support VT100/VT200s    &
	! JJT	V10.1-A		10-Apr-89	Set Echo Control as default   &
	! DLS	V10.1-A		01-Jun-90	Changed extension to .b2s     &
	!					and added a call to DSPMUL    &
	! DLS	V10.1-A		27-Jun-90	Increase disk display field   &
									      &

100	!								      &
									      &
									      &
	!	G E N E R A L    D E S C R I P T I O N			      &
									      &
									      &
	! "DISPLY"  DISPLAYS SYSTEM STATUS ON A VT50,VT52 OR VT61.  IT WILL   &
	! UPDATE THE STATUS AT A SPECIFIED INTERVAL.  REFER TO THE RSTS/E     &
	! SYSTEMS MANAGER'S GUIDE FOR A DETAILED DESCRIPTION OF ALL INTERVAL  &
	! OPTIONS AND COMMANDS.						      &
									      &
	!								      &
									      &
									      &
	!	I / O    C H A N N E L S				      &
									      &
									      &
	!	CHANNEL #		USED FOR			      &
	!								      &
	!	0 OR 1			DISPLAYING STATUS		      &
									      &
									      &
   	!								      &
									      &
									      &
	!	V A R I A B L E    D E F I N I T I O N S		      &
									      &
									      &
	!	VARIABLE NAME		USED FOR			      &
	!								      &
									      &
	!								      &
									      &
									      &
	!	F U N C T I O N / S U B R O U T I N E    D E S C .	      &
									      &
									      &
	!	FUNCTION/SUBROUTINE		USE			      &
	!								      &

910	DIM	B%(19,2), D%(19,8), M%(19,4), R%(39,6),			      &
		C%(4), H(4,1),						      &
		H0%(30), H1%(30), H2%(30%),				      &
		J%(20,8), R(63), I(63),					      &
		R0%(39,1),						      &
		L0%(10), T%(1), W%(9)					      &
	!								      &
	!	D I M E N S I O N    S T A T E M E N T S		      &
	!								      &
	! B%(,)	- USED IN THE BUSY DEVICE ROUTINE			      &
	! D%(,)	- USED IN DISK STATUS ROUTINE				      &
	! M%(,)	- USED IN THE MESSAGE RECEIVER ROUTINE			      &
	! R%(,)	- USED IN RUN-TIME SYSTEMS/ RES LIB ROUTINE		      &
	! C%()	- USED IN FREE STATISTICS ROUTINE			      &
	! H(,)	- USED IN DISPLAYING STATISTICS DATA			      &
	!								      &
	! H0%()	- MONITOR TABLES - PART I				      &
	!	H0%(3)	CNT.KB-1					      &
	!	H0%(4)	MAXCNT						      &
	!	H0%(5)	DEVCNT						      &
	!	H0%(7)	DEVPTR						      &
	!	H0%(9)	MEMLST						      &
	!	H0%(11)	JOBTBL						      &
	!	H0%(13)	JBSTAT						      &
	!	H0%(15)	JBWAIT						      &
	!	H0%(17)	UNTCLU						      &
	!	H0%(19)	UNTCNT						      &
	!	H0%(21)	SATCTL						      &
	!	H0%(23)	JSBTBL						      &
	!	H0%(25)	SATCTM						      &
	!								      &
	!								      &
	! H1%()	- MONITOR TABLES - PART II				      &
	!	H1%(0)	DEVTBL POINTER FOR PK'S				      &
	!	H1%(1)	KB # FOR THE KB FOR PK0				      &
	!	H1%(2)	USED FOR 'TOP LINE' PERCENTAGES			      &
	!	H1%(3)	FREES						      &
	!	H1%(5)	DEVNAM						      &
	!	H1%(7)	CSRTBL						      &
	!	H1%(9)	DEVOKB						      &
	!	H1%(11)	TTYHCT						      &
	!	H1%(13)	JOBCNT						      &
	!	H1%(15)	RTSLST						      &
	!	H1%(17)	ERLCTL						      &
	!	H1%(19)	SNDLST						      &
	!	H1%(21)	DSKLOG						      &
	!	H1%(23)	DEVSYN						      &
	!	H1%(25)	MEMSIZ						      &
	!	H1%(29)	FCBLST						      &
	!								      &
	!								      &
	! H2%()	- MONITOR TABLES - PART III				      &
	!	H2%(3)	DDCTBL						      &
	!	H2%(5)	UCTTBL						      &
	!	H2%(7)	SATEND						      &
	!	H2%(9)	UNTLVL						      &
	!	H2%(11)	MFDPTR						      &
	!	H2%(13)	MAGLBL						      &
	!	H2%(15)	THE NUMBER OF JOBS CURRENTLY ON THE SYSTEM	      &
	!	H2%(16)	INTERNAL CODE					      &
	!	H2%(17)	INTERNAL CODE					      &
	!	H2%(18)	INTERNAL CODE					      &
	!	H2%(19)	INTERNAL CODE					      &
	!	H2%(20)	INTERNAL CODE					      &
	!	H2%(21)	HARDWARE CONFIGURATION WORD			      &
	!	H2%(23)	UNTERR						      &
	!	H2%(25)	DEVCLU						      &
	!	H2%(27)	NULRTS						      &
	!	H2%(29)	DSTPTR						      &
	!								      &
	!								      &
	! J%(,) - USED BY BOTH JOB STATUS & MEMORY DUMP			      &
	! R(),I() - USED IN THE JOB STATUS ROUTINE			      &
	! S%(,),R0%(,) - USED IN THE MEMORY STATUS ROUTINE		      &
	!								      &
	! USED TO KEEP TRACK OF # OF LINES PRINTED.			      &
	! L0%(0)	# OF LINES PRINTED ON RIGHT-HAND SIDE		      &
	! L0%(1)	# OF LINES BEFORE BUSY DEVICES			      &
	! L0%(2)	# OF LINES BEFORE DISKS				      &
	! L0%(3)	# OF LINES BEFORE RUN-TIME SYSTEMS		      &
	! L0%(4)	# OF LINES BEFORE MESSAGE RECEIVERS		      &
	! L0%(5)	# OF LINES BEFORE FREE STATS			      &
	! L0%(6)	# OF LINES BEFORE RESIDENT LIBRARIES		      &
	! L0%(10)	# OF LINES PRINTED ON LEFT-HAND SIDE.		      &
	!								      &
	! T%()	- USED IN PRINTING THE TITLE				      &
	!								      &
	! W%()	- USED TO KEEP TRACK OF THE ORDER IN WHICH		      &
	!	RIGHT-HAND ITEMS ARE PRINTED. THE CONTENTS		      &
	!	OF THE ELEMENTS, 1-6, CORRESPOND TO THE			      &
	!	6 POSSIBLE OPTIONS, BDRMFH.				      &
	!	THE ARRAY IS INITIALLY SET TO:				      &
	!	W%(0)		# OF POSSIBLE OPTIONS (6)		      &
	!	W%(1)		1	B				      &
	!	W%(2)		2	D				      &
	!	W%(3)		3	R				      &
	!	W%(4)		4	M				      &
	!	W%(5)		5	F				      &
	!	W%(6)		6	H				      &
									      &
									      &
									      &
									      &

1020	ON ERROR GOTO 19000						      &
	\ CALL DSPMUL							      &
	\ PRINT "Interval? ";						      &
	\ CHR6$=CHR$(6%)						      &
	\ UU.SYS$=CHR6$+CHR$(26%)					      &
	\ N$=""								      &
	\ B$=" "							      &
	\ CHANGE SYS(CHR6$+CHR$(-29%)) TO H2%				      &
	\ CHANGE SYS(CHR6$+CHR$(-3%)) TO H0%				      &
	\ CHANGE SYS(CHR6$+CHR$(-12%)) TO H1%				      &
	\ H0%(T%)=H0%(T%)+SWAP%(H0%(T%+1%)) FOR T%=5% TO 29% STEP 2%	      &
	\ H1%(T%)=H1%(T%)+SWAP%(H1%(T%+1%)) FOR T%=3% TO 29% STEP 2%	      &
	\ H2%(T%)=H2%(T%)+SWAP%(H2%(T%+1%)) FOR T%=3% TO 29% STEP 2%	      &
	\ H$=FNJ$(1,1%)							      &
	\ H$=FNJ1$(1,1%)						      &
	\ H$="SR^CRNBFSLFPTTHBRS??"					      &
	\ H$=H$+CVT%$(SWAP%(PEEK(H1%(5%)+T%)))				      &
		FOR T%=(H1%(23%)-H1%(5%)) TO 0% STEP -2%		      &
	\ H8%=LEN(H$)-1%						      &
	\ MC.LCK%=16384%*2%						      &
	\ SWP%=16384%							      &
	\ IN%=8192%							      &
	\ OUT%=4096%							      &
	\ M.MON%=0%							      &
	\ M.XBF%=512%							      &
	\ M.LCK%=1024%							      &
	\ M.NXM%=1536%							      &
	\ M.RTS%=2048%							      &
	\ M.JOB%=2560%							      &
	\ M.LIB%=3072%							      &
	\ M.END%=3584%							      &
	\ T%=INSTR(1%,H$,"PK")						      &
	\ CSRTBL%=H1%(7%)						      &
		! then get the address of CSRTBL			      &
	\ DEVOKB%=H1%(9%)						      &
		! (Number of disk devices on system) * 2		      &
	\ DDBPTR%=CSRTBL%+DEVOKB%/2%					      &
		! Points to 1st CSR entry for KB's.  For PK's, the CSR	      &
		! table contains the address of the KB's DDB rather	      &
		! than a physical CSR address, so we can get the PK	      &
		! KB's DDB from that.					      &
	\ IF (T% AND 1%)=0% THEN					      &
		T0%,T1%=0%						      &
	ELSE	T0%=PEEK(H0%(7%)-T%+H8%)				      &
	\	T1%=PEEK(PEEK(T0%)+8%)/2%				      &
	!								      &
	!	M A I N    C O D I N G    A R E A			      &
	!								      &
	!	I N I T I A L I Z A T I O N				      &
	!								      &
	! SET UP STANDARD ERROR TRAP.					      &
	! PREPARE FOR USER INPUT.					      &
	! GET MONITOR TABLES						      &
	! H0%()	MONITOR TABLES PART I					      &
	! H1%()	MONITOR TABLES PART II					      &
	! INIT THE FNJ$ FUNCTION					      &
	! INIT THE FNJ1$ FUNCTION					      &
	! SET UP STRING OF VARIOUS STATES				      &
	! TACK ON ALL LEGAL DEVICE NAMES (WORKING BACKWARDS FROM	      &
	! DEVSYN TO BASE OF DEVNAM).					      &
	! MC.LCK%, SWP%, IN%, and OUT% represent our bits for the M.CTRL bits &
	! M.MON%= bits for monitor memory MCB				      &
	! M.XBF%=  "    "  XBUF      "     "				      &
	! M.LCK%=  "    "  Locked    "     "				      &
	! M.NXM%=  "    "  Nonexist  "     "				      &
	! M.RTS%=  "    "  RTS       "     "				      &
	! M.JOB%=  "    "  Job's     "     "				      &
	! M.LIB%=  "    "  Library's "     "				      &
	! M.END%=  "    "  End of    "     "				      &
	!								      &
	! SEE IF 'PK' IS IN THE LEGAL STATE/DEVICE STRING.		      &
	! IF SO, INSURE IT'S NOT AN ACCIDENTAL OCCURRENCE.		      &
	! IF IT'S NOT THERE THEN					      &
	!	SET THE DEVTBL POINTER FOR PK'S AND THE KB# OF		      &
	!	THE KB FOR PK0 TO 0					      &
	! ELSE	DETERMINE THE REAL #'S.					      &
									      &

1040	H1%(0%)=T0%							      &
	\ H1%(1%)=T1%							      &
	\ H1%(2%)=PEEK(PEEK(156%)+2%)					      &
	\ W%(T%)=T% FOR T%=1% TO 9%					      &
	\ KSZ%=((PEEK(H1%(25%)) EQV 32767%) +32768.)/32%		      &
	\ W%(0%)=6%							      &
	\ H0%=1%+2%+4%+8%+16%+32%+512%+16384%				      &
	\ O%=2%+16384%							      &
	\ SJB%,STK%=0%							      &
	\ OP%=456%							      &
	\ RESTORE							      &
	!								      &
	!	S E T    I N I T I A L    D I S P L A Y    I T E M S	      &
	!								      &
	! SAVE PK INFO, GET PERCENTAGE INFO POINTER (JSTATS),		      &
	! SET UP RIGHT HAND SIDE DEFAULT ORDER AND GET MEMSIZ AS A	      &
	! POSITIVE NUMBER (IN K).					      &
	! SJB%		JOB # TO START JOB STATUS AFTER			      &
	! STK%		STARTING K FOR MEMORY STATUS			      &
	! OP%		1ST NON-OPERATOR ACCOUNT			      &

1045	V$ = SYS(CHR$(6%)+CHR$(32%)+CHR$(1%)+STRING$(3%,0%)+		      &
		"TUNE"+STRING$(20%,0%))					      &
	\ PRIV%=(CVT$%(MID(V$,3%,1%))=0%)				      &
									      &

1050	OPEN "_KB:DISPLY.CMD" FOR INPUT AS FILE 1%			      &
	\ INPUT LINE #1%, V$						      &
	\ CLOSE 1%							      &
	\ V$=CVT$$(V$,-2%)						      &
	\ T%=INSTR(1%,V$+"/","/")					      &
	\ TIMR%=VAL(LEFT(V$,T%-1%))					      &
	\ TIMR%=15% IF TIMR%<=0%					      &
	\ V$=RIGHT(V$,T%)						      &
	\ SPR%=INSTR(1%,V$,"/PRIORITY")					      &
	\ IF SPR% THEN							      &
		T$=SYS(CHR6$+CHR$(-22%)) IF PRIV%			      &
	\	V$=LEFT(V$,SPR%-1%)+RIGHT(V$,SPR%+9%)			      &
	\	IF NOT(PRIV%) THEN SPR%=0%				      &
	! GET USER INPUT.						      &
	! PEEL OFF SWITCHES.						      &
	! TIMR%		DESIRED INTERVAL (DEFAULT=15)			      &
	! IF THE PRIV USER WANTS TO RUN AT SPECIAL PRIORITY THEN	      &
	!	DO SO (SPR%<>0) AND REMOVE THE SWITCH FROM THE STRING	      &

1054	IF NOT(PRIV%) THEN						      &
		T%=INSTR(1%,V$,"/DET")					      &
	\	IF T% THEN						      &
			V$=LEFT(V$,T%-1%)+RIGHT(V$,T%+4%)		      &
	\		GOTO 1054					      &
	! STRIP OUT ANY /DET SWITCHES IF NON-PRIV			      &

1055	EC%=INSTR(1%,V$,"/ECHO")					      &
	\ IF EC% THEN							      &
		V$=LEFT(V$,EC%-1%)+RIGHT(V$,EC%+5%)			      &
	! IF ECHO CONTROL IS DESIRED THEN				      &
	!	EXTRACT FROM STRING					      &

1057	EC%=8%								      &
	\ NEC%=INSTR(1%,V$,"/NOECHO")					      &
	\ IF NEC% THEN							      &
		V$=LEFT(V$,NEC%-1%)+RIGHT(V$,NEC%+7%)			      &
	\	EC%=0%							      &
	! SET ECHO CONTROL AS THE DEFAULT				      &
	! IF NO ECHO CONTROL IS DESIRED THEN				      &
	!	EXTRACT FROM STRING AND SET MODE VARIABLE		      &

1060	GOSUB 20000							      &
	! INITIALIZE SCREEN CONTROL					      &

1065	IF EFLAG% = 1% THEN						      &
		EFLAG% = 0%						      &
	\	GOTO 1020						      &

1067	H%=32767%+1%							      &

1110	T$=SYS(CHR$(3%)+CHR$(1%)) UNLESS EC%				      &
	\ IF H%<0% THEN							      &
		GOSUB 20100						      &
	\	H%=0%							      &
	\	L0%(0%),L0%(10%)=-1%					      &
	!								      &
	!								      &
	!	M A J O R     L O O P     S T A R T    P O I N T	      &
	!								      &
	! DISABLE ECHOING UNLESS /ECHO SPECIFIED			      &
	! IF 1ST TIME THROUGH (OR 'C' SPECIFIED) THEN			      &
	!	CLEAR THE SCREEN.					      &
	!	RESET H% SO THAT THIS WON'T BE DONE NEXT TIME		      &
	!	AND ALL NEW OPTION HEADERS WILL BE PRINTED.		      &
	!	INIT THE TOTAL # OF LINES PRINTED ON THE		      &
	!	RIGHT-HAND SIDE AND THE LEFT-HAND SIDE.			      &

1120 	GOSUB 20400							      &
	\ T%=FNV%(0%,1%,N$)						      &
	\ T$="Working..."						      &
	\ T$="***** Further logins are disabled *****"			      &
		IF (SWAP%(PEEK(H1%(13%))) AND 255%)<=2%			      &
	\ T%=FNV%(10%,1%,T$)						      &
	\ T$=N$								      &
	\ GOSUB 20300							      &
	\ GOSUB 20400							      &
	! GO TO HOME ON THE SCREEN.					      &
	! CLEAR THE 1ST LINE AND PRINT EITHER 'WORKING..' OR,		      &
	! IF APPROPRIATE AFTER CHECKING JOBCNT, THE OTHER MESSAGE.	      &
	! FORCE OUT ANY PARTIALS.					      &
	! GO TO HOME ON THE SCREEN.					      &
									      &

1200	T0%,L%=0%							      &
	\ T1%=256%							      &
	!								      &
	!	D I S P L A Y     L A R G E     I T E M S		      &
	!	     ( L E F T   H A N D   S I D E )			      &
	!								      &
	! CLEAR THE 'GOSUB' POINTER AND THE # OF LINES PRINTED COUNTER.	      &
	! SET THE BIT POINTER.						      &

1210	T0%=T0%+1%							      &
	\ T1%=T1%+T1%							      &
	\ GOTO 1210 IF (H0% AND T1%)=0%					      &
	\ F%=((H% AND T1%)=0%)						      &
	\ H%=H% OR T1%							      &
	\ ON T0% GOSUB 10000,10310,12000,12000,12000			      &
	\ L%=L%+3%							      &
	\ FOR W%=L% TO L0%(10%)						      &
	\	IF W%<=L0%(0%) THEN					      &
			T%=FNV%(0%,W%,SPACE$(45%))			      &
		ELSE	T%=FNV%(0%,W%,N$)				      &
	\		GOSUB 20700					      &
	\		W%=32000%
1220	  NEXT W%							      &
	\ L0%(10%)=L%-1%						      &
	\ L0%(10%)=ROWS% IF L%-1%>ROWS%					      &
	! INCREMENT THE GOSUB POINTER.					      &
	! INCREMENT THE BIT POINTER (POWER OF 2).			      &
	! IF THIS BIT IS NOT SET IN H0% THEN				      &
	!	THIS OPTION NOT DESIRED, KEEP LOOKING			      &
	!	BIT 9	J						      &
	!	BIT 10	S						      &
	! ELSE	CHECK THE 'NEED TO PRINT HEADER?' FLAG AND SET THE PRINT      &
	!	HEADER FLAG (F%) WHICH WILL BE CHECKED BY THE INDIVIDUAL      &
	!	ROUTINES.						      &
	!	FORCE THE APPROPRIATE BIT ON IN H% TO AVOID HEADER	      &
	!	PRINTING NEXT TIME IF THIS OPTION IS STILL IN EFFECT.	      &
	!	GO TO THE PROPER SUBROUTINE:				      &
	!		INDEX	MEANING					      &
	!		1	JOB STATUS				      &
	!		2	MEMORY STATUS				      &
	!		3-5	FUTURE USE				      &
	!	INCREMENT THE # OF LINES TO ALLOW FOR THE HEADER.	      &
	!	CLEAR LEFT-HAND SIDE OF THE SCREEN FROM THE BOTTOM OF	      &
	!	THE SCREEN ALMOST UP TO ACTUAL PRINTING.		      &
	!	SAVE THE # OF LINES USED, FORCING THIS TO THE MAX	      &
	!	ALLOWED BY THE SCREEN IF ALLOWING FOR THE HEADER FORCED	      &
	!	US OVER THE LIMIT.					      &
									      &

1400	Z0%=2%								      &
	\ FOR Z%=1% TO W%(0%)						      &
	\	W%=W%(Z%)						      &
	\	T%=2%^(W%-1%)						      &
	\	T0%=(H0% AND T%)=0% OR Z0%+1%>ROWS%			      &
	\	H%=H% AND (NOT T%) IF T0% OR Z0%<>L0%(W%)		      &
	\	GOTO 1430 IF T0%					      &
	\	F%=((H% AND T%)=0%)					      &
	\	IF F% THEN						      &
			H%=H% OR T%					      &
	\		L0%(W%)=Z0%					      &
	\		T%=FNV%(45%,Z0%-1%,N$) IF Z0%<>2%
1420		L%=0%							      &
	\	T$=N$							      &
	\	ON W% GOSUB						      &
		13000,13110,13250,13370,13450,13530,13960,13960,13960	      &
	\	Z0%=L0%(W%)+L%+2%
1430	NEXT Z%								      &
	!								      &
	!	D I S P L A Y     S M A L L     I T E M S		      &
	!	  ( R I G H T     H A N D     S I D E )			      &
	!								      &
	! Z0% INDICATES HOW MANY LINES WERE PRINTED BEFORE THE 'CURRENT'      &
	! ROUTINE. SET TO 2 TO ALLOW FOR SPACING/HEADER ETC.		      &
	! PLOW THROUGH ALL POSSIBLE OPTIONS-THEY WILL BE CHECKED IN THE	      &
	! ORDER IN WHICH THEY WILL BE PRINTED. THE LOOP WORKS AS	      &
	! FOLLOWS:							      &
	!	GET THE OPTION INDEX #.					      &
	!	USE THIS TO POINT TO THE PROPER BIT IN H0%, WHERE	      &
	!		BIT 0	B					      &
	!		BIT 1	D					      &
	!		BIT 2	R					      &
	!		BIT 3	M					      &
	!		BIT 4	F					      &
	!		BIT 5	H					      &
	!	T0% WILL BE -1 IF THE OPTION IS NOT DESIRED OR		      &
	!	IF THE # OF LINES ALREADY PRINTED OBVIOUSLY DIDN'T	      &
	!	LEAVE ROOM FOR THIS OPTION.				      &
	!	INDICATE THAT A NEW HEADER WILL HAVE TO BE PRINTED	      &
	!	IF ONE OF THE ABOVE 2 CONDITIONS WAS TRUE OR		      &
	!	IF THE # OF LINES PRINTED BEFORE THIS OPTION HAS CHANGED      &
	!	SINCE THE LAST PASS.					      &
	!	GO CHECK THE NEXT OPTION IF THIS ONE ISN'T TO BE DONE.	      &
	!	SET THE PRINT HEADER FLAG ( -1 MEANS PRINT).		      &
	!	IF A NEW HEADER WILL BE PRINTED THEN			      &
	!		TURN THE BIT IN H% ON FOR THE NEXT PASS.	      &
	!		SAVE THE # OF LINES PRINTED BEFORE THIS OPTION.	      &
	!		MAKE SURE THE HEADER LINE IS CLEAR.		      &
	!	CLEAR THE # OF LINES USED BY THE SPECIFIC ROUTINE.	      &
	!	GO TO THE PROPER SUBROUTINE:				      &
	!		INDEX		MEANING				      &
	!		  1		B				      &
	!		  2		D				      &
	!		  3		R				      &
	!		  4		M				      &
	!		  5		F				      &
	!		  6		H				      &
	!		7-9		FOR FUTURE USE			      &
	!	SAVE THE TOTAL # OF LINES USED SO FAR.			      &
	!	CONTINUE IN THE LOOP.					      &
									      &
									      &

1440	T%=FNV%(45%,Z%,N$) FOR Z%=L0%(0%) TO Z0%-1% STEP -1%		      &
	\ L0%(0%)=Z0%-2%						      &
	\ L0%(0%)=ROWS% IF Z0%-2%>ROWS%					      &
	! AFTER WE'RE DONE WITH THE RIGHT-HAND ITEMS,			      &
	! CLEAR OUT ANY REMAINING ROWS (JUST RIGHT-HAND SIDE).		      &
									      &

1450	GOTO 1490 UNLESS (H0% AND 16384%)				      &
	\ GOTO 1460 IF (H% AND 16384%)					      &
	\ H%=H% OR 16384%						      &
	\ T%(0%)=PEEK(512%)						      &
	\ T%(1%)=PEEK(514%)						      &
	\ GOSUB 20400							      &
	\ T%=FNV%(16384%,0%,CVT$$(RIGHT(SYS(CHR6$+CHR$(9%)),3%),4%))	      &
		+FNV%(29%,0%,"Status on "+DATE$(T%(0%))+B$+		      &
		TIME$(T%(1%))+"  Up:")					      &
	!								      &
	!								      &
	!	T I T L E						      &
	!								      &
	!								      &
	! BIT 14 SET IN H% MEANS DON'T PRINT WHOLE HEADER.		      &
	! IF THIS BIT IS SET THEN					      &
	!	BYPASS THIS PART (DON'T PRINT HEADER, DATE AND TIME)	      &
	! ELSE	SET BIT 14						      &
	!	SAVE THE DATE AND TIME					      &
	!	GOTO HOME ON SCREEN					      &
	!	PRINT HEADER INCLUDING DATE AND TIME.			      &

1460	F%=0%								      &
	\ IF FNC%(T%(0%),PEEK(512%)) THEN				      &
		T%(0%)=C%						      &
	\	T%=FNV%(39%,0%,DATE$(C%))				      &
	! IF THE 'CURRENT' DATE HAS CHANGED THEN			      &
	!	SAVE IT AND PRINT IT.					      &

1470	IF FNC%(T%(1%),PEEK(514%)) THEN					      &
		T%(1%)=C%						      &
	\	T%=FNV%(49%,0%,TIME$(C%))				      &
	! IF THE 'CURRENT' TIME HAS CHANGED THEN			      &
	! SAVE IT AND PRINT IT						      &

1480	J%=PEEK(36%)/1000%+2%						      &
	\ J1%=(PEEK(512%)/1000% <> PEEK(36%)/1000%)			      &
	\ J1%=635%+((J%/4%*4%)=J%) IF J1%				      &
	\ T%=FNV%(63%+16384%,0%,FNT$(((PEEK(512%)-PEEK(36%)-J1%)*1440.+	      &
	   PEEK(38%)-PEEK(514%))*60.+60.-(PEEK(516%) AND 255%)))	      &
	! CHECK FOR CHANGE OF YEAR/ LEAP YEAR				      &
	! CORRECT ELAPSED DAYS IF YEAR CHANGED.				      &
	! DETERMINE/PRINT THE 'UP TIME'					      &
									      &

1490	T%=FNV%(0%,1%,N$)						      &
	\ GOSUB 20300							      &
	\ IF H1%(2%)=0% THEN						      &
		IF (SWAP%(PEEK(H1%(13%))) AND 255%)>2% THEN		      &
			GOTO 4010					      &
		ELSE	T$="***** Further logins are disabled *****"	      &
	\		T%=FNV%(10%,1%,T$)				      &
	\		T$=N$						      &
	\		GOSUB 20300					      &
	\		GOTO 4010					      &
	!								      &
	!	END OF MAJOR LOOP - DISPLAY DATA FOR A WHILE		      &

1500	FOR T%=0% TO 4%							      &
	\	T0%=H1%(2%)+2%						      &
	\	T0%=H1%(2%)+4%*(T%+1%) IF T%				      &
	\	T=FND(PEEK(T0%),PEEK(T0%+2%))				      &
	\	H(T%,0%)=0. UNLESS (O% AND 16384%)			      &
	\	H(T%,1%)=T-H(T%,0%)					      &
	\	H(T%,0%)=T						      &
	\ NEXT T%							      &

1510	H(0%,1%)=1. IF H(0%,1%)=0.					      &
	\ PRINT #1%, "   ";						      &
	FNU$(H(0%,1%)-H(1%,1%)-H(2%,1%)-H(3%,1%)-H(4%,1%));"User,  ";	      &
	FNU$(H(1%,1%));"I/O,   ";					      &
	FNU$(H(3%,1%));"Exec,";						      &
	"  ";FNU$(H(4%,1%));"Idle,  ";					      &
	FNU$(H(2%,1%));"Lost";CHR$(13%);				      &
	\ GOTO 4010							      &
	! H(0,-)	UPTIME						      &
	! H(1,-)	SYS.CHARGED					      &
	! H(2,-)	LOST						      &
	! H(3,-)	SYS.UNCHARGED (EXEC)				      &
	! H(4,-)	NULL						      &
	! USER=UPTIME-NULL-LOST-SYS.CHARGED=SYS.UNCHARGED		      &

2000	FIELD #1%, RECOUNT AS V$					      &
	\ V$=CVT$$(V$,-2%)						      &
	\ E7%=0%							      &
	!								      &
	!								      &
	!	D E C O D E    A    C O M M A N D			      &
	!								      &
	!								      &
									      &

2010	IF (INSTR(1%,V$,CHR$(3%))<>0%)					      &
	OR (INSTR(1%,V$,CHR$(3%+128%))<>0%)				      &
	THEN GOTO 19100							      &
	ELSE	IF LEN(V$)=0% THEN 1110					      &
		ELSE	RESTORE						      &
	\		IF ASCII(V$)<>45% OR LEN(V$)<2% THEN		      &
				J0%=0%					      &
			ELSE	J0%=-1%					      &
	\			V$=RIGHT(V$,2%)				      &
	! GET THE COMMAND						      &
	! IF NO COMMAND THEN						      &
	!	GO AN UPDATE USING CURRENT SETTINGS			      &
	! ELSE	IF THE USER STRING DOESN'T BEGIN WITH A MINUS SIGN	      &
	!	OR IF ITS LENGTH<2 THEN					      &
	!		SET +- INDICATOR (J0%) TO 0			      &
	!	ELSE	SET J0% TO -1					      &
	!		STRIP OFF THE SIGN				      &

2020	J%=-1%								      &
	\ IF LEN(V$)>1% THEN						      &
		T%=VAL(RIGHT(V$,2%))					      &
	\	J%=T% IF T%>=0%						      &
	! IF THE LENGTH OF THE STRING>1 THEN				      &
	!	ATTEMPT TO EXTRACT THE VALUE OF WHAT'S LEFT		      &
	!	(E.G. Jn,Xn,J-O)					      &
	!	IF IT'S A NUMBER AND POSITIVE, SAVE THIS VALUE		      &

2030	READ T$,T%							      &
	\ IF T$="*E*" THEN 2080						      &
	ELSE	IF ASCII(T$)<>ASCII(V$) OR J0%<>0% THEN 2030		      &
		ELSE	H%=H% AND (NOT 15872%)				      &
	\		H0%=H0% AND (NOT 15872%)			      &
	\		H0%=H0% OR T%					      &
	\		IF T%<>512% THEN				      &
				STK%=(J%/8%)*8% IF J%>=0% AND J%<=KSZ%	      &
	\			GOTO 1110				      &
	! SEE IF WE HAVE 'LARGE LEFT-HAND' ITEM,			      &
	! I.E. J(512) OR S(1024).					      &
	! IF WE DON'T HAVE A MATCH OR IF A MINUS			      &
	! SIGN WAS SPECIFIED (ILLEGAL WITH J AND S) THEN		      &
	!	KEEP LOOKING						      &
	! ELSE	IN H% AND H0%, CLEAR BITS 9-13				      &
	!	FORCE ON BIT 9 OR 10, DEPENDING ON J OR S		      &
	!	JUMP TO 'S' ROUTINE IF APPROPRIATE.			      &
	! IF WE HAVE EITHER 'S' OR 'Sn' THEN				      &
	!	STK% REFLECTS POINT TO START MEMORY STATUS.		      &
	!	IF 'S' OR 'S' WITH ILLEGAL 'n' THEN			      &
	!	GO AND DISPLAY (ILLEGAL n IGNORED)			      &
	! ELSE	RESET STK% TO REQUESTED 'K' (FORCE TO MULTIPLE OF 8)	      &
	!	IF WITHIN ALLOWABLE RANGE.				      &
	!	GO AND DISPLAY						      &
									      &

2040	IF J%<>-1% THEN							      &
		SJB%=J% IF J%>=0% AND J%<H0%(4%)			      &
	\	GOTO 1110						      &
	! IF HERE, WE HAVE 'J'.						      &
	! IF 'Jn' WAS SPECIFIED THEN					      &
	!	(RE)SET SJB% TO REFLECT JOB # TO START THE		      &
	!	STATUS WITH IF SPECIFIED # WAS >=0 AND <MAXCNT.		      &
	!	GO AND DISPLAY						      &

2050	V$=RIGHT(V$,2%)							      &
	\ J%=(ASCII(V$)=43% OR ASCII(V$)=45%)				      &
	\ J0%=128%							      &
	\ J1%=512%							      &
	\ IF J% THEN							      &
		J%=-J% IF ASCII(V$)=43%					      &
	\	V$=RIGHT(V$,2%)						      &
	! WE HAVE EITHER 'J','J+D','J-D','JD',				      &
	! 'J+O','J-O', 'JO','J+S', 'J-S' OR 'JS'.			      &
	! STRIP OFF THE 'J'.						      &
	! J% SIGNALS IF THERE'S A PLUS OR MINUS PRESENT.		      &
	! IF THERE IS THEN						      &
	!	J%=+1	IF IT WAS A J+X					      &
	!	(J%=-1%	IF J-X)						      &
	!	(J%=0%	IF JX)						      &

2060	IF ASCII(V$)<>68% THEN						      &
		J0%=256%						      &
	\	J1%=1024%						      &
	\	IF ASCII(V$)<>79% THEN					      &
			J0%=4096%					      &
	\		J1%=0%						      &
	\		IF ASCII(V$)<>83% THEN				      &
				1110					      &
	! COMMAND	J0%	J1%					      &
	!   J+-D	128	512					      &
	!   J+-O	256	1024					      &
	!   J+-S	4096	0					      &

2070	O%=O% AND (NOT (J0% OR J1%))					      &
	\ O%=O% OR J0% IF J%=-1%					      &
	\ O%=O% OR J1% IF J%=0%						      &
	\ V$=N$								      &
	\ GOTO 1110							      &
	! BITS IN O% ARE AS FOLLOWS:					      &
	!	BIT	MEANING IF SET					      &
	!	0	T (TOTAL CPU TIME)				      &
	!	1	+ (INCREMENT OF CPU TIME)			      &
	!	2	% (EACH JOB AS % OF TOTAL CPU)			      &
	!	3	P (PRIORITY INSTEAD OF +-)			      &
	!	4	L (LOGICAL DEVICE NAME)				      &
	!	5	O (OPR FOR OPERATOR JOBS)			      &
	!	6	K (SIZE IN K)					      &
	!	7	J-D (NO DETACHED JOBS)				      &
	!	8	J-O (NO OPR JOBS)				      &
	!	9	JD  (ONLY DETACHED JOBS)			      &
	!	10	JO  (ONLY OPR JOBS)				      &
	!	11	N   (RTS INSTEAD OF 'WHAT')			      &
	!	12	J-S (NO SLEEPING JOBS)				      &
	!	13	UNUSED						      &
	!	14	I   (INCREMENTAL)				      &
									      &

2080	READ T$,T%,T0%,T1%						      &
	\ IF T$="*E*" THEN 2120						      &
	ELSE	IF ASCII(T$)<>ASCII(V$) OR				      &
		(J0%<>0% AND ASCII(V$)<>65%) THEN			      &
			2080						      &
		ELSE	O%=O% OR T0%					      &
	\		O%=O% AND (NOT T1%)				      &
	\		H%=32767%+1% IF T%=1%				      &
	\		GOTO 1110 IF T%<=1%				      &
	\		IF T%=2% THEN					      &
				TIMR%=J% IF J%>=0% AND J%<=120%		      &
	\			V$=SYS(CHR6$+CHR$(-13%)+CHR$(-1%)+	      &
				CHR$(-1%)+CHR$(8%*((TIMR%=0%)-1%)))	      &
	\			V$=SYS(CHR6$+CHR$(-22%)) IF SPR%	      &
	\			GOTO 1110				      &
	! SEE IF WE HAVE 'COMPLEX' OPTION, I.E.				      &
	!	T,%,+,X,C OR A						      &
	! IF NO MATCH OR A MINUS WAS SPECIFIED				      &
	! WITH ANYTHING EXCEPT 'A' THEN					      &
	!	KEEP LOOKING.						      &
	! ELSE	FORCE ON BITS IN O% AS FOLLOWS:				      &
	!	BIT 1	+						      &
	!	BIT 2	%						      &
	!	CLEAR BITS AS FOLLOWS:					      &
	!	BITS 1,2	T					      &
	!	BIT 1		%					      &
	!	BIT 2		+					      &
	!	BITS REMAIN UNTOUCHED FOR X,C AND A			      &
	!	SET H% TO REFLECT 'NEW START' IF 'C'			      &
	!	GO AND DISPLAY FOR ALL BUT X AND A.			      &
	!	IF X THEN						      &
	!		TIMR% IS THE INTERVAL.				      &
	!		RESET TIMR% IF SPECIFIED 'n' WAS WITHIN		      &
	!		LEGAL RANGE.					      &
	!		CHANGE THE PRIORITY (LOWERED IF 'X0' SPECIFIED).      &
	!		SET SPECIAL RUN PRIORITY IF /PRIORITY		      &
	!		GO AND DISPLAY.					      &

2090	IF J0% THEN							      &
		IF K0% THEN						      &
			1110						      &
		ELSE	T$=SYS(CHR6$+CHR$(7%)+CHR$(128%))		      &
	\		K0%=1%						      &
	\		GOTO 1110					      &
	! IF WE HAVE A '-A' (WANT TO DETACH) THEN			      &
	!	IF ALREADY DETACHED THEN				      &
	!		JUST IGNORE THE COMMAND				      &
	!	ELSE	DETACH AND RESET ATTACHED/DETACHED FLAG		      &
	!		CONTINUE					      &

2100	IF K0%<=0% THEN 1110						      &
	ELSE	K0%=-1%							      &
	\	CLOSE 1%						      &
	\	T$=SYS(CHR6$+CHR6$+					      &
		CHR$((PEEK(518%) AND 255%)/2%)+CHR$(K%))		      &
	! WE HAVE JUST 'A'.						      &
	! IF WE'RE ALREADY ATTACHED THEN				      &
	!	JUST IGNORE THE COMMAND					      &
	! ELSE	RESET FLAG TO INDICATE ABOUT TO ATTACH.			      &
	!	CLOSE THE FILE AND ATTACH TO THE APPROPRIATE KB.	      &

2110	GOSUB 20090							      &
	\ K0%=0%							      &
	\ GOTO 1110							      &
	! GO AND OPEN THE FILE. SET K0%=0% TO INDICATE SUCCESSFUL	      &
	! ATTEMPT AND CONTINUE.						      &

2120	READ T$,T%							      &
	\ IF T$="*E*" THEN 2160						      &
	ELSE	IF ASCII(T$)<>ASCII(V$) THEN 2120			      &
		ELSE	T0%=2%^(T%-1%)					      &
	\		T1%=W%(0%)					      &
	\		IF NOT J0% THEN					      &
				H0%=H0% OR T0%				      &
			ELSE	H0%=H0% AND (NOT T0%)			      &
	\			H%=H% AND (NOT T0%)			      &
	! SEE IF WE HAVE RIGHT-HAND SIDE ITEM, I.E., B,R,F,D,M, OR H	      &
	! IF NO MATCH THEN						      &
	!	KEEP LOOKING						      &
	! ELSE	SET T0% TO INDICATE APPROPRIATE BIT IN O%.		      &
	!	T1% IS THE X # OF POSSIBLE RIGHT-HAND ITEMS		      &
	!	(THIS IS CURRENTLY 6).					      &
	!	IF PLUS (OR NO SIGN) WAS SPECIFIED THEN			      &
	!		SET APPROPRIATE BIT				      &
	!	ELSE	CLEAR THIS SAME BIT.				      &
	!								      &
	! BIT TO SET/CLEAR IS CHOSEN AS FOLLOWS:			      &
	!	BIT 0	B						      &
	!	BIT 1	D						      &
	!	BIT 2	R						      &
	!	BIT 3	M						      &
	!	BIT 4	F						      &
	!	BIT 5	H						      &

2130	IF W%(T1%)<>T% THEN						      &
		T1%=T1%-1%						      &
	\	GOTO 2130						      &
	! W%() REPRESENTS THE ORDER IN WHICH THESE			      &
	! OPTIONS ARE PRINTED. THE 6 OPTIONS ARE ASSIGNED		      &
	! VALUES AS FOLLOWS:						      &
	!	B	1						      &
	!	D	2						      &
	!	R	3						      &
	!	M	4						      &
	!	F	5						      &
	!	H	6						      &
	! THIS IS ALSO THE INITIAL 'PRINTING ORDER'.			      &
	! THE ABOVE TEST FINDS THE CURRENT PRINT POSITION		      &
	! OF THE REQUESTED OPTION					      &
									      &

2140	J%=T1% IF J%<0%							      &
	\ J%=1% UNLESS J%						      &
	\ J%=W%(0%) IF J%>W%(0%)					      &
	\ IF J%=T1% THEN						      &
		GOTO 1110						      &
	ELSE	IF J%<T1% THEN						      &
			W%(T0%)=W%(T0%-1%) FOR T0%=T1% TO J%+1% STEP -1%      &
	\		W%(J%)=T%					      &
	\		GOTO 1110					      &
	! NO 'n' SPECIFIED MEANS LEAVE IT IN THE			      &
	! SAME PRINT POSITON.						      &
	! 'n' SPECIFIED AS ZERO IS FORCED TO 1				      &
	!  'n' > MAX IS FORCED TO THE MAX.				      &
	! GO DISPLAY  IF POSITION HASN'T CHANGED.			      &
	! ELSE	IF OPTION IS TO BE PRINTED 'SOONER' THEN		      &
	!		MOVE OPTIONS BEFORE IT BACK.			      &
	!		INSERT OPTION IN REQUESTED LOCATION.		      &
	!		GO AND DISPLAY.					      &

2150	W%(T0%)=W%(T0%+1%) FOR T0%=T1% TO J%-1%				      &
	\ W%(J%)=T%							      &
	\ GOTO 1110							      &
	! ITEM IS TO BE MOVED BACK IN LIST.				      &
	! MOVE THE ITEMS CURRENTLY AFTER THIS OPTION,			      &
	! UP TO THE DESIRED POSITION, FORWARD IN			      &
	! THE LIST AND INSERT THIS OPTION AFTER THEM.			      &
	! GO AND DISPLAY.						      &

2160	READ T$,T%,T0%							      &
	\ IF T$="*E*" THEN						      &
		GOTO 1110						      &
	ELSE	IF ASCII(T$)<>ASCII(V$) THEN				      &
			GOTO 2160					      &
		ELSE	IF J0% THEN					      &
				O%=O% AND (NOT T%)			      &
	\			O%=O% OR T0%				      &
	\			GOTO 1110				      &
	! SEE IF WE HAVE 'SIMPLE OPTION', I.E.				      &
	!	W,L,K,P,O OR I						      &
	! IF NOT ONE OF THESE THEN					      &
	!	IGNORE COMMAND AND DISPLAY AS BEFORE			      &
	! ELSE	IF A MINUS SIGN WAS SPECIFIED THEN			      &
	!		CLEAR BITS IN O% AS FOLLOWS:			      &
	!		BIT 0	W					      &
	!		BIT 3	P					      &
	!		BIT 4	L					      &
	!		BIT 14	I					      &
	!		K,N AND O REMAIN UNTOUCHED.			      &
	!		THEN, FORCE ON BITS AS FOLLOWS:			      &
	!		BIT 5	O					      &
	!		BIT 6	K					      &
	!		BIT 11	N					      &
	!		OTHERS REMAIN AS THEY ARE.			      &
	!		GO AND DISPLAY.					      &

2170	O%=O% OR T%							      &
	\ O%=O% AND (NOT T0%)						      &
	\ GOTO 1110							      &
	! A PLUS (OR NO SIGN) WAS SPECIFIED.				      &
	! FORCE ON APPROPRIATE BITS (IN 'CLEAR' LIST ABOVE).		      &
	! CLEAR THE APPROPRIATE BITS (FORCED ON ABOVE).			      &
	! GO AND DISPLAY						      &
									      &

4010	T$=SYS(CHR$(2%)+CHR$(1%)) UNLESS EC%				      &
	\ GET #1%, RECORD 8192%						      &
	\ GOTO 19100 IF (INSTR(1%,V$,CHR$(3%))<>0%)			      &
		OR (INSTR(1%,V$,CHR$(3%+128%))<>0%)			      &
	\ GOTO 2000							      &
	! ENABLE ECHO UNLESS IT IS TO BE DISABLED.			      &
	! GET ANY INPUT THAT MIGHT HAPPEN TO BE THERE.			      &
	! WE ARE GUARDING AGAINST CTRL-C'S, SO LOOK FOR ONE NOW		      &
	! AND EXIT IF WE FIND ONE.					      &
	!								      &
	!								      &
	!	T H E    R E A L    W A I T I N G    I S		      &
	!		D O N E    H E R E				      &
	!								      &
	!								      &
	! ENABLE ECHOING ON CH #1 (UNLESS ECHO CONTROL SPECIFIED)	      &
	! TRY TO GET SOME USER INPUT					      &

4020	IF (EC%=0%) OR E7% THEN						      &
		SLEEP TIMR%						      &
	\	GET #1%, RECORD 8192%					      &
	\	GOTO 2000						      &
	! IF NO ECHO CONTROL SPECIFIED OR IF THAT PATH TAKEN		      &
	! ALREADY THEN							      &
	!	SLEEP THE REQUESTED INTERVAL.				      &
	!	TRY FOR USER INPUT					      &

4030	FIELD #1%, 1% AS O$						      &
	\ LSET O$=CHR$(5%)						      &
	\ PUT #1%, RECORD 256%, COUNT 1%				      &
	\ E7%=-1%							      &
	\ GOTO 4010							      &
	! TAKE CARE OF ECHO CONTROL					      &
	! ADJUST FLAG AND CONTINUE					      &

4040	V$=SYS(CHR$(11%)+CHR$(1%))					      &
	\ GOTO 4030							      &
	! CANCEL ALL TYPE AHEAD ON CH #1				      &
									      &

9000	!								      &
									      &
	!	D A T A    F O R    C O M M A N D S			      &
									      &
	!								      &
	! 9100 - L E F T    H A N D    S I D E    D I S P L A Y		      &
	!          	     O P T I O N S				      &
	!								      &
	! 9200 - C O M P L E X    O P T I O N S				      &
	!	 O N L Y   ' A '   M A Y   B E   P R E C E E D E D	      &
	!			B Y   A  "-"				      &
	!								      &
	! 9300 - R I G H T    H A N D    S I D E    D I S P L A Y	      &
	!		     C O M M A N D S				      &
	!	 C A N    H A V E    A    P R E C E D I N G    "-"	      &
	!								      &
	! 9400 - S I M P L E    O P T I O N S				      &

9100	DATA	J,512,		S,1024,					      &
		*E*,0							      &

9200	DATA	T,0,0,6,	+,0,2,4,				      &
		%,0,4,2,	C,1,0,0,				      &
		X,2,0,0,	*E*,0,0,0				      &

9300	DATA	B,1,		D,2,					      &
		R,3,		M,4,					      &
		F,5,		H,6,					      &
		*E*,0							      &

9400	DATA	W,1,0,		P,8,0,					      &
		L,16,0,		O,0,32,					      &
		K,0,64,		I,16384,0,				      &
		N,0,2048,	*E*,0,0					      &

10000	J%,BTM%,J1%,TP%=0%						      &
	\ IF F% THEN							      &
		T%=FNV%(0%,2%,						      &
	"Job  Who  Where  What Size State Run-time Pr ")		      &
	\	J%(T%,0%)=-2% FOR T%=0% TO 20%				      &
	\	H2%=0%							      &
	\	IF SJB% OR (O% AND 6016%) THEN				      &
			T%=FNV%(0%,3%,SPACE$(6%)+			      &
			"*** No Jobs not Displayed ***"+SPACE$(10%))	      &
	!	J O B    S T A T U S					      &
	!	  H 0 % = 5 1 2 %					      &
	!								      &
	! CLEAR THE FOLLOWING:						      &
	! J%	JOB # CURRENTLY BEING LOOKED AT				      &
	! J1%	IF USER SPECIFIED Jn THEN THIS VARIABLE WILL		      &
	!	BE USED TO GET TO n=1ST JOB				      &
	! TP%	'TOP' # OF JOBS NOT DISPLAYED				      &
	! BTM%	'BOTTOM' # OF JOBS NOT DISPLAYED			      &
	!								      &
	! IF THIS IS THE 1ST TIME THROUGH THIS ROUTINE THEN		      &
	!	PRINT HEADER						      &
	!	INIT ARRAY ITEMS					      &
	!	SJB%	JOB TO START AFTER.				      &
	!	IF THIS IS NON-ZERO OR IF COMBINATION			      &
	!	OF J AND D OR O WAS SPECIFIED THEN			      &
	!		PRINT JOBS NOT DISPLAYED MESSAGE		      &
	!		(WILL BE UPDATED AT END OF ROUTINE)		      &

10030	L%=1% IF SJB% OR (O% AND 6016%)					      &
	\ IF J1%>=SJB%							      &
	    THEN							      &
		GOTO 10080						      &
	    ELSE							      &
		J%=J%+1%						      &
	\	UU.SYS0$=SYS(UU.SYS$+CHR$(J%)+CHR$(0%))			      &
	\	UU.SYS1$=SYS(UU.SYS$+CHR$(J%)+CHR$(1%))			      &
	\	JDB%=SWAP%(CVT$%(MID(UU.SYS1$,25%,2%)))			      &
	\	TP%=TP%+1%						      &
	\	J1%=J1%+1%						      &
	\	GOTO 10030						      &
	! ALLOW FOR THE 'NOT DISPLAYED' HEADER, IF NECESSARY.		      &
	! IF STARTING IN 'NORMAL' (ALL JOBS) PLACE THEN			      &
	!	GO TO 'WORK' LOOP BELOW					      &
	! ELSE	INDEX INTO JBTBL					      &
	!	IF JOB # NOT IN USE (ERR=10%) THEN CONTINUE IN THIS LOOP.     &
	!	INCREMENT THE NOT-DISPLAYED COUNTER.			      &
	!	INCREMENT J1% (THROUGH WITH LOOP WHEN = REQUESTED START POINT) &
	!	CONTINUE IN THIS LOOP.					      &
									      &

10040	IF SJB% OR (O% AND 6016%) THEN					      &
		IF J%(0%,0%)<>TP% THEN					      &
			T$=" No Jobs"					      &
	\		T$=" 1 Job" IF TP%=1%				      &
	\		T$=" "+NUM1$(TP%)+" Jobs" IF TP%>1%		      &
	\		J%(0%,0%)=TP%					      &
	\		T%=FNV%(6%,3%,FNJ0$("***"+T$,11%))		      &
	! WE'VE EITHER HIT THE END OF THE JBTBL LOOKING FOR		      &
	! THE N+1TH JOB OR ACTUALLY DONE SOME PRINTING.			      &
	! IF Jn OR SOME OPTION WAS SPECIFIED THEN			      &
	!	IF DIFFERENT "# OF NOT DISPLAYED JOBS" THEN		      &
	!		UPDATE COUNTER TO REFLECT CHANGE.		      &
	!		UPDATE THE TOP NOT DISPLAYED MESSAGE.		      &

10050	J%(T%,0%)=-1% FOR T%=L% TO 20%					      &
	\ IF BTM% THEN							      &
		J%(L%-1%,0%)=-1%					      &
	\	T$=NUM$(BTM%+1%)					      &
	\	T%=FNV%(0%,L%+2%,SPACE$(10%-LEN(T$))+"***"+T$+		      &
		"Jobs not Displayed ***"+SPACE$(10%))			      &
	\	T$=N$							      &
	! FLAG NON-PRINTED, EXTRA ENTRIES				      &

10055	IF (O% AND 2048%)<>H2% THEN					      &
		H2%=O% AND 2048%					      &
	\	T$="What"						      &
	\	T$="RTS " IF (O% AND 2048%)				      &
	\	T%=FNV%(17%,2%,T$)					      &
	! TURN ON RTS RATHER THAN WHAT IF NECESSARY			      &

10060	RETURN								      &

10070	TP%=TP%+1%							      &
	! INCREMENT THE NOT DISPLAYED COUNTER				      &

10080	J%=J%+1%							      &
	\ UU.SYS0$=SYS(UU.SYS$+CHR$(J%)+CHR$(0%))			      &
	\ UU.SYS1$=SYS(UU.SYS$+CHR$(J%)+CHR$(1%))			      &
	\ JDB%=SWAP%(CVT$%(MID(UU.SYS1$,25%,2%)))			      &
	\ IF FNZ1% THEN							      &
		BTM%=BTM%+1%						      &
	\	GOTO 10080						      &
	! INCREMENT THE JOB #						      &
	! GET JOB DATA BLOCK FOR JOB #.					      &
	! IF FNZ1%<>0% SHOWS NO ROOM TO PRINT ANY MORE THEN		      &
	!	INCREMENT THE 'BOTTOM' NOT DISPLAYED COUNTER.		      &
	!	LOOK AT THE NEXT ENTRY.					      &
									      &

10085	KDB%=PEEK(PEEK(JDB%))						      &
	\ PKB%=ASCII(MID(UU.SYS0$,5%,1%))				      &
	\ PN%=SWAP%(CVT$%(MID(UU.SYS0$,21%,2%)))			      &
	\ JBW%=SWAP%(CVT$%(MID(UU.SYS1$,11%,2%)))			      &
	\ JBSTAT%=SWAP%(CVT$%(MID(UU.SYS1$,9%,2%)))			      &
	\ J2%=ASCII(MID(UU.SYS0$,4%,1%))				      &
	\ J2%=-1% IF (J2% AND 128%)					      &
	\ IF (O% AND 4096%) THEN					      &
		IF (JBW% AND 8192%) AND					      &
		(JBW% AND JBSTAT%)=0% THEN				      &
			GOTO 10070					      &
	! KDB%		POINTS TO THE DDB OF THE JOB'S CONSOLE KB:	      &
	! PKB%		PSEUDO KEYBOARD FLAG (=0 MEANS NOT A PK)	      &
	! PN%		THE PPN OF THE JOB WE'RE CHECKING.		      &
	! JBW%		JOB'S JBWAIT WORD				      &
	! JBSTAT%	JOB'S JBSTAT WORD				      &
	! J2%		THE DEVICE UNIT # (DDUNT) OF THE JOB'S TERMINAL.      &
	! SET J2% TO SIGNAL 'DETACHED' IF THE UNIT NUMBER BYTE IS NEGITIVE    &
	! IF THEY DON'T WANT TO DISPLAY SLEEPING JOBS THEN		      &
	!	IF JBWAIT SAYS THIS JOB IS SLEEPING AND			      &
	!	THIS IS CONFIRMED BY JBSTAT THEN			      &
	!		COUNT THIS JOB AS ONE NOT DISPLAYED		      &

10087	GOTO 10070 IF (J2%=-1% AND (O% AND 128%)) OR			      &
		(PN%=-1% AND (O% AND 256%)) OR				      &
		(J2%<>-1% AND (O% AND 512%)) OR				      &
		(PN%<>-1% AND (O% AND 1024%))				      &
	\ IF FNC0%(J%(L%,0%),(J%*2%)) THEN				      &
		J%(L%,0%)=C%						      &
	\	T%=FNV3%(0%,FNJ$(C%/2%,2%))				      &
	! GO AND INCREMENT THE NOT DISPLAYED COUNTER IF ANY OF THE	      &
	! FOLLOWING IS TRUE:						      &
	! 1.	JOB'S DETACHED AND DON'T WANT TO DISPLAY DETACHED JOBS.	      &
	! 2.	OPERATOR JOB AND DON'T WANT TO DISPLAY OPERATOR JOBS.	      &
	! 3.	JOB'S ATTACHED AND WANT TO DISPLAY DETACHED JOBS.	      &
	! 4.	NON-OPERATOR JOB AND WANT TO DISPLAY ONLY OPERATOR JOBS.      &
	!								      &
	! IF THE JOB # OF THIS ENTRY HAS CHANGED THEN			      &
	!	UPDATE THE ENTRY AND 'PRINT' IT.			      &

10090	IF FNC%(J%(L%,1%),PN%) THEN					      &
		J%(L%,1%)=C%						      &
	\	T$="  **,**  "						      &
	\	T$=FNJ$(SWAP%(C%) AND 255%,4%)+","+FNJ1$(C% AND 255%,4%)      &
			IF C%<-1% OR C%>0%				      &
	\	T%=FNV3%(2%,T$)						      &
	! IF THE PPN HAS CHANGED THEN					      &
	!	SAVE THE NEW ONE.					      &
	!	PRINT EITHER ALL *'S (NOT LOGGED IN), [OPR]		      &
	!	OR ACTUAL PPN.						      &


10100	IF FNC%(J%(L%,2%),J2%)=0% THEN					      &
		GOTO 10120						      &
	ELSE	J%(L%,2%)=C%						      &
	\	T$="KB"							      &
	\	IF PKB% AND C%<>-1% THEN				      &
			T$="KB"+NUM1$(C%)+"J"				      &
			! Build the 1st 3 parts of the string "KBnnJmm"	      &
			! The "mm" part comes later.			      &
	\		C%=(PKB%-1%)/2%					      &
			! Calculate the job number			      &

10110	T$=T$+NUM1$(C%)							      &
	\ T$=T$+"*" IF PEEK(KDB%+30%) AND 16384%			      &
	\ T$="Det" IF C%=-1%						      &
	\ T%=FNV3%(11%,FNJ2$(T$,6%))					      &
	! SET STRING TO KB OR PK AND THE UNIT #.			      &
	! REPLACE BY DETACHED IF NECESSARY.				      &
	! PRINT THE STRING						      &

10120	NAM%=17%							      &
	\ NAM%=27% IF (O% AND 2048%)					      &
	\ J1%=SWAP%(CVT$%(MID(UU.SYS0$,NAM%,2%)))			      &
	\ IF FNC%(J%(L%,3%),J1%) THEN					      &
		J%(L%,3%)=C%						      &
	\	T%=FNV3%(17%,RAD$(C%))					      &
	! PREPARE TO CHECK PROGRAM NAME - REPLACE WITH RTS NAME IF	      &
	! APPROPRIATE.							      &
	! IF THE 1ST 3 CHARACTERS OF THE NAME HAVE CHANGED THEN		      &
	!	SAVE THE NEW CHARACTERS					      &
	!	PRINT THEM						      &

10130	NAM%=NAM%+2%							      &
	\J1%=SWAP%(CVT$%(MID(UU.SYS0$,NAM%,2%)))			      &
	\ IF FNC%(J%(L%,4%),J1%) THEN					      &
		J%(L%,4%)=C%						      &
	\	T%=FNV3%(20%,RAD$(C%))					      &
	! DO THE SAME WITH THE 2ND 3 CHARACTERS				      &

10140	C%=ASCII(MID(UU.SYS1$,13%,1%))					      &
	\ C%=ASCII(MID(UU.SYS1$,19%,1%))-C% IF (O% AND 64%)		      &
	\ IF FNC%(J%(L%,5%),C%) THEN					      &
		J%(L%,5%)=C%						      &
	\	T%=FNV3%(23%,FNJ$(C%,3%))				      &
	! DETERMINE/SAVE THE JOB'S CURRENT SIZE, IN K (JDSIZ0)		      &
	! IF -K WAS SPECIFIED THEN					      &
	!	DETERMINE THE AMOUNT OF MEMORY REMAINING		      &
	!	BY TAKING THE DIFFERENCE OF THE MAX SIZE		      &
	!	(JDCORM) AND CURRENT SIZE.				      &
	! IF THIS SIZE HAS CHANGED THEN					      &
	!	SAVE IT AND PRINT IT.					      &

10150	JBW%=SWAP%(CVT$%(MID(UU.SYS1$,11%,2%)))				      &
	\ ST%=5%							      &
	\ GOTO 10200 IF (JBW% AND JBSTAT%) AND (O% AND 1%)=0%		      &
	\ ST%=17%							      &
	\ GOTO 10200 IF SWAP%(CVT$%(MID(UU.SYS1$,15%,2%)))=0% AND	      &
		ASCII(MID(UU.SYS1$,14%,1%))=196%			      &
	\ JBW%=JBW% AND (NOT 16384%) IF (JBW% AND (NOT 16384%))		      &
	\ ST%=7%							      &
	\ GOTO 10200 IF (JBW% AND 16384%)				      &
	\ ST%=9%							      &
	\ GOTO 10160 UNLESS (JBW% AND 8192%)				      &
	\ ST%=1% IF ASCII(MID(UU.SYS1$,7%,1%))=5%			      &
	\ GOTO 10200							      &
	! JBW%		JBWAIT						      &
	! ST%		POINTS TO STATE IN H$ (SR^CRNBFSLFPTTHBRS?? FOLLOWED  &
	!		BY NON-DISK DEVICES, THEN DISKS).		      &
	! POSSIBLE STATES		CONDITIONS			      &
	!	RN (RUNNABLE)		(JBWAIT AND JBSTAT)<>0 AND	      &
	!				'ACTUAL' STATE IS NOT DESIRED.	      &
	!	RS (RESIDENCY WAIT)	IF M.PHYA=0% AND		      &
	!				M.CTRL=	LCK	BIT 12-15	      &
	!					SWP	BIT 11		      &
	!					IN	BIT 10		      &
	! (TURN OFF BUFFER WAIT BIT IF ANY OTHERS ARE ON. CHECK FOR THE	      &
	! FOLLOWING STATES BY LOOKING AT JBWAIT.)			      &
	!	BF (BUFFER WAIT)	IF BIT 14 IS ON			      &
	!	SL (SLEEP WAIT)		IF BIT 13 IS ON.		      &
	!	SR (RECEIVER SLEEP)	IF BIT 13 IS ON AND ERROR CODE	      &
	!				IN (JDIOST) IS 5		      &

10160	ST%=11%								      &
	\ GOTO 10200 IF (JBW% AND 4096%)				      &
	\ ST%=13%							      &
	\ GOTO 10200 IF (JBW% AND 2048%)				      &
	\ ST%=15%							      &
	\ GOTO 10200 UNLESS JBW%					      &
	\ DRIDX%=2%							      &
	\ GOTO 10190 IF JBW%=2%						      &
	!	FP			BIT 12 IS ON			      &
	!	TT			BIT 11 IS ON			      &
	!	HB			NO BITS ARE ON			      &
	! IF NONE OF THE PREVIOUS STATES THEN WE HAVE A "DEVICE WAIT".	      &
	! BYPASS THE CHANNEL # CHECK IF WE KNOW WE HAVE A KB INPUT WAIT.      &

10180	C%=ASCII(MID(UU.SYS1$,20%,1%))					      &
	\ R%=PEEK(PEEK(JDB%)+C%)					      &
	\ DRIDX%=0%							      &
	\ DRIDX%=PEEK(R%) AND 255% IF R%<>0%				      &
	\ IF DRIDX%=0% THEN						      &
		FIPU%=FND%(SWAP%(PEEK(R%+2%)) AND 255%) UNLESS H1%(29%)	      &
	\	FIPU%=FND%(PEEK(PEEK(R%+8%)-4%) AND 255%) IF H1%(29%)	      &
	\	ST%=H8%-FIPU%						      &
	\	ST%=19% IF R%=0%					      &
	\	GOTO 10200						      &
	! C%=CHANNEL #*2						      &
	! INDEX INTO THE IOB WHICH POINTS TO EITHER A DDB (NON-DISK),	      &
	! AN SCB (SMALL FILE SYSTEM), OR A WCB (LARGE FILE SYSTEM).	      &
	! LOOK AT THE DRIVER INDEX (SAME LOCATION IN ALL 3).		      &
	! IF WE HAVE A DISK (DRIDX%=0) THEN				      &
	!	FIND THE FIP UNIT NUMBER FOR SMALL SYSTEMS (IN SCB) OR	      &
	!	FIND IT IN THE FCB (POINTED TO FROM WCB) FOR LARGE SYSTEMS.   &
	!	FOR EITHER, PINPOINT THE DISK TYPE VIA FND% (THIS USES	      &
	!	THE INTERNAL DISK UNIT # TO TRACK DOWN THE DISK TYPE)	      &
	! IF THERE IS NO SCB OR WCB, THEN THERE IS PFB IO (DSPED AS ??)	      &

10190	ST%=H8%-H1%(9%)-DRIDX%+2%					      &
	\ ST%=3% IF SWAP%(CVT$%(MID(UU.SYS1$,21%,2%)))<0% IF DRIDX%=2%	      &
	! PINPOINT A NON-DISK WAIT.					      &
	! CHECK FOR ^C ON KB INPUT WAITS.				      &
									      &

10200	C%=SWAP%(ST%)+ASCII(MID(UU.SYS0$,6%,1%))			      &
	\ M.CTRL%=SWAP%(ASCII(MID(UU.SYS1$,14%,1%)))			      &
	\ IF M.CTRL%<=0% AND ST%<>17% THEN				      &
		C%=C% AND (NOT 255%)					      &
	\	IF (M.CTRL% AND -4096%)<>0% THEN			      &
			C%=C%+64%					      &
	\		IF (M.CTRL% AND 1536%) THEN			      &
				C%=C%+64%				      &
	\			IF (M.CTRL% AND 512%) THEN		      &
					C%=C%+64%			      &
	! SAVE ST% (IN THE HIGH BYTE) AND JDSWAP (LOW BYTE)		      &
	! M.CTRL%	WHERE THE MEMORY CONTROL STATUS BITS ARE:	      &
	!		BIT	DESC.					      &
	!		8	REQ					      &
	!		9	OUT					      &
	!		10	IN					      &
	!		11	SWP					      &
	!		12-15	LCK					      &
	!								      &
	! IF THE JOB IS RESIDENT THEN					      &
	!	CLEAR THE LOW BYTE OF C%				      &
	!	SET THE LOW BYTE TO INDICATE THE FOLLOWING:		      &
	!		64	LCK					      &
	!		128	SWI					      &
	!		192	SWO					      &

10210	IF (C% AND 63%)							      &
	    THEN							      &
		T$=B$+CHR$(65%+(C% AND 192%)/64%)+			      &
			RIGHT(NUM1$(100%+(C% AND 63%)),2%)		      &
	    ELSE							      &
		IF (C% AND 192%)=0% AND					      &
			(SWAP%(CVT$%(MID(UU.SYS1$,5%,2%))) AND 16384%)	      &
		    THEN						      &
			T$=" NSw"					      &
		    ELSE						      &
			T$=MID("     Lck Swi Swo",(C% AND 192%)/16%+1%,4%)    &
	! IF THE LOW BYTE OF C% IS STILL JDSWAP (NON-RES) THEN		      &
	!	GET THE SLOT # AND SWAPPING FILE, WHERE			      &
	!	A	SWAP0.SYS					      &
	!	B	SWAP1.SYS					      &
	!	C	SWAP2.SYS					      &
	!	D	SWAP3.SYS					      &
	! ELSE	PRINT BLANKS OR PROPER MESSAGE.				      &

10220	IF FNC%(J%(L%,6%),C%) THEN					      &
		J%(L%,6%)=C%						      &
	\	T%=FNV3%(26%,B$+MID(H$,SWAP%(C%) AND 255%,2%)+T$)	      &
	! IF THE STATE INFO HAS CHANGED THEN				      &
	!	SAVE IT							      &
	!	PRINT IT BY EXTRACTING FROM STATE/DEVICE STRING		      &
	!	AND TACKING ON SWAPPING INFO STRING.			      &

10230	AC=FND(SWAP%(CVT$%(MID(UU.SYS0$,7%,2%))),ASCII(MID(UU.SYS0$,16%,1%))) &
	\ T=TIME(0%)							      &
	\ I=T-I(J%)							      &
	\ I(J%)=T							      &
	\ T=AC								      &
	\ IF (O% AND 6%)=0% THEN					      &
		IF FNC%(J%(L%,7%),16384%)=0% AND T=R(J%) THEN		      &
			GOTO 10280					      &
		ELSE	GOTO 10270					      &
	! DETERMINE/SAVE (AC) THE ACCUMULATED CPU			      &
	! TIME (J2CPU AND J2CPUM).					      &
	! GET THE CLOCK TIME IN SECONDS SINCE MIDNIGHT.			      &
	! I=THE # OF SECONDS SINCE THE LAST PASS.			      &
	! SAVE, IN I(JOB #), THE CURRENT CLOCK TIME FOR LATER USE.	      &
	! SAVE A COPY OF R0.						      &
	! IF 'T' IS IN EFFECT THEN					      &
	!	IF '+' OPTION WAS NOT PRINTED BEFORE AND		      &
	!	THE CLOCK TIME HASN'T CHANGED THEN			      &
	!		GO ON TO PRIORITY				      &
	!	ELSE	GOTO THE PRINT/CHECK ROUTINE			      &

10240	C%=32767%+1%+((O% AND 4%)*2048%)				      &
	\ GOTO 10270 IF F%						      &
	\ T=T-R(J%)							      &
	\ IF (O% AND 2%) THEN						      &
		C%=16385% IF T>0.					      &
	\	GOTO 10270						      &
	! WE HAVE A '%' OR '+'. THE FOLLOWING BITS ARE SET IN C%:	      &
	!	13,15	%						      &
	!	15	+						      &
	! NO MORE FIGURING NEEDED 1ST TIME THROUGH.			      &
	! DETERMINE THE AMOUNT OF CPU TIME ACCUMULATED SINCE PREVIOUS	      &
	! PASS.								      &
	! IF '+' IS DESIRED THEN					      &
	!	FORCE ON BITS 0 AND 14 IF AT LEAST 1 SEC. HAS ACCUM.	      &
	!	GOTO CHECK/PRINT ROUTINE.				      &

10250	AC=R(J%) IF I<=0. AND (J%(L%,7%) AND 8192%)			      &
	\ GOTO 10270 IF I<=0. OR T=0.					      &
	\ T0=(1000.*T)/(10.*I)						      &
	\ T0=4096. IF T0<0.						      &
	\ T0=1000. IF T0>1000. AND T0<>4096.				      &
	\ C%=T0								      &
	\ IF (C% AND 4096%) THEN					      &
		T$="??.?%"						      &
	\	GOTO 10270						      &
	! USE THE PREVIOUS VALUE IF NO 'SECONDS' HAVE ELAPSED AND	      &
	! SOMETHING WAS PRINTED THE LAST PASS.				      &
	! GOTO CHECK/PRINT ROUTINE IF NO CLOCK SECONDS HAVE ELAPSED AND	      &
	! NO CPU TIME HAS BEEN ACCUMULATED.				      &
	! GET (1000*ACCUM. CPU TIME SINCE LAST PASS)/(10*ELAPSED	      &
	! SECONDS SINCE LAST PASS).					      &
	! IF THIS IS NEGATIVE WE CAN'T COMPUTE A VALUE; TURN ON BIT 12.	      &
	! ADJUST IF NECESSARY TO PREVENT GOING ABOVE MAX % (100).	      &
									      &

10260	T%=C%/10%							      &
	\ T$="."+CHR$(48%+C%-(T%*10%))+"%"				      &
	\ T$=NUM1$(T%)+T$ IF T%						      &
	\ C%=C% OR 8192%						      &
	! WE CAN DETERMINE NN.N%.  DO SO AND TURN ON BIT 13 TO INDICATE	      &
	! 'SUCCESS'.							      &

10270	R(J%)=AC							      &
	\ IF FNC%(J%(L%,7%) AND (NOT 16384%),C%) THEN			      &
		J%(L%,7%)=C%						      &
	\	T$=N$ IF C%<0%						      &
	\	T$=FNT1$(T) IF (C% AND 16384%)				      &
	\	T%=FNV3%(33%,FNJ0$(T$,8%))				      &
	! SAVE THE ACCUMULATED CPU TIME (MAY IN FACT BE 'PREVIOUS' IF).	      &
	! IF THIS HAS CHANGED (OR DESIRED OPTION CHANGED) SINCE LAST	      &
	! PASS THEN							      &
	!	SAVE THE NEW VALUE.					      &
	!	NOTHING WILL BE PRINTED IF + OR % AND 1ST PASS.		      &
	!	CONVERT TO TIME IN TENTHS OF SECONDS IF NECESSARY	      &
	!	(FOR POSITIVE '+' VALUE).				      &
	!	PRINT VALUE.						      &

10280	C%=ASCII(MID(UU.SYS1$,17%,1%))					      &
	\ C%=C% OR 256% IF (O% AND 8%)					      &
	\ IF FNC%(J%(L%,8%),C%)=0% THEN					      &
		GOTO 10300						      &
	ELSE	J%(L%,8%)=C%						      &
	\	T%=C% AND 255%						      &
	\	T%=T%-256% IF T%>127%					      &
	\	T%=(T% AND (NOT 7%))/8%					      &
	\	IF (C% AND 256%) THEN					      &
			T%=FNV3%(41%,FNJ$(T%,3%)+B$)			      &
	\		GOTO 10300					      &
	! GET THE PRIORITY FROM JDPRI.					      &
	! IF +P HAS BEEN SPECIFIED THEN					      &
	!	ADJUST PRIORITY TO INDICATE THIS			      &
	! IF THE PRIORITY HASN'T BEEN CHANGED THEN			      &
	!	GO ON TO NEXT JOB					      &
	! ELSE	GET THE EXACT PRIORITY					      &
	!	MAKE ADJUSTMENT FOR NEGATIVE PRIORITY			      &
	!	FORCE TO MULTIPLE OF 8					      &
	!	IF +P SPECIFIED THEN					      &
	!		PRINT THE EXACT PRIORITY (+n,0,-n)		      &
	!		GO TO THE NEXT JOB				      &

10290	V$="  "								      &
	\ V$="- " IF T%<-1%						      &
	\ V$="+ " IF T%>-1%						      &
	\ T$="  "							      &
	\ T$=" S" IF (C% AND 4%)					      &
	\ T$=" K" IF (C% AND 1%)					      &
	\ T$=" ^" IF (C% AND 2%)					      &
	\ T%=FNV3%(41%,T$+V$)						      &
	! -P WAS SPECIFIED.						      &
	! GET THE PROPER SIGN AND TACK ON TO ONE			      &
	! OF THE FOLLOWING IF APPROPRIATE:				      &
	! BIT 0 SET	K-KEYBOARD DELIMITER TEMP PRIORITY		      &
	! BIT 1 SET	^-CONTROL/C TEMP PRIORITY			      &
	! BIT 2 SET	S-SPECIAL RUN PRIORITY				      &

10300	L%=L%+1%							      &
	\ GOTO 10080							      &
	!	INCREMENT THE ENTRY POINTER				      &
	!	GO AND LOOK AT THE NEXT JOB #				      &

10310	IF F% THEN							      &
		T%=FNV%(0%,2%,FNJ2$("   Memory usage (Starting at "+	      &
		NUM1$(STK%)+"K)",45%))					      &
	\	J%(T0%,T%)=-1% FOR T%=0% TO 8% FOR T0%=0% TO 20%	      &
	!								      &
	!								      &
	!	M E M O R Y    S T A T U S				      &
	!	    H 0 % = 1 0 2 4 %					      &
	!								      &
	!								      &
	! If this is the 1st time thru or if the starting 'K' has	      &
	! changed then							      &
	!	Print the heading					      &
	!	Initialize each entry of the status array (all bits on)	      &

10330	S0%,Q%=0%							      &
	\ GOTO 10350 IF STK%=KSZ%					      &
	\ S0%=H0%(9%)							      &
	\ GOTO 10350 UNLESS STK%					      &
	\ C2%=-1%							      &
	\ WHILE C2%<STK%						      &
	\	C3%=PEEK(S0%+4%)					      &
	\	IF (C2%+C3%)>=STK% THEN					      &
			Q%=(C2%+C3%)-STK%+1%				      &
	\		GOTO 10350
10340		C2%=C2%+C3%						      &
	\	S0%=PEEK(S0%+2%)					      &
	\ NEXT								      &
	! Set the starting address to the 1st entry of MEMLST.		      &
	! If we're not starting at 0K then				      &
	!	Plow thru MEMLST till we hit the entry which encompasses      &
	!		the desired K.					      &
	!	Set Q% to reflect the amount of the entry which will	      &
	!		actually be used.				      &
									      &

10350	L%,J0%,R8%,RL8%=0%						      &
	\ WHILE S0%							      &
	\	W%=0%							      &
	\	T%=PEEK(S0%+4%)						      &
	\	U%=PEEK(S0%+6%)						      &
	\	IF (S0% AND 16%) THEN					      &
			GOSUB 11200					      &
	\		W%=M.JOB% OR ((U% AND -512%)*8%) OR (W%/2%)	      &
	\		W%=W% OR MC.LCK% IF (U% AND -4096%)<>0%		      &
	\		GOTO 10375					      &
	! Init RW and column pointers as well as RTS/LIB table init flag.     &
	! Memory control sub-block (MCB) form:				      &
	!								      &
	!	OFFSET		   SYMBOL				      &
	!	======		   ======				      &
	!	  0		   M.PPRV				      &
	!	  2		   M.PNXT				      &
	!	  4		   M.TSIZ				      &
	!	  6		M.CTRL - M.SIZE				      &
	!	  8		   M.PHYA				      &
	!								      &
	! Get out if we hit the 'TAIL END'.				      &
	! T% = the total size of this item in K (M.TSIZ)		      &
	! U%=M.CTRL, and the inuse size of the item in K (M.SIZE).	      &
	! Bits 9-11 in flag W% have the following special meanings:	      &
	!								      &
	!	11 10 9	    VALUE	MEANING				      &
	!	== == =	    =====	=======				      &
	!	0  0  0	       0%	Monitor (M.MON%)		      &
	!	0  0  1	     512%	Extended buffer (M.XBF%)	      &
	!	0  1  0	    1024%	Locked (M.LCK%)			      &
	!	0  1  1	    1536%	Non-existent memory (M.NXM%)	      &
	!	1  0  0	    2048%	RTS (*number in list*)(M.RTS%)	      &
	!	1  0  1	    2560%	Job (Job #, followed by SI,SO or LK)  &
	!	1  1  0	    3072%	LIB (-number in list-)(M.LIB%)	      &
	!	1  1  1	    3584%	*END or '.' if bit 0 is set (M.END%)  &
	!								      &
	! Other special bits are:					      &
	!								      &
	!	BIT		MEANING					      &
	!	===		=======					      &
	!	15,14,13,12	M.CTRL (jobs only)(MC.LCK%, SWP%, IN%, OUT%)  &
	!	 8		If set, RTS/LIB # couldn't be determined      &
	!	 7		Change in this entry since last pass.	      &
	!	 6		Part of a 'HOLE' after an item, i.e.,	      &
	!				M.TSIZ-M.SIZE.			      &
	!	5-0		Job # , RTS # or unused			      &
	!								      &
	! Set up W% to indicate 'MON'.					      &
	! If the address has bit 4 on then				      &
	!	We have a job - look up job #				      &
	!	Turn on bits 9 and 11 (M.JOB%)				      &
	!	Mask in M.CTRL (shifted to new positions)		      &
	!	Put job # (times 1) in low byte				      &
	!	Set MC.LCK% if any of the LCK bits are set.		      &
									      &

10365		IF (S0% AND 8%) THEN					      &
			R.RL%=PEEK(S0%+20%) AND 128%			      &
	\		W%=M.RTS% OR FNSCAN%(0%,R8%) UNLESS R.RL%	      &
	\		W%=M.LIB% OR FNSCAN%(20%,RL8%) IF R.RL%		      &
	\		GOTO 10375					      &
	! If the address has bit 3 on then				      &
	!	We have a RTS or RESLIB - check bit 7 in the status byte      &
	!	     (actually block base +28, which is +20 from where we are) &
	!	Go to the subroutine which builds the ordered list of	      &
	!	RTS or LIB (will only really be done once each pass)	      &
	!		and selects the RTS # or LIB #.			      &
	!	Turn on M.RTS% bit and mask in the RTS # if RTS.	      &
	!	Turn on M.LIB% bits and mask in the LIB # if LIB.	      &

10370		W%=(S0% AND 6%)*256% IF (S0% AND 6%)			      &
	! Shift out proper bits if extended buffer pool,		      &
	! Locked or Non-existent.					      &

10375		U%=U% AND 255%						      &
	\	IF Q% THEN						      &
			U%=U%-(T%-Q%)					      &
	\		T%=Q%						      &
	\		Q%=0%						      &
	! Extract the actual inuse portion.				      &
	! Adjust as necessary for 1st entry (may be in the 'middle').	      &
	! This includes changing the total size and inuse size.		      &

10380		FOR I%=1% TO T%						      &
	\		W%=64% IF I%>U%					      &
	\		J%(L%,J0%)=W% OR 128% IF J%(L%,J0%)<>W%		      &
	\		J0%=J0%+1%					      &
	\		IF J0%<=7% THEN 10410				      &
			ELSE	J0%=0%					      &
	\			L%=L%+1%				      &
	\			GOTO 10420 IF L%>20%
10410		NEXT I%							      &
	\	S0%=PEEK(S0%+2%)					      &
	\ NEXT								      &
	! Set up the next T% items (K segments remaining for MCB) as follows: &
	! Reset W% to indicate 'hole' if necessary.			      &
	!	Reset the item, turning on bit 7, if no match		      &
	!	Bump the column and row pointers, exiting if we hit	      &
	!		the max before we've done them all.		      &
	! Go do the next MCB.						      &

10415	GOTO 10420 IF J%(L%,J0%)=M.END%+64%+36%				      &
	\ J%(L%,J0%)=M.END%+64%+36%+128%				      &
	\ FOR I%=L% TO 20%						      &
	\	J0%=J0%+1%						      &
	\	WHILE J0%<=7%						      &
	\		GOTO 10420 IF J%(I%,J0%)=M.END%+64%+36%		      &
	\		J%(I%,J0%)=M.END%+64%+36%+128%			      &
	\		J0%=J0%+1%					      &
	\	NEXT							      &
	\	J0%=-1%							      &
	\ NEXT I%							      &
	! We've hit the end of MEMLST.					      &
	! Flag end and . entries					      &

10420	L%,J0%=0%							      &
	! Clear row/column pointers.					      &

10440	IF J%(L%,8%)<>STK%+L%*8% THEN					      &
		J%(L%,8%),T%=STK%+L%*8%					      &
	\	T%=FNV3%(0%,FNJ$(T%,4%))				      &
	! Update 'K' # at left edge if necessary.			      &

10460	 GOTO 10520 UNLESS (J%(L%,J0%) AND 128%)			      &
	\ T%=J%(L%,J0%) AND (NOT 128%)					      &
	\ J%(L%,J0%)=T%							      &
	\ T$=N$								      &
	\ IF L%*8%+J0%+STK%=KSZ% THEN					      &
		T$="END"						      &
	ELSE	IF L%*8%+J0%+STK%>KSZ% THEN				      &
			T$=" . "					      &
		ELSE	IF T%=64% THEN					      &
				T$="   "				      &
			ELSE	IF T%=0% THEN				      &
					T$="MON"			      &
				ELSE	IF (T% AND 2048%)=0% THEN	      &
					T$="NXM"			      &
	\				T$="XBF" UNLESS (T% AND M.LCK%)	      &
	\				T$="LCK" UNLESS (T% AND M.XBF%)	      &
	! Ignore the entry if no change (bit 7)				      &

10480	T$=B$+T$+B$ IF LEN(T$)						      &
	\ GOTO 10500 IF LEN(T$)						      &
	\ IF (T% AND 3584%)=M.RTS% THEN					      &
		T$="?"							      &
	\	T$=NUM1$(T% AND 63%) UNLESS (T% AND 256%)		      &
	\	T$=FNJ2$(" *"+T$+"*",5%)				      &
	\	GOTO 10500						      &
	! Flag run-time systems as *#*					      &

10485	IF (T% AND 3584%)=M.LIB% THEN					      &
		T$="?"							      &
	\	T$=NUM1$(T% AND 63%) UNLESS (T% AND 256%)		      &
	\	T$=FNJ2$(" -"+T$+"-",5%)				      &
	\	GOTO 10500						      &
	! Flag resident libraries as -#-				      &

10490	IF (T% AND 3584%)=M.JOB% THEN					      &
		IF (T% AND 127%)=65% THEN				      &
			T$="  ?  "					      &
		ELSE	T$=FNJ$(T% AND 63%,3%)				      &
	\		IF T%>=0% THEN					      &
				T$=T$+"  "				      &
			ELSE	IF (T% AND (OUT%+IN%))=0% THEN		      &
				T$=T$+"LK"				      &
			ELSE	IF (T% AND OUT%) THEN			      &
					T$=T$+"SO"			      &
				ELSE	T$=T$+"SI"			      &
	! Memory is occupied by a job.					      &

10500	IF FNZ1%=0% THEN						      &
		T%=FNV3%(4%+J0%*5%,T$)					      &
	\	T%=FNV3%(44%,B$) IF J0%=7%				      &
	! Print info if there's room					      &

10520	J0%=J0%+1%							      &
	\ IF J0%<=7% THEN						      &
		GOTO 10460						      &
	ELSE	J0%=0%							      &
	\	L%=L%+1%						      &
	\	GOTO 10440 IF L%+3%<=ROWS%				      &
	\	T$=N$							      &
	! Bump row and column pointers					      &
	! Keep going if we have more room.				      &

10550	RETURN								      &
									      &

11200	W%=W%+2%							      &
	\ JDB%=SWAP%(CVT$%(MID(SYS(UU.SYS$+CHR$(W%/2%)+CHR$(1%)),25%,2%)))    &
	\ GOTO 11200 IF JDB%<>(S0%-16%)					      &
	!								      &
	!	J O B    N U M B E R    L O O K U P			      &
	!								      &
	! Try to find the job that points to this JDB.			      &

11220	RETURN								      &

11230	W%=130%								      &
	\ GOTO 11220							      &
	! Set up impossible job # if we couldn't find it.		      &

12000	RETURN								      &
	!	H0%=2048%						      &
	!	H0%=4096%						      &
	!	H0%=8192%						      &
	!	GENERAL "RETURN" FOR MISSING ROUTINES			      &
									      &

13000	IF F% THEN							      &
		B%(T%,0%)=-2% FOR T%=0% TO 19%				      &
	\	IF FNZ0%(19%)=0% THEN					      &
			T%=FNV8%("      Busy devices")			      &
		ELSE	L%=-2%						      &
	\		H%=H% AND (NOT 1%)				      &
	\		GOTO 13040					      &
	!								      &
	!								      &
	!	B U S Y    D E V I C E S				      &
	!	I N D E X = 1						      &
	!								      &
	!								      &
	! SET THE # OF LINES NEEDED TO PRINT THIS ROUTINES		      &
	! ENTRIES.							      &
	! IF THIS IS THE 1ST TIME THRU THEN				      &
	!	INIT ARRAY ENTRIES					      &
	!	IF THERE'S ROOM FOR PRINTING (7) ENTRIES THEN		      &
	!		PRINT HEADING					      &
	!	ELSE	SET FLAGS AND GET OUT.				      &

13020	J1%=H0%(5%)+H1%(9%)						      &
	\ DVPTR%=H0%(7%)+H1%(9%)					      &
	\ T2%=PEEK(H0%(7%)+H1%(9%))					      &
	\ GOSUB 13050 FOR J2%=0% TO (H1%(23%)-H1%(5%)-H1%(9%)-2%) STEP 2%     &
	\ T%=FNV1%(0%,N$) IF B%(L%,0%)<>-1% IF (L% AND 1%)		      &
	\ T%=FNV0%(16384%,0%,"      *** None ***")			      &
		IF L%=0% AND B%(0%,0%)<>-1%				      &
	\ B%(T%,0%)=-1% FOR T%=L% TO 19%				      &
	\ L%=1%+(L%+1%)/2%						      &
	! J1% POINTS TO DEVCNT						      &
	! FOR ALL NON-DISK DEVICES,  DO THE ROUTINE			      &
	! DESCRIBED BELOW.						      &
	! ON COMPLETION,IF WE ARE WORKING ON AN ODD (LEFT) #,		      &
	! JUMP TO THE NEXT LINE IF THIS IS THE 1ST TIME THRU.		      &

13040	RETURN								      &

13050	T2%=PEEK(DVPTR%)						      &
	\ FOR J3%=0% TO PEEK(J1%)					      &
	\	DDB%=PEEK(T2%)						      &
	\	J%=PEEK(DDB%+2%) AND 255%				      &
	\	GOTO 13100 IF J%=0% OR ((J% AND 1%)<>0% AND J%<>3%)	      &
		OR FNZ0%(19%) OR (J2%=0% AND (PEEK(DDB%+6%) AND 8192%))	      &
	\	T%=FNV0%(16384%,0%,"Dev Job Why  Dev Job Why")		      &
			IF L%=0% AND B%(0%,0%)<0%			      &
	\	IF FNC0%(B%(L%,0%),SWAP%(J3%)+J2%) THEN			      &
			B%(L%,0%)=C%					      &
	\		T%=FNV1%(0%,MID(H$,H8%-H1%(9%)-J2%,2%)+		      &
			RIGHT(NUM$(J3%),2%))				      &
	! DDB%		 POINTS TO THE DDB.				      &
	! FOR EACH DEVICE (0 TO MAX UNIT #) DO THE FOLLOWING:		      &
	! J%=OWNER JOB INDEX (DDJBNO)					      &
	! GO ON TO THE NEXT ENTRY IF THIS IS 0 (FREE),			      &
	! THERE'S NO ROOM TO PRINT OR WE'RE WORKING			      &
	! WITH TERMINALS (DEVNKB) AND WE HAVE THE JOB'S			      &
	! CONSOLE TERMINAL.						      &
	! PRINT THE HEADER IF NECESSARY.				      &
	!								      &
	!	IF THE DEVICE/UNIT # HAS CHANGED THEN			      &
	!		SAVE/PRINT IT					      &

13070		IF FNC%(B%(L%,1%),J%) THEN				      &
			B%(L%,1%)=C%					      &
	\		T$="NSP"					      &
	\		T$=FNJ$(J%/2%,3%) UNLESS J%=3%			      &
	\		T%=FNV1%(4%,T$)					      &
	!	IF THE OWNER JOB INDEX HAS CHANGED THEN			      &
	!		SAVE/PRINT IT					      &

13080		IF FNC%(B%(L%,2%),PEEK(DDB%+6%)) THEN			      &
			B%(L%,2%)=C%					      &
	\		T$="Open"					      &
	\		T$="As  " IF C%<0%				      &
	\		T$="A+Op" IF C%<0% AND (C% AND 255%)		      &
	\		T%=FNV1%(7%-(16384%*((L% AND 1%)<>0%)),B$+T$+B$)      &
	\		T$=N$						      &
	!	IF THE ASSIGNMENT STATUS/INIT COUNT (DDCNT) HAS CHANGED THEN  &
	!		SAVE IT						      &
	!		SET DEFAULT STRING				      &
	!		<0	SIGNALS ASSIGNED			      &
	!		<0 AND INIT CNT>0 SIGNALS ASSIGNED/INIT		      &
	!		PRINT THE INFO THEN JUMP TO A NEW LINE		      &
	!		IF JUST FINISHED AN EVEN (RIGHT) ENTRY		      &
	!		(2 ENTRIES PER LINE)				      &

13090		L%=L%+1%						      &
	!	BUMP ENTRY (ARRAY) POINTER.				      &

13100		T2%=T2%+2%						      &
	\ NEXT J3%							      &
	\ J1%=J1%+2%							      &
	\ DVPTR%=DVPTR%+2%						      &
	\ RETURN							      &
	! PREPARE TO LOOK AT NEXT DDB (CONTINUE IN J3% LOOP)		      &
	! PREPARE TO LOOK AT NEXT DEVCNT ENTRY				      &
									      &

13110	IF F% THEN							      &
		T%=FNV8%("      Disk Structure")			      &
	\	D%(T%,0%)=-2% FOR T%=0% TO 19%				      &
	!								      &
	!								      &
	!	D I S K S						      &
	!	I N D E X = 2						      &
	!								      &
	!								      &
	! 1ST TIME THRU (OR EQUIVALENT) PRINT HEADER			      &
	! AND INIT ARRAY ENTRIES					      &

13130	FUN%=0%								      &
	\ SIXTH$="Comments"						      &
	\ SIXTH$="Name" IF (O% AND 16%)					      &
	\ T%=FNV0%(16384%,0%,"Dsk Open    Free Clu  Err "+SIXTH$)	      &
	\ L%=L%+1%							      &
	\ DEVCNT%=H0%(5%)						      &
	\ UNTCLU%=H0%(17%)						      &
	\ UNTCNT%=H0%(19%)						      &
	\ SATCTL%=H0%(21%)						      &
	\ SATCTM%=H0%(25%)						      &
	\ DEVNAM%=H1%(5%)						      &
	\ NUM.DISK.TYPES%=H1%(9%)					      &
	\ UNTERR%=H2%(23%)						      &
	\ DEVCLU%=H2%(25%)						      &
	\ DSKLOG%=H1%(21%)						      &
	\ FOR DISK.COUNT.INDEX%=0% TO NUM.DISK.TYPES%-2% STEP 2%	      &
	\   DEV.NAME$=CVT%$(SWAP%(PEEK(DEVNAM%+DISK.COUNT.INDEX%)))	      &
	\   FOR UNIT.NUM%=0% TO PEEK(DEVCNT%+DISK.COUNT.INDEX%)		      &
	\	UNTCNT.ENTRY%=PEEK(UNTCNT%+FUN%)			      &
	\	UNTCLU.ENTRY%=PEEK(UNTCLU%+FUN%) AND 255%		      &
	\	DSKLOG.PTR%=DSKLOG%+(FUN%*5%)				      &
	\	IF (UNTCNT.ENTRY% < 0%) OR FNZ%(19%)			      &
		    THEN						      &
			GOTO 13220					      &
		    ELSE						      &
			IF FNC0%(D%(L%,0%),FUN%)			      &
			    THEN					      &
				D%(L%,0%)=FUN%				      &
	\			T%=FNV2%(0%,DEV.NAME$+NUM1$(UNIT.NUM%))	      &
	!								      &
	! INIT UNIT COUNT INDEX						      &
	! SET UP NEEDED DISK VARIABLES					      &
	! BEGIN LOOP FOR ALL DISK TYPES ON THE SYSTEM			      &
	!   GET THE DEVICE NAME FOR EACH DISK TYPE			      &
	!   BEGIN LOOP FOR ALL UNIT NUMBERS OF EACH DEVICE TYPE		      &
	!	GET THE THE STATS ON EACH DISK FROM THE UNTCNT TABLE	      &
	!	IF DISMOUNTED OR NO ROOM TO PRINT THEN			      &
	!	SKIP THIS DISK AND GO ON TO THE NEXT			      &
	!	ELSE IF THE UNIT NUMBER HAS CHANGED THEN		      &
	!		SAVE THE CHANGE					      &
	!		PRINT THE DISK NAME AND UNIT NUMBER		      &

13140		IF FNC%(D%(L%,1%),(UNTCNT.ENTRY% AND 1023%))		      &
		    THEN						      &
			D%(L%,1%)=(UNTCNT.ENTRY% AND 1023%)		      &
	\		T%=FNV2%(4%,FNJ$(D%(L%,1%),4%))			      &
	!								      &
	!	IF THE NUMBER OF OPEN FILES FOR THIS ENTRY HAS CHANGED THEN   &
	!		STORE THE CHANGE				      &
	!		PRINT THE NEW NUMBER OF OPEN FILES		      &

13150		IF FNC%(D%(L%,2%),PEEK(SATCTL%+FUN%)) OR		      &
			FNC%(D%(L%,3%),PEEK(SATCTM%+FUN%))		      &
		    THEN						      &
			D%(L%,2%)=PEEK(SATCTL%+FUN%)			      &
	\		D%(L%,3%)=PEEK(SATCTM%+FUN%)			      &
	\		T=FND(D%(L%,2%),D%(L%,3%))			      &
	\		T=0. IF (UNTCNT.ENTRY% AND 4096%)		      &
	\		T%=FNV2%(8%,FNJ$(T,8%))				      &
	!								      &
	!	IF THE NUMBER OF FREE BLOCKS FOR THIS ENTRY HAS CHANGED THEN  &
	!		STORE THE NEW COUNT (HIGH WORD AND LOW WORD)	      &
	!		CALCULATE THE COUNT USING THE HIGH AND LOW WORD	      &
	!		ZERO THE COUNT IF DISK IS NON-FILE STRUCTURED	      &
	!		PRINT THE NEW INFO				      &

13160		IF FNC%(D%(L%,4%),UNTCLU.ENTRY%)			      &
		    THEN						      &
			D%(L%,4%)=UNTCLU.ENTRY%				      &
	\		T%=FNV2%(16%,FNJ$(D%(L%,4%),3%))		      &
	!								      &
	!	IF THE CLUSTER SIZE HAS CHANGED THEN			      &
	!		STORE THE NEW CLUSTER SIZE			      &
	!		PRINT THE NEW INFO				      &

13170		IF FNC%(D%(L%,8%),PEEK(UNTERR%+FUN%))			      &
		    THEN						      &
			D%(L%,8%)=PEEK(UNTERR%+FUN%)			      &
	\		T%=FNV2%(19%,FNJ$(PEEK(UNTERR%+FUN%),6%))	      &
	!								      &
	!	IF THE ERROR COUNT FOR THIS ENTRY HAS CHANGED THEN	      &
	!		STORE THE NEW ERROR COUNT			      &
	!		PRINT THE NEW INFO				      &

13180		IF (O% AND 16%)=0%					      &
		  THEN							      &
		    IF FNC%(D%(L%,5%),SWAP%(UNTCNT.ENTRY% AND 32256%))=0%     &
		      THEN						      &
			GOTO 13210					      &
		      ELSE						      &
			D%(L%,5%)=SWAP%(UNTCNT.ENTRY% AND 32256%)	      &
	\		D%(L%,6%)=-1%					      &
	\		T$="Pub"					      &
	\		T$="Pri" IF (UNTCNT.ENTRY% AND 16384%)		      &
	\		T$="NFS" IF (UNTCNT.ENTRY% AND 4096%)<>0%	      &
	\		T$=T$+","+"R-O" IF (UNTCNT.ENTRY% AND 2%^10%)<>0%     &
	\		T$=T$+","+"DLA" IF (UNTCNT.ENTRY% AND 2%^11%)=0%      &
	\		T$=T$+","+"DLW" IF (UNTCNT.ENTRY% AND 2%^11%)<>0%     &
	\		T$=T$+","+"Lck" IF (UNTCNT.ENTRY% AND 2%^13%)<>0%     &
	\		T$=LEFT(T$,7%)					      &
	\		GOTO 13200					      &
	!	IF LOGICAL NAMES NOT REQUESTED THEN			      &
	!	    IF NONE OF THE BIT FLAGS IN THE UNTCNT ENTRY HAVE CHANGED &
	!		SKIP THIS ROUTINE				      &
	!		ELSE STORE THE NEW INFO				      &
	!		D%(L%,6%)=-1% TO FLAG ENTRY (REALLY USED BY DSKLOG)   &
	!		SET DEFAULT COMMENT				      &
	!		RESET IF NOT THE DEFAULT			      &
	!		LIMIT THE LENGTH OF THE COMMENT STRING TO 7 CHARS     &

13190		IF (FNC%(D%(L%,5%),PEEK(DSKLOG.PTR%))			      &
			OR FNC%(D%(L%,6%),PEEK(DSKLOG.PTR%+2%))		      &
			OR FNC%(D%(L%,7%),PEEK(DSKLOG.PTR%+4%)))=0%	      &
		    THEN						      &
			GOTO 13210					      &
		    ELSE						      &
			D%(L%,5%)=PEEK(DSKLOG.PTR%)			      &
	\		D%(L%,6%)=PEEK(DSKLOG.PTR%+2%)			      &
	\		D%(L%,7%)=PEEK(DSKLOG.PTR%+4%)			      &
	\		T$="*******"					      &
	\		T$=RAD$(D%(L%,5%))				      &
			  +RAD$(D%(L%,6%))				      &
			  +RAD$(D%(L%,7%)) UNLESS (UNTCNT.ENTRY% AND 4096%)   &
	!	IF NONE OF THE PARTS OF THE LOGICAL NAME HAS CHANGED THEN     &
	!		SKIP THIS ROUTINE				      &
	!	   ELSE SAVE THE NEW PARTS				      &
	!		SET THE DEFAULT STRING TO "*"			      &
	!		RESET TO REAL NAME IF NOT OPENED NON-FILE STRUCTURED  &

13200		T%=FNV2%(16384%+25%,B$+T$)				      &
	\	T$=N$							      &
	!	PRINT THE COMMENT FIELD					      &

13210		L%=L%+1%						      &
	!	BUMP THE 'PRINTED' COUNTER				      &

13220		FUN%=FUN%+2%						      &
	\   NEXT UNIT.NUM%						      &
	\ NEXT DISK.COUNT.INDEX%					      &
	\ D%(T%,0%)=-1% FOR T%=L% TO 19%				      &
	\ RETURN							      &
	!	UPDATE THE FIP UNIT NUMBER				      &
	!    END UNIT NUMBER LOOP					      &
	! END DISK TYPE LOOP						      &
	! FLAG NONPRINTED ENTRIES					      &
									      &

13250	R%=H2%(27%)							      &
	\ IF F% THEN							      &
		T%=FNV8%("     Run-time systems")			      &
	\	R%(T%,0%)=-2% FOR T%=0% TO 19%				      &
	!								      &
	!								      &
	!	R U N - T I M E    S Y S T E M S			      &
	!	I N D E X = 3						      &
	!								      &
	!								      &
	! R%	POINTS TO ROOT OF LINKED LIST OF RTS DESCRIPTOR BLOCKS.	      &
	! IF 1ST TIME THRU THEN						      &
	!	PRINT HEADER						      &
	!	INIT ARRAY						      &

13260	J2%=FNRTSRES%(0%)						      &
	\ RETURN							      &
	! PRINT RTS STUFF						      &
	! ARGUMENT INDICATES 1ST HALF OF ARRAY				      &
									      &

13370	J0%=PEEK(H1%(19%))						      &
	\ IF F% THEN							      &
		T%=FNV8%("    Message receivers")			      &
	\	M%(T%,0%)=-2% FOR T%=0% TO 19%				      &
	!								      &
	!	M E S S A G E    R E C E I V E R S			      &
	!		I N D E X = 4					      &
	!								      &
	! J0%	POINTER INTO SNDLST.					      &
	! IF 1ST TIME THRU THEN						      &
	!	PRINT HEADER AND INIT ARRAY				      &

13400	WHILE J0%							      &
	\	GOTO 13435 IF FNZ%(19%)					      &
	\	IF FNC0%(M%(L%,0%),PEEK(J0%+2%)) OR			      &
		   FNC0%(M%(L%,1%),PEEK(J0%+4%)) OR			      &
		   FNC0%(M%(L%,2%),PEEK(J0%+6%)) THEN			      &
			M%(L%,0%)=PEEK(J0%+2%)				      &
	\		M%(L%,1%)=PEEK(J0%+4%)				      &
	\		M%(L%,2%)=C%					      &
	\		T$=N$						      &
	\		T$=T$+CVT%$(SWAP%(M%(L%,T%))) FOR T%=0% TO 2%	      &
	\		T%=FNV2%(0%,T$)					      &
	! IGNORE THIS ENTRY IF NULL ENTRY OR NO ROOM TO PRINT.		      &
	! IF EITHER PART OF LOGICAL ID HAS CHANGED THEN			      &
	!	SAVE BOTH PARTS AND PRINT ID				      &

13410		IF FNC%(M%(L%,3%),(PEEK(J0%+10%) AND 255%))=0% THEN	      &
			GOTO 13420					      &
		ELSE	M%(L%,3%)=C%					      &
	\		T$,V$=N$					      &
	\		T$="Loc" IF (C% AND 1%)				      &
	\		T$="Prv" IF (C% AND 2%)				      &
	\		V$="Nt" IF (C% AND 4%)				      &
	\		V$="1S" IF (C% AND 8%)				      &
	\		V$="N1" IF (C% AND 12%)=12%			      &
	\		T$=T$+","+V$ IF LEN(V$)				      &
	\		T$=RIGHT(T$,2%) IF ASCII(T$)=44%		      &
	! IF THE TYPE OF SENDERS ALLOWED HAS CHANGED THEN		      &
	!	SAVE THE INFO						      &
	!	SET DEFAULT STRING TO INDICATE PRIV SENDERS		      &
	!	RESET IF NECESSARY					      &
	!	NT = NETWORK						      &
	!	1S = ONESHOT						      &
	!	N1 = NETWORK, ONESHOT					      &
	!	CRAM INTO AVAILABLE COLUMNS...				      &

13415		T$="None" UNLESS LEN(T$)				      &
	\	T$="("+T$+")"						      &
	\	T$=T$+" " IF LEN(T$)=4%					      &
	\	T%=FNV2%(6%,T$+						      &
		   FNJ$((PEEK(J0%+8%) AND 255%)/2%,(10%-LEN(T$)))+	      &
		   FNJ$((SWAP%(PEEK(J0%+10%)) AND 255%),3%))		      &
	! PRINT RECEIVER NAME, SENDER INFO AND JOB #.			      &
	! SPACE PAD IS TO MAKE COLUMNS ALIGN...				      &

13420		IF FNC%(M%(L%,4%),PEEK(J0%+14%)) THEN			      &
			M%(L%,4%)=C%					      &
	\		T%=FNV2%(16384%+19%,FNJ$(SWAP%(C%) AND 255%,5%)+      &
			"/"+NUM1$(C% AND 255%))				      &
	! IF THE # OF MSG'S QUEUED OR THE DECLARED MAX HAS		      &
	! CHANGED THEN							      &
	!	SAVE/PRINT THE INFO					      &

13430		L%=L%+1%
13435		J0%=PEEK(J0%)						      &
	\ NEXT								      &

13440	T%=FNV0%(16384%,0%,"    ***** None ******")			      &
		IF L%=0% AND M%(0%,0%)<>-1%				      &
	\ M%(T%,0%)=-1% FOR T%=L% TO 19%				      &
	\ L%=1% UNLESS L%						      &
	\ T$=N$								      &
	\ RETURN							      &
	! IF WE'VE HIT THE END OF THE TABLE (-1) THEN			      &
	!	PRINT APPROPRIATE MSG IF NO RECEIVERS			      &
	!	FLAG NON-PRINTED ENTRIES				      &
	!	BUMP 'PRINTED' COUNTER IF 'NONE' PRINTED		      &

13450	IF F% THEN							      &
		F%=0%							      &
	\	T%=FNV8%(" Gen FIP  Jobs  TTY  Err")			      &
	\	T%=FNV0%(16384%,0%,"   0   0   0/0    0    0")		      &
	\	C%(T%)=0% FOR T%=0% TO 4%				      &
	\	SAV.ERR=0						      &
	!								      &
	!	F R E E    S T A T I S T I C S				      &
	!		I N D E X = 5					      &
	!								      &
	! IF 1ST TIME THRU THEN						      &
	!	PRINT HEADER AND INIT ARRAY				      &

13470	IF FNC%(C%(0%),PEEK(H1%(3%)+2%)) THEN				      &
		C%(0%)=C%						      &
	\	T%=FNV2%(0%,FNJ$(C%,4%))				      &
	! IF THE # OF FREE GENERAL BUFFERS HAS CHANGED THEN		      &
	!	SAVE AND PRINT THIS INFO				      &

13480	IF FNC%(C%(1%),PEEK(H1%(3%)-2%)) THEN				      &
		C%(1%)=C%						      &
	\	T%=FNV2%(4%,FNJ$(C%,4%))				      &
	! IF THE # OF FREE FIP BUFFERS HAS CHANGED THEN			      &
	!	SAVE AND PRINT THIS INFO				      &

13490	IF FNC%(C%(2%),PEEK(H1%(13%))) THEN				      &
		C%(2%)=C%						      &
	\	T%=FNV2%(8%,FNJ0$(NUM1$(C% AND 255%)			      &
		+"/"+NUM1$(SWAP%(C%) AND 255%),6%))			      &
	! IF JOBCNT HAS CHANGED THEN					      &
	!	SAVE THE INFO						      &
	!	PRINT THE CURRENT JOB COUNT/JOB # LIMIT			      &

13500	ERR.CNT = PEEK(H1%(17%))					      &
	\ IF FNC%(C%(3%),PEEK(H1%(11%))) = 0%				      &
	    AND SAV.ERR = FNUNSIGN(ERR.CNT) THEN			      &
		GOTO 13510						      &
	ELSE								      &
		C%(3%)=PEEK(H1%(11%))					      &
	\	ERR.CNT = PEEK(H1%(17%))				      &
	\	SAV.ERR = FNUNSIGN(ERR.CNT)				      &
	\	T$=" ****"						      &
	\	T$=FNJ$(C%(3%),5%) IF C%(3%)>=0% AND C%(3%)<=9999%	      &
	\	V$=" *****"						      &
	\	V$=FNJ$(SAV.ERR-C%(3%),6%) IF C%(3%)>=0%		      &
	\	T%=FNV2%(16384%+14%,T$+V$)				      &
	\	T$,V$=N$						      &
	! IF NEITHER TTYHCT NOR ERRCTL HAS CHANGED THEN			      &
	!	SKIP THIS ROUTINE					      &
	! ELSE	SAVE BOTH PIECES OF INFO				      &
	!	EACH PIECE OF THE STRING TO BE PRINTED GOES TO THE	      &
	!	ACTUAL # OF HUNG TTY'S OR ERRORS UNLESS THE # IS	      &
	!	NON-POSITIVE						      &

13510	L%=1%								      &
	\ RETURN							      &

13530	R%=0%								      &
	\ R%=PEEK(H1%(15%)+2%) IF PEEK(H1%(15%)+2%)<>0%			      &
	\ IF F% THEN							      &
		T%=FNV8%("    Resident Libraries")			      &
	\	R%(T%,0%)=-2% FOR T%=20% TO 39%				      &
	!								      &
	!	R E S I D E N T    L I B R A R I E S			      &
	!	I N D E X = 6						      &
	!								      &
	! IF 1ST TIME THRU THEN						      &
	!	PRINT HEADER						      &
	!	INIT ARRAY						      &

13540	J2%=FNRTSRES%(20%)						      &
	\ RETURN							      &
	! PRINT RES LIB STUFF						      &
	! ARGUMENT INDICATES 2ND HALF OF ARRAY				      &

13960	RETURN								      &
	!	INDEX = 7						      &
	!	INDEX = 8						      &
	!	INDEX = 9						      &
	!	GENERAL "RETURN" FOR MISSING RIGHT-HAND ROUTINES	      &
									      &

15000	DEF* FNT$(T)							      &
	\ IF T<0. OR T>=3600000. THEN					      &
		FNT$="???:??:??"					      &
	ELSE	T%=0%							      &
	\	FNT$=FNT0$(3600.)+FNT0$(60.)+FNT0$(1.)
15030	FNEND								      &
	!								      &
	!	F N T $ ( T I M E - I N - S E C O N D S )		      &
									      &

15050	DEF* FNT0$(T0)							      &
	\ T$=N$								      &
	\ T0%=T/T0							      &
	\ IF (T% OR T0%) THEN						      &
		T=T-T0*T0%						      &
	\	T$=RIGHT(NUM1$(T0%+100%*T%),T%+1%)			      &
	\	T%=1%
15060	T$=T$+":" IF LEN(T$) AND (T0>10.)				      &
	\ FNT0$=T$							      &
	\ FNEND								      &
	!								      &
	!	F N T 0 $ ( D I V I S O R )				      &
									      &
									      &

15080	DEF* FNT1$(T)							      &
	\ IF T<0. OR T>=36000. THEN					      &
		FNT1$="??:??.?"						      &
	ELSE	T%=0%							      &
	\	FNT1$=FNT0$(600.)+FNT0$(10.)+"."+CHR$(48%+T)
15100	FNEND								      &
	!								      &
	! F N T 1 $ ( T I M E   I N   T E N T H S - O F - S E C O N D S)      &
	!								      &
	!								      &
	!		T H E    A B O V E    A R E    A L L		      &
	!	C O N V E R T    T I M E    T O    S T R I N G		      &
	!		   F U N C T I O N S				      &
									      &
									      &
									      &

15120	DEF* FNC0%(T%,T0%)						      &
	\ FNC0%,F%=FNC%(T%,T0%)						      &
	\ FNEND								      &
	!								      &
	! PARAMETERS:	T%	OLD					      &
	!		T0%	NEW					      &

15150	DEF* FNC%(T%,T0%)						      &
	\ C%=T0%							      &
	\ FNC%=F% OR (T%<>T0%)						      &
	\ FNEND								      &
	!								      &
	! PARAMETERS:	T%	OLD					      &
	!		T0%	NEW					      &
									      &
									      &

15160	DEF* FNUNSIGN(NUMBR)						      &
	\ NUMBR = NUMBR + 65536. IF NUMBR < 0%				      &
	\ FNUNSIGN = NUMBR						      &
	\ FNEND								      &
	!								      &
	! PARAMETERS:  	NUMBR  POS. or NEG. NUMBER			      &
	!								      &
	!								      &

15180	DEF* FNU$(T)							      &
	\ T$="   "+NUM$(100.*T/H(0%,1%)+.05)				      &
	\ FNU$=MID(T$,INSTR(1%,T$,".")-3%,5%)+"%"			      &
	\ FNEND								      &
	!								      &
	! FUNCTION:	FNU$	CALCULATE PERCENTAGE FUNCTION		      &
	! PARAMETERS:	T	VALUE					      &
	!								      &
	!								      &
	!		T H E    A B O V E    A R E    A L L		      &
	!		C H E C K    F O R    C H A N G E		      &
	!			F U N C T I O N S			      &
									      &
									      &

15220	DEF* FNV0%(T%,T0%,T$)=FNV%(T%+45%,T0%+1%+L0%(W%),T$)		      &
	!								      &
	! PARAMETERS:	T%	RELATIVE-X-POSITION			      &
	!		T0%	BIASED-Y-POSITION			      &
	!		T$	STRING					      &
									      &

15230	DEF* FNV1%(T%,T$)						      &
	\ T%=T%+13% IF (L% AND 1%)					      &
	\ FNV1%=FNV%(T%+45%,2%+L0%(W%)+L%/2%,T$)			      &
	\ FNEND								      &
	!								      &
	! PARAMETERS:	T%	RELATIVE-X-POSITION			      &
	!		T$	STRING					      &
									      &
									      &

15260	DEF* FNV2%(T%,T$)=FNV%(T%+45%,1%+L0%(W%)+L%,T$)			      &
	!								      &
	! PARAMETERS:	T%	RELATIVE-X-POSITION			      &
	!		T$	STRING					      &
									      &

15270	DEF* FNV3%(T%,T$)=FNV%(T%,3%+L%,T$)				      &
	!								      &
	! PARAMETERS:	T%	X-POSITION				      &
	!		T$	STRING					      &
									      &

15280	DEF* FNV8%(T$)=FNV%(16384%+45%,L0%(W%),T$)			      &
	!								      &
	! PARAMETERS:	T$	HEADER STRING				      &
	!								      &
	!	T H E    A B O V E    A R E    A L L			      &
	!	D I S P L A Y    S U B - F U N C T I O N S		      &
									      &

15300	DEF* FNZ%(T%)							      &
	\ F%=0%								      &
	\ FNZ%=(L%>T%) OR (1%+L0%(W%)+L%>ROWS%)				      &
	\ FNEND								      &
	! FUNCTION:	FNZ%						      &
	! PARAMETER:	T%	LIMIT					      &
									      &

15330	DEF* FNZ0%(T%)							      &
	\ F%=0%								      &
	\ FNZ0%=(L%>T%) OR (2%+L0%(W%)+L%/2%>ROWS%)			      &
	\ FNEND								      &
	! FUNCTION:	FNZ0%						      &
	! PARAMETER:	T%	LIMIT%					      &
									      &
									      &

15350	DEF* FNZ1%							      &
	\ F%=0%								      &
	\ FNZ1%=3%+L%>ROWS%						      &
	\ FNEND								      &
	! FUNCTION:	FNZ1%	ANY ROOM (ROWS) LEFT?			      &

15370	DEF* FND(T%,T0%)						      &
	\ T=T%								      &
	\ T=T+65536. IF T<0.						      &
	\ FND=T+65536.*T0%						      &
	\ FNEND								      &
	! FUNCTION:	FND	CONVERT 2-WORD INTEGER TO DECIMAL	      &
	! PARAMETERS:	T%	LEAST SIGNIFICANT BITS			      &
	!		T0%	MOST SIGNIFICANT BITS			      &
									      &
									      &

15390	DEF* FND0(T%)							      &
	\ T=T%								      &
	\ T=T+65536. IF T<0.						      &
	\ FND0=T							      &
	\ FNEND								      &
	! FUNCTION:	FND0	CONVERT INTEGER TO DECIMAL		      &
	! PARAMETER:	T%	INTEGER					      &

15410	DEF* FND%(T%)							      &
	\ T0%=0%							      &
	\ FOR T1%=0% TO (H1%(9%)-2%) STEP 2%				      &
	\	FOR T2%=0% TO PEEK(H0%(5%)+T1%)				      &
	\		GOTO 15430 IF T%=T0%				      &
	\		T0%=T0%+1%					      &
	\	NEXT T2%						      &
	\ NEXT T1%
15430	FND%=T1%							      &
	\ FNEND								      &
	! FUNCTION:	FND%	DO DISK RELATED THINGS			      &
	! PARAMETERS:	T%	INTERNAL DISK UNIT NUMBER		      &
	!								      &
	!								      &
	!	T H E    A B O V E    A R E    A L L			      &
	!	C H E C K    L I M I T    A N D    O F F		      &
	!	S C R E E N    F U N C T I O N S			      &
									      &

15450	DEF* FNJ$(T,T%)=FNJ0$(NUM1$(T),T%)				      &
	! FUNCTION:	FNJ$	RIGHT JUSTIFY A NUMERICAL STRING	      &
	! PARAMETERS:	T	NUMBER					      &
	!		T%	LENGTH					      &
									      &

15460	DEF* FNJ0$(T$,T%)=SPACE$(T%-LEN(T$))+T$				      &
	! FUNCTION:	FNJ0$	RIGHT JUSTIFY A STRING			      &
	! PARAMETERS:	T$	STRING					      &
	!		T%	LENGTH					      &
									      &

15470	DEF* FNJ1$(T,T%)=FNJ2$(NUM1$(T),T%)				      &
	! FUNCTION:	FNJ1$	LEFT JUSTIFY A NUMERICAL STRING		      &
	! PARAMETERS:	T	NUMBER					      &
	!		T%	LENGTH					      &
									      &

15480	DEF* FNJ2$(T$,T%)=T$+SPACE$(T%-LEN(T$))				      &
	! FUNCTION:	FNJ2$	LEFT JUSTIFY A STRING			      &
	! PARAMETERS:	T$	STRING					      &
	!		T%	LENGTH					      &
	!								      &
	!								      &
	!	T H E    A B O V E    A R E    A L L			      &
	!	S T R I N G    J U S T I F I C A T I O N		      &
	!		F U N C T I O N S				      &
									      &

16000	DEF* FNSCAN%(A%,POST.PASS%)					      &
	\ GOTO 16040 IF POST.PASS%					      &
	\ R%=H1%(15%)-2%*(A%>19%)					      &
	\ C9%=0%							      &
	!								      &
	!	R T S / R E S L I B    L O O K U P			      &
	!								      &
	! PREPARE TO GET/SAVE AN ORDERED LIST OF RTS OR LIB NAMES.	      &

16020	R%=PEEK(R%)							      &
	\ GOTO 16030 IF R%=0% OR C9%=19%				      &
	\ C9%=C9%+1%							      &
	\ R0%(C9%+A%,0%)=PEEK(R%+2%)					      &
	\ R0%(C9%+A%,1%)=PEEK(R%+4%)					      &
	\ GOTO 16020							      &
	! PLOW THRU THE LIST OF RTS'S OR LIB'S - ANYTHING PAST THE	      &
	! 19TH WILL BE IGNORED. (SIZE CONSTRAINTS)			      &

16030	R0%(A%,0%)=C9%							      &
	\ POST.PASS%=-1%						      &
	! SAVE THE COUNT OF RTS NAMES.					      &
	! SET FLAG INDICATING THAT THIS DOESN'T HAVE TO			      &
	! BE DONE AGAIN THIS PASS.					      &

16040	GOTO 16050 UNLESS R0%(A%,0%)					      &
	\ FOR C9%=1% TO R0%(A%,0%)					      &
	\	GOTO 16060 IF R0%(C9%+A%,0%)=PEEK(S0%-6%) AND		      &
		R0%(C9%+A%,1%)=PEEK(S0%-4%)				      &
	\ NEXT C9%							      &

16050	C9%=256%							      &
	! IF WE DID NOT FIND A MATCH IN THE ABOVE SCAN THEN THERE'S A	      &
	! (PROBABLY) TIMING PROBLEM - NAME WAS THERE WHEN LIST WAS	      &
	! SCANNED (R8% OR RL8%=0%) BUT ISN'T THERE NOW OR IT WASN'T THERE     &
	! THEN AND IS NOW.						      &
	! IF THIS OCCURS, IT SHOULD BE CORRECTED BY THE NEXT PASS.	      &
	! IN THIS SITUATION, OR IF THERE WERE SOMEHOW NO NAMES,		      &
	! *?* WILL BE PRINTED FOR RTS'S, -?- FOR LIB'S			      &

16060	R8%=-1% UNLESS A%						      &
	\ RL8%=-1% IF A%						      &
	\ FNSCAN%=C9%							      &
	\ FNEND								      &
									      &

17270	DEF* FNRTSRES%(A%)						      &
	\ FNRTSRES%=0%							      &
	\ L%=-1%							      &
	\ RN%=R%							      &
	! INIT POINTER							      &

17280	L%=L%+1%							      &
	\ L%=19%+1% IF L%>19%+1%					      &
	\ L2%=L%+A%							      &
	\ R%=RN%							      &
	\ RN%=PEEK(R%)							      &
	\ GOTO 17360 UNLESS R%						      &
	\ GOTO 17280 IF FNZ%(19%)					      &
	\ IF (FNC0%(R%(L2%,0%),PEEK(R%+2%))				      &
	   OR FNC0%(R%(L2%,1%),PEEK(R%+4%))) THEN			      &
		R%(L2%,0%)=PEEK(R%+2%)					      &
	\	R%(L2%,1%)=C%						      &
	\	T%=FNV2%(0%,RAD$(R%(L2%,0%))+RAD$(C%))			      &
	! LOOK AT THE NEXT RTS/LIB DESC BLOCK				      &
	! GET OUT IF WE HIT THE END (0)					      &
	! IF THERE'S NO ROOM TO PRINT THEN IGNORE THIS ENTRY		      &
	! ELSE	IF THE RTS NAME (R.NAME) HAS CHANGED THEN		      &
	!		SAVE /PRINT BOTH PARTS				      &

17300	IF FNC%(R%(L2%,2%),PEEK(R%+14%) AND 255%) THEN			      &
		R%(L2%,2%)=C%						      &
	\	T%=FNV2%(6%,FNJ$(C%,4%)+"K")				      &
	! IF THE SIZE OF THE MODULE, IN K (R.KSIZ) HAS			      &
	! CHANGED THEN							      &
	!	SAVE/PRINT IT						      &

17310	IF FNC%(R%(L2%,3%),PEEK(R%+26%) AND 255%) THEN			      &
		R%(L2%,3%)=C%						      &
	\	T%=FNV2%(11%,FNJ$(C%,4%))				      &
	! IF THE COUNT OF THE USERS EXECUTING UNDER			      &
	! THE RTS HAS CHANGED THEN					      &
	!	SAVE/PRINT THE NEW COUNT				      &

17320	J0%=PEEK(R%+30%)						      &
	\ J1%=(PEEK(R%+26%)<0%)						      &
	\ IF FNC%(R%(L2%,5%),J0%)=0% AND				      &
	FNC%(R%(L2%,6%),J1%)=0% AND					      &
	FNC%(R%(L2%,4%),PEEK(R%+14%) AND -256%)=0% THEN			      &
		GOTO 17280						      &
	ELSE	R%(L2%,4%)=C%						      &
	\	R%(L2%,5%)=J0%						      &
	\	R%(L2%,6%)=J1%						      &
	\	IF (C% AND -256%)=512% THEN				      &
			T$="Non-res"					      &
		ELSE	IF (C% AND 1024%) THEN				      &
				T$="Loading"				      &
			ELSE	T$="Tmp"				      &
	\			T$="Prm" IF J1%<0%			      &
	\			T$="Mon" IF ( PEEK(R%+14%) AND 255% )=0%      &

17330	T$=T$+","+MID("KBM1USR/WNERRemCSZ",(I%-8%)*3%+1%,3%)		      &
		IF (J0% AND 2%^I%) FOR I%=8% TO 13% UNLESS A%		      &
	\ T$=T$+","+MID("1USR/WNERRem",(I%-9%)*3%+1%,3%)		      &
		IF (J0% AND 2%^I%) FOR I%=9% TO 12% IF A%		      &
	\ T$=T$+",DYN" IF (PEEK(R%+28%) AND 192%) = 192%		      &
	\ T%=FNV2%(16384%+15%,B$+LEFT(T$,11%))				      &
	\ GOTO 17280							      &
	! J0%	R.FLAG							      &
	! J1%	ACCESS COUNT						      &
	! PRINT THE 'STATE' INFO AND CONTINUE				      &
	! DETERMINE IF DYNAMIC REGION					      &

17360	T%=FNV0%(16384%,0%,"    ****** None ******")			      &
		IF L%=0% AND R%(A%,0%)<>-1% IF A%			      &
	\ R%(T%,0%)=-1% FOR T%=L2% TO (A%+19%)				      &
	\ L%=L%+1% IF L%=0%						      &
	\ T$=N$								      &
	\ FNEND								      &
	! FLAG NON-PRINTED ENTRIES					      &
									      &

19000	!								      &
									      &
									      &
	!	E R R O R    H A N D L I N G				      &
									      &

19010	IF ERR=28% THEN							      &
		V$=SYS(CHR6$+CHR$(-7%))					      &
	\	RESUME 19100						      &
	! CTRL/C?							      &

19020	IF ERR=11% AND ERL=1050% THEN					      &
		RESUME 32700						      &
	ELSE IF ERL=1050% THEN						      &
		PRINT "%Invalid switch"					      &
	\	RESUME 1020						      &

19022	IF ERL=1045% THEN						      &
		PRIV%=0%						      &
		\ RESUME 1050						      &

19025	IF ERL=2020% THEN						      &
		RESUME 2030						      &
	ELSE IF ERL=4010% THEN						      &
			E7%=0% IF ERR=11%				      &
	\		RESUME 4020					      &
	! VAL ERROR?							      &
	! ANY USER INPUT?						      &

19030	IF ERL=10030							      &
	    THEN							      &
		RESUME 10030 IF ERR=10%					      &
	\	RESUME 10040 IF ERR=18%					      &
	! IF GET JOB STATUS SYS CALL ERROR				      &
	!    THEN							      &
	!	GET STATUS FOR NEXT JOB # IF CURRENT JOB # NOT ON THE SYSTEM  &
	!	EXIT GET STATUS LOOP IF WE LOOKED AT ALL THE JOBS	      &

19035	IF ERL=10080							      &
	    THEN							      &
		RESUME 10080 IF ERR=10%					      &
	\	RESUME 10040 IF ERR=18%					      &
	! IF GET JOB STATUS SYS CALL ERROR				      &
	!    THEN							      &
	!	GET STATUS FOR NEXT JOB # IF CURRENT JOB # NOT ON THE SYSTEM  &
	!	EXIT WORK LOOP IF WE LOOKED AT ALL THE JOBS		      &

19040	IF ERL=11200							      &
	    THEN							      &
		RESUME 11200 IF ERR=10%					      &
	\	RESUME 11230 IF ERR=18%					      &
	! IF GET JOB STATUS SYS CALL ERROR				      &
	!    THEN							      &
	!	GET STATUS FOR NEXT JOB # IF CURRENT JOB # NOT ON THE SYSTEM  &
	!	EXIT JOB NUMBER LOOKUP LOOP IF NO MORE JOBS TO LOOK AT	      &

19050	IF ERL=4020% THEN						      &
		E7%=0% IF ERR=11%					      &
	\	RESUME 1110						      &
	! ANY USER INPUT?						      &

19060	IF ERL=4030% THEN RESUME 4040					      &
	ELSE	IF ERL=20090% AND K0%<0% THEN RESUME 19120		      &
	ELSE	IF ERL=20055% THEN RESUME 20053				      &
	ELSE	IF ERR<>33% THEN ON ERROR GOTO 0			      &
	ELSE	IF ERL<>10180% THEN RESUME 1065				      &
	ELSE	T$=N$							      &
	\	C%=SWAP%(19%)						      &
	\	RESUME 10220						      &
									      &

19100	IF K0%<1% THEN							      &
		GOTO 32767 UNLESS BUFSIZ(1%)				      &
	\	GOSUB 20100						      &
	\	GOSUB 20300						      &
	\	CLOSE 1%						      &
	\	GOTO 32767						      &
	! CONTROL/C ERRORS						      &

19110	CLOSE 1%							      &
	\ V$=SYS(CHR$(6%)+CHR$(-5%)+CHR$(K%)+				      &
	V0$+"G"+V0$+"H"+V0$+"J"+					      &
	CHR$(13%)+"	The terminal is all yours now."+CHR$(13%)+	      &
	CHR$(10%)+CHR$(10%))						      &
		! BROADCAST MESSAGE PRECEDED BY:			      &
		!  EXIT GRAPHICS MODE, CURSOR HOME, ERASE TO END-OF-SCREEN.   &

19120	K0%=-1%								      &
	\ CLOSE 1%							      &

19130	T%=PEEK(PEEK(PEEK(520%)))					      &
	\ IF (PEEK(518%) AND 255%)<>(PEEK(T%+2%) AND 255%) OR		      &
		(PEEK(T%+6%) AND 8192%)=0% THEN				      &
			SLEEP 15%					      &
	\		GOTO 19150					      &
	! GET THE ADDRESS OF THIS JOB'S CONSOLE KB:.			      &
	! SLEEP IF DETACHED.						      &

19140	K%=SWAP%(PEEK(T%+2%)) AND 255%					      &
	\ T$="Y"							      &
	\ INPUT "Continue";T$						      &
	\ GOTO 32767 UNLESS ASCII(CVT$$(T$,-2%))=89%			      &
	\ T$=SYS(CHR6$+CHR$(7%))					      &
	! WE'RE ATTACHED.						      &
	! GET THE KB: UNIT NUMBER.					      &
	! END UNLESS THE USER WANTS TO KEEP GOING.			      &
	! DETACH OURSELVES.						      &

19150	T2%=PEEK(H0%(7%)+H1%(9%))					      &
	\ WHILE (SWAP%(PEEK(PEEK(T2%)+2%)) AND 255%)<>K%		      &
	\	T2%=T2%+2%						      &
	\ NEXT								      &

19160	IF (PEEK(PEEK(T2%)+2%) AND 255%) THEN				      &
		GOTO 19130						      &
	ELSE	GOSUB 20090						      &
	\	K0%=1%							      &
	\	GOTO 1065						      &
	! IF THE DEVICE IS IN USE THEN					      &
	!	GO AND SLEEP (PROBABLY) SOME MORE			      &
	! ELSE	PREPARE TO START UP AGAIN				      &
	!	SET DETACHED FLAG AND CONTINUE				      &
									      &

20000	!								      &
	!								      &
	!	S C R E E N    C O N T R O L    S E C T I O N		      &
	!								      &
	!								      &
	Z$ = SYS(CHR6$+CHR$(16%)+CHR$(0%)+CHR$(255%))	!Get our term chars   &
\	VT100% = (ASCII(RIGHT(Z$,9%))=255%) AND	!A VT100-type if XON and      &
		 (ASCII(RIGHT(Z$,11%))=255%) AND! its a scope and	      &
		 (ASCII(RIGHT(Z$,13%))=1%)	! it has no fill factor	      &
									      &
	\ Z$ = N$				!Don't need Z$ anymore	      &
	\ ROWS%=24%-1% 				!default to 24 rows	      &

20020	COL%=80%-1% 				!default to 80 columns	      &
	\ V9%=1000%							      &
	\ V0$=CHR$(27%+128%)    		!escape key		      &
	\ V0$ = V0$ + "[" IF VT100%		!VT100s use <CSI>	      &
	\ V2$,V4$,V6$=N$						      &
	\ V4$=V4$+V0$+"A" FOR T%=0% TO ROWS%  	!default to TAB		      &
	\ V6$ = V0$ + "Y" 			!default to DCA		      &
	\ V6$ = V0$ IF VT100%			!VT100 DCA is <CSI>r;cH	      &
	\ V2$=V2$+V0$+"C" FOR T%=0% TO COL%				      &

20030	NODCA% = INSTR(1%,V$,"/NODCA")					      &
	\ V$=LEFT(V$,NODCA%-1%)+RIGHT(V$,NODCA%+6%) IF NODCA%		      &
	\ DCA% = INSTR(1%,V$,"/DCA")					      &
	\ V$=LEFT(V$,DCA%-1%)+RIGHT(V$,DCA%+4%) IF DCA%			      &
	\ IF NODCA% AND DCA%  THEN					      &
		PRINT "%Conflicting qualifiers"				      &
	\	EFLAG% = 1%						      &
	\	GOTO 20095
20035	V6$ = N$ IF NODCA%						      &
	!check if DCA and/or NODCA is set, if both then signal error	      &

20040	NOTAB% = INSTR(1%,V$,"/NOTAB")					      &
	\ V$=LEFT(V$,NOTAB%-1%)+RIGHT(V$,NOTAB%+6%) IF NOTAB%		      &
	\ TABB% = INSTR(1%,V$,"/TAB")					      &
	\ V$=LEFT(V$,TABB%-1%)+RIGHT(V$,TABB%+4%) IF TABB%		      &
	\ IF NOTAB% AND TABB% THEN					      &
		PRINT "%Conflicting qualifiers"				      &
	\	EFLAG% = 1%						      &
	\	GOTO 20095						      &
	!check if TAB and/or NOTAB is set, if both then signal error	      &

20050	K0%=INSTR(1%,V$,"/DET")						      &
	\ V$=LEFT(V$,K0%-1%)+RIGHT(V$,K0%+4%) IF K0%			      &
		! CHECK FOR DETACHED					      &

20052   GOTO 20060							      &

20053	PRINT "%Invalid switch - ";MID(V$,ROW%+1%,K1%-ROW%-1%)		      &
	\ EFLAG% = 1%							      &
	\ GOTO 20095							      &
	! NON-RECOGNIZABLE STRING.					      &

20055	ROW%=INSTR(ZX%,V$,"/") 	! START THE SEARCH DEPENDING ON /KBnn:	      &
	\ IF ROW% THEN							      &
		K1%=INSTR(ROW%+3%,V$+"/","/")				      &
	\	V3%=VAL(MID(V$,ROW%+1%,K1%-ROW%-1%))			      &
	\ 	ROWS% = V3%-1%						      &
	\	V$=LEFT(V$,ROW%-1%)+RIGHT(V$,K1%)			      &
	\	V4$=V4$+V0$+"A" FOR T% = 0% TO ROWS%			      &
	\ 	IF (V3% < 11%) OR (V3% > 24%) THEN			      &
		 	PRINT "%Row specification must be between 12 and 24"  &
		\	EFLAG%=1%					      &
		\	GOTO 20095					      &
	! ROWS MAY RANGE BETWEEN 12 (VT50) AND 24 (VT52).		      &

20060	V$="/KB:" UNLESS LEN(V$)					      &
	\ ZX%=1%							      &
	\ ZX%=2% IF LEFT(V$,3%)="/KB"					      &
	\ GOTO 20055 IF LEFT(V$,3%)<>"/KB" OR RIGHT(V$,LEN(V$)) <> ":"	      &
	\ PRIV.OFF$=SYS(CHR$(6%)+CHR$(-21%)+CHR$(255%))			      &
	\ OPEN "_"+RIGHT(V$,2%)+"DISPLY.CMD" FOR INPUT AS FILE 1%, MODE 16%   &
	\ PRIV.ON$=SYS(CHR$(6%)+CHR$(-21%)+CHR$(0%))			      &
	\ K%=SWAP%(PEEK(PEEK(PEEK(PEEK(520%))+2%)+2%)) AND 255%		      &
	\ CLOSE 1%							      &
	! SET-UP TO USE JOBS CONSOLE FOR OUTPUT IF THEY DIDN'T SPECIFY	      &
	!								      &
	! *NOTE* IF /KBnn: SWITCH IS FIRST THEN SEARCH THE SWITCH STRING      &
	! STARTING AT POSITION 2, SO THAT THE \KBnn: SWITCH IS SKIPPED WHEN   &
	! LOOKING FOR THE NUMBER OF ROWS.  OTHERWISE START AT POSITION 1.     &
	!								      &
	! CHECK FOR NUMBER OF ROWS IF WE DON'T JUST HAVE THE /KBnn: SWITCH    &
	! OPEN THE OUTPUT KEYBOARD					      &
	! TO SEE IF IT IS AVAILABLE					      &
	! CLOSE IT UP							      &

20070	V$=SYS(CHR$(6%)+CHR$(-7%))					      &
	\ IF K0% THEN							      &
		V$=SYS(CHR$(6%)+CHR$(7%))				      &

20090	OPEN "_KB"+NUM1$(K%)+":DISPLY.CMD" FOR INPUT AS FILE 1%,	      &
		RECORDSIZE V9%, MODE EC%+4%+16%				      &
	\ V8%=0%							      &
	\ V$=N$								      &

20095	 RETURN								      &
									      &

20100	V8%=0%								      &
	\ V$=V0$+"G"+V0$+"H"+V0$+"J" UNLESS VT100%			      &
	\ V$=CHR$(15%)+CHR$(155%)+"<"+V0$+"H"+V0$+"J" IF VT100%		      &
	!								      &
	!	C L E A R    S C R E E N				      &
	!								      &
	! EXIT GRAPHICS MODE, CURSOR HOME, ERASE TO END-OF SCREEN.	      &
	! EXIT GRAPHICS MODE, ENTER ANSI MODE, CURSOR HOME,		      &
	!  ERASE TO END-OF SCREEN FOR VT100s				      &
	!								      &

20120	V1%,V2%=0%							      &

20200	V$=V0$+"K" IF LEN(V$)=0% AND V1%<=COL%				      &
	\ GOSUB 20300 IF V8%+LEN(V$)>V9%				      &
	\ IF LEN(V$)>V9% THEN						      &
		PRINT #1%, V$;						      &
	ELSE	FIELD #1%, V8% AS T$, LEN(V$) AS T$			      &
	\		LSET T$=V$					      &
	\		V8%=V8%+LEN(V$)					      &
	!								      &
	!								      &
	!	D I S P L A Y    S T R I N G    V $			      &
	!								      &

20220	RETURN								      &

20300	PUT #1%, COUNT V8% IF V8%					      &
	\ V8%=0%							      &
	\ RETURN							      &
	!								      &
	!								      &
	!	FORCE OUT ANY PARTIALS					      &

20400	V$=V0$+"H"							      &
	\ GOTO 20120							      &
	!								      &
	!								      &
	!	GO TO HOME ON SCREEN					      &
	!								      &
									      &

20500	DEF* FNV%(T3%,T0%,T0$)						      &
	! FUNCTION:	FNV%						      &
	! PARAMETERS:	T3%	X-POSITION				      &
	!		T0%	Y-POSITION				      &
	!		T0$	DATA STRING				      &

20510	T%=T3% AND 16383%						      &
	\ V$=N$								      &
	\ V1%=COL% IF V1%>COL%						      &
	\ IF T%<V1% AND V1%-T%>=T%+1% THEN				      &
 		V$=CHR$(13%)						      &
	\	V1%=0%
20520	IF LEN(V6$) THEN						      &
		V$=V$+V6$+CHR$(32%+T0%)+CHR$(32%+T%) UNLESS VT100%	      &
	\	V$=V$+V6$+NUM1$(T0%+1%)+";"+NUM1$(T%+1%)+"H" IF VT100%	      &
	\	GOTO 20590						      &

20530	IF V1%=T% THEN							      &
		GOTO 20580						      &
	ELSE	IF T%<V1% THEN						      &
			V$=V$+STRING$(V1%-T%,8%)			      &
	\		GOTO 20580					      &

20540	IF TABB% THEN							      &
		IF (T%-V1%)/8% AND (T%<=71%) THEN			      &
			V$=V$+STRING$((T%-V1%)/8%,9%+128%)		      &
	\		V1%=(V1% AND (NOT 7%))+((T%-V1%)/8%)*8%		      &

20550	IF T%<>V1% THEN							      &
		V$=V$+LEFT(V2$,T%+T%-V1%-V1%)				      &

20580	IF V2%<>T0% THEN						      &
		IF T0%<V2% THEN						      &
			V$=V$+LEFT(V4$,V2%+V2%-T0%-T0%)			      &
		ELSE	V$=V$+STRING$(T0%-V2%,10%)			      &

20590	V1%=T%+LEN(T0$)							      &
	\ V2%=T0%							      &
	\ GOSUB 20200 IF LEN(V$)					      &
	\ V$=T0$							      &
	\ GOSUB 20200							      &
	\ V$=N$								      &
	\ GOSUB 20200 IF (T3% AND 16384%)				      &
	\ FNEND								      &

20600	V$=N$								      &
	\ GOTO 20200							      &
	!	CLEAR REST OF CURRENT LINE				      &

20700	V$=V0$+"J"							      &
	\ GOTO 20200							      &
	!								      &
	!	CLEAR REST OF SCREEN					      &
	!								      &
	! V$=ERASE TO END-OF-SCREEN.					      &
									      &

32700	CLOSE 1%							      &

32767	END
