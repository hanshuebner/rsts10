.IIF	NDF	L$$IST,	.NLIST
.IIF	NDF	L$$IST,	.DSABL	CRF
TITLE	FLDEF,<File System Definitions>,0I,31-JAN-92,MHB/ABC/JTC/SDL/GPK/WJS/KPH/FRL/WRM

;
;		COPYRIGHT (c) 1974, 1992 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit History for FLDEF

;+
;
;  000  RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	JTC  15-Oct-81	New FIP Overlay MACROs.
;  002  SDL  14-APR-82  Added a comment that RMS needs to be notified about
;			any changes made to the FCB
;
;				[RSTS V8.0]
;  000	GPK  30-Aug-82	New directory structure
;  001	DRP  31-Aug-82	Added a new NFS open mode; mode 512 (OP$INI)
;  002  WJS  28-Oct-82	BL4 changes for EMT Logger
;  003	AWL  23-Nov-82	Add LOCK keyword for "locked" UUO's
;  004	GPK  30-Nov-82	Add cells for TAP, new BACKUP in pack label
;  005	WJS  18-Dec-82	BL4+ changes for EMT Logger
;  006	WJS  11-Feb-83	Default made "no EMT Logging" for all UUOENT's
;
;				[RSTS V9.0]
;  007	GPK  25-Mar-83	Extended FCBs
;  008	GPK  25-Mar-83	Multiple privileges
;  009	GPK  09-Jun-83	Changed .PRIV to .BPRIV
;  010	GPK  20-Sep-83	Multiple privilege changes
;  011  DRP  18-Nov-83	Added PHASE argument to the FQFENT macro
;  012	KPH  17-Jan-84	Added PHASE argument to the UUOENT macro
;			Added new open modes for UU.ONX
;  013	GPK  12-Jan-84	Add definitions for captive and nologin accounts
;  014	DRP  02-Feb-84	Add definitions for Quota tables (QT), Quota blocks
;			(QTB) and Disk Quota Attribute Blockette
;  015	KPH  06-Mar-84	Add open mode for UU.ONX open deleted files
;  016	MNB  14-Mar-84	Changed W$PT to W$PR (pending request)
;  017	FRL  01-Apr-84	Added definitions of disk and system logical block names
;  018	GPK  17-Apr-84	Additional account flags, attribute blocks
;  019	DRP  20-Apr-84  Add symbol QTBDJB to QTB description
;  020	KPH  29-Aug-84	Add IONLY macro for use by I-only overlays
;  021	KPH  27-Feb-85	Add MINDAT
;
;			[RSTS/E V9.3]
;  022  KPH  14-May-86	Remove overlay size and patch symbols
;
;			[RSTS/E V9.7]
;  023	KCG  22-Nov-88	Added F2JMP and F2CALL macros for OV2 overlay calls.
;			Added F2FSRT and F2FEND for OV2 definitions.
;
;			[RSTS/E V10.0]
;  024	FEK  02-Nov-89	Add NOBACKUP/IGNORE support
;  025  WRM  06-Nov-89	add extended logical definitions
;  026	FEK  29-Jan-90	Add non-interactive login date/times and failed count
;
;			[RSTS/E V10.1]
;  027	FEK  26-Dec-91	Add date/time of last mount to pack label
;			and who should clean the disk flag
;-


.BSECT	,NOCREF								;025+

LG$RPL:	.BLKB	.	;replace=0/noreplace=1
	.BLKB	.	; reserved
	.BLKB	.	; reserved
LG$L6:	.BLKB	.	;length 6 or less
LG$L9:	.BLKB	.	;length 9 or less
	.BLKB	.	; reserved
LG$DEA:	.BLKB	.	;deassign flag
LG$UNR:			;user no replace flag
LG$SYS:	.BLKB	.	;search system list for logical=1
LG$NEW:	.BLKB	.	;buffer style 0=old/1=new
LG$DOS:	.BLKB	.	;list in process (0=user/1=sys)
LG$LST:	.BLKB	.	;list logical function in process=1
LG$HLE:	.BLKB	.	;find hole in chain=1
LG$LOW:	.BLKB	.	;look in low core only
LG$USR:	.BLKB	.	;search for logical in jobhdr=1
LG$DSK:	.BLKB	.	;on input 1=SKIP search dsk logicals 
;				1 on output=it was disk logical

LG$NLG	=LG$L6!LG$L9	;not long is neither 6 or 9			;025-


; WINDOW CONTROL BLOCK (WCB) - ONE PER OPEN DISK CHANNEL ON LARGE FILE SYSTEMS

.DSECT	,NOCREF

W$IDX:	.BLKB		;DRIVER INDEX
W$STS:	.BLKB		;STATUS BITS FOR FILE
W$JBNO:	.BLKB		;JOB NUMBER * 2 OF OWNER
W$FLAG:	.BLKB		;WCB FLAG BITS
W$PR:	.BLKB		;PENDING I/O request (Synch or Asynch)		;016
W$NVBM:	.BLKB		;NEXT VIRTUAL BLOCK TO READ/WRITE MSB (FBN IF NFS)
W$NVBL:	.BLKW		; "      "      "   "      "      LSB
W$FCB:	.BLKW		;POINTER TO FCB FOR FILE @ F$CLUS
W$REN:	.BLKW		;RETRIEVAL ENTRY NUMBER OF CURRENT WINDOW
W$WCB:	.BLKW		;POINT TO NEXT WCB OPEN ON SAME FCB + FLAG BITS
W$NXT:	.BLKB	FBBSIZ	;FBB OF NEXT WINDOW
W$WND:	.BLKW	7	;CURRENT RETRIEVAL WINDOW
WCBSIZ:			;SIZE OF THE WCB IN BYTES

.BSECT	HIGH,NOCREF	;IN DDSTS (AS A WORD)

DDNFS:	.BLKB	.	;IF 1, NON-FILE STRUCTURED
DDRLO:	.BLKB	.	;IF 1, USER MAY NOT READ FILE
DDWLO:	.BLKB	.	;IF 1, USER MAY NOT WRITE FILE
WC$UPD:	.BLKB	.	;IF 1, THE FILE IS OPEN FOR UPDATE
WC$CTG:	.BLKB	.	;IF 1, THE FILE IS CONTIGUOUS
WC$LCK:	.BLKB	.	;IF 1, THE CURRENT BLOCK IS LOCKED
WC$UFD:	.BLKB	.	;IF 1, THE FILE IS A UFD
WC$USE:	.BLKB	.	;IF 1, THIS USER GOT THE WRITE PRIV'S

.DSECT	37,NOCREF	;IN W$FLAG

WC$LLK:	.BLKB	1	;# BLOCKS OF CURRENT BLOCK LOCK
WC$EXT:	.BLKB	.	;IF 1, THE WCB IS AN EXTENDED WCB
WC$DLW:	.BLKB	.	;IF 1, UPDATE FILE SIZE AND DATE OF LAST WRITE
WC$NFC:	.BLKB	.	;IF 1, NON-FILE STRUCTURED IN CLUSTER MODE

.BSECT	,NOCREF		;IN W$WCB

WC$RR:	.BLKB	.	;IF 1, THE FILE IS OPEN 'READ REGARDLESS'
WC$SPU:	.BLKB	.	;IF 1, THE FILE IS OPEN IN SPECIAL UPDATE MODE
WC$AEX:	.BLKB	.	;IF 1, ALWAYS DO A REAL EXTEND
WC$CHE:	.BLKB	.	;IF 1, FILE IS OPEN FOR USER DATA CACHING
WC$CSQ:	.BLKB	.	;IF 1, USER DATA CACHING IS SEQUENTIAL

; VERIFY ALIGNMENTS IN WCB

.ASSUME	W$IDX	EQ	DDIDX
.ASSUME	W$STS	EQ	DDSTS
.ASSUME	W$JBNO	EQ	DDJBNO

; FILE CONTROL BLOCK (FCB) - ONE PER OPEN DISK FILE ON LARGE FILE SYSTEMS
;
; NOTE:  IF ANY CHANGES ARE MADE TO THE FCB, THEN RMS MUST BE NOTIFIED
;        SINCE THEY DEPEND ON F$SIZM AND US.WRT IN F$STAT
;

.DSECT	,NOCREF

F$LINK:	.BLKW		;POINTER TO NEXT FCB ON THIS FIP UNIT
F$FID:	.BLKW		;FILE ID OF FILE (LINK WITHIN UFD/MFD)
F$PPN:	.BLKW		;PPN OF OPEN FILE
F$NAM:	.BLKW	3	;FILNAM.EXT OF FILE IN RAD50
F$STAT:	.BLKB		;STATUS BYTE
F$PROT:	.BLKB		;PROTECTION CODE
F$ACNT:	.BLKB		;ACCESS COUNT FOR NORMAL/UPDATE OPENS
F$RCNT:	.BLKB		;ACCESS COUNT FOR READ REGARDLESS OPENS
F$WFND:	.BLKB	FBBSIZ	;FBB OF FIRST RETRIEVAL ENTRY
F$UFND:	.BLKB	FBBSIZ	;FBB OF NAME ENTRY
F$UNT:	.BLKB		;FIP UNIT NUMBER
F$SIZM:	.BLKB		;FILE SIZE MSB (NUMBER OF FBN'S IF NFS)
F$SIZL:	.BLKW		;FILE SIZE LSB
F$CLUS:	.BLKW		;FILE CLUSTER SIZE (W$FCB POINTS HERE)
F$WCB:	.BLKW		;POINTER TO FIRST WCB OPEN ON THIS FILE
; Extended FCB data (PRVLST FCB copies only)				;010
F$PRIV:	.BLKB	PRIVSZ	;Privilege mask					;007
FCBESZ:			;Size of extended FCB				;007

; BIT ASSIGNMENTS IN F$STAT ARE THE SAME AS USTAT (BELOW)

; BIT ASSIGNMENTS IN F$PROT ARE THE SAME AS UPROT (BELOW)

.BSECT	,NOCREF		; in F$WCB					;007
FC$EXT:	.BLKB	.	;Extended FCB, i.e. privilege mask present	;010
	.BLKB	.	;Reserved					;010
	.BLKB	.	;Reserved					;007
	.BLKB	.	;Reserved					;007
	.BLKB	.	;Reserved					;007

; SMALL CONTROL BLOCK (SCB) - ONE PER OPEN DISK CHANNEL ON SMALL FILE SYSTEMS

.DSECT	,NOCREF

S$IDX:	.BLKB		;DRIVER INDEX
S$STS:	.BLKB		;STATUS BITS FOR FILE
S$PT:	.BLKB		;PENDING TRANSFER COUNT
S$UNT:	.BLKB		;FIP UNIT NUMBER
S$SIZ:	.BLKW		;SIZE OF FILE
S$NVB:	.BLKW		;NEXT VIRTUAL BLOCK TO READ/WRITE
S$FVB:	.BLKW		;FIRST VIRTUAL BLOCK IN WINDOW
S$CLUS:	.BLKB		;FILE CLUSTER SIZE (MINUS 1)
S$FLG:	.BLKB		;SCB FLAG BITS
S$UFND:	.BLKB	FBBSIZ	;N.E. OFFSET (/2) AND FBN OF UFD BLOCK
S$WND:	.BLKW	10	;CURRENT RETRIEVAL WINDOW AND MORE FLAGS
SCBSIZ:			;SIZE OF THE SCB IN BYTES

.BSECT	HIGH,NOCREF	;IN DDSTS (AS A WORD)

DDNFS:	.BLKB	.	;IF 1, NON-FILE STRUCTURED
DDRLO:	.BLKB	.	;IF 1, USER MAY NOT READ FILE
DDWLO:	.BLKB	.	;IF 1, USER MAY NOT WRITE FILE
SC$UPD:	.BLKB	.	;IF 1, THE FILE IS OPEN FOR UPDATE
SC$CTG:	.BLKB	.	;IF 1, THE FILE IS CONTIGUOUS
SC$LCK:	.BLKB	.	;IF 1, THE CURRENT BLOCK IS LOCKED
SC$UFD:	.BLKB	.	;IF 1, THE FILE IS A UFD
SC$USE:	.BLKB	.	;IF 1, THIS USER GOT THE WRITE PRIV'S

.DSECT	37,NOCREF	;IN S$FLG

SC$LLK:	.BLKB	1	;# BLOCKS OF CURRENT BLOCK LOCK
SC$RR:	.BLKB	.	;IF 1, THE FILE IS OPEN 'READ REGARDLESS'
SC$EXT:	.BLKB	.	;IF 1, THE SCB IS AN EXTENDED SCB
SC$DLW:	.BLKB	.	;IF 1, UPDATE FILE SIZE AND DATE OF LAST WRITE

.BSECT	,NOCREF		;IN S$WND

SC$SPU:	.BLKB	.	;IF 1, THE FILE IS OPEN IN SPECIAL UPDATE MODE
SC$AEX:	.BLKB	.	;IF 1, ALWAYS DO A REAL EXTEND
SC$CHE:	.BLKB	.	;IF 1, FILE IS OPEN FOR USER DATA CACHING
SC$CSQ:	.BLKB	.	;IF 1, USER DATA CACHING IS SEQUENTIAL

; VERIFY ALIGNMENTS IN SCB

.ASSUME	S$IDX	EQ	DDIDX
.ASSUME	S$STS	EQ	DDSTS
.ASSUME	S$NVB	EQ	W$NVBL

; Disk Quota Table Definitions						;014

.DSECT	,NOCREF		;Quota Table Block (QTB) definition		;014

QTBPPN:	.BLKW		;PPN which this QTB is for			;014
QTBFLG:	.BLKB		;Flag byte					;014
QTBDJB:	.BLKB		;Detached job quota				;014
QTBLOL:	.BLKW		;Logged out quota (LSB)				;014
QTBLIL:	.BLKW		;Logged in quota  (LSB)				;014
QTBLIM:	.BLKB		;Logged in quota  (MSB)				;014
QTBLOM:	.BLKB		;Logged out quota (MSB)				;014
QTBRSM:	.BLKB		;Reserve quota    (MSB)				;014
QTBCRM:	.BLKB		;Current usage    (MSB)				;014
QTBRSL:	.BLKW		;Reserve quota    (LSB)				;014
QTBCRL:	.BLKW		;Current usage    (LSB)				;014
QTBOPN:	.BLKW		;Current count of open files (Lower 10 bits)	;014
			;Current count of logged-in jobs (Higher 6 bits);014
QTBSIZ:			;Size of the QTB				;014

.BSECT	,NOCREF		;QTBFLG definition				;014

	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
	.BLKB	.	;Reserved					;014
Q.UPDC:	.BLKB	.	;Write usage count to disk			;014

.DSECT	,NOCREF		;Quota Table (QT) definition			;014

	.BLKB	BUFHDR	;Buffer header					;014
QTLINK:	.BLKW		;Link pointer to next QT			;014
QTBENT:	.BLKB	QTBSIZ*3. ;QTB blockettes				;014
QTSIZE:									;014

; SYSTEM LOGICAL NAME BLOCK (SLNB)				;017

.DSECT	,NOCREF							;017

SL$PPN:	.BLKW		;PPN					;025
SL$DEV:	.BLKW		;Physical device name in ASCII		;017
SL$NUM:	.BLKW		;Unit # (low byte) and flag (high byte)	;017
SL$NAM:	.BLKW	3	;Logical name in RAD50			;017
SL$SZS:			;size of old style logical		;025
	.BLKW	4	;Logical name in RAD50 extended part	;025
SL$SIZ:			;Size of system logical block		;025


; DISK LOGICAL NAME BLOCK (DLNB)				;017

.DSECT	,NOCREF							;017

DL$NAM:	.BLKW	3	;Logical name in RAD50			;017
DL$DEV:	.BLKW		;Physical device name in ASCII		;017
DL$NUM:	.BLKW		;Unit # (low byte) and flag (high byte)	;017
DL$SIZ:			;Size of disk logical block		;017


; DISK FILE STRUCTURE DEFINITIONS

.DSECT	,NOCREF		;Pack label entry

	.BLKW		;1 to indicate entry in use
	.BLKW		;Reserved (-1)
MDCN:	.BLKW		;Starting DCN of MFD
PLVL:	.BLKW		;Pack revision level
PPCS:	.BLKW		;Pack cluster size
PSTAT:	.BLKW		;Pack status/flags
PCKID:	.BLKW	2	;Pack ID
TAPGVN:	.BLKW	2	;TAP generation-version number for backup control
BCKDAT:	.BLKW		;Date of last TAP full backup
BCKTIM:	.BLKW		;Time of last TAP full backup
MNTDAT:	.BLKW		;Date of last mount/dismount			;027
MNTTIM:	.BLKW		;Time of last mount/dismount			;027
WHOCLN:	.BLKW		; 0=INICLN, 1=ONLCLN				;027
	.BLKB	1000-.	;Reserved

.DSECT	,NOCREF		;MFD label entry

	.BLKW		;Reserved (0)
	.BLKW		;Reserved (-1)
	.BLKW	3	;Reserved (0)
MALNK:	.BLKW		;Link to pack attributes
LPPN:	.BLKB	2	;PPN [255,255]
LID:	.BLKW		;Identification (RAD50 "MFD")

.DSECT	,NOCREF		;GFD label entry

	.BLKW		;Reserved (0)
	.BLKW		;Reserved (-1)
	.BLKW	4	;Reserved (0)
LPPN:	.BLKB	2	;PPN [x,255]
LID:	.BLKW		;Identification (RAD50 "GFD")

.DSECT	,NOCREF		;GFD NAME ENTRY

ULNK:	.BLKW		;Link to attributes
UNAM:	.BLKW	3	;PPN AND PASSWORD
USTAT:	.BLKB		;STATUS BYTE
UPROT:	.BLKB		;PROTECTION CODE
UACNT:	.BLKW		;ACCESS COUNT
UAA:	.BLKW		;LINK TO ACCOUNTING ENTRY
UAR:	.BLKW		;DCN OF START OF UFD

.DSECT	,NOCREF		;GFD ACCOUNTING ENTRY

ULNK:	.BLKW		;Flags
MCPU:	.BLKW		;ACCUM CPU TIME (LSB)
MCON:	.BLKW		;ACCUM CONNECT TIME
MKCT:	.BLKW		;ACCUM KCT'S (LSB)
MDEV:	.BLKW		;ACCUM DEVICE TIME
MMSB:	.BLKW		;ACCUM CPU TIME AND KCT'S (MSB'S)
MDPER:	.BLKW		;DISK QUOTA
UCLUS:	.BLKW		;UFD CLUSTER SIZE

.DSECT	,NOCREF		;UFD label entry

	.BLKW		;Link to first name block in UFD
	.BLKW		;Reserved (-1)
	.BLKW	4	;Reserved (0)
LPPN:	.BLKB	2	;PPN [x,y]
LID:	.BLKW		;Identification (RAD50 "UFD")

.DSECT	,NOCREF		;UFD NAME ENTRY

ULNK:	.BLKW		;LINK TO NEXT NAME ENTRY
UNAM:	.BLKW	3	;FILE NAME AND EXTENSION
USTAT:	.BLKB		;STATUS BYTE
UPROT:	.BLKB		;PROTECTION CODE
UACNT:	.BLKW		;ACCESS COUNT
UAA:	.BLKW		;LINK TO UFD ACCOUNTING ENTRY
UAR:	.BLKW		;LINK TO RETRIEVAL ENTRIES

.DSECT	,NOCREF		;UFD ACCOUNTING ENTRY

ULNK:	.BLKW		;LINK TO ATTRIBUTES AND FLAGS
UDLA:	.BLKW		;DATE OF LAST ACCESS (OR WRITE)
USIZ:	.BLKW		;FILE SIZE
UDC:	.BLKW		;DATE OF CREATION
UTC:	.BLKW		;TIME OF CREATION
URTS:	.BLKW	2	;FILE'S RUN-TIME SYSTEM NAME OR 0/MSB SIZE
UCLUS:	.BLKW		;FILE CLUSTER SIZE

.DSECT	,NOCREF		;MFD/GFD attribute entry

ULNK:	.BLKW		;Link to next, flags
UATYP:	.BLKB		;Type
UADAT:	.BLKB	15	;Data

.DSECT	3777,NOCREF	;Time of creation flag bit definitions		;024

UTC.TM:	.BLKB	1	;bits needed for the time field			;024
UTC.IG:	.BLKB	.	;IGNORE flag					;024
UTC.BK:	.BLKB	.	;NOBACKUP flag					;024
	.BLKB	.	; reserved					;024
	.BLKB	.	; reserved					;024

.DSECT	,NOCREF		;UFD RETRIEVAL ENTRY

ULNK:	.BLKW		;LINK TO NEXT RETRIEVAL ENTRY
UENT:	.BLKW	7	;THE DCN'S OF THE CLUSTER(S)

.BSECT	,NOCREF		;BIT ASSIGNMENTS IN USTAT AND F$STAT

US.OUT:	.BLKB	.	;FILE IS 'OUT OF SAT'
US.PLC:	.BLKB	.	;FILE IS "PLACED"
US.WRT:	.BLKB	.	;WRITE ACCESS GIVEN OUT (NOT ON DISK IF LARGE FILES)
US.UPD:	.BLKB	.	;FILE OPEN IN UPDATE MODE (NOT ON DISK IF LARGE FILES)
US.NOX:	.BLKB	.	;NO FILE EXTENDING ALLOWED (CONTIGUOUS)
US.NOK:	.BLKB	.	;NO DELETE AND/OR RENAME ALLOWED
US.UFD:	.BLKB	.	;ENTRY IS MFD TYPE ENTRY
US.DEL:	.BLKB	.	;FILE MARKED FOR DELETION

.BSECT	,NOCREF		;BIT ASSIGNMENTS IN UPROT AND F$PROT

UP.RPO:	.BLKB	.	;READ  PROTECT AGAINST OWNER
UP.WPO:	.BLKB	.	;WRITE  "       "       "
UP.RPG:	.BLKB	.	;READ   "       "      GROUP
UP.WPG:	.BLKB	.	;WRITE  "       "       "
UP.RPW:	.BLKB	.	;READ   "       "      WORLD
UP.WPW:	.BLKB	.	;WRITE  "       "       "
UP.RUN:	.BLKB	.	;EXECUTABLE FILE
UP.PRV:	.BLKB	.	;CLEAR ON DELETE, PRIVILEGED IF EXECUTABLE FILE

.BSECT	,NOCREF		;LINK AND FLAG WORD FIELDS

UL.USE:	.BLKB	.	;ON TO ENSURE ENTRY IS "IN USE"
UL.BAD:	.BLKB	.	;SOME BAD BLOCK EXISTS IN FILE
UL.CHE:	.BLKB	.	;CACHE (NAME ENTRY) OR SEQUENTIAL (ACCTING ENTRY)
UL.CLN:	.BLKB	750	;RESERVED FOR 'CLEAN'
UL.ENO:	.BLKB	6020	;ENTRY OFFSET WITHIN BLOCK   (5 BITS)
UL.CLO:	.BLKB	161000	;CLUSTER OFFSET WITHIN UFD   (3 BITS)
UL.BLO:	.BLKB		;BLOCK OFFSET WITHIN CLUSTER (4 BITS)

.DSECT	,NOCREF		;Pack attribute codes

	.BLKB		;Reserved
			;None assigned yet

.DSECT	,NOCREF		;Group attribute codes

	.BLKB		;Reserved
			;None assigned yet

.DSECT	,NOCREF		;Account attribute codes

	.BLKB		;Reserved
AA.QUO:	.BLKB		;Quotas
AA.PRV:	.BLKB		;Privilege masks
AA.PAS:	.BLKB		;Password
AA.DAT:	.BLKB		;Date/time recording (creation, change, login)
AA.NAM:	.BLKB		;User name					;018
AA.QT2:	.BLKB		;Quotas part 2					;018

; Attribute blockette layouts

.DSECT	UADAT,NOCREF	;Privilege mask data				;008
	.BLKB		;Filler						;008
AP.PRV:	.BLKB	PRIVSZ	;Authorized privileges				;008

.ASSUME	. LE 20		;Make sure it fits				;008

.DSECT	UADAT,NOCREF	;Date/time data
AT.KB:	.BLKB		;Keyboard of last login
AT.LDA:	.BLKW		;Date of last login
AT.LTI:	.BLKW		;Time of last login
AT.PDA:	.BLKW		;Date of last password change
AT.PTI:	.BLKW		;Time of last password change
AT.CDA:	.BLKW		;Date of creation
AT.EXP:	.BLKW		;Expiration date				;010

.DSECT	3777,NOCREF	;Fields within AT.LTI				;018
AT.MSK:	.BLKB		;Mask for time					;018
AT.NPW:	.BLKB	.	;No password required				;018
	.BLKB	.	;Reserved					;018
	.BLKB	.	;Reserved					;018
	.BLKB	.	;Reserved					;018
	.BLKB	.	;Reserved					;018

.DSECT	3777,NOCREF	;Fields within AT.PTI				;013
AT.MSK:	.BLKB		;Mask for time					;013
AT.NLK:	.BLKB	.	;Not readable password if set			;014
AT.NDL:	.BLKB	.	;No-dialups flag				;013
AT.NNT:	.BLKB	.	;No-network flag				;013
AT.NLG:	.BLKB	.	;No-login account				;013
AT.CAP:	.BLKB	.	;Captive account				;013

.ASSUME	AT.MSK GE 1440.							;013

.DSECT	UADAT,NOCREF	;Disk Quota Attribute Blockette			;014
AQ.DJB:	.BLKB		;Detached job quota				;018
AQ.LOL:	.BLKW		;Logged out quota (LSB)				;014
AQ.LIL:	.BLKW		;Logged in quota  (LSB)				;014
AQ.LIM:	.BLKB		;Logged in quota  (MSB)				;014
AQ.LOM:	.BLKB		;Logged out quota (MSB)				;014
AQ.RSM:	.BLKB		;Reserve quota    (MSB)				;014
AQ.CRM:	.BLKB		;Current usage    (MSB)				;014
AQ.RSL:	.BLKW		;Reserve quota    (LSB)				;014
AQ.CRL:	.BLKW		;Current usage    (LSB)				;014

.DSECT	UADAT,NOCREF	;Second quota and date/time block		;018
A2.JOB:	.BLKB		;Total job quota				;018
A2.RIB:	.BLKW		;RIB quota					;018
A2.MSG:	.BLKW		;Message limit quota				;018
	.BLKW		;Reserved					;018
	.BLKB		;Reserved					;026
A2.PWF:	.BLKB		;Password failed count				;026
A2.NDT:	.BLKW		;Date of Last non-interactive login		;026
A2.NTI:	.BLKW		;Time of Last non-interactive login		;026

; DISK FILE OPEN MODES
;	MODES ARE FOR OPN/CRE/CRB/CRT/ONX UNLESS OTHERWISE STATED
;	MODES ARE FOR FILE STRUCTURED NON-UFD OPENS UNLESS OTHERWISE STATED

.BSECT	,NOCREF

OP$UPD:	.BLKB	.		;OPEN FOR UPDATE
OP$APP:	.BLKB	.		;OPEN FOR APPEND
OP$SPU:	.BLKB	.		;SPECIAL UPDATE MODE (ONLY IF OP$UPD)
OP$AEX:	.BLKB	.		;ALWAYS UPDATE DISK FILE SIZE
OP$DUD:				;Don't update dates (no write access) [ONX] ;012
OP$CTG:	.BLKB	.		;CREATE CONTIGUOUS FILE		[CRE/CRB/CRT]
OP$NGA:				;Never grant access to file	[ONX]	;012
OP$TEN:	.BLKB	.		;CREATE TENTATIVE FILE		[CRE/CRB/CRT]
OP$CCT:	.BLKB	.		;CONDITIONAL CONTIGUOUS		[CRE/CRB/CRT]
OP$NOS:				;FS  NO SUPERSEDE ON CREATE	[CRE/CRB]
OP$BLK:	.BLKB	.		;NFS BLOCK MODE			[NFS]
OP$CHE:	.BLKB	.		;USER DATA CACHING
OP$INI:				;SPECIAL MODE FOR DISK INIT.	[NFS]
OP$TOP:	.BLKB	.		;LINK TO TOP OF DIRECTORY (ONLY IF OP$LNK)
OP$LNK:	.BLKB	.		;FORCE LINK TO TOP/BOTTOM 	[CRE/CRB/CRT]
OP$CSQ:	.BLKB	.		;DATA CACHING IS SEQUENTIAL (ONLY IF OP$CHE)
OP$RR:	.BLKB	.		;READ REGARDLESS
OP$RO:	.BLKB	.		;READ ONLY			[NFS]
OP$MDL:				;Open files marked for delete	[ONX]	;015
OP$WUF:	.BLKB	.		;WRITE ACCESS TO UFD'S		[UFD]
OP$WLK:				;(INTERNAL) UNIT IS WRITE-LOCKED
OP$MOD:	.BLKB	.		;MODE IS REAL

; Bit definitions for EMLFQT table						       ;002+

	.BSECT	,NOCRF

EMLQNV:	.BLKB	.		; Never EMT-Log this EMT (*)
	.BLKB	.		; Reserved
	.BLKB	.		; Reserved
	.BLKB	.		; Reserved
	.BLKB	.		; Reserved
EMLQMS:	.BLKB	.		; Logging of this EMT must not be "missed" (*)
EMLQNL:	.BLKB	.		; This EMT not currently being EMT-Logged (*)
EMLQUU:	.BLKB	.		; This EMLFQT table entry is the one for .UUO



; Bit definitions for UUOSYN table

	.BSECT	,NOCRF

EMLQNV:	.BLKB	.		; Never EMT-Log this UUO (*)
	.BLKB	.		; Reserved
	.BLKB	.		; Reserved
	.BLKB	.		; Reserved
UUOSLK:	.BLKB	.		; This UUO's calling job must remain locked
EMLQMS:	.BLKB	.		; Logging of this UUO must not be "missed" (*)
EMLQNL:	.BLKB	.		; This UUO not currently being EMT-Logged (*)
UUOSSN:	.BLKB	.		; This UUO is synchronous


;			The symbols marked as (*) above must have the same
;			values in the EMLFQT and UUOSNC tables.			       ;002-


; MACROS USED WITHIN FIP

; ABBREVIATIONS USED WITHIN FQFSRT/FQFEND:
;	SI -> SIZE (IN OVR TABLE)
;	PA -> PATCH STARTS HERE
;	LN =  LENGTH OF CODE

.MACRO	FQFSRT	SECT,RESFLG
.IF	B	<SECT>
.ERROR	;NO SECTION NAME ON FIRST CALL
.ENDC
	.PSECT	OVRTBL,CON
	.RAD50	/SECT/
.IF	IDN	<RESFLG>,<LODABL>
SECT'FLG:.WORD	OTFLOD
.IFF
.IF	NB	<RESFLG>
.ERROR	;INVALID KEYWORD "RESFLG"
.IFF
SECT'FLG:.WORD	0
.ENDC
.ENDC
SECT'CNT:.WORD	0
SECT'LN:
.MACRO	FQFEND
.EVEN
.RADIX	10.
.IRP	N,<\FQFNUM>
.RADIX	8.
.LIST
SECT''N'LN	=	.-SECT''N'
.NLIST
.IF	GE	1000-SECT''N'LN
	ORG	SECT''N'PA
SECT''N'PA:.BLKB0	1000-SECT''N'LN
.IFF
.ERROR	;SECT''N IS TOO BIG
.ENDC
	.PSECT	OVRTBL,CON
.	=	SECT'CNT
	.WORD	FQFNUM+1
.	=	SECT'LN+<FQFNUM*2>
SECT''N'SI::.WORD	SECT''N'LN
FQFLOC	=	.
.ENDM
FQFNUM	=	FQFNUM+1
.ENDM	FQFEND
.MACRO	FQFSRT
.IF	NE	FQFLOC-.
.ERROR	;ILLEGAL FQFSRT/FQFEND USAGE
.ENDC
.RADIX	10.
.IRP	N,<\FQFNUM>
.RADIX	8.
	ORG	SECT''N
SECT''N::
.ENDM
.ENDM	FQFSRT
FQFNUM	=	0
FQFLOC	=	.
FQFSRT
SECT::
.ENDM	FQFSRT

.MACRO	FQFENT	FUN,ADDR=$$$$$$,LIST,PHASE
.DSABL	CRF
$$$$$$	=	.
	TMPORG	FIPTBL,FUN'FQ
.ENABL	CRF
.IF	NB	<PHASE>
	 .WORD	ADDR+1	; Load FIPTBL for FUN'FQ
.IFF
	 .WORD	ADDR		; Load FIPTBL for FUN'FQ
.ENDC
.IF	LT	FUN'FQ-NONMSK
	TMPORG	MSKTBL,FUN'FQ
.DSABL	CRF
$$$$$$	=	^B1111111111111111
.IRP	SYM,<LIST>
$$$$$0	=	^B1111111111111110
$$$$$1	=	0
.REPT	16.
.IF	EQ	SYM/2-$$$$$1
$$$$$$	=	$$$$$$&$$$$$0
.ENDC
$$$$$0	=	$$$$$0+$$$$$0+1
$$$$$1	=	$$$$$1+1
.ENDR
.ENDM
	 .WORD	$$$$$$		; Load MSKTBL for FUN'FQ
.ENABL	CRF
.ENDC
	UNORG
.ENDM	FQFENT

.MACRO	UUOENT	CODE,PRV,SNC=NOSYNC,ABL=NEVER,DOL,LCK=NOLOCK,PHASE
.DSABL	CRF
$$$$$$	=	.
	TMPORG	UUOTBL,UU.'CODE-UU$MIN*2
.IF	B	PHASE							;012
	 .WORD	 $$$$$$		; Load UUOTBL for UU.'CODE
.IFF	;B	PHASE							;012
	 .WORD	 $$$$$$+1	; Load UUOTBL for UU.'CODE		;012
.ENDC	;B	PHASE							;012
	TMPORG	UUOPRV,UU.'CODE-UU$MIN*2				;008
.IF	B	<PRV>							;008
	 .WORD	0							;008
.IFF									;008
	 .BPRIV	<PRV>							;009
.ENDC									;008
.IF	DIF	<SNC>,<NOSYNC>
.IIF	DIF	<SNC>,<SYNC>, .ERROR ; Keyword SNC illegal in "SYNC" position
$$$$$$	=	UUOSSN
.IFF
$$$$$$	=	0
.ENDC
.IF	DIF	<ABL>,<NEVER>
.IIF	DIF	<ABL>,<LOGABL>, .ERROR ; Keyword ABL illegal in "LOGABL" position
.IFF
$$$$$$	=	$$$$$$!EMLQNV
.ENDC
.IF	DIF	<LCK>,<NOLOCK>
.IIF	DIF	<LCK>,<LOCK>,	.ERROR ; Keyowrd LCK illegal in "LOCK" position
$$$$$$	=	$$$$$$!UUOSLK
.ENDC
.IF	NB	<DOL>
.IIF	DIF	<DOL>,<DOLOG>, .ERROR ; Keyword DOL illegal in "DOLOG" position
.IIF	NE	$$$$$$&EMLQNV, .ERROR ; DOL illegal without LOGABL
.IFF
$$$$$$	=	$$$$$$!EMLQNL
.ENDC
$$$$$$	=	$$$$$$!EMLQNL
	TMPORG	UUOSNC,UU.'CODE-UU$MIN
.ENABL	CRF
	 .BYTE	 $$$$$$		; Load UUOSNC for UU.'CODE as SNC, LCK,
.LIST
				;              EMT logging ABL
.NLIST
	UNORG
.ENDM	UUOENT

.MACRO	FCALL	SUBR
.IF	IDN	<(R5)>,<SUBR>
	CALLX	FCALX
.IFF
	CALLX	FCALL,,SUBR
.ENDC
.ENDM	FCALL

.MACRO	FCALLI	SUBR
	FCALL	SUBR+1
.ENDM	FCALLI

.MACRO	FJMP	LABEL
.IF	IDN	<(R5)>,<LABEL>
	JMPX	FJMPX
.IFF
	CALLX	FJMP,R5,LABEL
.ENDC
.ENDM	FJMP

.MACRO	FJMPI	LABEL
	FJMP	LABEL+1
.ENDM	FJMPI

.MACRO	FJMPDV	DEV,FUN,ENT,DEST
.DSABL	CRF
$$$$$$	=	.
$$$$$0	=	-1
.IIF	IDN	<FUN>,<OPN>,	$$$$$0=0
.IIF	IDN	<FUN>,<CLS>,	$$$$$0=2
.IIF	IDN	<FUN>,<DIR>,	$$$$$0=4
.IIF	IDN	<FUN>,<ZER>,	$$$$$0=6
.IIF	IDN	<FUN>,<UTL>,	$$$$$0=10
.IIF	IDN	<FUN>,<DLN>,	$$$$$0=12
.IIF	IDN	<FUN>,<REN>,	$$$$$0=14
.IF	LT	$$$$$0
.ERROR	;FUN IS NOT A LEGAL FUNCTION TYPE
.ENDC
.IF	NB	<ENT>
.IF	IDN	<ENT>,<MOVE>
.GLOBL	$'DEV'ADSP
.ENABL	CRF
	 MOV	$'DEV'ADSP+$$$$$0,DEST
.MEXIT
.ENDC
.IF	NB	<DEST>
.ERROR	;DESTINATION ARGUMENT IS ILLEGAL
.ENDC
.IF	DIF	<ENT>,<ENTER>
.ERROR	;KEYWORD ENT IS ILLEGAL IN "ENTER" LOCATION
.ENDC
	TMPORG	DEV'ADSP,$$$$$0
.ENABL	CRF
	 .WORD	$$$$$$		; LOAD DEV'ADSP FOR FUN
	UNORG
.IFF
.GLOBL	$'DEV'ADSP
.ENABL	CRF
	FJMPI	$'DEV'ADSP+$$$$$0
.ENDC
.ENDM	FJMPDV

.MACRO	MARK	BUFFER
.IF	IDN	<BUFFER>,<FIBUF>
	 MOVB	(PC),@#FIBMOD
.DSABL	CRF
.GLOBL	FIBMOD
.ENABL	CRF
.MEXIT
.ENDC
.IF	IDN	<BUFFER>,<SATBUF>
	 MOVB	(PC),@#SATMOD
.DSABL	CRF
.GLOBL	SATMOD
.ENABL	CRF
.MEXIT
.ENDC
.ERROR	;BUFFER IS ILLEGAL
.ENDM	MARK

; MACRO which sets up I-only versions of FIP macros

.MACRO	IONLY								;020
.MACRO	MARK	BUF,HOW
.IF	IDN	<BUF>,<SATBUF>
	 MOVB	#-1,@#SATMOD
.GLOBL	SATMOD
.IFF
.IF	DIF	<BUF>,<FIBUF>
	.ERROR	;Wrong buffer BUF
.IFF
.IF	B	<HOW>
	 CALLX	MRKFBF
.IFF
.IF	IDN	<HOW>,<INLINE>
	 MOVB	#-1,@#FIBMOD
.GLOBL	FIBMOD
.IFF
.ERROR	;<HOW> MUST BE INLINE
.ENDC
.ENDC
.ENDC
.ENDC
.ENDM	MARK
.ENDM	IONLY								;020

.MACRO	F2FSRT	SECT,RESFLG						;023
.IF	B	<SECT>
.ERROR	;NO SECTION NAME ON FIRST CALL
.ENDC
	.PSECT	OV2TBL,CON
	.RAD50	/SECT/
.IF	IDN	<RESFLG>,<LODABL>
SECT'FLG:.WORD	OTFLOD
.IFF
.IF	NB	<RESFLG>
.ERROR	;INVALID KEYWORD "RESFLG"
.IFF
SECT'FLG:.WORD	0
.ENDC
.ENDC
SECT'CNT:.WORD	0
SECT'LN:

.MACRO	F2FEND								;023
.EVEN
.RADIX	10.
.IRP	N,<\F2FNUM>
.RADIX	8.
.LIST
SECT''N'LN	=	.-SECT''N'
.NLIST
.IF	GE	1000-SECT''N'LN
	ORG	SECT''N'PA
SECT''N'PA:.BLKB0	1000-SECT''N'LN
.IFF
.ERROR	;SECT''N IS TOO BIG
.ENDC
	.PSECT	OV2TBL,CON
.	=	SECT'CNT
	.WORD	F2FNUM+1
.	=	SECT'LN+<F2FNUM*2>
SECT''N'SI::.WORD	SECT''N'LN
F2FLOC	=	.
.ENDM
F2FNUM	=	F2FNUM+1
.ENDM	F2FEND

.MACRO	F2FSRT								;023
.IF	NE	F2FLOC-.
.ERROR	;ILLEGAL F2FSRT/F2FEND USAGE
.ENDC
.RADIX	10.
.IRP	N,<\F2FNUM>
.RADIX	8.
	ORG	SECT''N
SECT''N::
.ENDM
.ENDM	F2FSRT
F2FNUM	=	0
F2FLOC	=	.
F2FSRT
SECT::
.ENDM	F2FSRT

.MACRO	F2CALL	SUBR							;023
.IF	IDN	<(R5)>,<SUBR>
	CALLX	F2CALX
.IFF
	CALLX	F2CALL,,SUBR
.ENDC
.ENDM	F2CALL

.MACRO	F2JMP	LABEL							;023
.IF	IDN	<(R5)>,<LABEL>
	JMPX	F2JMPX
.IFF
	CALLX	F2JMP,R5,LABEL
.ENDC
.ENDM	F2JMP

; Definitions used within FIP

MINDAT	=:	20001.		;Minimum legal settable date		;026

.IIF	NDF	L$$IST,	.ENABL	CRF
.IIF	NDF	L$$IST,	.LIST
