.IIF	NDF	L$$IST,	.NLIST
.IIF	NDF	L$$IST,	.DSABL	CRF
TITLE	KERNEL,<Kernel Definitions>,0A,13-MAY-91,MHB/GPK/FEK/WJS/GME/DRP/FRL/MNB/TWH/KPH/SHL/KCG/DBM/VAM/JHC/PJH/DSD/DWF/WRM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit history for KERNEL

;+
;
;  000  RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	TG   27-Jun-80	Put Namdir stuff in
;  002	RTW  02-Jul-80	Added Multiple rib symbols
;  003	RTW  09-Aug-80	Change JFRSXP to JFCEMT
;  004	RTW  19-Aug-80	ADDED ERROR LOG CODE FOR DMP/DMV
;  005	GPK  16-Feb-81	Added XPEEK and DDCU stuff
;  006  GPK  10-Apr-81  Added UU.TB3
;  007  MND  15-Apr-81  Removed comments to Named Directories
;  008  MDS  10-MAR-81	Added definitions for Extended memory dumps
;  009  JTC  29-Apr-81  Merge MDS's XBUF dumping changes.
;  010	SRM  06-May-81	Add switch register bit definitions.
;  011	JTC  18-May-81	Add MAPFIP and MAPXPL macros for FIP pool mods.
;  012  RRF  07-Jun-81	Added RDOTBL macro and DSECT
;  013	JTC  07-Jul-81	Removed MAPFIP and MAPXPL, added MAP macro.
;  014	SJM  09-Jul-81	Added support for I&D space.
;  015	JTC  07-Aug-81	Futz with the MAP MACRO and XC$DSP.
;  016	GPK  10-Aug-81	Added Redo definition for .MESAG
;  017	JTC  16-Sep-81	Move FIP to APR6
;  018	SRM  13-Oct-81	Add BUFFER GETFIP option
;  019	JTC  13-Oct-81	Add STAFQ function code
;  020	JTC  13-Oct-81	Define OVR Table offsets
;  021	CEK  14-Oct-81	Define load block
;  022	JTC  25-Oct-81	Remove BUFFER GETFIP option
;  
;			CREATION - COPIED FROM V7.1-11
;  023  AJK  13-Jan-82  1. Added APR5 as input to DSKDEF macro
;			2. Added ERC$DU error code
;			3. Added definition for AP5$OO and INT$OO
;  024  AWL  16-Apr-82  Added XC$QBU and XC$22 to config word
;
;			CREATION - COPIED FROM V7.2-4
;  025	DRP  28-Jun-82	Added UO.INI to the UNTOPT table status bits
;  026  AWL  24-Sep-82  Added new byte to offset 32 in the RIB for S.OMAX
;  027  WJS  27-Sep-82	JDB2 structure defined at assembly time
;  028	GPK  06-Oct-82	Added pack status, mount option flags
;  029  AJK  19-Oct-82	Added UU.STL definition
;  030  WJS  27-Oct-82	BL4 changes for EMT Logger; BUFFER GETLRG option
;  031  GMB  08-Dec-82	CRASH made "Software-forced crash"
;  032	WJS  17-Dec-82	BL4+ changes for EMT Logger
;  033  AWL  05-Jan-83  Changed comment for XC$22 for 248KB
;  034	GPK  02-Feb-83	Added SubRIB codes for Callable Datatrieve
;  035	FEK  04-Feb-83	Added UO.DP
;
;				[RSTS V9.0]
;  036  GPK  04-Mar-83	Added job header, multiple privileges
;  037	GPK  25-Mar-83	Permanent files, installed tasks
;  038	GPK  06-May-83	Added SA.TRC
;  039	GPK  17-May-83	Changed J2HDRS to byte, added J2HDRM
;  040	GPK  07-Jun-83	Changed .PRIV to .BPRIV
;  041	FEK  13-Jun-83	Add J2ISIZ and J2DSIZ for user I/D support
;  042	BSB  29-Jun-83	Add JDB2 support and EMT & FIP definitions for PFB
;  043  BSB  30-Jun-83  Fix EMT table for .ASSUME of reserved words 102-104
;  044	WJS   6-Jul-83	Add local object types for spooler
;  045  GME  26-Jul-83  Add J2ASTP for AST support
;  046	GPK  20-Sep-83	Add/rename some privileges, remove job headers,
;			add UU.3PP, UU.CHK
;  047	GME  31-Jul-83	Add AST directives
;  048	BSB  27-Sep-83  Moved .EQUATES for PFB function codes to FSS.MAC
;  049	DRP  04-Oct-83	Changed UNTCNT to allow for more open files
;			Move UC.TOP to UNTOPT (UO.TOP)
;  050	GPK  02-Nov-83	Removed .HDRSZ put .PFB into its place
;  051  FRL  23-Nov-83  Added extended L3Q capability
;  052  MNB  21-Nov-83  Added support for the Virtual Disk
;  053	GPK  11-NOV-83	Redid some ICF related JDB2 definitions
;  054	TWH  03-DEC-83	ADD IFUN
;  055  KPH  27-Dec-83	Add dynamic regions
;  056	GPK  29-Dec-83	Rename WGROUP etc. , split ACNT into WACNT/GACNT
;  057	GPK  07-Jan-84	More ICFP stuff, fix typo in PRVOP
;  058	GPK  11-Jan-84	Additions for job type (batch etc.), system password
;  059  MNB  14-Dec-83  Rearranged M.CTRL byte for Asynch I/O
;  060	KPH  11-Jan-84	Add multiple phases to EMTENT
;  061	KPH  13-Jan-84	Add .CMDLN, UU.ONX
;  062	TWH  20-JAN-84	Add new MTAFQ function for FIPTBL
;  063  SHL  25-Jan-84  Add support for UU.CFG directive
;  064	GPK  22-Feb-84	Remove J2CPTA, add J2PRVP
;  065	DRP  13-Mar-84	Added bit descriptor UO.NQT to UNTOPT
;  066  TWH  13-Mar-84	Add new L3QBIT for MTBUF
;  067	KCG  05-Apr-84	Reserve symbol for URPSER's local object type
;  068	DRP  15-Apr-84	Changed assigned value of UO.NQT
;  069	MNB  20-Apr-84	Add AST directive
;  070	GPK  17-Apr-84	Rename SNDFQ, RCVFQ; change privilege names
;			Add more local objects
;  071	GPK  11-May-84	Add QKBTIC level 3 bit; rename SO.OPS
;  072	KPH  09-Jul-84	Add maximum control-c interruptable redo index
;			More local object types for new spooler
;  073	GPK  19-Jul-84	Add local object type for DECnet tracer
;  074	KPH  07-Aug-84	Add DECFQ
;  075	DBM  28-Aug-84	Add branch if INIT/MONITOR macros
;  076	KPH  29-Aug-84	Change MAP macro for APR5 FIP pool
;			Changes for dynamic overlays
;  077	GPK  15-Oct-84	Add flags for SET [NO]ECHO feature
;  078	KPH  31-Oct-84	Add usage counters
;  079	KPH  10-Dec-84	Make J2ISIZ and J2DSIZ be bytes; and J2FLG2
;  080  KPH  11-Mar-85	Store SLA library pointer in J2FLG2
;  081	GPK  04-Apr-85	Add TMPPRV privilege
;
;			[RSTS V9.1]
;  082	TPT  31-Jan-85	MU L3Q bits; miscellaneous entries
;  083	KPH  26-Feb-85	Add l3qbit for system stack window turns
;  084	KPH  30-Mar-85	Add usage table entries for resident SATT and
;			system stack window turns
;  085  KPH  29-May-85	Conditional phases
;  086  VAM  30-May-85	Add RELFUN, WERFUN and UNLFUN.
;
;			[RSTS V9.2]
;  087  KPH  12-Jul-85	Add Job Control Region
;
;			[RSTS V9.3]
;  088  KPH  30-Sep-85	Add load block offsets for DECnet
;  089	JHC  26-Nov-85	Add UNA/LUA and QNA/LQA L3Qbits and Phase requirements
;  090  KPH  13-Jan-86	Add more DECnet load block offsets
;			Add DCL context word
;			Add test L3Q bits
;  091  KPH  06-Feb-86	Change the name of a DECnet phase
;  092	DBM  25-MAR-86	Add ERC$XE and ERC$XH
;  093  KPH  27-May-86	Remove SA.TRC; add SA.SLB in it's place
;  094  KPH  07-Jun-86	Add WDB map/access definitions
;			Add multiple cacher support
;			Add JOBF3 to lowcore
;  095  VAM  19-Aug-86	Add JMPM, MCPJMP and CALMCP macros.
;  096  VAM  28-Aug-86	Move MSCP data structures here from COMMON.
;
;			[RSTS/E V9.4]
;  097  KPH  11-Jan-87	Add MDE definitions
;			Make data space initialization a special condition
;  098  PJH  09-Feb-87	Merge GPK root changes to module
;  099  WRM  03-Apr-87  Add FASTMAP enable bit to JCR
;  100  WRM  28-Jul-87	Add file Truncate FIP function
;
;			[RSTS/E V9.6]
;  101  KPH  13-Oct-87	Make terminal error logging standard
;			Add dynamic DDB definition bit
;			Add conditional phases for new terminal driver
;			Add list of standard IDX values
;  102  KPH  02-Nov-87	Add LAT conditional phases
;  103	WRM  15-Jan-88	Add user/super prev mode state switch
;  104	DSD  20-Jan-88	Add conditional NODVR phase
;			Add NODVR L3Q bit
;  105	KCG  16-Feb-88	Add new DSQ function FMTFUN
;  106	DSD  18-Feb-88	Add NO to IDX table
;  107	DWF  18-Feb-88	Add LAT L3Q bit
;  108  WRM  04-Mar-88	Add D-apr protection mask byte to JCR
;  109  KPH  20-May-88	Add no frills support to load block
;
;			[RSTS/E V9.7]
;  110	KCG  22-Nov-88	Add symbol for defining max net functions.
;  111	WRM  28-Dec-88	Add LOG$CP (cache problem) Error
;  112	DRP  20-Jan-89	Add cells for KBX phase
;  113  WRM  21-Jan-89	Add LS.NPC for non-privilege region create
;  114  VAM  03-Feb-89	Fix External Error Log Code table
;
;			[RSTS/E V10.0]
;  115	FEK  21-Jul-89	Add XC$FIS to X.CON word
;  116	DBM  25-Aug-89	Add Local Object Type for Operator/Message Services
;  117	DRP  16-Oct-89	Update NTFQMX for additional LAT directives
;  118	DBM  25-Oct-89	Add OPER priv
;  119	FEK  09-Feb-90	Add bit for Asynch I/O fallback for non-priv users
;  120	FEK  21-Mar-90	Define KDJ11-E TOY CSR + Header dumping
;
;			[RSTS/E V10.1]
;  121	FEK  10-Apr-91	Add UU.USC sub-function
;-

	.SBTTL
; Common Machine Definitions

.DSECT	177774,NOCREF

SL:	.BLKW		; Stack limit
PS:	.BLKW		; Processor status

.BSECT	,NOCREF		; Condition code bits in the processor status

C:	.BLKB	.	; C-bit (carry)
V:	.BLKB	.	; V-bit (overflow)
Z:	.BLKB	.	; Z-bit (zero)
N:	.BLKB	.	; N-bit (negative)
T:	.BLKB	.	; T-bit (TRACE trap)

.DSECT	34000,NOCREF

PR0:	.BLKB	40	; Priority 0 (+reg set 1, +prev=user)
PR1:	.BLKB	40	; Priority 1 (+reg set 1, +prev=user)
PR2:	.BLKB	40	; Priority 2 (+reg set 1, +prev=user)
PR3:	.BLKB	40	; Priority 3 (+reg set 1, +prev=user)
PR4:	.BLKB	40	; Priority 4 (+reg set 1, +prev=user)
PR5:	.BLKB	40	; Priority 5 (+reg set 1, +prev=user)
PR6:	.BLKB	40	; Priority 6 (+reg set 1, +prev=user)
PR7:	.BLKB	40	; Priority 7 (+reg set 1, +prev=user)

.DSECT	177570,NOCREF

SWR:	.BLKW		; Console switch register/display register
MMUSR0:	.BLKW		; Memory management status register #0
MMUSR1:	.BLKW		; Memory management status register #1
MMUSR2:	.BLKW		; Memory management status register #2

.DSECT	172516,NOCREF

MMUSR3:	.BLKW		; Memory management status register #3

.DSECT	172200,NOCREF

SISDR0:	.BLKW	8.	; Supervisor instruction space descr. register 0 ;012
SDSDR0:	.BLKW	8.	; Supervisor data space description register 0	;012
SISAR0:	.BLKW	8.	; Supervisor instruction space address register 0 ;012
SDSAR0:	.BLKW	8.	; Supervisor data space address register 0	;012
KISDR0:	.BLKW	8.	; Kernel instruction space description register 0
KDSDR0:	.BLKW	8.	; Kernel data space description register 0
KISAR0:	.BLKW	8.	; Kernel instruction space address register 0
KDSAR0:	.BLKW	8.	; Kernel data space address register 0

.EQUATE	KISAR5,5*2+KISAR0,NOCREF ; Temporary code mapping register data space
.EQUATE	KDSAR5,5*2+KDSAR0,NOCREF ; Temporary code mapping register inst space

.EQUATE	KISAR6,6*2+KISAR0,NOCREF ; Temporary data mapping register data space
.EQUATE	KDSAR6,6*2+KDSAR0,NOCREF ; Temporary data mapping register inst space

.DSECT	177600,NOCREF

UISDR0:	.BLKW	8.	; User instruction space description register 0
UDSDR0:	.BLKW	8.	; User data space description registers		;041
UISAR0:	.BLKW	8.	; User instruction space address register 0
UDSAR0:	.BLKW	8.	; User data space address registers		;041

.EQUATE	UNIWIN,170200,NOCREF ; UNIBUS mapping registers

; Crash Dump/Snap Definitions
MAPVER	=	125252	; Word to verify the crash phase was mapped.
CRSVER	=	052525	; Word to verify we are not crashing.
XMSEGS	=	8.	; Number of segments to crash dump		;120
; Segment 0 = Low core
; Segment 1 = FIPPOL
; Segment 2 = MSCP/BBR/Ethernet region
; Segment 3 = XBUF
; Segment 4 = Job Control Region
SEG.JH	=	5.	; 0 based segment # for "JOB"s header		;120
SEG.FH	=	6.	; 0 based segment # for "FIJOB"s header		;120
; Segment 7 = Extra patchable segment

; Extended Memory Dump Segment Structure

.DSECT	,NOCREF

XM.ADD:	.BLKW		; Address of the area/64.
XM.LEN:	.BLKW		; Length of the area/64.
XMTLEN:			; Length of the table

; Configuration Word Bits

.BSECT	,NOCREF

	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
XC$FIS:	.BLKB	.	; Set if FIS instructions are available		;115
XC$22:	.BLKB	.	; Set if Q-bus has memory > 248KB, or UNIBUS has UMR
XC$QBU:	.BLKB	.	; Set if system has a Q-bus
XC$CAC:	.BLKB	.	; Set if memory has cache hardware on it
XC$ECC:	.BLKB	.	; Set if ECC is on this system
XC$PAM:	.BLKB	.	; Set if parity memory is on the system
XC$FPP:	.BLKB	.	; Set if FPP unit present
XC$CIS:	.BLKB	.	; Set if CIS present
XC$OAT:	.BLKB	.	; Set if system odd adress traps
XC$DSP:	.BLKB	.	; Set if monitor is using Data space
XC$IDS:	.BLKB	.	; Set if hardware has both I & D space
XC$UMR:	.BLKB	.	; Set if UMR's are presnet
XC$NEM:	.BLKB	.	; Set if the only valid dump area is the root


;		S w i t c h    R e g i s t e r    B i t s
;
;	Note:	The switch register bits are allocated for the Disk
;		Statistics code starting at bit 15 and extending
;		down.  The crash code allocates bits starting at
;		bit zero and extending up.
;		

.BSECT	,NOCREF

SW.AUT:	.BLKB	.	; Set to enable auto-restart on a crash.
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
SW.FRZ:	.BLKB	.	; Set to freeze Disk Statistics
SW.LOG:	.BLKB	.	; Set to log Disk Statistics.  Note, this bit
			;  being set overrides SW.FRZ being set.

; Common I/O Definitions

.EQUATE	LKS,177546,NOCREF ; KW11-L clock status register

.EQUATE	PKS,172540,NOCREF ; KW11-P clock status register

.DSECT	,NOCREF

RHCS1:	.BLKW		; RH11 control status #1
RHWC:	.BLKW		; RH11 word count
RHBA:	.BLKW		; RH11 bus address bits <15-0>
	.BLKW		; MASSBUS device-dependent
RHCS2:	.BLKW		; RH11 control status #2
RHDS:	.BLKW		; RH11 drive status
RHER:	.BLKW		; RH11 error register (#1)
RHAS:	.BLKW		; RH11 ATTN summary
	.BLKW	2	; 2 MASSBUS device-dependent registers
RHMR:	.BLKW		; RH11 maintenance register
RHDT:	.BLKW		; RH11 drive type

.BSECT	HIGH,NOCREF	; Common bits in RHCS1

	.BLKB	.	; Bus address bit <16>
	.BLKB	.	; Bus address bit <17>
	.BLKB	.	; Port select
	.BLKB	.	; Drive available (in drive)
	.BLKB	.	; Reserved (in drive)
RHMCPE:	.BLKB	.	; MASSBUS control parity error
RHTRE:	.BLKB	.	; Composite transfer error
RHSC:	.BLKB	.	; Composite special condition

.EQUATE	RHUNL,	 3,NOCREF ; Common RH11 unload function			;086
.EQUATE	RHESET,	11,NOCREF ; Common RH11 drive reset function
.EQUATE	RHWCHK,	51,NOCREF ; Common RH11 write check function
.EQUATE	RHWRIT,	61,NOCREF ; Common RH11 write function
.EQUATE	RHREAD,	71,NOCREF ; Common RH11 read function

.BSECT	,NOCREF		; Common bits in RHCS2

	.BLKB	.	; Unit select bit <0>
	.BLKB	.	; Unit select bit <1>
	.BLKB	.	; Unit select bit <2>
RHINH:	.BLKB	.	; Bus address increment inhibit			;086
	.BLKB	.	; Parity test
RHCLR:	.BLKB	.	; RH11 master clear
	.BLKB	.	; Input ready
	.BLKB	.	; Output ready
RHMDPE:	.BLKB	.	; MASSBUS data parity error
RHMXF:	.BLKB	.	; Missed transfer
RHPGE:	.BLKB	.	; Program error
RHNEM:	.BLKB	.	; Non-existent memory
RHNED:	.BLKB	.	; Non-existent drive
RHPE:	.BLKB	.	; Memory bus parity error
	.BLKB	.	; Write check error
RHDLT:	.BLKB	.	; Data late on memory bus

.BSECT	,NOCREF		; Common bits in RHDS

	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
RHDRY:	.BLKB	.	; Drive ready
RHDPR:	.BLKB	.	; Drive present
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
RHWRL:	.BLKB	.	; Write locked
RHMOL:	.BLKB	.	; Medium on-line
RHPIP:	.BLKB	.	; Positioning in progress
RHERR:	.BLKB	.	; Composite drive error
RHATA:	.BLKB	.	; ATTN active

.BSECT	,NOCREF		; Common bits in RHER

RHILF:	.BLKB	.	; Illegal function
RHILR:	.BLKB	.	; Illegal register
RHRMR:	.BLKB	.	; Register modification refused
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
	.BLKB	.	; Drive dependent
RHDTE:	.BLKB	.	; Drive timing error
RHOPI:	.BLKB	.	; Operation imcomplete
RHUNS:	.BLKB	.	; Unsafe
	.BLKB	.	; Drive dependent

.BSECT	HIGH,NOCREF	; Common bits in RHDT

	.BLKB	.	; Bit <8> of drive code
	.BLKB	.	; Reserved
RHSPR:	.BLKB	.	; Slave present
RHDRQ:	.BLKB	.	; Drive request required (dual port)
RH7CH:	.BLKB	.	; 7-channels
RHMOH:	.BLKB	.	; Moving heads
RHTAP:	.BLKB	.	; Tape
RHNSA:	.BLKB	.	; Not sector addressable

; Miscellaneous Common Equates

.EQUATE	TOYCSR,177526,NOCREF		; The KDJ11-E TOY clock CSR address ;120

.EQUATE	MEDSIZ,34,NOCREF		; Size of the "MED" code

.EQUATE N$G$$D,176771,NOCREF		; A general "bad address"

; General Kernel Mode Macros

.MACRO	CALLM	SUBR,XXXAP5
	CALLX	CALLM,R5,<SUBR,XXXAP5>
.DSABL	CRF
.GLOBL	SUBR,XXXAP5
.ENABL	CRF
.ENDM	CALLM

.MACRO	CALLMI	IADDR,XXXAP5
	CALLX	CALLMI,R5,<IADDR,XXXAP5>
.DSABL	CRF
.GLOBL	IADDR,XXXAP5
.ENABL	CRF
.ENDM	CALLMI

.MACRO	CALLMR	SUBR,XXXAP5
	CALLX	CALLMR,R5,<SUBR,XXXAP5>
.DSABL	CRF
.GLOBL	SUBR,XXXAP5
.ENABL	CRF
.ENDM	CALLMR

.MACRO	CALLBB	BBOFF
	CALLX	CALLBB,R5,<BBOFF>
.ENDM	CALLBB

.MACRO	JMPM	ADDR,XXXAP5
	CALLX	JMPM,R5,<XXXAP5,ADDR>
.DSABL	CRF
.GLOBL	XXXAP5,ADDR
.ENABL	CRF
.ENDM	JMPM

.MACRO	CALMCP	SUBR
	PUSH	<#SUBR>
	CALLX	CALMCP
.DSABL	CRF
.GLOBL	SUBR
.ENABL	CRF
.ENDM	CALMCP

.MACRO	MCPJMP	ADDR
	PUSH	<#ADDR>
	JMPX	MCPJMP
.DSABL	CRF
.GLOBL	ADDR
.ENABL	CRF
.ENDM	MCPJMP

.MACRO	GETUSR
	 MOVB	(R5),R2
	 INC	R5
.ENDM	GETUSR

.MACRO	PUTUSR
	 MOVB	R2,(R5)
	 INC	R5
.ENDM	PUTUSR

.MACRO	VECTOR	ORIGIN,ADDR=$$$$$$,PRN
.DSABL	CRF
$$$$$$	=	.
.ENABL	CRF
	TMPORG	LOWCOR,<ORIGIN>
	 .WORD	ADDR,PRN&4340	; Vector @ ORIGIN
	UNORG
.ENDM	VECTOR

.MACRO	DSKDEF	NAME,APR5
	TMPORG	NAME'DINT
.LIST

.NLIST
NAME'DINT:	JSR	R5,@#INTSVX	;; Call for interrupt saving
.IF	B	<APR5>
	 .WORD	DSKAP5		;;  using @ this PAR5 value
.IFF
	 .WORD	APR5		;;  using @ this PAR5 value
.ENDC
	 .WORD	INT$'NAME		;;   and going to here
.LIST

.NLIST
.ASSUME	.-NAME'DINT EQ QDS$OO
	.WORD	QDS$'NAME		; Entry for setting up a DSQ
.ASSUME	.-NAME'DINT EQ DQS$OO
	.WORD	DQS$'NAME		; Base queue root pointer
.ASSUME	.-NAME'DINT EQ UMR$OO
	.WORD	UMR$'NAME		; Entry for UMR freed up
.ASSUME	.-NAME'DINT EQ TMO$OO
	.WORD	TMO$'NAME		; Entry for timeouts
.ASSUME	.-NAME'DINT EQ DSKSIZ
.DSABL	CRF
.GLOBL	INTSVX,	DQS$'NAME
.IF	B	<APR5>
.GLOBL	DSKAP5
.IFF
.GLOBL	APR5
.ENDC
.ENABL	CRF
	UNORG
.ENDM	DSKDEF

.MACRO	SPL	PRI
	 BIS	#PR7,@#PS
.IF	NE	PRI-7
	 BIC	#^C<PRI>&7*40,@#PS
.ENDC
.ENDM	SPL

.MACRO	SPLC	PRI
	 MOV	#PR'PRI,@#PS
.ENDM	SPLC

.MACRO	MODE	INSTR,?A						;103+
	BIS	#30000,@#PS
	BIT	#100000,<SYSTAK-2>
	BNE	A
	BIC	#20000,@#PS
A:	INSTR
	BIS	#30000,@#PS
.ENDM	MODE								;103-


.MACRO	ERROR	CODE
.DSABL	CRF
.GLOBL	CODE
.ENABL	CRF
	 .WORD	TRAP+CODE
.ENDM	ERROR

.MACRO	CHKERR	CODE,SRC
.DSABL	CRF
.GLOBL	CODE
.ENABL	CRF
	 CMPB	SRC,#CODE
.ENDM	CHKERR

.MACRO	SETERR	CODE,DST,WORD
.DSABL	CRF
.GLOBL	CODE
.ENABL	CRF
.IF	B	<WORD>
	 MOVB	#CODE,DST
.IFF
	 MOV	#CODE,DST
.ENDC
.ENDM	SETERR

.MACRO	REGSCR
	CALLX	REGSCR,R5
.DSABL	CRF
TOS.R0	=	<0+1>*2
TOS.R1	=	<1+1>*2
TOS.R2	=	<2+1>*2
TOS.R3	=	<3+1>*2
TOS.R4	=	<4+1>*2
TOS.R5	=	<5+1>*2
TOS.RA	=	<6+1>*2
.ENABL	CRF
.ENDM	REGSCR

.MACRO	REGSAV	METHOD
.IF	IDN	<METHOD>,<INLINE>
	 MOV	R5,-(SP)
	 MOV	R4,-(SP)
	 MOV	R3,-(SP)
	 MOV	R2,-(SP)
	 MOV	R1,-(SP)
	 MOV	R0,-(SP)
.IFF
.IF	NB	<METHOD>
.ERROR	; Illegal argument "METHOD"
.ENDC
	CALLX	REGSAV,R5
.ENDC
.DSABL	CRF
TOS.R0	=	0*2
TOS.R1	=	1*2
TOS.R2	=	2*2
TOS.R3	=	3*2
TOS.R4	=	4*2
TOS.R5	=	5*2
TOS.PC	=	6*2
TOS.PS	=	7*2
.ENABL	CRF
.ENDM	REGSAV

.MACRO	REGRES
	 CALLX	REGRES,R5
.ENDM	REGRES

.MACRO	CRASH
	 .WORD	107		; Crash, noting "forced by software"
.ENDM	CRASH

; Kernel APR Mapping

.MACRO	$$$ERR
	 .ERROR		; Must specify "CODE" or "DATA" (or both).
.ENDM	$$$ERR

.MACRO $$$MAP ADDR,OFF,T1,T2,AP,D1,D2,D3,D4,DATA=N,CODE=N,PIC=N,POP,C,D,V
.IIF	IDN	<CODE'DATA>,<NN>	$$$ERR
.IF	B	<AP'V>
	 .ERROR		; Must specify an APR value.
	.MEXIT
.ENDC
.IF	NB	V
 .IF	NE	AP-V
	 .ERROR		; APR value must be AP if specified.
 .ENDC
.ENDC
.IF	B	<CODE'C>
	 MOV	ADDR,@#KISAR'AP
 .IF	NE	OFF
	 ADD	#OFF,@#KISAR'AP
 .ENDC	;OFF
.ENDC	;<CODE'C>
.IF	B	<DATA'D>
 .IF	NB	<PIC>
  .IF	B	<CODE'C'POP>
	 MOV	@#KISAR'AP,@DPAR'AP
  .IFF	;<CODE'C'POP>
	 MOV	ADDR,@DPAR'AP
   .IF	NE	OFF
	 ADD	#OFF,@DPAR'AP
   .ENDC ;OFF
  .ENDC	;<CODE'C'POP>
 .IFF	;<PIC>
  .IF	IDN	<T1>,<*>
	 .ERROR		; Register needed.
	.MEXIT
  .ENDC	;<T1>,<*>
	 MOV	@#DPAR'AP,T1
  .IF	B	<CODE'C'POP>
	 MOV	@#KISAR'AP,T2
  .IFF	;<CODE'C'POP>
   .IF	NE	OFF
	 MOV	ADDR,@0(SP)
	 ADD	#OFF,@(SP)+
   .IFF	 ;OFF
	 MOV	ADDR,T2
   .ENDC ;OFF
  .ENDC	;<CODE'C'POP>
 .ENDC	;<PIC>
 .DSABL	CRF
 .GLOBL	DPAR'AP
 .ENABL	CRF
.ENDC	;<DATA'D>
.ENDM	$$$MAP

.MACRO	$$$MPU	AP,D1,D2,D3,D4,DATA=N,CODE=N,PIC=N
.IIF	IDN	<CODE'DATA>,<NN>	$$$ERR
.IF	B	<AP>
	 .ERROR		; Must specify an APR value.
	.MEXIT
.ENDC
.IF	B	<DATA>
 .IF	B	<PIC>
	 MOV	@#DPAR'AP,-(SP)
	 MOV	@(SP)+,-(SP)
 .IFF	;<PIC>
	 MOV	@DPAR'AP,-(SP)
 .ENDC	;<PIC>
 .DSABL	CRF
 .GLOBL	DPAR'AP
 .ENABL	CRF
.ENDC	;<DATA>
.IF	B	<CODE>
	 MOV	@#KISAR'AP,-(SP)
.ENDC	;<CODE>
.ENDM	$$$MPU

.MACRO	$$$MPF	D1,D2,D3,DATA=N,CODE=N,PIC
.IF	IDN	<DATA'CODE>,<NN>
	CALLX	MAPFIP
.IFF
.IF	B	<DATA'CODE>
	CALLX	MAPFIP
.IFF
.IF	IDN	<DATA>,<N>
	MOV	@#FIPAP6,@#KISAR6
.GLOBL	FIPAP6
.IFF
	CALLX	MAPFPL
.ENDC
.ENDC
.ENDC
.ENDM	$$$MPF

.MACRO	MAP	ADDR,AA,BB,CC,OFFSET=0,R=*,APR
.IF	IDN	<ADDR>,<PUSH>
	$$$MPU	APR,AA=,BB=,CC=,REG
.IFF
 .IF	IDN	<ADDR>,<POP>
	$$$MAP  (SP)+,0,POP=Y,R,(R),APR,AA=,BB=,CC=
 .IFF
  .IF	IDN	<ADDR>,<FIP>
	$$$MPF	AA=,BB=,CC=
  .IFF
   .IF	IDN	<ADDR>,<FIPPOL>
	CALLX	MAPFPL
   .IFF
    .NTYPE	$$$$$0,ADDR
    .IF	EQ	$$$$$0-67
	$$$MAP  @#ADDR,OFFSET,-(SP),@(SP)+,APR,AA=,BB=,CC=
    .IFF
	$$$MAP  ADDR,OFFSET,-(SP),@(SP)+,APR,AA=,BB=,CC=
    .ENDC ;.NTYPE
   .ENDC ;<FIPPOL>
  .ENDC	;<FIP>
 .ENDC	;<POP>
.ENDC	;<PUSH>
.ENDM	MAP

.MACRO	MERGE	NAME,LENGTH,DVR
.IF	B	<LENGTH>
.IF	IDN	<NAME>,<END>
	ORG	MERG99
.IIF	LT	1000-$$$$$9,	.ERROR	; Prefix too big
	.BLKW0	1000-$$$$$9/2
.IFF
	ORG	MERGE
.IF	B	<NAME>
	.WORD	0
$$$$$9	=	2
.IFF
	.RAD50	/NAME/
.IIF	EQ	<.-MERGE-2>,	.RAD50	/AP5/
$$$$$9	=	4
.ENDC
$$$$$0	=	0
.ENDC
.IFF
.IIF	GE	$$$$$0-99.,	.ERROR	; Too many MERGE sections
.RADIX	10
.IRP	NUM,<\$$$$$0>
.RADIX	8
	ORG	MERG'NUM,0
.NLIST
	.WORD	0,0
.LIST
	ORG	MERG'NUM,0
.IF	DIF	<DVR>,<DRIVER>
	.RAD50	/$'NAME/
.IFF
	.RAD50	/NAME/
.ENDC
	ORG	MERG'NUM,4
.ENDR
$$$$$1	=	LENGTH+1&177776
.IF	B	<DVR>
	.WORD	$$$$$1
.IFF
.IF	IDN	<DVR>,<DRIVER>
	.WORD	$$$$$1!1
.IFF
	.WORD	-$$$$$1
.ENDC
.ENDC
	ORG	NAME
	.BLKW0	$$$$$1/2
$$$$$0	=	$$$$$0+1
$$$$$9	=	$$$$$1+6+$$$$$9
.ENDC
.ENDM	MERGE

; Memory Control Sub-Block

.DSECT	,NOCREF

M.PPRV:	.BLKW		; Pointer to previous entry in list +2
M.PNXT:	.BLKW		; Pointer to next entry in list
M.TSIZ:	.BLKW		; Size in k of this entry
M.SIZE:	.BLKB		; Size in k of active part of this entry
M.CTRL:	.BLKB		; Control/status byte
M.PHYA:	.BLKW		; Physical address /100
MCBSIZ:			; Size of the memory control sub-block in bytes

.BSECT	,NOCREF		; Control/status bits in M.CTRL

REQ:	.BLKB	.	; Residency requested
OUT:	.BLKB	.	; Swap out desired or in progress
IN:	.BLKB	.	; Swap in desired or in progress
SWP:	.BLKB	.	; Swap requested				;059
MC.LCK:	.BLKB	.	; # outstanding I/O's (locked) - bit 0		;059
	.BLKB	.	; # outstanding I/O's (locked) - bit 1		;059
	.BLKB	.	; # outstanding I/O's (locked) - bit 2		;059
	.BLKB	.	; # outstanding I/O's (locked) - bit 3		;059
.EQUATE	LCK,360,NOCREF	; LCK field definition				;059

; Offsets to memory control sub block in the various control blocks
; in the memory list

.DSECT	,NOCREF

ML.MON:	.BLKW		; Monitor, ODT, end-of-list
ML.XBF:	.BLKW		; XBUF
ML.LCK:	.BLKW		; Locked memory (by INIT or parity error)
ML.NXM:	.BLKW		; Non-existent memory
R.MCTL:
ML.RTS:	.BLKW		; Run-time system, resident library
	.BLKW		; Reserved
	.BLKW		; Reserved
	.BLKW		; Reserved
JDMCTL:
ML.USR:	.BLKW		; User job

; Fip Block Description Sub-Block

	.DSECT	,NOCREF
F.UNT:	.BLKB		; FIP unit number
F.FBNM:	.BLKB		; FIP block number (msb)
F.FBNL:	.BLKW		; FIP block number (lsb)
FBBSIZ:			; Size of the FIP block sub-block in bytes

; UNTCNT Table Status Bits

	.DSECT	1777,NOCREF
UC.CNT:	.BLKB		; Open (access) count
UC.WLO:	.BLKB	.	; Mounted write locked
UC.DLW:	.BLKB	.	; Date of last write
UC.NFS:	.BLKB	.	; Mounted non-file structured
UC.LCK:	.BLKB	.	; Unit is locked
UC.PRI:	.BLKB	.	; Mounted private
UC.MNT:	.BLKB	.	; Unit is not mounted

; Pack status flags (in pack label)

	.BSECT	HIGH,NOCREF
	.BLKB	.	; Reserved
UC.TOP:	.BLKB	.	; New files first
	.BLKB	.	; Reserved
UC.DLW:	.BLKB	.	; Maintain date of last write
UC.RO:	.BLKB	.	; Read-only pack
UC.NEW:	.BLKB	.	; "New" pack
UC.PRI:	.BLKB	.	; Pack is private/system
UC.MNT:	.BLKB	.	; Pack is mounted (dirty)

; Mount flags (in FQMODE in mount function)

	.BSECT	HIGH,NOCREF
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
UC.OVR:	.BLKB	.	; Override-packid check
UC.NSH:	.BLKB	.	; No-share
UC.ORO:	.BLKB	.	; Override-readonly pack
UC.WLK:	.BLKB	.	; Mount read-only
UC.PRI:	.BLKB	.	; Force private
	.BLKB	.	; Mode is real

; UNTOPT Table Status Bits

	.BSECT	,NOCREF
UO.CLN:	.BLKB	.	; Unit needs "cleaning"
UO.INI:	.BLKB	.	; Initializing a disk
	.BLKB	.	; Reserved					;049
UO.DP:	.BLKB	.	; Disk is dual-ported
UO.NCF:	.BLKB	.	; Don't disk cache directories
UO.NCD:	.BLKB	.	; Don't disk cache data
UO.WCF:	.BLKB	.	; Write check FIP writes
UO.WCU:	.BLKB	.	; Write check all writes
UO.NQT:	.BLKB	.	; No quota checking on this unit		;068
UO.TOP:	.BLKB	.	; Link to top					;049
	.BLKB	.	; Reserved					;049
	.BLKB	.	; Reserved					;049
	.BLKB	.	; Reserved					;049
	.BLKB	.	; Reserved					;049
	.BLKB	.	; Reserved					;049
	.BLKB	.	; Reserved					;049

; Job Data Structure.

; The job data structure consists of two parts:  the JDB, IOB, and
; work block (which are small buffers, and allocated dynamically),
; and the JDB2 (which may/need not be small-buffer-aligned, is assembled
; in TBL, and is therefore allocated statically).


; - JDB -   Main Job Data Block

.DSECT	,NOCREF

JDIOB:	.BLKW		; Pointer to the I/O block (IOB)
JDFLG:	.BLKW		; Job status flags
JDIOST:	.BLKB		; I/O status of job, error codes
JDPOST:	.BLKB		; Index for bit pattern to post
JDWORK:	.BLKW		; Pointer to job work block (WRK)
JDJDB2:	.BLKW		; Pointer into JBPPN table @ -J2PPN		;087
JDFLG2:	.BLKB		; More job status flags
JDJBNO:	.BLKB		; Job's job # * 2				;087
JDRTS:	.BLKW		; Pointer to run-time system block (RTS)
JDRESQ:	.BLKW		; Job's residency quantum
JDMCTL:	.BLKB	MCBSIZ	; Job's memory control area
JDRESB:	.BLKW		; L3 Queue bit to set upon residency
JDFLG3:	.BLKW		; Even more job flags				;087
JDFLG4:	.BLKW		; And more job flags				;087

.EQUATE	JDSIZE,JDMCTL+M.SIZE,NOCREF ;Job's current size in kW

J2PPN	=:	24.	; Add this value to JDJDB2 to get PPN address	;087

; - IOB -   I/O Block

; This block points to each of the user's possible 16. channels.

; - WRK -   Job Work Block

; This is a scratch work block.

; Layout of the Job Control Region (JCR)

.DSECT	,NOCREF								;087

PRIVSZ	=:	6	; Number of privilege mask bytes		;070

JCCEPC:	.BLKW		;Complex EMT saved PC				;087
JCCER1:	.BLKW		;Complex EMT saved R1				;087
JCCEAP:	.BLKW		;Complex EMT saved APR5 (for both I&D space)	;087
JCCPU:	.BLKW		;CPU time collected for job			;087
JCCON:	.BLKW		;Connect time collected for job			;087
JCKCT:	.BLKW		;Kilo-Core-Tick's collected for job		;087
JCDEV:	.BLKW		;Device time collected for job			;087
JCKCTM:	.BLKB		;MSB of Kilo-Core-Tick's collected for job	;087
JCCPUM:	.BLKB		;MSB of CPU time collected for job		;087
JCNAME:	.BLKW	2	;Job's program name				;087
JCDRTS:	.BLKW		;Pointer to default run-time system for job	;087
JCPRIV:	.BLKB	PRIVSZ	;Current privilege mask				;087
JCSPRV:	.BLKB	PRIVSZ	;Saved privilege mask				;087
JCAPRV:	.BLKB	PRIVSZ	;Authorized privilege mask			;087
JCALPV:	.BLKB	PRIVSZ	;Alternate privilege mask for privilege checks	;087
JCALPP:	.BLKW		;Alternate PPN for privilege checks		;087
JCSIZN:	.BLKB		;Size for job be upon next residency		;087
JCAPRM:	.BLKB		;D-apr protection mask				;108
JCPRI:	.BLKB		;Job's priority (-128.<=127. [Best])		;087
JCBRST:	.BLKB		;Job's runnable burst				;087
JCSIZM:	.BLKB		;Job's private memory maximum			;087
JCSWAP:	.BLKB		;Job's swap parameter				;087
JCMPTR:	.BLKW		;Pointer to job's 1st receiver ID block (RIB)	;087
JCISIZ:	.BLKB		;Jobs I space allocation			;087
JCDSIZ:	.BLKB		;Jobs D space allocation			;087
JCUFDR:	.BLKW		;Retrieval pointer to job's system disk UFD	;087
JCWPTR:	.BLKW		;Pointer to job's window descriptor block (WDB)	;087
JCHDRS:	.BLKB		;Job header size				;087
JCEXST:	.BLKB		;Job's exit status				;087
JCPFB:	.BLKW	16.	;Job's 16 permenant files			;087
JCASTQ:	.BLKW		;Link to first pending asynchronous completion	;087
JCASTT:	.BLKW		;Link to last completion (or JCASTQ)		;087
JCASTS:	.BLKW		;Pointer to AST block for simulated Asynch I/O	;087
JCCLOK:	.BLKW		;Job's sleep timer				;087
JCDCLW:	.BLKW		;DCL context word				;090
JCAUXB:			;Beginning of "auxiliary (BUFHDR'ed) buffer" pointers ;087
JCCMDL:			;Pointer to command line buffer			;087
JCSPWN:	.BLKW		;Pointer to SPAWN process control area		;087

JCFXSZ:			;End of fixed (for-all-systems) JCR definitions ;087
			;Further static entries are defined in TBL.MAC.	;087
			;INIT.SYS will use the size fro TBL, plus any	;087
			;dynamic entries, to compute the size of the	;087
			;JCR and set up the region correctly. Monitor	;087
			;routines will generally use the value stored	;087
			;at JCRSIZ.					;087

; Job Flag (JDFLG) Assignments

.BSECT	,NOCREF

JFPOST:	.BLKB	.	; Check 'JDPOST' for posting information
JFIOKY:	.BLKB	.	; Post the I/O status ('JDIOST') and keyword
JFCEMT:	.BLKB	.	; Let complex EMT handling catch job posting
JFCC:	.BLKB	.	; ^C typed by user
JF2CC:	.BLKB	.	; 2 quick control-C's typed by user
JFPPT:	.BLKB	.	; FPP exception trap handler needed
JFGO:	.BLKB	.	; Forcing job (no I/O re-do)
JFREDO:	.BLKB	.	; Re-do the I/O condition
JFSYST:	.BLKB	.	; Temporary privileges possible
JFFPP:	.BLKB	.	; Save/restore async FPP context
JFPRIV:	.BLKB	.	; Job has permanent privileges active
JFSYS:	.BLKB	.	; Job has temporary privileges active
JFASTD:	.BLKB	.	; Job has AST completion routine to be delivered ;067
JFBIG:	.BLKB	.	; Job can exceed its private memory maximum
JFLOCK:	.BLKB	.	; Job is not to be swapped
JFSPCL:	.BLKB	.	; Special condition (check 'JDFLG2')


; Job Flag 2 (JDFLG2) Assignments (with 'JFSPCL')

.BSECT	,NOCREF

JFCTXT:	.BLKB	.	; Preserve the job's context
JFPRTY:	.BLKB	.	; Parity fault
JFRUN:	.BLKB	.	; RUN entry
JFSWPR:	.BLKB	.	; Run-time system/resident library swap (load) error
JFSTAK:	.BLKB	.	; SP stack overflow
JFSWPE:	.BLKB	.	; Swap error for job
JFDINI:	.BLKB	.	; Job's data space needs initialization		;097
JFKILL:	.BLKB	.	; Kill this job after cleanup


; Extended Job Flag (JDFLG3) Assignments                                   ;099

.BSECT	,NOCREF

J2FSPW:	.BLKB	.	; Job is being spawned (logged-in)
J2BAT:	.BLKB	.	; This is a batch job				;058
J2NET:	.BLKB	.	; This is a network (NPKDVR) job		;058
J2KIL2:	.BLKB	.	; Job is in the second phase of kill		;097
J2IHDR:	.BLKB	.	; Job header needs initialization		;036
J2CAPT:	.BLKB	.	; Running in captive account			;064
J2PRVP:	.BLKB	.	; Privileged program running (JFSYS is/was set)	;064
J2ICF:	.BLKB	.	; Job's command file is enabled			;053
J2VFY:	.BLKB	.	; Verification mode in effect (ICF)		;057
J2NDAT:	.BLKB	.	; No-data mode in effect (ICF)			;057
J2SYSV:	.BLKB	.	; System password has been validated		;058
J2ASTA:	.BLKB	.	; AST routine active				;069
J2ASTD:	.BLKB	.	; AST delivery disabled				;069
J2NCHO:	.BLKB	.	; No-echo flag (ICF)				;077
J2NERR:	.BLKB	.	; No-warnings/errors (goes with J2NCHO)		;077
J2LOG:	.BLKB	.	; Log file is enabled				;053

; Additional extended job flags (JDFLG4)				;099

.BSECT  ,NOCREF								;099

JDFSTM: .BLKB   .       ; Fast Map is enabled for this job		;099
J41ASY:	.BLKB	.	; 1 Asynch I/O has been issued without TUNE	;119
	.BLKB	.	; Reserved					;079
	.BLKB	.	; Reserved					;079
	.BLKB	177720	; Reserved					;080
J2SLAP:	.BLKB		; Pointer to SLA library, if any		;080

; Define layout of job mapping flags (JCMFLG)

.BSECT	,NOCREF

	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
	.BLKB	.	; Reserved					;097
JM.UDS:	.BLKB	.	; Job is using user mode I&D space		;097
	.BLKB	.	; Map Super D 1 = Super I 1 instead of User D 1	;097
	.BLKB	.	; Map Super D 2 = Super I 2 instead of User D 2	;097
	.BLKB	.	; Map Super D 3 = Super I 3 instead of User D 3	;097
	.BLKB	.	; Map Super D 4 = Super I 4 instead of User D 4	;097
	.BLKB	.	; Map Super D 5 = Super I 5 instead of User D 5	;097
	.BLKB	.	; Map Super D 6 = Super I 6 instead of User D 6	;097
	.BLKB	.	; Map Super D 7 = Super I 7 instead of User D 7	;097
JM.SIS:	.BLKB	.	; Job is using supervisor mode			;097

; Define layout of Mapping Description Entry (MDE)

; A mapping description entry describes the way to set up user job
; mapping. There is one MDE per APR. Eight MDEs are allocated in the
; static part of the JCR (for user mode I-space mapping). For systems
; with I&D space, an additional 16 MDEs are allocated (for user mode
; data space and supervisor mode instruction space).

.DSECT	,NOCREF

MDADDR:	.BLKW		; Pointer to base address (M.PHYA) to map	;097
MDOFF:	.BLKW		; Offset from base address			;097
MDDESC:	.BLKW		; Value to load into description register	;097
MDSIZE:			; Size of entry, in bytes			;097

; Define offsets from JCMDE for each set of MDEs

.DSECT	,NOCREF

MOUSRI:	.BLKB	8.*MDSIZE ; User mode I-space MDEs			;097
MOUSRD:	.BLKB	8.*MDSIZE ; User mode D-space MDEs			;097
MOSUPI:	.BLKB	8.*MDSIZE ; Supervisor mode I-sapce MDEs		;097

; Privilege flags							;036

;+									;046
;	**********  NOTE  ***********					;046
;									;046
;	If the table of privileges below is changed, the		;046
;	corresponding table in module PRV.MAC must also be changed.	;046
;-									;046

.MACRO	PRIV	NAME							;036
.IF	GE	$$$$$$-PRIVSZ
.ERROR	; Privilege NAME does not fit
.ENDC
O'NAME	=:	$$$$$$
P'NAME	=:	$$$$$0
.IRP	NUM,<\$$$$$$/2>
..PRW'NUM	=	..PRW'NUM ! $$$$$0
.ENDR
.IF	LT	$$$$$0
$$$$$0	=	1
$$$$$$	=	$$$$$$ + 2
.IFF
$$$$$0	=	$$$$$0 * 2
.ENDC
.ENDM	PRIV								;036

$$$$$$	=	0							;036
$$$$$0	=	1							;036
..PRW0	=	0							;070
..PRW1	=	0							;070
..PRW2	=	0							;070
..PRW3	=	0							;070

	PRIV	GACNT		;Group accounting functions		;056
	PRIV	WACNT		;World accounting functions		;056
	PRIV	GREAD		;Read any file in group			;056
	PRIV	GWRITE		;Write any file in group		;056
	PRIV	WREAD		;Read any file anywhere			;056
	PRIV	WWRITE		;Write any file anywhere		;056
	PRIV	DATES		;Set system or file dates		;070
	PRIV	DEVICE		;Access restricted devices		;070
	PRIV	EXQTA		;Exceed quotas				;036
	PRIV	HWCFG		;Set hardware configuration data	;070
	PRIV	HWCTL		;Do hardware operational control	;070
	PRIV	INSTAL		;Install runtime systems etc.		;070
	PRIV	JOBCTL		;Control job parameters			;070
	PRIV	MOUNT		;Mount disks other than noshare		;070
	PRIV	PBSCTL		;Print/Batch services operational ctl	;070
	PRIV	RDMEM		;Read memory (except I/O page)		;070
.ASSUME	$$$$$0 EQ 1							;036
.ASSUME	$$$$$$ EQ 2		;Next 8 definitions must stay put	;036
	PRIV	USER1		;Customer defined number 1		;036
	PRIV	USER2		;Customer defined number 2		;036
	PRIV	USER3		;Customer defined number 3		;036
	PRIV	USER4		;Customer defined number 4		;036
	PRIV	USER5		;Customer defined number 5		;036
	PRIV	USER6		;Customer defined number 6		;036
	PRIV	USER7		;Customer defined number 7		;036
	PRIV	USER8		;Customer defined number 8		;077
				;End of customer defined bits		;036
	PRIV	RDNFS		;Read non-file-structured disk		;070
	PRIV	SEND		;Send to restricted receiver		;070
	PRIV	SETPAS		;Set own password			;070
	PRIV	SHUTUP		;Shut down the system			;070
	PRIV	SWCFG		;Set software configuration data	;070
	PRIV	SWCTL		;Software operational control		;070
	PRIV	SYSIO		;Access files in [0,*]			;070
	PRIV	SYSMOD		;Modify the system (poke etc.)		;070
	PRIV	TUNE		;Set tuning parameters			;070
	PRIV	WRTNFS		;Write non-file-structured disk		;070
	PRIV	TMPPRV		;Make program privileged		;081
	PRIV	OPER		;Operator privileges			;118

; Macro for manipulating privileges

.MACRO	PRVBIT	LIST,SYM0,SYM1						;036
SYM0	=	0
SYM1	=	0
.IRP	BIT,<LIST>
.IF	EQ	SYM1
SYM0	=	O'BIT
SYM1	=	P'BIT
.IFF
.IF	NE	SYM0-O'BIT
.ERROR	SYM0	; Privilege BIT is in wrong word
.IFF
SYM1	=	SYM1 ! P'BIT
.ENDC
.ENDC
.ENDR
.ENDM	PRVBIT								;036

.MACRO	PRVOP	OPCODE,LIST,WHERE					;036
PRVBIT	<LIST>,$$$$$$,$$$$$0
.IF	EQ	$$$$$$
	 OPCODE	#$$$$$0,WHERE
.IFF
.NTYPE	$$$$$1,WHERE
.IF	EQ	<$$$$$1 & 67> - 67
	 OPCODE	#$$$$$0,WHERE+$$$$$$
.IFF
.IF	EQ	$$$$$1-37
	 OPCODE	#$$$$$0,WHERE+$$$$$$
.IFF
.IF	EQ	<$$$$$1 & 70> - 60
	 OPCODE	#$$$$$0,$$$$$$+WHERE
.IFF
.IF	EQ	<$$$$$1 & 70> - 10
	 OPCODE	#$$$$$0,$$$$$$'WHERE
.IFF
.ERROR	; Improper argument "WHERE"
.ENDC
.ENDC
.ENDC
.ENDC
.ENDC
.ENDM	PRVOP								;036

.MACRO	TSTPRV	LIST,WHERE						;036
	PRVOP	BIT,<LIST>,WHERE
.ENDM	TSTPRV								;036

.MACRO	CLRPRV	LIST,WHERE						;036
	PRVOP	BIC,<LIST>,WHERE
.ENDM	CLRPRV								;036

.MACRO	SETPRV	LIST,WHERE						;036
	PRVOP	BIS,<LIST>,WHERE
.ENDM	SETPRV								;036

.MACRO	.BPRIV	LIST							;046
PRVBIT	<LIST>,$$$$$$,$$$$$0
.IF	NE	$$$$$0 & 177400
.IIF	NE	$$$$$0 & 377, .ERROR ; LIST mixes low and high bytes
	 .BYTE	$$$$$$+1,<$$$$$0/400>&377
.IFF
	 .BYTE	$$$$$$,$$$$$0
.ENDC
.ENDM	.BPRIV								;040

; Auxiliary Buffer-Pointer Flag Values

.DSECT	177640,NOCREF	; 177640 - 177777 cannot be any kind of buffer address

ABFLGS:			; Auxiliary-buffer "pointers" > this are "flags"
EMLNLG:	.BLKB		; EMT Logger's "do not log" flag (for J2EMLP)

; Level 3 Queue (L3Q) Bit Assignments

;    From highest priority to lowest priority

.MACRO L3QBIT Name	;Define L3Q offset,bits and position	;051
O'Name =: $$$$$0						;051
B'Name =: $$$$$1						;051
P'Name =: $$$$$2 * 2	;position for L3QENT			;051
$$$$$2 = $$$$$2 + 1						;051
.IF	EQ	200-$$$$$1					;051
	$$$$$1 = 1						;051
	$$$$$0 = $$$$$0 + 1					;051
.IFF								;051
	$$$$$1 = $$$$$1 * 2					;051
.ENDC								;051
.ENDM	L3QBIT							;051
								;051
$$$$$0 = 0							;051
$$$$$1 = 1							;051
$$$$$2 = 0							;051
								;051
	L3QBIT	QFAST	;Fast I/O driver			;051
	L3QBIT	QPHCON	;**** I/O drivers ****			;051
	L3QBIT	QKBFMS						;051
	L3QBIT	QKBTIC						;071
	L3QBIT	QRJIDL						;051
	L3QBIT	QFRAME	;End of frame processing		;098
	L3QBIT	QXMDNE						;051
	L3QBIT	QXDDNE						;051
	L3QBIT	QXECON						;089
	L3QBIT	QXHCON						;089
	L3QBIT	QMTCON						;051
	L3QBIT	QMTDNE						;051
	L3QBIT	QMMCON						;051
	L3QBIT	QMMDNE						;051
	L3QBIT	QMSDNE						;051
	L3QBIT	QMSCON						;051
	L3QBIT	QMUDNE						;082
	L3QBIT	QMUCON						;082
	L3QBIT	QDTFIP						;051
	L3QBIT	QDTDNE						;051
	L3QBIT	QDTRES						;051
	L3QBIT	QDXCON						;051
	L3QBIT	QNODNE	;NO driver L3Q bit			;104
	L3QBIT	QTST1	;Debugging L3Q bit #1			;090
	L3QBIT	QTST2	;Debugging L3Q bit #2			;090
	L3QBIT	QBUFRT	;Return buffers to system processes	;051	
	L3QBIT	QTST3	;Debugging L3Q bit #1			;090
	L3QBIT	QTST4	;Debugging L3Q bit #1			;090
	L3QBIT	QMTBUF	;Unstall MTU buffer wait		;066
	L3QBIT	QTIMER	;Once a second, every second timer service ;051
	L3QBIT	QLAT	;LAT completion processing		;107
	L3QBIT	QCACHE	;Disk caching completion		;051
	L3QBIT	QBGBUF	;Unstall big buffer waits		;051
	L3QBIT	QUMR	;Unstall UNIBUS mapping register waits	;051
	L3QBIT	QSWAPC	;Swap completion  			;051
	L3QBIT	QFIP	;FIP completion/continue		;051
	L3QBIT	QWTDNE	;Window turn disk I/O completion	;083
	L3QBIT	QTRN	;DECnet transport phase completion/continue ;051
	L3QBIT	QNSP	;NSP completion/continue		;051
	L3QBIT	QFILE	;User disk file I/O completion		;051
	L3QBIT	QPFB	;Permanent file I/O completion processing ;051
	L3QBIT	QDUMP	;Force a job not to be "JOB" (before)	;051
	L3QBIT	QBRING	;Run the memory manager			;051
	L3QBIT	QSCHED	;Schedule the scheduler			;051
	L3QBIT	QFORCE	;Force a job not to be "JOB" (after)	;051

L3QSIZ =: $$$$$2 * 2		;L3Q table SIZe in bytes	;051
L3QLEN =: <$$$$$2 + 17>/20	;L3Q LENgth in words		;051

; Level 3 Queue (L3Q) Macros

.MACRO	L3QENT	Name,Addr=$$$$$$,LOPAR5					;051
.DSABL	CRF								;051
$$$$$$	=	.							;051
	TMPORG	L3QPAR,P'Name						;051
.ENABL	CRF								;051
.IF	B	<LOPAR5>						;051
.ERROR	; PAR5 value must be specified					;051
.ENDC									;051
	  .WORD	  LOPAR5	  ;Load L3QPAR with LOPAR5
.DSABL	CRF								;051
	TMPORG	L3QTBL,P'Name						;051
.ENABL	CRF								;051
	  .WORD	  Addr	 	  ;Load L3QTBL for Name	
	UNORG
.ENDM	L3QENT								;051



.MACRO	L3QSET	Name,Loc=L3QUE 	;Set L3Q bit				;051
.DSABL	CRF								;051
.GLOBL	Loc								;051
.ENABL	CRF								;051
	  BISB	  #B'Name,@#O'Name+Loc				
.ENDM	L3QSET								;051


.MACRO	.L3Q	Name 		  ;Define an L3Q word as		;051
	  .BYTE	  B'Name,O'Name		  ; high byte = offset,low byte = bit
.ENDM	.L3Q								;051


; JBWAIT/JBSTAT Assignments

.BSECT	,NOCREF

JS.SY:	.BLKB	.	; Disks (and other non-interruptables)
JS.KB:	.BLKB	.	; Terminal input
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
	.BLKB	.	; Reserved for I/O drivers
JSTEL:	.BLKB	.	; Terminal output
JSFIP:	.BLKB	.	; File processor
JSTIM:	.BLKB	.	; Waiting for some timeout
JSBUF:	.BLKB	.	; Waiting for small buffer(s)
	.BLKB	.	; Reserved

; Error Logging Definitions

.DSECT	+EMT,NOCREF

LOG$CK:	.BLKW		; Log error declared by a run-time system
LOG$J0:	.BLKW		; Log error since jump to 0
LOG$UI:	.BLKW		; Log error from trap to ?? (unexpected interrupt)
LOG$T4:	.BLKW		; Log error from trap to 4 (odd address, etc.)
LOG$RI:	.BLKW		; Log error from trap to 10 (reserved instruction)
LOG$PF:	.BLKW		; Log error from trap to 24 (power failure)
LOG$PA:	.BLKW		; Log error from trap to 114 (parity error)
LOG$KT:	.BLKW		; Log error from trap to 250 (memory management)
LOG$CP:	.BLKW		; Log error from Software detected Cache problem ;111
LGDSKS:				; *** Start Of Disk Group ***
LOG$DV:	.BLKW		; Place holder for the Virtual Disk		;052
LOG$DF:	.BLKW		; Log error from DF disk driver
LOG$DS:	.BLKW		; Log error from DS disk driver
LOG$DK:	.BLKW		; Log error from DK disk driver
LOG$DM:	.BLKW		; Log error from DM disk driver
LOG$DP:	.BLKW		; Log error from DP disk driver
LOG$DR:	.BLKW		; Log error from DR disk driver
LOG$DB:	.BLKW		; Log error from DB disk driver
LOG$DL:	.BLKW		; Log error from DL disk driver
LOG$DU:	.BLKW		; Log error from UDA50 controller
LOG$DZ:	.BLKW		; Log error from DZ (GPK RX50) controller	;098
LOG$DW:	.BLKW		; Log error from DW (GPK RX5x) controller	;098
LGDSKE:				; *** End Of Disk Group ***
LOG$KB:	.BLKW		; Log error for terminals			;101
LOG$SZ	=	.&377	; Size of ERRTBL in bytes

; Error Logging Entry Point Macro

.MACRO	ERRENT	CODE,ADDR=$$$$$$
.DSABL	CRF
$$$$$$	=	.
	TMPORG	ERRTBL,CODE-EMT
.ENABL	CRF
	 .WORD	ADDR		; Load ERRTBL for CODE
	UNORG
.ENDM	ERRENT

; Error Log External Codes

.DSECT	,NOCREF

.IIF	NE	.-0, .ERROR ; CPU group doesn't start at 0
ERC$XX:	.BLKB		; Missed error
ERC$CK:	.BLKB		; Run-time system declared error
ERC$J0:	.BLKB		; Jump to 0
ERC$UI:	.BLKB		; Trap to ??
ERC$T4:	.BLKB		; Trap to 4
ERC$RI:	.BLKB		; Trap to 10
ERC$PF:	.BLKB		; Trap to 24 (or start up)
ERC$PA:	.BLKB		; Trap to 114
ERC$KT:	.BLKB		; Trap to 250
ERC$CP:	.BLKB		; software detected cache problem		;111
	.BLKB		; Reserved
	.BLKB		; Reserved
.IIF	NE	.-14, .ERROR ; Disk group doesn't start at 14
ERC$DV:	.BLKB		; Place holder for the Virtual Disk		;052
ERC$DF:	.BLKB		; RF11/RS11 disk
ERC$DS:	.BLKB		; RH11/RS03/RS04 disk
ERC$DK:	.BLKB		; RK11/RK05 disk
ERC$DM:	.BLKB		; RK611/RK06/RK07 disk
ERC$DP:	.BLKB		; RP11/RP02/RP03 disk
ERC$DR:	.BLKB		; RH11/RM02/RM03 disk
ERC$DB:	.BLKB		; RH11/RP04/RP05/RP06 disk
ERC$DL:	.BLKB		; RL11/RL01/RL02 disk
ERC$DU:	.BLKB		; UDA50
ERC$DZ:	.BLKB		; DZ (GPK RX50)					;098
ERC$DW:	.BLKB		; DW (GPK RD5x)					;098
.IIF	NE	.-30, .ERROR ; Device group doesn't start at 30
ERC$KB:	.BLKB		; Terminals
ERC$DT:	.BLKB		; DECtape
ERC$LP:	.BLKB		; Line printers
ERC$PR:	.BLKB		; Paper tape reader
ERC$PP:	.BLKB		; Paper tape punch
ERC$CR:	.BLKB		; CR11/CM11 card reader
ERC$CD:	.BLKB		; CD11 card reader
ERC$MT:	.BLKB		; TM11/TU10 magtape
ERC$MM:	.BLKB		; RH11/TM02/TU16 magtape
ERC$DX:	.BLKB		; RX11/RX211 floppy disk
ERC$XM:	.BLKB		; DMC11 NPR line interface
ERC$RJ:	.BLKB		; RJ2780
ERC$XY:	.BLKB		; X-Y plotter
	.BLKB		; Reserved.					;114
ERC$MS:	.BLKB		; TS11/TS04 magtape
ERC$DD:	.BLKB		; TU58 DECtape II
ERC$XD:	.BLKB		; DMP11/DMV11 NPR muti-drop line interface
ERC$MU:	.BLKB		; TMSCP (TK50/TU81) magtape			;082
ERC$XE:	.BLKB		; UNA						;092
ERC$XH: .BLKB		; QNA						;092

; Run-Time System Description Block (RTS)

.DSECT	,NOCREF

R.LINK:	.BLKW		; Pointer to next RTS
R.NAME:	.BLKW	2	; 2 word RAD50 RTS name
R.DEXT:	.BLKW		; Default extension for RTS's runnable images
R.MCTL:	.BLKB	MCBSIZ	; Memory control area
R.DATA:	.BLKB	FBBSIZ	; FUN and FBN of file data (i.e. the RTS)
R.FILE:	.BLKB	FBBSIZ	; N.E. offset (/2) and FBN of UFD for file
R.CNT:	.BLKW		; Access and residency counts
R.SIZE:	.BLKB		; Maximum legal job image size in K
R.MSIZ:	.BLKB		; Minimum legal job image size in K
R.FLAG:	.BLKW		; Run-time system flags

.EQUATE	R.KSIZ,R.MCTL+M.SIZE,NOCREF ; RTS size in K

.BSECT	HIGH,NOCREF	; Flag bits in R.FLAG

PF.KBM:	.BLKB	.	; Run-time system is a keyboard monitor
PF.1US:	.BLKB	.	; Only 1 user allowed
PF.RW:	.BLKB	.	; Map run-time system read/write
PF.NER:	.BLKB	.	; Don't error log this run-time system
PF.REM:	.BLKB	.	; Unconditional remove from memory on exit
PF.CSZ:	.BLKB	.	; Run size is computed from file size
PF.SLA:	.BLKB	.	; Save the load address (M.PHYA)
PF.EMT:	.BLKB	.	; Special EMT handling

; Resident Library Description Block (LIB)

.DSECT	,NOCREF

R.LINK:	.BLKW		; Pointer to next resident library
R.NAME:	.BLKW	2	; 2 word RAD50 resident library name
L.PPN:	.BLKW		; Resident library's owning PPN
R.MCTL:	.BLKB	MCBSIZ	; Memory control area
R.DATA:	.BLKB	FBBSIZ	; FUN and FBN of file data (i.e. the library)
R.FILE:	.BLKB	FBBSIZ	; N.E. offset (/2) and FBN of UFD for file
R.CNT:	.BLKW		; Attach and map counts
L.STAT:	.BLKB		; Library's status
L.PROT:	.BLKB		; Library's protection code
R.FLAG:	.BLKW		; Resident library flags

.EQUATE	R.KSIZ,R.MCTL+M.SIZE,NOCREF ; Resident library size in K

.BSECT	,NOCREF		; Flag bits in L.STAT

	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
LS.NPC:	.BLKB	.	; Region created non-privileged			;113
LS.UFL:	.BLKB	.	; Unrestricted Floating Library
LS.DYN:	.BLKB	.	; This is a dynamic region			;055
LS.LIB:	.BLKB	.	; Resident library block

; Receiver ID block (RIB)

.DSECT	,NOCREF

S.LINK:	.BLKW		; Link to next block
S.RCID:	.BLKB	6	; Receiver id in ascii
S.JBNO:	.BLKB		; Job number times 2
S.OBJT:	.BLKB		; Object type
S.ACCS:	.BLKB		; Access control
S.SRBN:	.BLKB		; Sub RIB number
S.BMAX:	.BLKW		; Buffer maximum in bytes
S.MMAX:	.BLKB		; Message maximum
S.MCNT:	.BLKB		; Message count
S.MLST:	.BLKW	2	; Message list root/tail pointers
S.LMAX:	.BLKB		; Link maximum
S.LCNT:	.BLKB		; Link count
S.LLST:	.BLKW	2	; Link list root/tail pointers
S.OMAX:	.BLKB		; Outgoing link max
S.PQTA:	.BLKB		; Packet-per-message quota
	.BLKW	2	; Reserved for networks


.DSECT	,NOCREF		; Pending message block (PMB)

P$LINK:	.BLKW		; Link to next block
P$BUFA:	.BLKW		; "Contorted" buffer address
P$TYPE:	.BLKB		; Message type code
P$SNDR:	.BLKB		; Job number times 2 of sender
P$SPPN:	.BLKW		; PPN of sender
P$SKBN:	.BLKB		; KB# of sender or 255 if sender detached
	.BLKB		; Reserved
P$BREM:	.BLKW		; Bytes remaining in data message
P$PARM:	.BLKB	20.	; 20. bytes of parameters

; S.OBJT - Object Type definitions for local receivers

.DSECT	,NOCREF		;   "One-Instance" Local Object Types

	.BLKB		; Zero is "normal" (un-typed) for local receiver
SO.ERL:	.BLKB		; Error Logger (ERRLOG)
SO.EML:	.BLKB		; EMT Logger
SO.QM:	.BLKB		; Queue Manager
SO.SRV:	.BLKB		; Queue Manager -> Server LOT			;116
SO.URP:	.BLKB		; User Request Packet service program		;067
SO.OQM:	.BLKB		; Old Queue manager				;070
SO.2QM:	.BLKB		; Second queue manager				;072
SO.2SR:	.BLKB		; Second queue manager -> server LOT		;116
SO.2UR:	.BLKB		; Second URP service progam			;072
SO.NTR:	.BLKB		; DECnet datalink tracer program		;073
SO.OMS:	.BLKB		; Operator/Message Services			;116
SO.1MX	  =	.-1	; Maximal one-instance local object type

.DSECT	100,NOCREF	;   "Multiple-Instance" Local Object Types

SO.MMN:			; Minimal multiple-instance Local Object Type
SO.INI:	.BLKB		; Disk-Initializer program
SO.PRT:	.BLKB		; Print spooler					;044
SO.BAT:	.BLKB		; Batch spooler					;044
SO.MMX	  =	.-1	; Maximal multiple-instance Local Object Type


.BSECT	HIGH,NOCREF	; Flag bits in LOTFLG words

EMLNVR: .BLKB	.	; Never EMT-log for this type of job
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved						       ;027-


.BSECT	,NOCREF		; Bits in S.ACCS

SA.LCL:	.BLKB	.	; Allow local senders
SA.PRV:	.BLKB	.	; Allow only privileged local senders
SA.NET:	.BLKB	.	; Allow network senders
SA.1SH:	.BLKB	.	; Network single link mode
SA.NCS:	.BLKB	.	; No conditional sleep check on this RIB
SA.SLB:	.BLKB	.	; Some link may be backpressured off		;093
SA.EVT:	.BLKB	.	; This is the DECnet event logger
SA.XOF:	.BLKB	.	; Further local sends are 'XOFFed'

SA.NLC	  =	^C<SA.LCL!SA.PRV!SA.NCS!SA.XOF>	; These bits mean "not Local"

.DSECT	128.,NOCREF		; Sub-RIB number assignments

RMS1:	.BLKB		; +128. Used by RMS
RMS2:	.BLKB		; +129.   "   "  "
RMS3:	.BLKB		; +130.   "   "  "
RMS4:	.BLKB		; +131.   "   "  "
RMS5:	.BLKB		; +132.   "   "  "
RMS6:	.BLKB		; +133.   "   "  "
RMS7:	.BLKB		; +134.   "   "  "
RMS8:	.BLKB		; +135.   "   "  "
RMS9:	.BLKB		; +136.   "   "  "
RMS10:	.BLKB		; +137.   "   "  "
RMS11:	.BLKB		; +138.   "   "  "
RMS12:	.BLKB		; +139.   "   "  "
RMS13:	.BLKB		; +140.   "   "  "
RMS14:	.BLKB		; +141.   "   "  "
RMS15:	.BLKB		; +142.   "   "  "
DEBG11:	.BLKB		; +143. DEBUG-11
RDCI:	.BLKB	32.	; +144. Remote Datatrieve Call Interface
			; +176. Next available RIB number

; EMT Logging Control Cells							       ;032+

.DSECT	,NOCREF

; EMLTBL::

EMLRPQ:	.BLKW			; Remaining quota for pending packets
EMLSEQ:	.BLKW			; Running packet sequence counter
EMLLND:	.BLKW			; End of packet list
EMLLST:	.BLKW			; Root of packet list
EMLBRM:	.BLKW			; Count of bytes in pending packets
EMLPKC:	.BLKW			; Count of pending packets
EMLMSD:	.BLKW			; Missed count
EMLTSZ:				; Size of EMT Logger's control table
										       ;032-

; Window Descriptor Block (WDB)

.DSECT	,NOCREF

W.LINK:	.BLKW		; Link to next WDB @ offset+2
W.ALIB:	.BLKW	5	; Attached library(s) and flags
W.WIN1:	.BLKW	5	; Address window #1
W.WIN2:	.BLKW	5	; Address window #2

.EQUATE	W.SIZE,W.WIN2-W.WIN1,NOCREF ; Size of one window slot

.DSECT	,NOCREF		; Offsets within an address window

W$NAPR:	.BLKB		; Window base APR (1-7)
W$NSTS:	.BLKB		; Window status
W$NSIZ:	.BLKW		; Window size/100
W$NLIB:	.BLKW		; Pointer to library pointer in W.ALIB or special RID
W$NOFF:	.BLKW		; Map offset/100 into library
W$NBYT:	.BLKW		; Map length in bytes

.BSECT HIGH,NOCREF	; Flag bits in W$NSTS

WS$WRT:	.BLKB	.	; Write access desired
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
WS$UIS:	.BLKB	.	; Map window into user mode I-space		;087
WS$UDS:	.BLKB	.	; Map window into user mode D-space		;087
WS$SIS:	.BLKB	.	; Map window into supervisor mode I-space	;087
	.BLKB	.	; Reserved
WS$MAP:	.BLKB	.	; Window is mapped

.DSECT	17,NOCREF	; Definition of W.ALIB
WA$MAP:	.BLKB		; Map count					;094
WA$WRT:	.BLKB	177720	; Library is mapped read/write			;094
WA$LIB:	.BLKB	40	; Address of LIB block				;094

.DSECT	177774,NOCREF	; Special RIDs in W$NLIB
RIDMIN:			; Lowest legal special RID			;094
RIDMEM:	.BLKW		; Physical memory RID				;094
RIDHDR:	.BLKW		; Job header RID				;094

; Define cache giveback processors

$$$$$0	=	1
$$$$$1	=	0

.MACRO	CACHER	CACHE
.ASSUME	$$$$$0	NE	0	; Too many cachers defined
CI$'CACHE' =: $$$$$0
CO$'CACHE' =: $$$$$1
$$$$$0	=	$$$$$0*2
$$$$$1	=	$$$$$1+4
.ENDM	CACHER

; The entries in this table are ordered by giveback priority; the
; earlier entries in the list are called before the later entries
; to do givebacks.

	CACHER	CBF	; Idle communications buffer			;094
	CACHER	DSK	; Disk directory/data cacher			;094
	CACHER	NSP	; Messages cached by NSP			;094

CHECNT	=:	<$$$$$1/4> ; Count of cachers				;094

.MDELETE CACHER								;094

; Disk Cache Control Region Layout

.DSECT	,NOCREF

CH$CTL:	.BLKW		; 400=>cacheing enabled; 0=>cacheing disabled
CH$TIC:	.BLKW		; 1=>charge cache time; 0=>no charge
CH$SEC:	.BLKW		; Approx seconds since boot (mod 64k)
CH$NXT:	.BLKW		; Pointer to "first" in list @ +2 (1=>no cacher)
CH$PRV:	.BLKW		; Pointer to "last" in list @ +0
CH$PAR:	.BLKW		; PAR6 value for extended cache tags
CH$TAG:	.BLKW		; List of usable extended cache tags
CH$USM:	.BLKW		; -1=>use monitor buffer pool; 0=>don't use it
CH$WTG:	.BLKW		; List of usable extended cache write-tags
CH$LIM:	.BLKW		; Limit of total number of extended cache tags
CH$FLM:	.BLKW		; Limit of number of extended cache directory tags
CH$DLM:	.BLKW		; Limit of number of extended cache data tags
CH$MOD:	.BLKB		; 0=>no data; 1=>open mode data; -1=>all data
CH$DAT:	.BLKB		; 0=>no data cacheing; 200=>data cacheing available
CH$BSZ:	.BLKW		; Size of a cache cluster in blocks

; Transfer Control Block (XRB)

; Used by user to initiate an I/O request
;	and for monitor/user data requests.

.DSECT	,NOCREF

XRLEN:	.BLKW		; Length of I/O buffer in bytes
XRBC:	.BLKW		; Byte count for transfer
XRLOC:	.BLKW		; Pointer to I/O buffer
XRCI:	.BLKB		; Channel number times 2 for transfer
XRBLKM:	.BLKB		; Random access block number (msb)
XRBLK:	.BLKW		; Random access block number (lsb)
XRTIME:	.BLKW		; Wait time for terminal input
XRMOD:	.BLKW		; Modifiers
XRBSIZ:			; Size of the XRB in bytes
XRBSAV:	.BLKW		; Saved read/write indication
XRBUSE:	.BLKW	5	; Size of "to be saved" area in bytes (and driver use);047
XRBPT:	.BLKB		; Pending DSQ transfer count (old W$PT)		;067
XRBEFN:	.BLKB		; Event flag number / Request type bits		;067
XRBCRA:	.BLKW		; Completion routine address			;047
XRBAP:	.BLKW		; User-created AST parameter			;047

; File Request Queue Block (FIRQB)  (pronounced 'furk-be')

.DSECT	,NOCREF

	.BLKW		; Queue word, set by FIP
FQJOB:	.BLKB		; Requesting job number times 2
FQFUN:	.BLKB		; Function requested
FQERNO:			; Error message code and text begin
FQFIL:	.BLKB		; Channel number times 2
FQSIZM:	.BLKB		; File size in blocks (msb)
FQPPN:	.BLKW		; Project-programmer number
FQNAM1:	.BLKW	2	; 2 word filename in radix 50
FQEXT:	.BLKW		; 1 word filetype in radix 50
FQSIZ:	.BLKW		; File size in blocks (lsb)
FQNAM2:			; 3 word new file FILNAM.TYP in radix 50
FQSWIT:			; Open for output switch
FQBUFL:	.BLKW		; Default buffer length
FQMODE:	.BLKW		; Mode indicator
FQFLAG:	.BLKW		; Opened file's flag word
FQPFLG:	.BLKB		; "Protection code real" indicator
FQPROT:	.BLKB		; New protection code
FQDEV:	.BLKW		; 2 byte ascii device name
FQDEVN:	.BLKB		; 1 byte unit number
	.BLKB		; "Unit number real" indicator
FQCLUS:	.BLKW		; File cluster size for file creates
FQNENT:			; Number of entries on directory lookup
FQADDR:	.BLKW		; Dispatch/return address
FQBSIZ:			; Size of the FIRQB in bytes

; Monitor Calls (EMT'S)

.DSECT	+EMT,NOCREF

CALFIP:	.BLKW		; Call FIP, with FIRQB loaded
.READ:	.BLKW		; Read
.WRITE:	.BLKW		; Write
.CORE:	.BLKW		; Change user memory size
.SLEEP:	.BLKW		; Sleep job for n seconds
.PEEK:	.BLKW		; PEEK at memory
.SPEC:	.BLKW		; Special function
.TTAPE:	.BLKW		; Enter TAPE mode
.TTECH:	.BLKW		; Enable echo
.TTNCH:	.BLKW		; Disable echo
.TTDDT:	.BLKW		; DDT submode
.TTRST:	.BLKW		; Cancel ^O effect
.TIME:	.BLKW		; Get timing information
.POSTN:	.BLKW		; Get device's horizontal position
.DATE:	.BLKW		; Get current date & time
.SET:	.BLKW		; Set keyword bit(s)
.STAT:	.BLKW		; Get my statistics
.RUN:	.BLKW		; Run a new program
.NAME:	.BLKW		; Install a new program name
.EXIT:	.BLKW		; Exit to default run-time system
.RTS:	.BLKW		; Change to a new run-time system
.ERLOG:	.BLKW		; Log an error from the run-time system
.LOGS:	.BLKW		; Check for logical devices
.CLEAR:	.BLKW		; Clear keyword bit(s)
.MESAG:	.BLKW		; Message send/receive
.CCL:	.BLKW		; CCL checker
.FSS:	.BLKW		; File String Scanner
.UUO:	.BLKW		; UUO hook
.CHAIN:	.BLKW		; CHAIN to a new program
.PLAS:	.BLKW		; Resident library control
.RSX:	.BLKW		; Enter RSX emulation
.ULOG:	.BLKW		; ASSIGN/REASSIGN/DEASSIGN device/user logical
.XPEEK:	.BLKW		; Extended block-mode PEEK
.ASSUME .&377 EQ 102	; MAKE SURE WE RESERVE 102 AND 104		;043
.READA:	.BLKW		; Asynchronous read				;047
.WRITA:	.BLKW		; Asynchronous write				;047
.ASTX:	.BLKW		; Exit AST routine				;053
.PFB:	.BLKW		; PFB Handling Routines				;042
.CMDLN:	.BLKW		; Read/write command line			;061
.AST:	.BLKW		; Disable/Enable AST routine execution		;069
EMTSIZ	=	.&377	; Size of EMTTBL in bytes

; Monitor Calls (EMT'S) Macro

.MACRO	EMTENT	NAME,ADDR=$$$$$$,MAP=EMT
.DSABL	CRF
$$$$$$	=	.
	TMPORG	EMTTBL,NAME-EMT
.ENABL	CRF
.IF	IDN	<MAP>,<EMT>
	 .WORD	ADDR/2		; Load EMTTBL for NAME
.IFF	;IDN	<MAP>,<EMT>
.IF	IDN	<MAP>,<EM2>
	 .WORD	100000! <ADDR/2> ; Load EMTTBL for NAME
.IFF	;IDN	<MAP>,<EM2>
.ERROR	;Invalid phase MAP for EMTENT
.ENDC	
.ENDC
	UNORG
.ENDM	EMTENT

; FIP (FIRQB @ FQFUN) Function Codes

	.DSECT	,NOCREF

CLSFQ:	.BLKW		; Close an open channel
OPNFQ:	.BLKW		; Open a channel
CREFQ:	.BLKW		; Create/extend/open a channel
DLNFQ:	.BLKW		; Delete a file by name
RENFQ:	.BLKW		; Rename a file
DIRFQ:	.BLKW		; Directory information
UUOFQ:	.BLKW		; Process UUO
ERRFQ:	.BLKW		; Get error message text
RSTFQ:	.BLKW		; Reset (close) [all] channel[s except 0]
LOKFQ:	.BLKW		; Lookup a file
ASSFQ:	.BLKW		; Assign a device
DEAFQ:	.BLKW		; Deassign a device
DALFQ:	.BLKW		; Deassign all devices
CRTFQ:	.BLKW		; Create/extend/open a unique .TMP file on disk
CRBFQ:	.BLKW		; Create/extend/open a compiled image file on disk

NONRTS:			; Starting value of internal functions

EMLMFQ:			; Maximal FQFUN for EMT Logging
RUNFQ:	.BLKW		; Run a program image

PFBFQ:	.BLKW		; Entry point for dispatch to PFB Routines	;042

NONMSK:			; Starting value of non-masked functions

EOVFQ:	.BLKW		; EOV checker
MTAFQ:	.BLKW		; MTU dispatch					;062
WINFQ:	.BLKW		; Window turner for disk files
EXTFQ:	.BLKW		; Extend an open disk file
	.ASSUME	NETFQ EQ 52
NETFQ:	.BLKW		; Network utilities
BYEFQ:	.BLKW		; Logout a user
REMFQ:	.BLKW		; Remove receiver				;070
DCLFQ:	.BLKW		; Declare receiver
STAFQ:	.BLKW		; Start up the system code
DECFQ:	.BLKW		; Close a disk file (delayed style)		;074
TRUFQ:	.BLKW		; Truncate an open file				;100

FQFSIZ:			; Size of FIPTBL in bytes

DSPFQ:	.BLKW		; Do a general dispatch on address

; .PLAS (FIRQB @ FQERNO) Function Codes

	.DSECT	,NOCREF

ATRFQ:	.BLKW		; Attach region (resident library)
DTRFQ:	.BLKW		; Detach region (resident library)
CRAFQ:	.BLKW		; Create address window
ELAFQ:	.BLKW		; Eliminate address window
MAPFQ:	.BLKW		; Map address window
UMPFQ:	.BLKW		; Unmap address window

; Maximum number of NETFQ functions.					;110

NTFQMX	=	110	; Max number of NETFUNctions.  Same as NCFMAX as ;117
			; defined in NETDEF.  TBL uses this for building ;110
			; the DND dispatch table.			 ;110

; .UUO/UUOFQ Subfunction Codes

.DSECT	-30.,NOCREF

UU$MIN:			; Most negative legal value
UU.USC:	.BLKB		; -30., Utility Sync code			;121
UU.TB3:	.BLKB		; -29., Monitor tables part 3
UU.SPL:	.BLKB		; -28., One-shot spooling request
UU.DMP:	.BLKB		; -27., Online monitor snapshot
UU.FIL:	.BLKB		; -26., File utility
UU.ATR:	.BLKB		; -25., Read/write file attributes
UU.CCL:	.BLKB		; -24., CCL command add/delete
	.BLKB		; -23., Reserved (Basic-Plus terminating file string scan)
	.BLKB		; -22., Reserved (Basic-Plus special run priority)
	.BLKB		; -21., Reserved (Basic-Plus privilege drop/restore)
	.BLKB		; -20., Reserved (Basic-Plus memory lock/unlock)
UU.LOG:	.BLKB		; -19., Set number of allowed logins
UU.RTS:	.BLKB		; -18., Run-time system & resident library control
UU.NAM:	.BLKB		; -17., Set file's run-time system name
UU.DIE:	.BLKB		; -16., Special SHUTUP logout
UU.ACT:	.BLKB		; -15., Accounting information dump
UU.DAT:	.BLKB		; -14., Date/time changer
UU.PRI:	.BLKB		; -13., Priority, run burst, maximum changer
UU.TB2:	.BLKB		; -12., 2nd part of Monitor tables
UU.BCK:	.BLKB		; -11., Backup file accounting changer
	.BLKB		; -10., Reserved (Basic-Plus file string scan)
UU.HNG:	.BLKB		;  -9., Hangup/enable a dataset
UU.FCB:	.BLKB		;  -8., Get FCB/DDB information
	.BLKB		;  -7., Reserved (Basic-Plus Control/C trap enable)
UU.POK:	.BLKB		;  -6., Poke monitor memory
	.BLKB		;  -5., Reserved (Basic-Plus send to terminal)
	.BLKB		;  -4., Reserved (Basic-Plus force to terminal)
UU.TB1:	.BLKB		;  -3., 1st part of monitor tables
UU.NLG:	.BLKB		;  -2., Set number of allowed logins to 1
UU.YLG:	.BLKB		;  -1., Set number of allowed logins to maximum
UU.PAS:	.BLKB		;  +0., Create an account

; .UUO/UUOFQ Subfunction Codes, continued

UU.DLU:	.BLKB		;  +1., Delete an account
UU.CLN:	.BLKB		;  +2., Clean a disk pack
UU.MNT:	.BLKB		;  +3., Disk pack mount/dismount
UU.LIN:	.BLKB		;  +4., LOGIN
UU.BYE:	.BLKB		;  +5., LOGOUT
UU.ATT:	.BLKB		;  +6., ATTACH
UU.DET:	.BLKB		;  +7., DETACH
UU.CHU:	.BLKB		;  +8., Change password/quota
UU.ERR:	.BLKB		;  +9., Get error message text
UU.ASS:	.BLKB		; +10., ASSIGN
UU.DEA:	.BLKB		; +11., DEASSIGN
UU.DAL:	.BLKB		; +12., DEASSIGN all
UU.ZER:	.BLKB		; +13., Zero device
UU.RAD:	.BLKB		; +14., Read accounting information
UU.DIR:	.BLKB		; +15., Get directory information
UU.TRM:	.BLKB		; +16., Set terminal characteristics
UU.LOK:	.BLKB		; +17., Wildcard directory lookup
	.BLKB		; +18., Reserved (Basic-Plus old message send/receive)
UU.CHE:	.BLKB		; +19., Cache enable/disable
UU.CNV:	.BLKB		; +20., Convert date/time to ASCII
UU.SLN:	.BLKB		; +21., Set/clear system-wide logical names
	.BLKB		; +22., Reserved (Basic-Plus message send/receive)
UU.SWP:	.BLKB		; +23., Add/remove swap, overlay, error msg files
UU.JOB:	.BLKB		; +24., Job creation
UU.PPN:	.BLKB		; +25., Wildcard PPN lookup
UU.SYS:	.BLKB		; +26., Return job status information
UU.KMC:	.BLKB		; +27., Connect KMC-11 to another device
UU.PRV:	.BLKB		; +28., Set/clear/read privilege bits		;036
UU.STL:	.BLKB		; +29., Stall System
UU.PRM:	.BLKB		; +30., Add/remove permanent file/priv'd program ;037
UU.3PP:	.BLKB		; +31., Set/drop third party privilege check	;046
UU.CHK:	.BLKB		; +32., File access or privilege bit check	;046
UU.ONX:	.BLKB		; +33., Open next disk file			;061
UU.CFG:	.BLKB		; +34., Set system defaults/parameters		;062
	.BLKB	-1	; Correction for below
UU$MAX:			; Most positive legal value

.EQUATE	UU.NOT,177	; A value for "not a UUO"
							.ASSUME UU.NOT GT UU$MAX

; Macro and DSECT for General IOREDO

.MACRO	RDOENT	NAME
.DSABL	CRF
$$$$$$	= .
	TMPORG	RDOTBL,NAME
.ENABL	CRF
	.WORD	$$$$$$	; Load REDO table for NAME
	UNORG
.ENDM	RDOENT

.DSECT	,NOCREF

SPCRDO:	.BLKW		; SPEC redo
REDRDO:	.BLKW		; READ redo
WRTRDO:	.BLKW		; WRITE redo
CCREDO:			; Start of non-interruptable redo functions	;072
PFBRDO:	.BLKW		; PFB I/O redo					;048
EXIRDO:	.BLKW		; EXIT (or RTS) redo				;047
								.ASSUME REDRDO EQ .READ&377
								.ASSUME WRTRDO EQ .WRITE&377
RDOSIZ:			; Size of REDO table

; Buffer Chain Control Sub-Block

.DSECT	,NOCREF

EP:	.BLKW		; Empty pointer
FP:	.BLKW		; Fill pointer
BC:	.BLKW		; Buffer count
BCBSIZ:			; Size of the buffer control sub-block in bytes

; Device Data Block (DDB)

; The non-device dependent entries in the DDB are:

.DSECT	,NOCREF

; The following entries are required to be in all DDB's

DDIDX:	.BLKB		; Driver index
DDSTS:	.BLKB		; Status and access control byte
DDJBNO:	.BLKB		; Owner job number times 2 (0 if free)
DDUNT:	.BLKB		; Device unit number
DDTIME:	.BLKW		; Time assigned or INIT'ed
DDCNT:	.BLKW		; INIT count and assignment control

; The following entries should appear only if used

DDFLAG:	.BLKW		; Device-dependent flags
DDBUFC:	.BLKB	BCBSIZ	; Buffer chain control area
DDHORZ:	.BLKB		; Horizontal position
DDHORC:	.BLKB		; Characters per line+1

; Bit assignments for DDB status words are as follows:

.BSECT	HIGH,NOCREF	; In DDSTS (as a word)

DDPRVO:	.BLKB	.	; Ownership requires privileges
DDRLO:	.BLKB	.	; Read lock for device if set
DDWLO:	.BLKB	.	; Write lock for device if set
DDNET:	.BLKB	.	; Network device
DDASY:	.BLKB	.	; Device natively supports asynchronous I/O	;047
DDAUX:	.BLKB	.	; Device accepts bridge connections
DDAUXA:			; Bridge connection is active [if DDAUX set]	;101
DDDYNA:	.BLKB	.	; Dynamic DDB if set [if DDAUX clear]		;101
DDSTAT:	.BLKB	.	; Internal status, cleared by "CLOSE"

.BSECT	HIGH,NOCREF	; In DDCNT

	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
DDCONS:	.BLKB	.	; Device is the console device
DDUTIL:	.BLKB	.	; Device assigned for UTILTY sequence
DDASN:	.BLKB	.	; Device assigned through command

; Device Driver to Auxiliary Processor Bridge Block (BB)

.DSECT	,NOCREF

BBSTS:	.BLKB		; Status
BBDOFF:	.BLKB		; Data offset within data buffer
BBGIRB:	.BLKW		; Pointer to "Get IRB/data buffer" subroutine
BBASND:	.BLKW		; Pointer to "Send IRB/data buffer" subroutine
BBAAP5:	.BLKW		; Pointer to PAR5 value for above two subroutines
BBDUNT:	.BLKB		; Device's control unit number
BBAUNT:	.BLKB		; Auxiliary's control unit number
BBDSTA:	.BLKW		; Pointer to "status change" entry in device driver
BBDINT:	.BLKW		; Pointer to "interrupt" entry in device driver
BBDAP5:	.BLKW		; Pointer to PAR5 value for above two entry points
	.BLKW	8.	; Reserved

; Interprocess Request Block (IRB)

.DSECT	,NOCREF

IRBFUN:	.BLKW		; Function code & its modifier
IRBSTA:	.BLKW		; Status
IRBCHN:	.BLKB		; Channel number
IRB18M:	.BLKB		; MSB of 18-bit UNIBUS address of data within buffer
IRB18L:	.BLKW		; LSB of 18-bit UNIBUS address of data within buffer
IRBMOD:	.BLKW		; Data modifier
IRBCON:	.BLKW		; Contorted address of data buffer
IRBNXT:	.BLKW		; Link to next IRB (if chained)
IRBBFL:	.BLKW		; Byte size of data within data buffer
IRBMMU:	.BLKW		; MMU address of whole data buffer
IRBSIZ:	.BLKW		; Byte size of whole data buffer
IRBDPT:	.BLKW		; Virtual (through PAR6) done pointer
IRBFPT:	.BLKW		; Virtual (through PAR6) fill pointer
IRBEPT:	.BLKW		; Virtual (through PAR6) empty pointer
	.BLKW	3	; Reserved

; Monitor load block (offsets from start of DEFALT phase)

.DSECT	,NOCREF

; Patch locations.  (These live here so that INIT can get at them easily.)

LBNODS:	.BLKB		; No D-Space patch Location (..NODS in DEFALT) --
			; -1 => D-space cannot be used with this monitor
			;  0 => D-space can be used (normal)
LBNFRL:	.BLKB		; No frills in monitor				;109
			; -1 => No frills
			;  0 => Normal configuration
LBEXPA:	.BLKW		; Amount of extra patch space (..EXPA in DEFALT) --
			; (Normally = 0, can be patched to turn buffers into
			; patch space.)

; Monitor memory layout.  All addresses and lengths are in MMU units, except
; as noted.

LBSEGS:			; Start of segment load table			;085
LBFIXB:	.BLKW		; FIXed part of monitor disk Block start	;085
LBFIXP:	.BLKW		; FIXed part of monitor Physical address (always 0).
LBFIXL:	.BLKW		; FIXed part of monitor Length.
LBCRAB:	.BLKW		; CRAsh phase disk Block start			;085
LBCRAP:	.BLKW		; CRAsh phase Physical address			;085
LBCRAL:	.BLKW		; CRAsh phase Length				;085
LBTERB:	.BLKW		; TER phase disk Block start			;085
LBTERP:	.BLKW		; TER phase Physical address			;085
LBTERL:	.BLKW		; TER phase Length				;085
LBSESB:	.BLKW		; SES phase disk Block start			;088
LBSESP:	.BLKW		; SES phase Physical address			;088
LBSESL:	.BLKW		; SES phase Length				;088
LBNSPB:	.BLKW		; NSP phase disk Block start			;088
LBNSPP:	.BLKW		; NSP phase Physical address			;088
LBNSPL:	.BLKW		; NSP phase Length				;088
LBTRNB:	.BLKW		; TRN phase disk Block start			;088
LBTRNP:	.BLKW		; TRN phase Physical address			;088
LBTRNL:	.BLKW		; TRN phase Length				;088
LBEVLB:	.BLKW		; EVL phase disk Block start			;090
LBEVLP:	.BLKW		; EVL phase Physical address			;090
LBEVLL:	.BLKW		; EVL phase Length				;090
LBRDMB:	.BLKW		; RDM phase disk Block start			;091
LBRDMP:	.BLKW		; RDM phase Physical address			;091
LBRDML:	.BLKW		; RDM phase Length				;091
LBNODB:	.BLKW		; NOD phase disk Block start			;104
LBNODP:	.BLKW		; NOD phase Physical address			;104
LBNODL:	.BLKW		; NOD phase Length				;104
LBUNAB:	.BLKW		; UNA phase Disk Block Start			;089
LBUNAP:	.BLKW		; UNA phase Physical Address			;089
LBUNAL:	.BLKW		; UNA phase Length				;089
LBQNAB:	.BLKW		; QNA phase Disk Block Start			;089
LBQNAP:	.BLKW		; QNA phase Physical Address			;089
LBQNAL:	.BLKW		; QNA phase Length				;089
LBGPKB:	.BLKW		; GPK phase disk block Start			;098
LBGPKP:	.BLKW		; GPK phase physical address			;098
LBGPKL:	.BLKW		; GPK phase Length				;098
LBPTBB:	.BLKW		; PTB phase disk block Start			;098
LBPTBP:	.BLKW		; PTB phase physical address			;098
LBPTBL:	.BLKW		; PTB phase Length				;098
LBDHPB:	.BLKW		; DHPORT phase disk Block start			;101
LBDHPP:	.BLKW		; DHPORT phase Physical address			;101
LBDHPL:	.BLKW		; DHPORT phase Length				;101
LBDZPB:	.BLKW		; DZPORT phase disk Block start			;101
LBDZPP:	.BLKW		; DZPORT phase Physical address			;101
LBDZPL:	.BLKW		; DZPORT phase Length				;101
LBVHPB:	.BLKW		; VHPORT phase disk Block start			;101
LBVHPP:	.BLKW		; VHPORT phase Physical address			;101
LBVHPL:	.BLKW		; VHPORT phase Length				;101
LBFMSB:	.BLKW		; FMS phase disk Block start			;101
LBFMSP:	.BLKW		; FMS phase Physical address			;101
LBFMSL:	.BLKW		; FMS phase Length				;101
LBKBXB:	.BLKW		; KBX phase disk Block start			;112
LBKBXP:	.BLKW		; KBX phase Physical address			;112
LBKBXL:	.BLKW		; KBX phase Length				;112
LBLATB:	.BLKW		; LAT phase disk Block start			;102
LBLATP:	.BLKW		; LAT phase Physical address			;102
LBLATL:	.BLKW		; LAT phase Length				;102
LBFIPB:	.BLKW		; FIP phase disk Block start			;085
LBFIPP:	.BLKW		; FIP phase Physical address			;085
LBFIPL:	.BLKW		; FIP phase Length				;085
LBSEGE:			; End of segment table				;085
LBFPLP:	.BLKW		; FIP PooL Physical address.
LBFPLL:	.BLKW		; FIP PooL Length.
LBISPP:	.BLKW		; Root I-SPace area Physical address.
LBISPL:	.BLKW		; Root I-SPace area Length.
LBISPS:	.BLKW		; Start of I-SPace code (virtual byte address)
LBISPE:	.BLKW		; End of I-SPace code (virtual bytes address)
LBOVRP:	.BLKW		; Resident OVeRlays Physical address.
LBOVRL:	.BLKW		; Resident OVeRlays total Length.
LBMCPP:	.BLKW		; MSCP region Physical address.
LBMCPL:	.BLKW		; MSCP region total Length.
LBRNDP:	.BLKW		; RouNDoff area Physical address.
LBRNDL:	.BLKW		; RouNDoff area Length.
LBSCRP:	.BLKW		; SCRatch area Physical address.
			; (Currently used only for OVRBUF.)
LBSCRL:	.BLKW		; SCRatch area Length.
LBJCRP:	.BLKW		; Job Control Region Physical address		;087
LBJCRL:	.BLKW		; Job Control Region Length			;087
LBLEN:			; = Load Block LENgth

; Overlay Table (At the beginning of OVR phase)

.DSECT	,NOCREF		; Define Overlay Table header

OTHFOR:	.BLKW		; Format number
OTHREV:	.BLKW		; Revision number
OTHSIH:	.BLKW		; Size of Overlay Table Header (=OTH.SZ)
OTHSIM:	.BLKW		; Size of Module Header (=OTM.SZ)
OTHSIO:	.BLKW		; Size of Overlay Entry (=OTO.SZ)
OTH.SZ:			; = Overlay Table Header Size

.DSECT	,NOCREF		; Define Module Header

OTMNAM:	.BLKW		; Module name (RAD50) or 0 -> End of Table
OTMFLG:	.BLKW		; Module flag word (defined below)
OTMNUM:	.BLKW		; Number of Overlays in Module
OTM.SZ:			;  =Module Header Size

.DSECT	,NOCREF		; Define Overlay Entry

OTOLEN:	.BLKW		; Length of Overlay in Bytes
OTO.SZ:			;  =Overlay Descriptor Size

.BSECT	,NOCREF		; Define in Module Flag OTMFLG
	.BLKB	.	; Historical, used to mean overlay should be loaded ;076
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
	.BLKB	.	; Reserved
OTFLOD:	.BLKB	.	; Overlay is I&D split and can be loaded	;076

.EQUATE	OTFOR,0,NOCREF	; Current Format Number
.EQUATE	OTREV,1,NOCREF	; Current Revision Number			;076

; Monitor Low Memory Area Defined

.DSECT	,NOCREF

	.BLKB	1000	; Reserved for vectors
DATE:	.BLKW		; Today's date in internal form
TIME:	.BLKW		; Current time in internal form
TIMSEC:	.BLKB		; Seconds to next minute
TIMCLK:	.BLKB		; Ticks to next second
JOB:	.BLKB		; Job running now
NEXT:	.BLKB		; Next job to run
JOBDA:	.BLKW		; Pointer to current job data block (JDB)
JOBF:	.BLKW		; Pointer to current flags (JDB @ JDFLG)
IOSTS:	.BLKW		; Pointer to current i/o status (JDB @ JDIOST)
JOBWRK:	.BLKW		; Pointer to job's work block (WRK)
JOBJD2:	.BLKW		; Pointer to job's second job data block (JDB2)
JOBRTS:	.BLKW		; Pointer to job's run-time system block (RTS)
CPUTIM:	.BLKW		; Pointer to current CPU time bucket
JOBWDB:	.BLKW		; Pointer to job's window descriptor block (WDB)
JOBJCR:	.BLKW		; Pointer to job's JCR entry through APR6 (JCR)	;087
JOBJC6:	.BLKW		; MMU address to map job's JCR entry		;087
JOBF3:	.BLKW		; Pointer to job's third flag word (JDB @ JDFLG3) ;094
LOWEND:			; End of low-core contents			;087

; Job Unique Low Memory Layout

.DSECT	,NOCREF

	.BLKW	30	; Job controlled
CONTXT:	.BLKW	15	; Reserved for monitor context use
FPPTXT:	.BLKW	30	; Reserved for monitor FPP context use
	.BLKW	103	; Job's SP stack area
USRSP:			; Default (initial) job SP stack setting
KEY:	.BLKW		; Keyword of job's current status
FIRQB:	.BLKB	FQBSIZ	; File Request Queue Block
XRB:	.BLKB	XRBSIZ	; Transfer Control Block
CORCMN:	.BLKB	200	; CCL line common
	.BLKW	26	; Job controlled
USRPPN:	.BLKW		; User's assignable PPN
USRPRT:	.BLKW		; User's assignable protection code
USRLOG:	.BLKW	4*4	; User's logical device table
NSTORG:			; End of low memory fixed layout

; Argument forms for "BUFFER" calls (see RTI):

.MACRO	BUFFER	TYPE,SIZCLR,LEAVE,START=LRGPOL
.IF	IDN	<TYPE>,<RETCHN>
	 JSR	 PC,@#RETCHN
.DSABL	CRF
.GLOBL	RETCHN
.ENABL	CRF
.IFF
.IF	IDN	<TYPE>,<GETLRG>
.IF	NB	<SIZCLR>
	 JSR	 R5,@#BUFFR1
	  .WORD	SIZCLR			; R1 <- SIZCLR in buffer routine
.DSABL	CRF
.GLOBL	BUFFR1
.ENABL	CRF
.IFF
	 JSR	 R5,@#BUFFR2		; R1 presumed set to desired size
.ENDC
	  .WORD	LEAVE			; R2 <- LEAVE in buffer routine
	  .WORD	START			; Try allocation in START
.DSABL	CRF
.GLOBL	BUFFR2,START
.ENABL	CRF
.IFF
.IF	IDN	<TYPE>,<RETSML>
	 .WORD	 IOT,TYPE
.IFF
.IF	IDN	<TYPE>,<RETURN>
	 .WORD	 IOT,TYPE
.IFF
.DSABL	CRF
$$$$$$	=	16.-1
.IIF	NB	<SIZCLR>,	$$$$$$=SIZCLR-1
.IIF	LT	$$$$$$,		$$$$$$=0
.IIF	LE	16.-$$$$$$,	$$$$$$=16.-1
.ENABL	CRF
	 .WORD	 IOT,TYPE-$$$$$$+<LEAVE+0&177*400>
.ENDC
.ENDC
.ENDC
.ENDC
.ENDM	BUFFER

.EQUATE	GETSML,000377,NOCREF	; Get 16. word monitor buffer

.EQUATE	RETSML,000040,NOCREF	; Return 16. word monitor buffer

.EQUATE	RETURN,000000,NOCREF	; Return n word buffer

; Buffer Header Definitions

.DSECT	,NOCREF

BF.SIZ:	.BLKW		; Buffer size in bytes
BF.OFF:	.BLKW		; Byte offset to data in buffer
BF.LNK:	.BLKW		; Link "address" to next buffer
BF.CNT:	.BLKW		; Data size in bytes
BUFHDR:			; Buffer header size in bytes

; Big Buffer Sub-Block

.DSECT	,NOCREF

	.BLKW		; Queue link word
BGQRET:	.BLKW		; Return address to driver
	.BLKW		; Unused by big buffer routines
BGBUFF:	.BLKW		; Big buffer address

; Disk Request Queue Entry Block (DSQ)

.DSECT	,NOCREF

	.BLKW		; Queue link word
DSQJOB:	.BLKB		; Requesting job number times 2
DSQERR:	.BLKB		; Retry count and error flag
DSQL3Q:	.BLKW		; Completion queue and L3Q bits to set
DSQUNT:	.BLKB		; FIP unit number
DSQFBM:	.BLKB		; FIP block number (msb)
DSQFBL:	.BLKW		; FIP block number (lsb)
DSQRFN:	.BLKB		; RH11 function
DSQMAM:	.BLKB		; Memory address of the transfer (msb)
DSQMAL:	.BLKW		; Memory address of the transfer (lsb)
DSQCNT:	.BLKW		; Word count of the transfer
DSQFUN:	.BLKB		; Operation function code
DSQFAR:	.BLKB		; Queue fairness or priority
DSQMSC:	.BLKW		; Misc. pointer
DSQTOT:	.BLKW		; Total transfer counter
DSQPDA:	.BLKW		; Physical disk address
DSQOPT:	.BLKW		; Disk optimization word
DSQOUN:	.BLKB		; Physical disk unit number * 2
DSQSAV:	.BLKB		; Saved function
DSQPTO:	.BLKW		; Offset pointer
DSQCTO:	.BLKB		; Offset retry counter
DSQPUN:	.BLKB		; Physical disk unit number
DSQSIZ:			; Size of a DSQ in bytes

; Disk Function Codes, to be loaded into DSQFUN

.DSECT	,NOCREF

WFUN.C:	.BLKW		; Write with write check disk
WFUN:	.BLKW		; Write disk
RFUN:	.BLKW		; Read disk
RFUN.C:	.BLKW		; Write check disk
IFUN:	.BLKW		; Initialize drive and monitor tables		;054
WERFUN:	.BLKW		; Write Erase					;086
RELFUN:	.BLKW		; Release					;086
UNLFUN:	.BLKW		; Unload (Stop Spindle)				;086
FMTFUN:	.BLKW		; Format disk					;105

; Disk Driver 'D?DINT' Layout

.DSECT	,NOCREF

	.BLKW	2	; Interrupts: JSR R5,@#(PC)+, INTSVX
AP5$OO:	.BLKW		; DSKAP5
INT$OO:	.BLKW		; INT$D?
QDS$OO:	.BLKW		; Entry for setting up a DSQ
DQS$OO:	.BLKW		; Base queue root pointer
UMR$OO:	.BLKW		; Entry for UMR freed up
TMO$OO:	.BLKW		; Entry for timeouts
DSKSIZ:			; Size of 'D?DINT' in bytes

; Macros for branch if in INIT and branch if in monitor			;075

.MACRO	BMON	DEST,CND=R
.IIF	NE <DEST-.+376>&177000,		.ERROR		;BRANCH OUT OF RANGE
	 .WORD	B'CND+<DEST-.-2/2&377*IE/100>		;OP + OFFSET OR 0
.DSABL	CRF
.GLOBL	IE
.ENABL	CRF
.ENDM	BMON
.MACRO	BINIT	DEST,CND=R
.IIF	NE <DEST-.+376>&177000,		.ERROR		;BRANCH OUT OF RANGE
	 .WORD	B'CND+<DEST-.-2/2&377*<1-<IE/100>>>	;OP + OFFSET OR 0
.DSABL	CRF
.GLOBL	IE
.ENABL	CRF
.ENDM	BINIT

; Layout of usage tables

.DSECT	,NOCREF

UT.LOG:	.BLKW		;Logical names					;078
UT.PFB:	.BLKW		;ICF and logfile CBBs				;078
UT.QTX:	.BLKW		;XBUF QTBs					;078
UT.QTS:	.BLKW		;Monitor pool QTBs				;078
UT.OVR:	.BLKW		;Resident overlays				;078
UT.SAT:	.BLKW		;Resident SATT (in bytes)			;084
UT.WTB:	.BLKW		;Current number of WTBs outstanding		;084
UT.WTH:	.BLKW		;Maximum number of WTBs this timesharing session ;084
USESIZ:			;Size of table in bytes				;078

; System job numbers

CFGJOB	=:	3	;Pseudo job number to indicate disabled device	;090


;096+
;
; Common MSCP device data structure (a subset of MSCPDF.MAC).
;+
; The CMT table resides in the low read/write monitor space.  The
; data contained in this table links controllers to their appropriate
; data structures in XBUF.  CMT table contains the following information:
;
;			   *** NOTE ***
;		(I) means, filled in by INIT.
;		(D) means, filled in by the DRIVER.
;-

.DSECT	-30,NOCREF
			; ---------------------------------
			; OFFSETS TO CMT HEADER INFORMATION
			; ---------------------------------
CM.HDR:			; Size of CMT header * -1
CM.ICS:.BLKW	1	; Currently active controller CSR SAVE FOR INIT
CM.IC6:.BLKW	1	; Curr. active cont. APR6 mapping SAVE FOR INIT
CM.IMK:.BLKW	1	; Curr. active cont. init mask word SAVE FOR INIT
CM.IRG:.BLKW	1	; Curr. active cont. response RING virtual addr
			; .. SAVE FOR INIT
CM.UOF:.BLKW	1	; Offset to compute unibus address(D)
CM.DNE:.BLKW	1	; TSQ done queue
CM.QMR:.BLKW	1	; Controller request stalled queue (UMR shortage)
CM.CRQ:.BLKW	1	; Controller service request queue root word
			; INITIALLY -1 to indicate work area must be inited!
CM.CCT:.BLKB	1	; Controller count (Both tape and disk)
CM.DCT:.BLKB	1	; Disk controller count
CM.AWS:.BLKW	1	; Available MSCP work area size.
CM.BA6:.BLKW	1	; APR6 mapping to BBR comm. area(D)
CM.BRS:.BLKB	1	; Bad Block replacement status word
	BBR.CP=1	;   BBR waiting for command packets
	BBR.IO=2	;   BBR waiting for I/O completion
	BBR.AC=4	;   BBR active flag bit
CM.BRM:.BLKB	1	; Bit map of controllers requiring BBR
.ASSUME CM.BRS EQ -2	; THE 1S HEADER INFORAMTION MUST BE AT CMT-2
			; --------------------------------
			; OFFSETS WITHIN CMT TABLE ENTRIES
			; --------------------------------
CM.CRT:.BLKW	1	; Controller service request queue thread word
CM.UMR:.BLKW	1	; Unibus Mapping Register wait queue thread word
CM.QUE:.BLKW	1	; TSQ/DSQ queue head pointer.
CM.AP6:.BLKW	1	; APR6 to CCB (D)
CM.COF:.BLKW	1	; Offset to CCB (D)
CM.WKA:.BLKW	1	; Work area allocated for controller
CM.CSR:.BLKW	1	; CSR/Initialize-poll register.(I)
CM.VTR:.BLKB	1	; UDA (interrupt vector)/4 save area.(I)
CM.FLG:.BLKB	1	; Controller flags (# of units, disk, tape) (I)
CM.RSP:.BLKB	1	; Response ring size in powers of 2 (I)
CM.CMD:.BLKB	1	; Command ring size in powers of 2 (I)
CMTSIZ:		; CMT entry size

; Define IDX values for required devices

.DSECT	,NOCREF

IDX.SY:	.BLKW		; Index for all disks				;101
IDX.KB:	.BLKW		; Index for keyboards				;101
IDX.NL:	.BLKW		; Null device					;101
IDX.PK:	.BLKW		; Pseudo keyboards				;101
IDX.XE:	.BLKW		; UNA/LUA driver				;101
IDX.XH:	.BLKW		; QNA/LQA driver				;101
IDX.NO:	.BLKW		; NO driver					;106

.IIF	NDF	L$$IST,	.ENABL	CRF
.IIF	NDF	L$$IST,	.LIST
