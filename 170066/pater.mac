	.TITLE	PATER
	.IDENT	/02.03/

;
;		COPYRIGHT (c) 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; VERSION 02.03
;
; C. MONIA 12-NOV-75
;
;
; MODIFICATIONS:
;
;	JAK001	8-17-77		ADD EXIT WITH STATUS
;
;	HH062	24-MAR-81	ADD LOWER CASE ERROR MESSAGE SUPPORT
;
;	LMP140d 13-OCT-89	UPDATE ERROR MESSAGE FOR CSI$
;
;	SEL	18-Apr-91	Merge RSTS-specific code into RSX V4.3 code
;
; PATCH ERROR OUTPUT ROUTINE
;
; MACRO LIBRARY CALLS
;

	.IF NDF	R$$11M                                                          ; CM002
                                                                                ; CM002
	.MCALL	PUT$S                                                           ; CM002
                                                                                ; CM002
	.IFF                                                                    ; CM002
                                                                                ; CM002
	.MCALL	DIR$,QIO$,WTSE$S                                                ; CM002
                                                                                ; CM002
	.ENDC                                                                   ; CM002
                                                                                ; CM002
                                                                                ;**-1
;
; LOCAL MACROS
;
; GENERATE ERROR MESSAGE FORMAT STRING
;
; ERM	NUM,TXT
;
; WHERE:
;
;	NUM=DECIMAL ERROR NUMBER
;	TXT=FORMAT STRING
;

	.ENABL	LC
	.MACRO	ERM	NUM,TXT
	.PSECT	$$ETXT,D,GBL
$$$TP0=.
	.ASCIZ	"TXT"
	.PSECT	$$EPTR,D,GBL
E$R'NUM==NUM'.
.=.-2
	.WORD	100000!E$R'NUM
	.WORD	$$$TP0
	.WORD	0
	.PSECT
	.ENDM

;
; EQUATED SYMBOLS
;

S$V0==0				; SEVERITY CODE 0 (NON-FATAL)
S$V1==1				; SEVERITY CODE 1 (FATAL FOR CREF)
S$V2==2				; SEVERITY CODE 2 (FATAL)

;
; LOCAL DATA
;
; MESSAGE TEXT PREFIX FORMAT STRINGS
;

ERFMT:	.WORD	DIAG		; SEVERITY 0 PREFIX
	.WORD	DIAG		; SEVERITY 1 PREFIX
	.WORD	FATAL		; SEVERITY 2 PREFIX
                                                                                ; CM002
	.IF DF	R$$11M                                                          ; CM002
                                                                                ; CM002
;                                                                               ; CM002
; ERROR MESSAGE OUTPUT QIO DPB                                                  ; CM002
;                                                                               ; CM002
                                                                                ; CM002
MGDPB:	QIO$	IO.WVB,2,3,,MGSTS,,<$ERBF,,40>                                  ; CM002
                                                                                ; CM002
;                                                                               ; CM002
; I/O STATUS DOUBLE WORD                                                        ; CM002
;                                                                               ; CM002
                                                                                ; CM002
MGSTS:	.BLKW	2		;                                               ; CM002
                                                                                ; CM002
	.ENDC                                                                   ; CM002
                                                                                ; CM002

;
; PREFIX FORMAT STRINGS
;

	.IF	NDF,R$RSTS	; ++RSTS V7.2
PRFIX:	.ASCIZ	/%NPAT -- */	;
DIAG:	.ASCIZ	/DIAG/		;
FATAL:	.ASCIZ	/FATAL/		;

	.IFF			; ++RSTS V7.2
PRFIX:	.ASCIZ	/%N/		; ++RSTS 7.2
DIAG:	.ASCIZ	<045>/PAT --*DIAG/		; ++RSTS 7.2
FATAL:	.ASCIZ	<077>/PAT --*FATAL/		; ++RSTS 7.2
	.ENDC			; ++RSTS 7.2

SUFFIX:	.ASCIZ	/*-/
	.EVEN

;
; START OF TEXT POINTERS
;

	.PSECT	$$EPTR,D,GBL

EPTR:	.WORD	0		; DUMMY ZERO AT END OF LIST

	.PSECT

;
; ERROR MESSAGES
;

	ERM	0,^\Illegal error-severity code %P %P %P %P %2N\
	ERM	1,^\File %X has illegal format%2N\
	ERM	2,^\Error during close: file: %X%2N\
	ERM	3,^\Error positioning file %X%2N\
	ERM	5,^\Unable to locate module %2R%2N\
	ERM	6,^\Incompatible reference to global symbol %2R%2N\
	ERM	7,^\Incompatible reference to program section %2R%2N\
	ERM	8,^\Symbol %2R is multiply defined%2N\
	ERM	9,^\Unable to open file %X%2N\
	ERM	11,^\Unable to find file %X%2N\
	ERM	12,^\Input module checksum is %P%2N\
	ERM	13,^\Correction input file checksum is %P%2N\
	ERM	14,^\Error in file %X checksum%2N\
	ERM	15,^\I/O error on output file %X%2N\
	ERM	16,^\I/O error on input file %X%2N\
	ERM	17,^\Command line error%2N%VA%2N\
	ERM	18,^\Illegal indirect file specification%2N%VA%2N\
	ERM	19,^\Maximum indirect file depth exceeded%2N%VA%2N\
	ERM	20,^\Illegal switch or filespec specified%2N%VA%2N\
	ERM	21,^\Illegal file specification%2N%VA%2N\
	ERM	22,^\Illegal device/volume specified%2N%VA%2N\
	ERM	23,^\Command syntax error%2N%VA%2N\
	ERM	24,^\Illegal directory specification%2N%VA%2N\
	ERM	25,^\Multiple output files specified%2N%VA%2N\
	ERM	26,^\Invalid file specified: %X%2N\
	ERM	27,^\Required input file missing%2N%VA%2N\
	ERM	28,^\Correction input file missing%2N%VA%2N\
	ERM	29,^\Too many input files specified%2N%VA%2N\
	ERM	30,^\No dynamic storage available %P %P%2N\

;+
; **-$ERMSG-PAT ERROR MESSAGE OUTPUT ROUTINE
; **-$ERTRP-TRAP ENTRY POINT FOR ERROR MESSAGE HANDLER
;
; THIS ROUTINE IS ENTERED THROUGH ONE OF THE ABOVE ENTRY
; POINTS TO OUTPUT ERROR MESSAGES. THE SEVERITY IS USED TO
; SELECT A PREFIX THAT IS TO BE OUTPUT ALONG WITH
; THE MESSAGE. THE ERROR NUMBER SPECIFIES AN ERROR FOR-
; MAT WHICH IS PASSED TO $EDMSG TO EDIT THE OUTPUT STRING.
; SEVERITY 2 ERRORS ALWAYS CAUSE PROCESSING TO TERMINATE VIA
; A TRANSFER OF CONTROL TO $EXIT.
;
; SEVERITY 1 ERRORS CAUSE THE TASK TO TERMINATE COMMAND
; PROCESSING IF COMMAND INPUT IS NOT COMING FROM A TERMINAL
; DEVICE.
;
; INPUTS:
;
;	R1=ERROR/SEVERITY
;	R2=ARGUMENT BLOCK ADDRESS
;
; OUTPUTS:
;
;	THE ERROR MESSAGE IS TRANSMITTED TO THE TERMINAL OUTPUT
;	DEVICE. SEVERITY 0 ERRORS RESULT IN A RETURN TO THE CALLER.
;	SEVERITY 1 ERRORS CAUSE PROCESSING TO BE TERMINATED UNLESS
;	INPUT IS COMING FROM A TERMINAL. SEVERITY 2 ERRORS
;	ARE ALWAYS FATAL (EXIT IS VIA A JUMP TO $EXIT).
;
;-

$ERTRP::			;
	CALL	$ERMSG		; CALL ERROR MESSAGE PROCESSOR
	RTI			; EXIT SST

$ERMSG::			;
	SAVRG			; SAVE NON-VOLATILE REGISTERS
10$:				;
	MOV	R2,R5		; COPY ARGUMENT POINTER
	MOV	R1,R4		; COPY ERROR/SEVERITY
	MOV	#EPTR-4,R0	; GET ADDRESS OF ERROR DES. MINUS OFFSET
20$:				;
	CMP	(R0)+,(R0)+	; POINT TO NEXT STRING DESCRIPTOR
	TST	(R0)		; AT END OF LIST?
	BEQ	40$		; IF EQ YES
	CMPB	(R0),R4		; ERROR NUMBER AGREE?
	BNE	20$		; IF NE NO
	MOV	R0,R3		; SAVE R0
	CLRB	R1		; CLEAR ERROR NUMBER
	SWAB	R1		; POSITION SEVERITY TO LOW BYTE
	CMPB	R1,#S$V2	; LEGAL SEVERITY?
	BHI	40$		; IF HI NO
	BEQ	25$		; IF EQ DON'T INCREMENT
	BITB	#FD.TTY,$PTCMD+F.RCTL ; TERMINAL COMMAND INPUT?
	BNE	25$		; IF NE YES
	INC	R1		; INCREMENT SEVERITY
25$:				;
	ASL	R1		; CONVERT SEVERITY TO WORD OFFSET
	MOV	R1,-(SP)	; SAVE OFFSET
	MOV	#$ERBF,R0	; GET ADDRESS OF ERROR MESSAGE BUFFER
	MOV	#PRFIX,R1	; GET ADDRESS OF PREFIX STRING
	CALL	$EDMSG		; EDIT PREFIX STRING
	MOV	(SP)+,R2	; GET SEVERITY-DEPENDANT OFFSET
	MOV	ERFMT(R2),R1	; GET ADDRESS OF FORMAT STRING
.IF	DF	R$RSTS		; ++RSTS V9.0++
	MOVB	(R1)+,(R0)+	; Move in severity character
.ENDC	;DF	R$RSTS		; ++RSTS V9.0++
	CALL	$EDMSG		; EDIT PREFIX STRING
	MOV	#SUFFIX,R1	; POINT TO SUFFIX STRING
	CALL	$EDMSG		; EDIT SUFFIX STRING
	MOV	2(R3),R1	; GET ADDRESS OF TEXT STRING
	MOV	R5,R2		; GET PARAMETER LIST ADDRESS
	CALL	$EDMSG		; EDIT ERROR MESSAGE TEXT
	MOV	R0,R2		; COPY ADDRESS OF NEXT BYTE
	MOV	#$ERBF,R1	; GET ADDRESS OF BUFFER
	SUB	R1,R2		; COMPUTE LENGTH OF OUTPUT STRING
                                                                                ; CM002
	.IF DF	R$$11M                                                          ; CM002
                                                                                ; CM002
	MOV	R2,MGDPB+Q.IOPL+2 ; SET BYTE COUNT                              ; CM002
	DIR$	#MGDPB,35$	; ISSUE ERROR MESSAGE                           ; CM002
	WTSE$S	#3		; WAIT FOR COMPLETION                           ; CM002
	TSTB	MGSTS		; TEST RESULT                                   ; CM002
	BMI	35$		; IF MI DEVICE ERROR                            ; CM002
                                                                                ; CM002
	.IFF                                                                    ; CM002
                                                                                ; CM002
	PUT$S	#$PTEDB,R1,R2	; OUTPUT ERROR MESSAGE                          ; CM002
	BCS	30$		; IF C/S LEAVE QUIETLY                          ; CM002
                                                                                ; CM002
	.ENDC                                                                   ; CM002
                                                                                ; CM002
	SWAB	R4		; POSITION SEVERITY TO LOW BYTE
	CMPB	R4,#S$V1	; FATAL ERROR?                                  ;**-2
	BHI	30$		; IF HIS YES
	CMP	#EX$ERR,$EXSTS	; STATUS GREATER THEN CURRENT?
	BLOS	27$		; IF LOS YES
	MOV	#EX$ERR,$EXSTS	; SET STATUS TO ERROR
27$:
	RETURN			;
30$:				;
	MOV	#EX$SEV,$EXSTS	; SET EXIT STATUS TO SEVERE
	JMP	$RSTRT		; CLOSE ALL FILES, RESTART

35$:				;
	MOV	#EX$SEV,$EXSTS	; SET EXIT STATUS TO SEVERE
	JMP	$EXIT		; CLOSE ALL FILES, EXIT
;
; ILLEGAL ERROR/SEVERITY CODE
;

40$:				;
	MOV	R5,-(SP)	; PUSH PARAMETER LIST ADDRESS
	MOV	R4,-(SP)	; PUSH ERROR/SEVERITY
	MOV	SP,R2		; SET PARAMETER LIST ADDRESS
	MOV	#<S$V2*400!E$R0>,R1 ; SET NEW ERROR/SEVERITY
	BR	10$		; REPORT FATAL ERROR

	.END
