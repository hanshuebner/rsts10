	.TITLE	PTSRC
	.IDENT	/01/                                                            ;**NEW**
                                                                                ;**-1
;
; COPYRIGHT   1975,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A  SINGLE COMPUTER SYSTEM AND CAN BE  COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT  NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE  INFORMATION  IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE  AND  SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC  ASSUMES NO  RESPONSIBILITY  FOR  THE  USE  OR  RELIABILITY
; OF  ITS  SOFTWARE ON  EQUIPMENT WHICH  IS  NOT SUPPLIED BY DEC.
;
; VERSION 00                                                                    ;**NEW**
;                                                                               ;**-1
; C. MONIA 19-APR-74                                                            ;**NEW**
;                                                                               ;**NEW**
; MODIFICATIONS:                                                                ;**NEW**
;                                                                               ;**NEW**
; NO.		DATE		PROGRAMMER                                      ;**NEW**
; ---		----		----------                                      ;**NEW**
;                                                                               ;**NEW**
; 036		20-JAN-75	C. MONIA                                        ;**NEW**
;                                                                               ;**NEW**
;                                                                               ;**-1
; REAL-MEMORY SEARCH AND INSERT PACKAGE
;
; EQUATED SYMBOLS                                                               ;**NEW**
;                                                                               ;**NEW**
; OFFSET TO KEY                                                                 ;**NEW**
;                                                                               ;**NEW**
                                                                                ;**NEW**
SYM=000002			;                                               ;**NEW**
                                                                                ;**NEW**
;+
; DATA STRUCTURES:
;
; EACH ITEM IN THE LIST IS ASSUMED TO HAVE THE FOLLOWING FORMAT:
;
;	ITEM:	.WORD	NEXT	; LINK TO NEXT (0=LAST)
;		.WORD	VAL	; FIRST HALF OF KEY VALUE
;		.WORD	VAL	; SECOND HALF OF KEY VALUE
;		.WORD	DATA	; ANY DATA
;		  .		;
;		  .		;
;		  .		;
;		  .		;
;		.WORD	DATA	; END OF ITEM
;-
;+
; **-$ISYMR-INSERT ITEM IN LEXICALLY ORDERED LIST
;
; INPUTS:
;
;	R0=LISTHEAD ADDRESS
;	R1=ADDRESS OF ITEM TO BE INSERTED
;
; OUTPUTS:
;
;	NONE
;
; THIS ROUTINE IS CALLED TO INSERT AN ITEM IN A LIST WHOSE KEY VALUES ARE
; IN LEXICAL ORDER.
;-

$ISYMR::			;
	MOV	R0,R2		; SAVE ADDRESS OF CURRENT
	MOV	(R0),R0		; GET NEXT ITEM
	BEQ	10$		; IF EQ DONE
	CMP	SYM(R0),SYM(R1) ; CHECK FIRST HALF OF KEY                       ;**NEW**
	BLO	$ISYMR		; IF LO, GO AGAIN                               ;**-1
	BHI	10$		; IF HI, FOUND PLACE TO INSERT
	CMP	SYM+2(R0),SYM+2(R1) ; CHECK SECOND HALF OF KEY                  ;**NEW**
	BLO	$ISYMR		; IF LO GO AGAIN                                ;**-1
10$:				;
	MOV	R1,(R2)		; LINK NEW ITEM TO PREVIOUS
	MOV	R0,(R1)		; LINK CURRENT TO NEW
	RETURN			;
;+
; **-$SRCHR-SEARCH LIST IN REAL MEMORY FOR KEY VALUE
;
; INPUTS:
;
;	R0=LISTHEAD ADDRESS
;	R1=ADDRESS OF CONTAINING KEY VALUE
;
; OUTPUTS:
;
;	C-CLEAR=KEY VALUE IN LIST
;	R0=ADDRESS OF ITEM CONTAINING VALUE
;	R1=NUMERICAL POSITION OF ITEM IN LIST
;	   (0=FIRST ITEM, 1=SECOND ITEM ETC.)
;
;	C-SET=KEY VALUE NOT IN LIST
;
; THIS ROUTINE IS CALLED TO SEARCH A LIST AS DESCRIBED UNDER 'DATA STRUCTURES
; FOR AN ITEM CONTAINING THE SPECIFIED KEY CONTAINED IN S$YM(R1), AND S$YM+2(R1)
;-

$SRCHR::			;
	MOV	#-1,R2		; RESET POSITIONAL COUNT
5$:				;
	INC	R2		; INCREMENT COUNT
	SEC			; ASSUME KEY NOT IN LIST
	MOV	(R0),R0		; GET NEXT ITEM
	BEQ	10$		; IF EQ NOT IN LIST
	CMP	SYM(R0),SYM(R1)	; CHECK FIRST HALF OF KEY                       ;**NEW**
	BNE	5$		; IF NE GO AGAIN                                ;**-1
	CMP	SYM+2(R0),SYM+2(R1) ; CHECK SECOND HALF OF KEY                  ;**NEW**
	BNE	5$		; IF NE GO AGAIN                                ;**-1
10$:				;
	MOV	R2,R1		; COPY POSITION IN LIST
	RETURN			;

	.END
