	.TITLE	OBSCN
	.IDENT	/01.01/
 
;
;		COPYRIGHT (c) 1981 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; VERSION 01.01
;
; C. MONIA 09-NOV-75
;
; MODIFICATIONS:
;
;	H. HUANG  06-AUG-80
;
;		HH001 -- MODIFY PAT TO HANDLE NON-MACRO PRODUCED
;			 OBJECT MODULES
;
;
; DECODE STANDARD OBJECT MODULE FORMAT
;
; LOCAL DATA
;
; DISPATCH TABLE STORAGE
;
 
	.PSECT	$$DSPV,D,GBL,OVR
 
BLKVCT:				;
	.WORD	ILFMT1		; BLOCK TYPE 0 - ILLEGAL FORMAT
	.WORD	GSD		; BLOCK TYPE 1 - START GSD
	.WORD	RPEAT		; BLOCK TYPE 2 - END GSD
	.WORD	RPEAT		; BLOCK TYPE 3 - TEXT
	.WORD	RPEAT		; BLOCK TYPE 4 - RLD
	.WORD	RPEAT		; BLOCK TYPE 5 - ISD
	.WORD	MODND		; BLOCK TYPE 6 - MODULE END
LGBLK=.-BLKVCT/2-1		; MAXIMUM LEGAL BLOCK TYPE
 
;
; GSD DISPATCH VECTOR
;
 
GSDVCT:				;
	.WORD	EXIT		; GSD RECORD TYPE 0 - MODULE NAME
	.WORD	EXIT		; GSD RECORD TYPE 1 - SECTION NAME
	.WORD	EXIT		; GSD RECORD TYPE 2 - INTERNAL SYMBOL
	.WORD	EXIT		; GSD RECORD TYPE 3 - TRANSFER ADDRESS
	.WORD	EXIT		; GSD RECORD TYPE 4 - SYMBOL DECLARATION
	.WORD	EXIT		; GSD RECORD TYPE 5 - PROGRAM SECTION NAME
	.WORD	EXIT		; GSD RECORD TYPE 6 - VERSION IDENTIFICATION
	.WORD	EXIT		; GSD RECORD TYPE 7 - MAPPED ARRAY
	.WORD	EXIT		; GSD RECORD TYPE 10 - COMPLETION ROUTINE
LGSD=.-GSDVCT/2-1		; LARGEST GSD RECORD TYPE
 
;
; RLD DISPATCH VECTOR
;
 
RLDVCT:				;
	.WORD	ILFMT		; RLD RECORD TYPE 0 - ILLEGAL FORMAT
	.WORD	EXIT		; RLD RECORD TYPE 1 - INTERNAL RELOCATION
	.WORD	EXIT		; RLD RECORD TYPE 2 - GLOBAL RELOCATION
	.WORD	EXIT		; RLD RECORD TYPE 3 - INTERNAL DISPLACED
	.WORD	EXIT		; RLD RECORD TYPE 4 - GLOBAL DISPLACED
	.WORD	EXIT		; RLD RECORD TYPE 5 - GLOBAL ADDITIVE
	.WORD	EXIT		; RLD RECORD TYPE 6 - GLOBAL ADDITIVE DISPLACED
	.WORD	EXIT		; RLD RECORD TYPE 7 - LOCATION COUNTER DEFINITION
	.WORD	EXIT		; RLD RECORD TYPE 10 - LOCATION COUNTER MODIFICATION
	.WORD	EXIT		; RLD RECORD TYPE 11 - LIMIT DIRECTIVE
	.WORD	EXIT		; RLD RECORD TYPE 12 - SECTOR RELOCATION
	.WORD	ILFMT		; RLD RECORD TYPE 13 - ILLEGAL FORMAT
	.WORD	EXIT		; RLD RECORD TYPE 14 - SECTOR DISPLACED
	.WORD	EXIT		; RLD RECORD TYPE 15 - SECTOR ADDITIVE
	.WORD	EXIT		; RLD RECORD TYPE 16 - SECTOR ADDITIVE DISPLACED
	.WORD	EXIT		; RLD RECORD TYPE 17 - COMPLEX RELOCATION
	.WORD	EXIT		; RLD RESORD TYPE 20 - LIBRARY ADDITIVE
LGRLD=.-RLDVCT/2-1		; LARGEST RLD RECORD TYPE
 
	.PSECT
 
 
;
; GSD RECORD STORAGE
;
 
LCLSYM:	.BLKW	8.		;
 
;+
; **-$OBSCN-SCAN OBJECT MODULE 
;
; THIS SUBROUTINE IS CALLED TO READ AN OBJECT MODULE AND DISPATCH
; TO PROCESSING ROUTINES FOR EACH RECORD AND BLOCK TYPE. THE DISPATCH
; TABLE FOR BLOCK TYPES AND RECORD TYPES WITHIN BLOCK IS SUPPLIED
; BY THE CALLER.
;
; INPUTS:
;
;	DISPATCH TABLE FOR CALLING MODULE RESIDING IN OVERLAYED
;	SECTION $$DSPV
;
;	DISPATCH TABLE HAS THE FOLLOWING FORMAT:
;
;	BLKVCT:.WORD	ILFMT		; DISPATCH VECTOR -BLOCK TYPE 0
;		.WORD	STGSD		; DISPATCH VECTOR-BLOCK TYPE 1
;			.
;			.
;			.
;		.WORD	MODND		; END OF BLOCK DISPATCHER
;	GSDVCT:	.WORD	MODNME		; GSD DISPATCH TABLE
;		.WORD	SCTNME		; ...
;			.
;			.
;			.
;		.WORD	VIDENT		; END OF GSD DISPATCH TABLE
;	RLDVCT:	.WORD	ILFMT		; RLD DISPATCH TABLE
;		.WORD	INTREL		; ...
;			.
;			.
;			.
;		.WORD	CPLREL		; END OF RLD DISPATCH TABLE
;
;	A .BLKW 1 IN ANY TABLE POSITION SPECIFIES A RECORD OR BLOCK TYPE THAT
;	THAT IS IGNORED.
;
; OUTPUTS:
;
;	THE APPROPRIATE ROUTINE IS CALLED WITH:
;
;	R3=REMAINING BYTE COUNT IN BLOCK TO BE PROCESSED
;	CALLED ROUTINE MUST RETURN THE UPDATED BYTE COUNT IN R3
;
;	THE FOLLOWING BLOCK DEPENDANT PARAMETERS ARE ALSO
;	SUPPLIED:
;
;	START OF GSD:
;
;		R0=ADDRESS OF LOCAL DESCRIPTOR CONTAINING GSD RECORD
;
;	RLD BLOCK TYPE:
;
;		R0=DISPLACEMENT
;
; EXCEPT FOR R3, ALL REGISTERS ARE AVAILABLE FOR USE BY THE CALLED
; ROUTINE.
;
; A RETURN TO THE INITIAL CALLER IS MADE UNDER THE FOLLOWING CON-
; DITIONS:
;
;	C/CLEAR - PREVIOUS RECORD TYPE WAS END-OF-MODULE
;	C/SET-ILLEGAL MODULE FORMAT DETECTED
;
;-
 
	.ENABL	LSB
 
$OBSCN::			;
	SAVRG			; SAVE THE NON-VOLATILE REGISTERS
	CLR	$NBYTE		; FORCE READ OF NEXT RECORD
10$:				;
	CALL	$GTBYT		; GET RECORD LENGTH
	BCS	EXIT		; IF C/S - EOF (ILLEGAL FORMAT)
	MOV	R0,R3		; SAVE LENGTH
	CALL	$GTWRD		; GET BLOCK TYPE
	SUB	#2,R3		; ADJUST BYTE COUNT
	CMP	#LGBLK,R0	; LEGAL BLOCK TYPE?
	BLO	EXIT		; IF LO NO
	ASL	R0		; CONVERT TO WORD OFFSET
	SEC			; ASSUME ILLEGAL FORMAT
	CALL	@BLKVCT(R0)	; DISPATCH ON BLOCK TYPE
	BR	10$		; GO AGAIN
 
;
; DISPATCH ON GSD RECORD TYPE
;
 
GSD:				;
	MOV	#LCLSYM,R4	; GET ADDRESS TO STORE RECORD
	MOV	#4,R5		; GET REPEAT COUNT
20$:				;
	CALL	$GTWRD		; GET A WORD
	MOV	R0,(R4)+	; SAVE IN TEMP BUFFER
	SOB	R5,20$		; REPEAT
	SUB	#8.,R3		; ADJUST FOR SYMBOL ENTRY
	MOV	#LCLSYM-S$YM,R0	; GET ADDRESS OF LOCAL DESCRIPTOR
	MOVB	S$CNT(R0),R1	; GET RECORD TYPE
	CMP	#LGSD,R1	; LEGAL RECORD TYPE?
	BLO	ILFMT1		; IF LO NO
	ASL	R1		; MAKE WORD FORMAT
	CALL	@GSDVCT(R1)	; CALL RECORD DEPENDANT ROUTINE
	TST	R3		; ANY MORE TO PROCESS
	BGT	GSD		; IF GT GO AGAIN
	RETURN			;
 
;
; MODULE HAS ILLEGAL FORMAT
;
 
ILFMT:				;
	INC	(SP)+		; CLEAN STACK
ILFMT1:				;
	INC	(SP)+		;
	SEC			; SET ERROR FLAG
	BR	EXIT		; EXIT
 
;
; DISPATCH ON RLD RECORD TYPE
;
 
RLD:				;
	CALL	$GTBYT		; GET COMMAND BYTE
	MOV	R0,R5		; SAVE COMMAND BYTE
	CALL	$GTBYT		; GET DISPLACEMENT BYTE
	SUB	#2,R3		; ADJUST BYTE COUNT
	CMP	#LGRLD,R5	; LEGAL RLD VALUE?
	BLO	ILFMT1		; IF LO NO
	ASL	R5		; CONVERT RECORD TYPE TO WORD OFFSET
	CALL	@RLDVCT(R5)	; DISPATCH TO PROCESSING ROUTINE
	TST	R3		; ANY MORE TO PROCESS?
	BGT	RLD		; IF GT YES
 
;
; END OF MODULE
;
 
MODND:				;
	CLC			; SET SUCCESS
	INC	(SP)+		; CLEAN STACK
EXIT:				;
	RETURN			;
 
;
; FORCE READ OF NEXT RECORD
;
 
RPEAT:				;
	CLR	$NBYTE		; CLEAR NEXT BYTE ADDRESS
	INC	(SP)+		; CLEAN STACK
	BR	10$		; PROCESS NEXT BLOCK TYPE
 
	.DSABL	LSB
 
	.END
