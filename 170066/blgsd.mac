	.TITLE	BLGSD
	.IDENT	/01.01/
 
;
;		COPYRIGHT (c) 1981 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
; VERSION 01.01
;
; C. MONIA 11-NOV-75
;
; MODIFICATIONS:
;
;	C. MONIA  05-FEB-77
;
;		CM001 -- CORRECT VERSION IDENTIFICATION PROCESSING
;
;
;	H. HUANG  06-AUG-80
;
;		HH001 -- MODIFY PAT TO HANDLE NON-MACRO PRODUCED
;			 OBJECT MODULES
;
; BUILD GSD TABLES
;
; MACRO LIBRARY CALLS
;
 
	.MCALL	CLOSE$
 
;
; LOCAL DATA
;
; OBJECT MODULE DISPATCH TABLES
;
 
	.PSECT	$$DSPV,D,GBL,OVR
 
	.BLKW	1		; BLOCK TYPE 0 - ILLEGAL FORMAT
	.BLKW	1		; BLOCK TYPE 1 - START GSD
	.WORD	ENGSD		; BLOCK TYPE 2 - END GSD
	.BLKW	1		; BLOCK TYPE 3 - TEXT
	.BLKW	1		; BLOCK TYPE 4 - RLD
	.BLKW	1		; BLOCK TYPE 5 - ISD
	.BLKW	1		; BLOCK TYPE 6 - MODULE END
 
;
; GSD DISPATCH TABLE
;
 
	.BLKW	1		; GSD RECORD TYPE 0 - MODULE NAME
	.WORD	PSECT		; GSD RECORD TYPE 1 -SECTION NAME
	.BLKW	1		; GSD RECORD TYPE 2 - INTERNAL SYMBOL
	.WORD	XFRAD		; GSD RECORD TYPE 3 - TRANSFER ADDRESS
	.WORD	SYMDCL		; GSD RECORD TYPE 4 - SYMBOL DECLARATION
	.WORD	PSECT		; GSD RECORD TYPE 5 - PROGRAM SECTION NAME
	.WORD	VIDENT		; GSD RECORD TYPE 6 - VERSION IDENTIFICATION
	.WORD	SYMDCL		; GSD RECORD TYPE 7 - MAPPED ARRAY
	.WORD	SYMDCL		; GSD RECORD TYPE 10 - COMPLETION ROUTINE
 
	.PSECT
 
;
; TABLE ADDRESS OF CURRENT SECTION
;
 
CRSCT:	.WORD	0		; INITIALIZE CRSCT WITH NULL (0)
 
;
; INITIAL STACK POINTER
;
 
SPSAV:	.BLKW	1		;
 
;+
; **-$BLGSD-BUILD GSD SYMBOL TABLES
;
; THIS ROUTINE IS CALLED TO CONSTRUCT THE GSD SYMBOL TABLES FROM THE
; MODULE TO BE PATCHED.
;
; INPUTS:
;
;	$INFDB=INPUT FILE FDB. FILE MUST BE OPEN AND POSITIONED
;	       AT THE FIRST RECORD IN THE MODULE
;
; OUTPUTS:
;
;	THE GSD TABLES (GLOBAL SYMBOLS, TRANSFER ADDRESS AND PROGRAM
;	SECTIONS) ARE CONSTRUCTED FROM THE GSD RECORDS IN THE MODULE
;	TO BE PATCHED.
;
;-
 
	.ENABL	LSB
 
$BLGSD::			;
	MOV	SP,SPSAV	; SAVE STACK POINTER
	CALL	$OBSCN		; INITIATE SCAN OF OBJECT MODULE
	ERROR$	E$R1,S$V2,#$INFDB+F.FNB+N.FNAM ; INPUT FILE HAS ILLEGAL FORMAT
 
;
; END OF GSD
;
 
ENGSD:				;
	MOV	SPSAV,SP	; RESTORE STACK POINTER
	CLOSE$	#$INFDB		; CLOSE INPUT FILE
	BCC	10$		; IF C/C CLOSE SUCCEEDED
	ERROR$	E$R2,S$V2,#$INFDB+F.FNB+N.FNAM ; ERROR DURING CLOSE
10$:				;
	RETURN			;
 
;
; PROGRAM SECTION
;
 
PSECT:				;
	INC	$CSCNT		; INCREMENT SECTION COUNT
	MOV	#$SCTHD+2,R5	; POINT TO SECTION TABLE LISTHEAD
	MOV	R0,R4		; SAVE ADDRESS OF LOCAL DESCRIPTOR
	MOV	#C$SLGH,R1	; GET LENGTH OF DESCRIPTOR
	CALL	$ALBLK		; ALLOCATE MEMORY
	MOV	R0,CRSCT	; SAVE ADDRESS OF CURRENT SECTION
30$:				;
	MOV	R0,R1		; COPY ADDRESS OF SECTION TABLE ENTRY
	ADD	#S$YM,R1	; OFFSET TO SYMBOL ENTRY
	ADD	#S$YM,R4	; ...
 
	.REPT	4
	MOV	(R4)+,(R1)+	; COPY ENTRY
	.ENDR
 
	MOV	R0,@(R5)+	; LINK TO OLD LAST
	MOV	R0,-(R5)	; SET NEW LAST
;
;	CHECK IF THIS PSECT IF THE FIRST PSECT DEFENITION.
;	IF SO - ENTER THE ADDRESS OF THIS SECTION (CRSCT)
;		INTO S$YSCT FIELD OF ANY GLOBAL SYMBOL
;		WHOSE S$YSCT ENTRY IS CURRENTLY NULL (0).
;

	MOV	#$SCTHD,R5	; PSECT JUST INSERTED THE
	CMP	(R5)+,(R5)	; FIRST PSECT DEFENITION ?
	BNE	35$		; IF NO, RETURN

	MOV	#$SYMHD,R2	; GET LIST HEAD OF GLOBAL SYMBOLS
31$:
	MOV	(R2),R2		; GET ADDRESS OF NEXT SYMBOL
	BEQ	35$		; IF NONE, RETURN
	CMP	S$YSCT(R2),#0	; SECTION PREVIOUSLY UNDEFINED ?
	BNE	31$		; IF DEFINED, GET NEXT SYMBOL
	MOV	CRSCT,S$YSCT(R2) ; UNDEFINED, ENTER CRSCT INTO DESCIPTOR
	BR	31$		; GET NEXT SYMBOL

35$:
	RETURN			;
 
;
; GLOBAL SYMBOL
;
 
SYMDCL:				;
	MOV	#$SYMHD,R5	; GET LISTHEAD ADDRESS
	MOV	R0,R4		; SAVE ADDRESS OF DESCRIPTOR
	MOV	#S$YLGH,R1	; SET LENGTH OF ENTRY
	CALL	$ALBLK		; ALLOCATE CORE BLOCK
	MOV	CRSCT,S$YSCT(R0) ; SET ADDRESS OF CURRENT SECTION
	MOV	R0,R1		; COPY SYMBOL TABLE ENTRY
	ADD	#S$YM,R4	; OFFSET TO SYMBOL ENTRY
	ADD	#S$YM,R0	; ...
 
	.REPT	4
	MOV	(R4)+,(R0)+	; COPY SYMBOL TABLE ENTRY
	.ENDR
 
	MOV	R5,R0		; POINT TO LISTHEAD
	CALLR	$ISYMR		; INSERT SYMBOL IN TABLE
 
	.ENABL	LSB
 
;
; VERSION IDENTIFICATION
;
 
VIDENT:				;
	MOV	#$IDENT,R1	; GET ADDRESS TO STORE IDENTIFICATION
	BR	10$		;
;
; TRANSFER ADDRESS
;
 
XFRAD:				;
	MOV	#$XFRAD,R1	; GET ADDRESS TO STORE TRANSFER ADDRESS
10$:				;
	ADD	#S$YM,R0	; OFFSET TO SYMBOL NAME
 
	.REPT	4
	MOV	(R0)+,(R1)+	; SAVE TRANSFER ADDRESS
	.ENDR
 
	RETURN			;
 
 
	.DSABL	LSB
 
	.END
