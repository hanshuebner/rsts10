	.TITLE	EDGSD
	.IDENT	/00.01/
 
;
;		COPYRIGHT (c) 1981 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
;
;
; VERSION 00.01
;
; C. MONIA 12-NOV-75
;
; MODIFICATIONS:
;
;	H. HUANG  06-AUG-80
;
;		HH001 -- MODIFY PAT TO HANDLE NON-MACRO PRODUCED
;			 OBJECT MODULES
;
;
; MERGE CORRECTION FILE GSD
;
; MACRO LIBRARY CALLS
;
 
	.MCALL	CLOSE$
 
;
; LOCAL DATA
;
; OBJECT MODULE DISPATCH TABLES
;
 
	.PSECT	$$DSPV,D,GBL,OVR
 
	.BLKW	1		; BLOCK TYPE 0 - ILLEGAL FORMAT
	.BLKW	1		; BLOCK TYPE 1 - START GSD
	.WORD	ENGSD		; BLOCK TYPE 2 - END GSD
	.BLKW	1		; BLOCK TYPE 3 - TEXT
	.BLKW	1		; BLOCK TYPE 4 - RLD
	.BLKW	1		; BLOCK TYPE 5 - ISD
	.BLKW	1		; BLOCK TYPE 6 - MODULE END
 
;
; GSD DISPATCH TABLE
;
 
	.BLKW	1		; GSD RECORD TYPE 0 - MODULE NAME
	.WORD	PSECT		; GSD RECORD TYPE 1 -SECTION NAME
	.BLKW	1		; GSD RECORD TYPE 2 - INTERNAL SYMBOL
	.WORD	XFRAD		; GSD RECORD TYPE 3 - TRANSFER ADDRESS
	.WORD	SYMDCL		; GSD RECORD TYPE 4 - SYMBOL DECLARATION
	.WORD	PSECT		; GSD RECORD TYPE 5 - PROGRAM SECTION NAME
	.WORD	VIDENT		; GSD RECORD TYPE 6 - VERSION IDENTIFICATION
	.WORD	SYMDCL		; GSD RECORD TYPE 7 - MAPPED ARRAY
	.WORD	SYMDCL		; GSD RECORD TYPE 10 - COMPLETION ROUTINE
 
	.PSECT
 
;
; ADDRESS OF CURRENT SECTION
;
 
CRSCT:	.BLKW	1		;
 
;
; NUMBER OF CONTROL SECTIONS IN CORRECTION INPUT FILE
;
 
CSNUM:	.BLKW	1		;
 
;
; INITIAL STACK POINTER
;
 
SPSAV:	.BLKW	1		;
 
;+
; **-$EDGSD-MERGE INPUT MODULE AND CORRECTION FILE GSD
;
; THIS ROUTINE IS CALLED TO COMBINE THE GSD RECORDS FROM THE
; INPUT AND CORRECTION FILES. THE RULES FOR MERGING GSD RECORDS ARE
; AS FOLLOWS:
;
;	SECTIONS AND PROGRAM SECTIONS:
;
;		NEW PROGRAM SECTIONS AND SECTIONS ARE ADDED TO THE
;		SECTION LIST.
;
;		IF DUPLICATE SECTIONS OR PROGRAM SECTIONS ARE ENCOU-
;		TERED, THE LENGTH IS SET IN ACCORDANCE WITH THE LONGER
;		OF THE TWO ENTRIES. THE ATTRIBUTES OF THE NEW ENTRY SUPER-
;		CEDE THOSE OF THE PREVIOUS ENTRY. THE RELOCATABILITY ATTRI-
;		BUTE MUST BE THE SAME FOR BOTH ENTRIES.
;
;	GLOBAL SYMBOLS:
;
;		NEW SYMBOLS ARE ENTERED IN THE SYMBOL TABLE.
;
;		DUPLICATE REFERENCES ARE IGNORED.
;
;		A DUPLICATE DEFINITION SUPERCEDES THE INITIAL DEFINITION.
;
;		A FATAL ERROR MESSAGE IS PRINTED IN ALL OTHER CASES.
;
;	TRANSFER ADDRESS:
;
;		UNLESS A DUMMY ADDRESS IS ENCOUNTERED, TRANSFER
;		ADDRESS SUPERCEDES THAT OF THE INPUT MODULE.
;
;	MODULE IDENT.
;
;		MODULE IDENT. SUPERCEDES THAT OF THE INPUT MODULE.
;
; INPUTS:
;
;	GSD TABLES BUILT BY $BLGSD
;	CORRECTION INPUT FILE
;
; OUTPUTS:
;
;	GSD TABLE CONTENTS ARE EDITED AS DESCRIBED ABOVE
;
;-
 
$EDGSD::			;
	CLR	CSNUM		; CLEAR NUMBER OF SECTIONS
	MOV	#$CRFNB,R0	; GET ADDRESS OF CORRECTION FILE NAMEBLOCK
	CALL	$OPNIN		; OPEN INPUT FILE
	MOV	SP,SPSAV	; MARK STACK
	CALL	$OBSCN		; SCAN CORRECTION FILE
	ERROR$	E$R1,S$V2,#$INFDB+F.FNB+N.FNAM ; INPUT FILE HAS ILLEGAL FORMAT
 
;
; END OF GSD
;
 
ENGSD:				;
	MOV	SPSAV,SP	; RESTORE STACK POINTER
	CLOSE$	#$INFDB		; CLOSE CORRECTION INPUT FILE
	RETURN			; EXIT
 
;
; SECTION AND PROGRAM SECTION NAME
;
 
PSECT:				;
	MOV	R0,R4		; SAVE DESCRIPTOR ADDRESS
	MOV	#CSNUM,R1	; GET ADDRESS OF SECTION COUNT
	MOV	(R1),R5		; GET SECTION COUNT
	INC	(R1)		; INCREMENT COUNT
	MOV	(R1),R1		; GET NEW COUNT
	CALL	$ALBLK		; ALLOCATE BLOCK
	MOV	R0,-(SP)	; SAVE ADDRESS OF BLOCK
	MOV	$CRCMT,R1	; GET ADDRESS OF CURRENT MAPPING TABLE
	MOV	R0,$CRCMT	; SAVE NEW MAPPING TABLE ADDRESS
	MOV	R1,R2		; SAVE OLD CMT ADDRESS
	BEQ	7$		; IF EQ THIS IS FIRST ENTRY
5$:				;
	MOVB	(R1)+,(R0)+	; COPY CMT ENTRY
	DEC	R5		; DECREMENT COUNT
	BNE	5$		; IF NE GO AGAIN
	MOV	R0,(SP)		; SAVE ADDRESS OF LAST SLOT
	MOV	.FSRPT,R0	; GET ADDRESS OF CORE POOL
	SUB	R2,R1		; COMPUTE NUMBER OF BYTES TO RELEASE
	CALL	$RLCB		; RELEASE CORE BLOCK
7$:				;
	MOV	R4,R1		; SET ADDRESS OF SYMBOL
	MOV	#$SCTHD,R0	; GET ADDRESS OF SECTION LISTHEAD
	CALL	$SRCHR		; SEARCH FOR ENTRY
	BCS	20$		; IF C/S NOT FOUND
	MOVB	R1,@(SP)+	; MAKE ENTRY IN MAPPING TABLE
	MOV	R0,CRSCT	; SET ADDRESS OF CURRENT SECTION
	CMPB	S$YFLG+1(R0),S$YFLG+1(R4) ; COMPARE TYPES
	BNE	40$		; IF NE INCONSISTENT FORMAT
	CMPB	S$YFLG+1(R0),#1	; SECTION NAME?
	BEQ	10$		; IF EQ YES, IGNORE FLAGS
	MOVB	#CS$REL,R1	; SET RELOCATABLE FLAG
	MOVB	R1,R2		; COPY FLAG
	BICB	S$YFLG(R0),R1	; CLEAR ALL SECTION FLAGS
	BICB	S$YFLG(R4),R2	; ...
	CMPB	R1,R2		; COMPARE RELOCATABILITY
	BNE	40$		; IF NE INVALID FORMAT
	MOVB	S$YFLG(R0),S$YFLG(R4) ; TRANSFER ATTRIBUTES
10$:				;
	CMP	S$YVAL(R0),S$YVAL(R4) ; CHECK LENGTHS
	BHIS	30$		; IF HIS NO CHANGE
	MOV	S$YVAL(R4),S$YVAL(R0) ; SET TO HIGHER LENGTH
	BR	30$		;
20$:				;
	MOVB	$CSCNT,@(SP)+	; MAKE ENTRY IN MAPPING TABLE
	INC	$CSCNT		; INCREMENT COUNT OF SECTIONS
	MOV	#C$SLGH,R1	; GET LENGTH OF ENTRY
	CALL	$ALBLK		; ALLOCATE BLOCK
	MOV	R0,CRSCT	; SET ADDRESS OF CURRENT SECTION
	MOV	R0,R1		; COPY ADDRESS OF BLOCK
	ADD	#S$YM,R4	; OFFSET TO SYMBOL NAME
	ADD	#S$YM,R1	; ...
 
	.REPT	4
	MOV	(R4)+,(R1)+	; COPY ENTRY
	.ENDR
 
	MOV	#$SCTHD+2,R1	; GET ADDRESS OF SECTION TABLE LIST
	MOV	R0,@(R1)+	; LINK TO OLD LAST
	MOV	R0,-(R1)	; SET NEW LAST
30$:				;
	RETURN			;
 
;
; SECTION HAS INCOMPATIBLE FORMAT
;
 
40$:				;
	MOV	R4,R2		; COPY DESCRIPTOR ADDRESS
	ADD	#S$YM,R2	; POINT TO SECTION NAME
	ERROR$	E$R7,S$V2	; FATAL, NO RETURN
 
 
;
; GLOBAL SYMBOL
;
 
SYMDCL:				;
	MOV	R0,R4		; SAVE ADDRESS OF DESCRIPTOR
	MOV	R4,R1		; SET DESCRIPTOR ADDRESS
	MOV	#$SYMHD,R0	; GET SYMBOL TABLE LISTHEAD
	CALL	$SRCHR		; SEARCH FOR SYMBOL
	BCS	10$		; IF C/S NOT IN TABLE
	MOVB	S$YFLG(R0),R1	; GET FOUND REFERENCE FLAGS
	MOVB	S$YFLG(R4),R2	; GET GSD FLAGS
	BICB	#^C<SY$DEF!SY$REL!SY$GBL>,R1 ; CLEAR EXTRANEOUS FLAGS
	BICB	#^C<SY$DEF!SY$REL!SY$GBL>,R2 ; CLEAR EXTRANEOUS FLAGS
	CMPB	R1,R2		; COMPARE FLAGS
	BNE	40$		; IF NE INCOMPATIBLE REFERENCES
	BITB	#SY$DEF,R1	; MULTIPLY DEFINED?
	BNE	20$		; IF NE SUPERSEDE EXISTING DEFINITION
	BR	30$		; ELSE IGNORE DUPLICATE REFERENCES
10$:				;
	MOV	#S$YLGH,R1	; GET SIZE OF BLOCK TO ALLOCATE
	CALL	$ALBLK		; ALLOCATE CORE BLOCK
	CALL	20$		; BUILD NEW ENTRY
	MOV	#$SYMHD,R0	; GET LISTHEAD ADDRESS
	CALLR	$ISYMR		; INSERT IN LIST
20$:				;
	MOV	R0,R1		; COPY ADDRESS OF ENTRY
	ADD	#S$YM,R0	; POINT TO SYMBOL NAME
	ADD	#S$YM,R4	; ...
 
	.REPT	4
	MOV	(R4)+,(R0)+	; COPY ENTRY
	.ENDR
 
	MOV	CRSCT,(R0)	; POINT TO CURRENT SECTION
30$:				;
	RETURN			;
 
;
; SYMBOL HAS INCOMPATIBLE DEFINITION
;
 
40$:				;
	MOV	R4,R2		; COPY DESCRIPTOR ADDRESS
	ADD	#S$YM,R2	; POINT TO SYMBOL NAME
	ERROR$	E$R6,S$V2	; FATAL ERROR, NO RETURN
 
;
; MODULE IDENTIFICATION
;
 
	.ENABL	LSB
 
VIDENT:				;
	MOV	#$IDENT,R1	; POINT TO IDENT. STORAGE
	BR	10$		;
 
;
; TRANSFER ADDRESS
;
 
XFRAD:				;
	CMP	S$YVAL(R0),#1	; DUMMY TRANSFER ADDRESS?
	BEQ	20$		; IF EQ YES, IGNORE IT
	MOV	#$XFRAD,R1	; POINT TO TRANSFER ADDRESSS STORAGE
10$:				;
	ADD	#S$YM,R0	; POINT TO SYMBOL NAME
 
	.REPT	4
	MOV	(R0)+,(R1)+	; COPY GSD RECORD
	.ENDR
 
20$:				;
	RETURN			;
 
	.END
