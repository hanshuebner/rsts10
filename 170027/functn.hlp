! FUNCTN.HLP - HELP file for DCL functions
!
!            Copyright (c) 1985 by
! Digital Equipment Corportation, Maynard, Mass.
!
DCL functions are routines in DCL that manipulate strings or return job,
file, or system information.

The general format of a DCL function is:

     F$function-name([argument,...])

Parentheses are optional for those DCL functions that are defined as
having no arguments, or where no arguments are included with the
function.  DCL function names may also be abbreviated.

Arguments to a function can be symbols, expressions, or other functions.

For more information on functions, see the Guide to Writing Command
Procedures and the RSTS/E Quick Reference Guide.  

*F$ACCESS
  Returns a keyword string indicating your job's current access mode.

  Format:

       F$ACCESS()

  Keywords returned:

     "LOCAL"

       Indicates that your job is running on a local terminal line.

     "DIALUP"

       Indicates that your job is running on a dial-up terminal line.

     "BATCH"

       Indicates that your job is running on a pseudo-keyboard under
       the control of a batch processor.

     "NETWORK"

       Indicates that your job is running under a virtual terminal
       facility from a remote system.

     "SERVER"

       Indicates that your job is running detached under the control
       of a network controller.

  Example:
        
       $ SAMPLE = F$ACCESS()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "DIALUP"

*F$ASCII
  Returns as an integer the binary value of the first character in a
  string.

  Format:

       F$ASCII(string)

  Example:
        
       $ SAMPLE = F$ASCII("A")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 65

*F$CVTIME
  Converts a standard DCL date/time string or the date/time string
  returned by the F$TIME function to a date/time string.  If no
  date/time argument is supplied, then the current date and time is
  used.  The returned string is in the form:

       yy.mm.dd hh:mm

  where "yy" is the two-digit year number, "mm" is the two-digit month
  number, "dd" is the two-digit day number, "hh" is the two-digit hour
  (24-hour time), and "mm" is the two-digit minute number.

  Format:

       F$CVTIME([date/time])

  The returned string is always 14 characters in length, with a single
  space separating the date and time sub-strings.  The time sub-string
  is always returned in 24-hour format, starting at position 10 in the
  string.

  Example:
        
       $ SAMPLE = F$CVTIME("10-JUN-70 12:00M")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "70.06.10 12:00"

*F$CHR
  Returns the character corresponding to the 8-bit binary argument.
  If an argument outside the range 0-255 is specified, then only the
  least significant 8 bits of the argument are used.

  Format:

       F$CHR(value)

  Example:
        
       $ SAMPLE = F$CHR(65)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "A"

*F$EDIT
  Edits a string according to the edit mode bits specified.  Several
  edit functions can be performed by specifying a mode argument which
  is the sum of the individual function bits desired.

  Format:

       F$EDIT(string,mode)

  Any bit values in the mode argument that are not defined in the
  table below are ignored.
        
       Value     Function
       -----     --------
        
          2      Discards all spaces and tabs
          4      Discards null, <lf>, <ff>, <cr>, <esc>,
                   and <del> characters
          8      Discards leading spaces and tabs
         16      Converts multiple spaces and tabs to a
                   single space
         32      Converts lowercase characters to uppercase
         64      Converts left/right brackets [] to left/right
                   parenthesis ()
        128      Discards trailing spaces and tabs
        256      Disables editing of characters within quoted
                   strings

  Example:
        
       $ SAMPLE = F$EDIT(" My account is  [2,7]  ",8+16+32+64+128)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "MY ACCOUNT IS (2,7)"

*F$ENVIRONMENT
  Returns information about current environment and settings.

  Format:

       F$ENVIRONMENT("keyword")

  The following keywords are accepted by F$ENVIRONMENT:
        
       Keyword          Type    Returns
       -------          ----    -------
       CAPTIVE         string   "TRUE" if executing in captive account
       CONTROL         string   "C" if SET CONTROL=C is in effect
       DATA            string   Current SET DATA status
       DEFAULT         string   Currently logged in account
       DEPTH           integer  Current command procedure depth level
       ECHO            string   Current SET ECHO status
       FREE_CHANNELS   integer  Number of free channels available
       INTERACTIVE     string   "TRUE" if the current job's access 
                                mode is INTERACTIVE
       LOG_FILE        string   Currently open log file
       LOGFILE_PROMPT  string   Current log file prompt
       MAX_DEPTH       integer  Maximum number of command procedure
                                levels
       NOCONTROL       string   "C" if SET NOCONTROL=C is in effect
       ON_CONTROL_C    string   "TRUE" if ON_CONTROL_C is in effect
       ON_SEVERITY     string   Current ON severity THEN level
       PROCEDURE       string   Currently executing command procedure
       PROMPT          string   Current DCL prompt string
       PROTECTION      integer  Default file protection code
       TIME_STAMP      string   "TRUE" if time stamps are currently
                                enabled
       VERIFY          string   "VERIFY[/DEBUG]" if SET VERIFY in
                                effect
                                "NOVERIFY" if SET NOVERIFY in effect

  For more information, see the RSTS/E Quick Reference Guide.

*F$INSTR
  Returns as an integer the position of the first occurance of a
  sub-string within a specified string, starting at a specified
  position.

  If no occurances of the sub-string is found, then the value 0 is
  returned.

  If the position specified is less than 1, then 1 is assumed.  If the
  position specified is greater than the length of the string, then 0
  is always returned.

  If the specified sub-string is null, then the value of the starting
  position is returned, based on the rules above.

  Format:

       F$INSTR(position,string,sub-string)

  Example:
        
       $ SAMPLE = F$INSTR(1,"ABCDEF","DEF")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 4

*F$INTEGER
  Converts a string to integer.

  If the string represents a valid integer, then the function returns
  the integer value.  A valid integer consists of one or more digits,
  optionally preceded by a + or minus character, with optional leading
  or trailing spaces or tabs.

  If the string is not a valid integer string, then the following
  conversion rules are applied:

     o If the string begins with a character {Y,y,T,t}, then the
       integer 1 is returned.

     o If the string begins with a character other than {Y,y,T,t},
       then the integer 0 is returned.

  Format:

       F$INTEGER(string)

  Example:
        
       $ SAMPLE = F$INTEGER("TRUE")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 1

*F$LEFT
  Returns as a string the left sub-string of a string, from position 1
  to the specified position.

  If the position specified is greater than the length of the string,
  then the entire string is returned.  If the position is less than 1,
  then the null string is returned.

  Format:

       F$LEFT(string,position)

  Example:
        
       $ SAMPLE = F$LEFT("ABCDEF",2)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "AB"

*F$LENGTH
  Returns as an integer the length of a string.

  Format:

       F$LENGTH(string)

  Example:
        
       $ SAMPLE = F$LENGTH("ABCDEF")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 6

*F$MESSAGE
  Returns as a string the text for a specified RSTS error code in the
  range 0 to 255.

  Format:

       F$MESSAGE(code)

  Example:
        
       $ SAMPLE = F$MESSAGE(0)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "RSTS V9.0-15 Installation"

*F$MID
  Returns as a string a sub-string within a string, from the specified
  position for the specified length.

  If the position specified is less than 1, then 1 is assumed.  If the
  position specified is greater than the length of the string, or the
  length specified is less than 1, then the null string is returned.

  If the length specified exceeds the length of the string, then the
  sub-string from the position specified to the end of the string is
  returned.

  Format:

       F$MID(string,position,length)

  Example:
        
       $ SAMPLE = F$MID("ABCDEF",3,2)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "CD"

*F$NODE
  Returns as a string the name of the job's current node, in the form

       node-name::

  If DECnet/E is not currently installed or running, then the null
  string is returned.

  Format:

       F$NODE()

  Example:
        
       $ SAMPLE = F$NODE()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "SEMI::"

*F$PARSE
  Returns as a string a complete RSTS file-spec, or, if an optional
  field keyword is included, a specified field within the file-spec.
  An optional default file-spec field can be included to fill in any
  fields missing in the file-spec argument.

  If a field is missing from both the file-spec and default file-spec
  strings, then a null string is returned for that field.

  Format:

       F$PARSE(file-spec[,default-spec][,field])

  An error is displayed if the file-spec or default file-spec is
  invalid, or the field keyword does not match one of the keywords
  listed below.

  If a field keyword is specified as a third argument, then only that
  portion of the file-spec is returned.  The field keywords and their
  meanings are:
        
       Keyword       Meaning
       -------       -------
        
       DEVICE        Return device name string
       PPN           Return project-programmer number string
       NAME          Return file name string
       TYPE          Return file type string
       STATUS        Return device status word integer
       FLAGS         Return file-spec flag word integer

  Example:
        
       $ SAMPLE = F$PARSE("TEST","$.LST")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "[1,2]TEST.LST"

*F$PRIVILEGE
  Returns the integer value 1 (true) or 0 (false), depending on
  whether or not your job's current privileges match those specified
  in the list of privilege names.  

  If your job has all of the privileges specified, then the value 1 is
  returned;  otherwise the value 0 is returned.

  Format:

       F$PRIVILEGE("[NO]priv-name[,...]")

  The NO prefix may be placed before any privilege name.  If
  NOpriv-name is specified, then 1 is returned only if your job does
  NOT have the privilege specified.  If the privilege list contains
  both 'priv-name' and 'NOpriv-name," then 1 is returned only if your
  job has 'priv-name' and does not have 'NOpriv-name."

  Example:
        
       $ SAMPLE = F$PRIVILEGE("TUNE,DEVICE")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 0

*F$JOB
  Returns as an integer your current job number.

  Format:

       F$JOB()

  Example:
        
       $ SAMPLE = F$JOB()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 14

*F$RIGHT
  Returns as a string the right sub-string of a string, from a
  specified position to the last position in the string.

  If the position specified is 1 or less, then the entire string is
  returned.  If the position specified is greater than the length of
  the string, then the null string is returned.

  Format:

       F$RIGHT(string,position)

  Example:
        
       $ SAMPLE = F$RIGHT("ABCDEF",4)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "DEF"

*F$SEARCH
  Returns as a string the file-spec of the next disk file matching the
  file-spec specified.  Standard RSTS wildcard characters may be used
  in the PPN, file name or file type fields.

  F$SEARCH is not allowed at the interactive level.  Each command
  level uses F$SEARCH independent of other levels.

  Format:

       F$SEARCH([file-spec])

  If the file-spec argument is null or not specified, then F$SEARCH
  returns the next file-spec matching the file-spec last specified in
  an F$SEARCH function.

  If no file is found matching the file-spec, then the null string is
  returned.

  F$SEARCH requires a DCL channel to search for wildcard file-specs.
  The channel remains open until the current command procedure ends or
  no more files are found matching the file-spec.

  Example:
        
       $ SAMPLE = F$SEARCH("[1,*]TEST.*")
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "_SY:[1,2]TEST.BAS"

*F$STRING
  Converts an integer symbol or expression to a string.  The string
  returned contains no leading zeros and no leading or trailing
  spaces.

  If the value is negative, then the string is returned with a leading
  minus (-) sign;  no leading plus (+) sign is returned for positive
  values.

  Format:

       F$STRING(integer)

  Example:
        
       $ SAMPLE = F$STRING(1000)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "1000"

*F$TERMINAL
  Returns as an integer your current keyboard number.

  Format:

       F$TERMINAL()

  Example:
        
       $ SAMPLE = F$TERMINAL()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 0

*F$TIME
  Returns as a string the current date and time in the form:

       date time

  The date and time formats used are based on the system default.  The
  time sub-string always begins at position 11 of the returned string.
  One or more spaces separate the date and time sub-strings.  No
  leading or trailing spaces are returned.

  Format:

       F$TIME()

  Example:
        
       $ SAMPLE = F$TIME()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "14-Aug-85 9:27 AM"

*F$TYPE
  Returns a keyword string indicating the type of symbol or expression
  specified.

  Format:

       F$TYPE(expression)

  Keywords returned:

     "INTEGER"

       Indicates an integer symbol or expression.

     "STRING"

       Indicates a string symbol or expression.

     "" (null string)

       Indicates an undefined symbol or expression containing an
       undefined symbol.

  Example:
        
       $ SAMPLE = F$TYPE(NEW_SYMBOL)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = ""

*F$USER
  Returns as a string your current account number in the form:

       [project no.,programmer no.]

  Format:

       F$USER()

  Example:
        
       $ SAMPLE = F$USER()
       $ SHOW SYMBOL SAMPLE
       SAMPLE = "[1,240]"

*F$VERIFY
  Returns as an integer the current verification status (SET VERIFY or
  SET NOVERIFY).  Additionally, if an argument is specified, it also
  turns verification on or off.

  Format:

       F$VERIFY([value])

  The value 1 (true) is returned if SET VERIFY is in effect;  the
  value 0 (false) is returned if SET NOVERIFY is in effect.

  If an argument is specified, then the low-order bit of the argument
  enables or disables verification.  If the low bit is on (1), then
  verification is enabled;  if the bit is off (0), then verification
  is disabled.

  Example:
        
       $ SAMPLE = F$VERIFY(0)
       $ SHOW SYMBOL SAMPLE
       SAMPLE = 1
