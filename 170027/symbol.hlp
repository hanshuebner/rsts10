! SYMBOL.HLP - HELP file for SYMBOLS topic
!
!            Copyright (c) 1985 by
! Digital Equipment Corportation, Maynard, Mass.
!
DCL symbols are used to maintain string or integer values, and are used
in command procedures like variables in a program.  Symbols are also
used to define new DCL commands or redefine existing DCL commands.

Symbols can be either integers or strings.  String values are zero to
255 characters long and can consist of any 8-bit characters.  Integer
values are signed, 32-bit numbers.

Symbol names are one to 255 characters long, chosen from the set of
characters:

     {A-Z,0-9,$,_}

Lowercase characters are always converted to uppercase.  Symbol names
cannot begin with a numeric character (0-9), underscore (_), or F$
(reserved for function names).

Symbols beginning with $ are reserved;  you cannot define new symbols
beginning with $.

DCL maintains both global and local symbols.  Global symbols are
available at all command levels.  Local symbols are available only at
the current command level.  All symbols defined interactively are always
global.

Use the DELETE/SYMBOL command to delete symbols.  Use the SHOW SYMBOL
command to display global or local symbols.

For complete information on symbols and their use, see the RSTS/E Guide
to Writing DCL Command procedures.  

*Abbreviations
DCL symbols used in command substitution can be abbreviated, in the same
way that standard DCL commands can be abbreviated.

To indicate the abbreviation point in a symbol name, insert a hyphen (-)
or asterisk (*) after the minimum abbreviation in the assignment
statement:

     DI-RECTORY == "DIRECTORY/DATE"

In the above example, DI is the minimum abbreviation for the symbol name
DIRECTORY;  typing DI at the DCL prompt executes the command
DIRECTORY/DATE.

Symbol abbreviations are only recognized in command substitution.
Always use full symbol names when referencing a symbol anywhere else in
a DCL command line.

The SHOW SYMBOL command displays the minimum abbreviation point (if any)
for each symbol displayed.  

*Assignments
DCL assignment commands define a symbol and assign it a string or
integer value.  If the symbol does not exist, then it is created and
assigned the value of the expression.  If the symbol is already defined,
then its current value is erased and the new value assigned.

Format:

     symbol-name =[=] expression

At the interactive level, all symbol assignments define global symbols;
no local symbols exist at the interactive level.

Within a command file, a single equal sign (=) indicates a local symbol
assignment;  double equal sign (==) indicates a global symbol
assignment.

A special "string" assignment command is also defined to assign a string
to a symbol.

Format:

     symbol-name :=[=] string

A single equal sign (=) indicates a local symbol assignment;  double
equal sign (==) indicates a global symbol assignment.

Unless quotes are placed around the string, DCL performs the following
edits as part of the assignment:

   o Converts lowercase to uppercase

   o Removes leading/trailing spaces and tabs

   o Reduces multiple spaces and tabs to one space

Examples:

     $ COUNT == 1

          Assigns the integer value 1 to the global symbol COUNT.

     $ NAME = FIRST + " " + LAST

          Concatenates the string symbols FIRST and LAST (with a space
          separating them) and assigns the resultant string to the
          symbol NAME.

     PR-INT := PRINT/NOFEED

          Assigns the string "PRINT/NOFEED" to the symbol PRINT.  Since
          the ":=" assignment operator is used, no quotes are needed
          around the string.  The hyphen (-) character in the symbol
          name indicates the minimum abbreviation.

*Examples

The following symbol names are valid:

          COUNT

          RETURN_ADDRESS

          LOGICAL$NAME

          VAR004

          var004             (converted to uppercase symbol VAR004)

The following symbol names are invalid:

          BAD&CHARACTER      (contains invalid character "&")

          $MY_SYMBOL         (begins with dollar sign ($) character)

          _UNDERSCORE        (begins with underscore (_) character)

          27_BOAT_LANE       (begins with numeric character)

          F$$$EXIT           (begins with characters "F$")

*$SEVERITY
*$STATUS
The reserved global symbols $SEVERITY and $STATUS are used to maintain
the status of the last DCL command executed.  These symbols are updated
each time a command is completed (except for those commands listed
below).

The low-order three bits of the $STATUS symbol contain the exit status;
other bits are currently ignored by DCL.  You cannot assign values to
the $STATUS or $SEVERITY symbols except through the EXIT command.  The
$SEVERITY symbol contains a copy of the low-order three bits of $STATUS.

The value of $STATUS and $SEVERITY can be tested using the command
IF ... THEN.  However, error conditions are more easily trapped using
the ON ... THEN command.

The possible values for $STATUS and $SEVERITY are:
      
       Value         Meaning
       -----         -------
      
         1           Success
         0           Warning
         2           Error
         4           Severe error

The following commands, if successful, do not change the value of
$STATUS and $SEVERITY:

   o Symbol assigments

   o EOD

   o EXIT without an exit status parameter

   o GOTO

   o GOSUB

   o RETURN without a return status parameter

   o IF ... THEN

   o ON ... THEN

   o ON CONTROL_C THEN

   o SHOW SYMBOL

Also, $SEVERITY and $STATUS are not affected by blank lines or lines
containing only dollar signs, comments or labels.  

*Substitution
DCL performs two types of substitution:  symbol substitution and command
substitution.

You specify symbol substitution in a DCL command by placing apostrophes
(') around a symbol name or expression:

     $ PRINT 'MY_FILE'

     $ PRINT [200,1]HARPO.MRX/COPIES='C+1'

     In the second example, DCL will evaluate the expression C+1 and put
     the result into the command line as the number of copies of the
     file to print.

Use two apostrophes before a symbol name to indicate substitution within
a quoted string:

     $ SET ACCOUNT/NAME="''FIRST' ''LAST'"

Symbol substitution is iterative.  DCL continues to re-scan the command
line from left to right after each substitution until all symbol
substitution has been performed.

Command substitution allows you to define new or redefine existing DCL
commands.  If the first keyword on a DCL command line matches the name
of an existing symbol, then DCL replaces the keyword with the value of
matched symbol.

Use an underscore (_) in front of the first keyword on a DCL command
line to prevent command substitution.

Command substitution is NOT iterative;  it is only performed once in
each command line.
