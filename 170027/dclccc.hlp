 The CCC command invokes the PDP-11 C compiler to compile  C  source
 programs.  The syntax is as follows:

      CCC file-spec,...


                                NOTE

         All user input is converted to uppercase unless  it
         is enclosed in quotation marks.

*Command_Parameters                     

 file-spec,...

     One or more PDP-11 C source files separated by  plus  signs  or
     commas.   If plus signs are used, PDP-11 C concatenates each of
     the specified sources files to  form  a  compilation  unit  and
     creates  one  object  file and one listing file.  If commas are
     used, each file  is  compiled  separately  to  create  separate
     object  files and listing files.  If no input file extension is
     specified, PDP-11 C assumes the .C default file extension.

*Qualifiers                              

 Indicates special actions  to  be  performed  by  the  compiler  or
 special  input  file  properties.  Compiler qualifiers can apply to
 either the CCC command or to the specification of  the  file  being
 compiled.   When a qualifier follows the CCC command, it applies to
 all  the  files  listed.   When  a  qualifier  follows   the   file
 specification,  it  applies  only to the file immediately preceding
 it.

 The following list shows all the qualifiers available with the  CCC
 command:

  o  /[NO]DEFINE=("identifier[(param,...)] token-string" [,...])
  o  /ENVIRONMENT=([NO]FPU, [NO]PIC)
  o  /[NO]ERROR_LIMIT[=qualifier]
  o  /[NO]INCLUDE_DIRECTORY=(pathname [,...])
  o  /[NO]LIST[=file-spec]
  o  /[NO]MACRO[=file-spec]
  o  /[NO]MEMORY[=qualifier]
  o  /[NO]MODULE=(identifier|"string" [,identifier|"string"])
  o  /[NO]OBJECT[=file-spec]
  o  /SHOW[=(option,...)]
  o  /[NO]STANDARD[=ANSI]
  o  /[NO]TERMINAL[=[NO]SOURCE]
  o  /[NO]TITLE=(identifier)
  o  /[NO]UNDEFINE=(identifier[,...])
  o  /[NO]WARNINGS[=(option,...)]
  o  /[NO]WORK_FILE_SIZE=integer_number


*/DEFINE=("identifier[(param,...)] token-string" [,...])
        /NODEFINE (D)

 /DEFINE performs the same  function  as  the  #define  preprocessor
 directive.   That is, /DEFINE defines a token string or macro to be
 substituted for every occurrence  of  a  given  identifier  in  the
 compilation unit.

 All input is converted  to  uppercase  unless  it  is  enclosed  in
 quotation marks.

 The simplest form of a /DEFINE definition is as follows:

 /DEFINE=("TRUE 1")

 This results in a definition like the one that  would  result  from
 the following definition:

 #define TRUE 1

 Macro definitions must be enclosed in quotation marks  as  seen  in
 the following definition:

 /DEFINE=("funct(a) a+sin(a)")

 This  definition  produces  the  same  results  as  the   following
 definition:

 #define funct(a) a+sin(a)

 When more than one /DEFINE is present on the command line or  in  a
 single compilation unit, only the last /DEFINE is used.

 When both /DEFINE and /UNDEFINE are  present  in  a  command  line,
 /DEFINE is evaluated before /UNDEFINE.

 The default is /NODEFINE.
*/ENVIRONMENT=([NO]FPU, [NO]PIC)                    
        /ENVIRONMENT=(NOPIC,FPU) (D)

 This qualifier is used to specify  the  environment  in  which  the
 generated  code  is  to  execute.   The  following  values  may  be
 specified:  [NO]FPU, [NO]PIC.  If you specify this  qualifier,  you
 must  provide  at  least  one  value,  or  an error message will be
 generated.

 If FPU is specified, explicitly or  by  default,  FPU  instructions
 will  be  generated  as  appropriate.   If  NOFPU is specified, FPU
 instructions will not be generated.

 If you specify PIC, PDP-11 C produces  position  independent  code.
 If  you specify or default to NOPIC, non-pic code may be generated.
 For information on position independent code, refer to the  related
 discussion in the PDP-11 MACRO-11 Language Reference Manual.

 The default is /ENVIRONMENT=(NOPIC,FPU).
*/ERROR_LIMIT[=qualifier]                    
        /ERROR_LIMIT=30 (D)

qualifier

 The qualifier specifies the maximum error count.  If the number  of
 errors  encountered  (exclusive  of  informationals  and  warnings)
 exceeds the integer value specified,  the  compilation  is  aborted
 without   further  source  code  analysis.   If  /NOERROR_LIMIT  is
 specified, compilation proceeds regardless of the number of  errors
 encountered.

 The default is /ERROR_LIMIT=30.
*/INCLUDE_DIRECTORY=(pathname [,...])         
        /NOINCLUDE_DIRECTORY (D)

 Provides an additional level of search  for  include  files.   Each
 pathname argument can be either a logical name or a legal directory
 specification.

 The forms of inclusion affected are the  #include  "file-spec"  and
 #include  <file-spec>  forms.   For  the  quoted form, the order of
 search is as follows:

 1.  The directory containing the top level source file.

 2.  The directories specified in the  /INCLUDE_DIRECTORY  qualifier
     (if any).

 3.  The directory or search list of directories (if any)  specified
     in  the  logical  name  C$INCLUDE  on  VMS,  RSX-11M-PLUS,  and
     Micro/RSX systems.

 4.  The current default directory (DK:  on RT-11).


 For the bracketed form, the order of search is as follows:

 1.  The directories specified in the  /INCLUDE_DIRECTORY  qualifier
     (if any).

 2.  The directory or search list of directories  specified  in  the
     logical  name  PDPC$INCLUDE on VMS, RSX-11M-PLUS, and Micro/RSX
     systems, and CLB on RSX-11M and RT-11 systems (if any).

 3.  The  directory  specified  in   the   logical   name   CLB   on
     RSX-11M-PLUS, Micro/RSX, RSTS/E, and RT-11 systems (if any).

 4.  If PDP11C$INCLUDE or CLB is not defined, then the directory  or
     search  list  of  directories  specified  by  LB:[1,1] (on VMS,
     RSX-11M, and RSX-11M-PLUS systems), CC$:  (on RSTS/E  systems),
     and SY:  (on RT-11 systems).


 The default is /NOINCLUDE_DIRECTORY.
*/LIST[=file-spec]                        
        /NOLIST (D)

 Controls whether a listing file is produced.   The  default  output
 file extension is .LST.

 The default is /NOLIST.
*/MACRO[=file-spec]                        
        /NOMACRO (D)

 Controls whether a macro listing file  is  produced.   The  default
 output  file  extension  is  .MAC.  A legal MACRO-11 source program
 corresponding to the translation of the source program is placed in
 the  specified  file.   Note that the /MACRO qualifier differs from
 the /SHOW=MACHINE_CODE qualifier as follows:  The /MACRO  qualifier
 places a MACRO-11 source program in a separate file rather than the
 listing file.  The MACRO-11 source program may be  assembled  under
 MACRO-11  without  modification.   The /SHOW=MACHINE_CODE qualifier
 places a machine code listing similar to the list  file  output  by
 MACRO-11 into the listing file.  The machine code listing cannot be
 directly assembled under MACRO-11.

 The default is /NOMACRO.
*/MEMORY[=qualifier]                        
        /NOMEMORY (D)

qualifier

 This qualifier is used to determine the amount (in 8Kb regions)  of
 extended  memory  to  allocate  in a PDP-11 host environment.  This
 qualifier is ignored  in  VMS  host  environments.   The  specified
 integer  value determines the number of 8192-byte regions which are
 to be allocated.  An integer between 0 and 512 may be specified  to
 allocate  up  to the 4Mb architectural limit of the PDP-11.  If the
 specified amount of extended memory is not available,  the  largest
 number  of  available  8192  byte  regions  which  is available are
 allocated.  In general,  the  greater  amount  of  extended  memory
 allocated,  the  less  work  file  activity,  and  the  faster  the
 performance of the compiler.  If  you  use  the  /MEMORY  qualifier
 without  giving  a  value,  the  value  8  is  used.   /NOMEMORY is
 equivalent to /MEMORY=0.

                                NOTE

         This qualifier is similar  to  the  same  qualifier
         used  by  VAX  LISP.   If this qualifier is used it
         MUST be specified with the first compilation unit.


 The default is /NOMEMORY.
*/MODULE=(identifier|"string" [,identifier|"string"])    
        /MODULE=("last-file-spec-name", "V1.0") (D)

last-file-spec-name

 The last-file-spec-name is the last file name specified for a given
 compilation  unit.   This  qualifier controls the compiler produced
 output module header for the program  file.   This  qualifier  will
 accept  at  most  two string values.  If this qualifier is asserted
 the user must supply at least the first string value.

 The default is /MODULE=("last-file-spec-name", "V1.0").
*/OBJECT[=file-spec]                        
        /OBJECT (D)

 Controls whether a object file is  produced.   The  default  output
 file extension is .OBJ.

 The default is /OBJECT.
*/SHOW[=(option,...)]                             
        /SHOW=(CONDITIONALS,SOURCE) (D)

 This qualifier is used with the /LIST qualifier to  set  or  cancel
 specific listing options.  You can select the following options:

 ALL               Specifying ALL causes all listing information  to
                   be included in the listing file.  By default, ALL
                   is not specified.

 [NO]CONDITIONALS  Specifying /SHOW=CONDITIONALS causes  conditional
                   program  segments  that were not compiled (due to
                   #if type preprocessing directives) to  appear  in
                   the   listing.   Specifying  /SHOW=NOCONDITIONALS
                   causes conditional program segments that were not
                   compiled  to  be  omitted  in  the  listing.  The
                   default is /SHOW=CONDITIONALS.

                                         NOTE

                       The /SHOW=[NO]CONDITIONALS  qualifier  is
                       similar  to  the  same  qualifier used by
                       DIBOL and MACRO-32.


 [NO]EXPANSION     Specifying  /SHOW=EXPANSION  causes  final  macro
                   expansions  to be printed in the program listing.
                   When you specify this option, the  macro  nesting
                   level  of  the  last  macro  expanded on the line
                   prints  next  to  each  line.   The  default   is
                   /SHOW=NOEXPANSION.

 [NO]INCLUDE       Specifying  /INCLUDE  causes  the   contents   of
                   #include  files  to  be  output  as  part  of the
                   program listing.  Specifying /NOINCLUDE  inhibits
                   the contents of #include files from being output.
                   The default is /SHOW=NOINCLUDE.

 [NO]INTERMEDIATE  Specifying  /INTERMEDIATE   causes   intermediate
                   macro  expansions  to  be  output  as part of the
                   program  listing.    Specifying   /NOINTERMEDIATE
                   inhibits intermediate macro expansions from being
                   output.  The default is /SHOW=NOINTERMEDIATE.

 NONE              Specifying NONE causes  an  empty  listing  file,
                   with only the header, to be created.  By default,
                   NONE is NOT specified.

 [NO]MACHINE_CODE  Specifying the /SHOW=MACHINE_CODE option  directs
                   the  compiler  to list the generated machine code
                   in   the   listing   file.    The   default    is
                   /SHOW=NOMACHINE_CODE.

 [NO]SOURCE        Print/do not print source file  statements.   The
                   default is /SHOW=SOURCE.

                   The default is /SHOW=(CONDITIONALS,SOURCE).
*/STANDARD[=ANSI]                       
        /NOSTANDARD (D)

 This qualifier determines if  certain  language  features  will  be
 allowed, disallowed, or flagged as non-standard.

 /NOSTANDARD       Implies PDP-11 C native syntax and semantics.

 /STANDARD         Implies ANSI C  standard  syntax  and  semantics.
                   Compilation   time  may  increase  slightly  when
                   /STANDARD is specified.

 /STANDARD=ANSI    Implies ANSI C  standard  syntax  and  semantics.
                   Compilation   time  may  increase  slightly  when
                   /STANDARD=ANSI is specified.

 The default is /NOSTANDARD.
*/TERMINAL[=[NO]SOURCE]                   
        /TERMINAL=NOSOURCE (D)

 Specifying /TERMINAL=SOURCE causes the compiler to display messages
 at   the  terminal.   Specifying  /TERMINAL=NOSOURCE  inhibits  the
 compiler from displaying messages at the terminal.  This  qualifier
 encompasses   the   functionality   of  the  VAX  C  /SHOW=TERMINAL
 qualifier, and  embodies  additional  functionality  as  well.   If
 /NOTERMINAL  is specified, only the summary message is displayed on
 the user terminal or batch log, as appropriate (this is the same as
 /SHOW=NOTERMINAL  under VAX C).  If /TERMINAL or /TERMINAL=NOSOURCE
 is specified, compiler messages are displayed on the user  terminal
 or  batch  log,  as appropriate, but associated user source text is
 not displayed (this is the same as /SHOW=TERMINAL under VAX C).  If
 /TERMINAL=SOURCE  is  specified,  compiler  messages and associated
 user source text (without macro expansion)  are  displayed  on  the
 user  terminal  or batch log, as appropriate (this functionality is
 not available under VAX C).

 The default is /TERMINAL=NOSOURCE.
*/TITLE=(identifier)                   
        /NOTITLE (D)

identifier

 The identifier is the list title name for a given compilation unit.
 This  qualifier  controls  the compiler produced output list header
 for the program file.  This qualifier if asserted must be  supplied
 with a string value.

 The default is /NOTITLE.
*/UNDEFINE=(identifier[,...])           
        /NOUNDEFINE (D)

 /UNDEFINE performs the same function  as  the  #undef  preprocessor
 directive--it cancels a macro definition.

 The /UNDEFINE qualifier is useful  for  undefining  the  predefined
 PDP-11  C  preprocessor  constants.   For  example,  if  you  use a
 preprocessor constant (such as __pdp11, __PDP11C, or __vms_host) to
 conditionally  compile  segments of PDP-11 C specific code, you can
 undefine constants to see how the portable sections of your program
 execute.  For example:

         /UNDEFINE="__pdp11"

 When both /DEFINE and /UNDEFINE are present on  the  command  line,
 /DEFINE is evaluated before /UNDEFINE.

 The default is /NOUNDEFINE.
*/WARNINGS[=(option,...)]                 
        /WARNINGS (D)

 Controls whether the compiler prints warning  diagnostic  messages,
 informational  diagnostic  messages,  neither,  or  both.   The two
 options are as follows:

      NOINFORMATIONALS
      NOWARNINGS

 The /WARNINGS qualifier alone forces the  compiler  to  print  both
 informationals  and warnings (the same as if no qualifier were used
 on  the  command  line).   The  /NOWARNINGS  qualifier  forces  the
 compiler   to  suppress  both  informationals  and  warnings.   The
 /WARNINGS=NOINFORMATIONALS  qualifier  forces   the   compiler   to
 suppress  the  informationals.   The /WARNINGS=NOWARNINGS qualifier
 forces the compiler to suppress warnings.

 The default it /WARNINGS
*/WORK_FILE_SIZE=integer_number                 
        /WORK_FILE_SIZE=2048 (D)

integer_number

 The  integer_number  is  an  integer  value  between  1  and  65535
 representing the number of 512-byte disk blocks to allocate for the
 work file.  If the /WORK_FILE_SIZE qualifier is  not  specified,  a
 default  work  file  size  is  used.  The work file size determines
 PDP-11 C's capacity for processing source  input.   Note  that  the
 /MEMORY qualifer affects PDP-11 C's performance, not capacity.

 The work file is  placed  on  the  SY:   device.   PDP-11  C  first
 attempts  to  open  the  work  file  contiguous.   If  insufficient
 contiguous disk storage is available, PDP-11 C attempts to open the
 work  file  non-contiguous.   If  insufficient  non-contiguous disk
 storage is available, PDP-11 C  issues  a  diagnostic  and  aborts.
 PDP-11  C  does  not extend the work file:  if work file storage is
 exausted during compilation, a diagnostic is issued  and  PDP-11  C
 aborts.

                                NOTE

         If this qualifier is used it MUST be specified with
         the first compilation unit.


 The default is /WORK_FILE_SIZE=2048.
*Release_Notes                       
 The release notes for PDP-11 C are contained in the following file:

 CC$:CCCREL.DOC

 You can type or print this file to read the release notes.
