! BPFUNC.HLP - help file for BASIC-PLUS FUNCTIONS sub-topic
!
!            Copyright (c) 1985, 1992 by
! Digital Equipment Corportation, Maynard, Mass.
!
BASIC-PLUS functions perform numeric or string operations on arguments
you supply, and return the result to your program.  Besides the
built-in functions described here, you can define your own functions
using the DEF statement.

See the BASIC-PLUS language manual for complete details on how to use
BASIC-PLUS functions.  
 
*ABS
Y = abs(X)
 Absolute value of X
 
*ASCII
Y% = ascii(A$)
 ASCII value of first character of A$
 
*ATN
Y = atn(X)
 Arctangent of X (X given in radians)
 
*BUFSIZ
Y% = bufsiz(N%)
 Buffer size of device or file open on channel N%
 
*CCPOS
Y% = ccpos(X%)  or  Y% = pos(X%)
 Number of columns between the left margin and the current
 print position on I/O channel X%.
 
*CHR$
Y$ = chr$(X%)
 One-character string having ASCII value of X%
 
*COMP%
Y% = comp%(A$, B$)
 Y% is -1% if A$ < B$,
        0% if A$ = B$,
        1% if A$ > B$
 
*COS
Y = cos(X)
 Cosine of X (X given in radians)
 
*CVT
Y$ = cvt%$(X%)      Map integer into two-character string
Y$ = cvtF$(X)       Map floating-point number into 4- or
                    8-character string
Y% = cvt$%(A$)      Map first two characters of A$ into integer
Y = cvt$F(A$)       Map first 4 or 8 characters of A$ into
                    floating-point number
Y$ = cvt$$(A$, X%)  Convert A$ to Y$ according to value of X%
                    as follows:
 
    1% Trim high-order bit from each character.
    2% Discard all spaces, tabs.
    4% Discard excess characters: CR, LF, FF, ESC, RUBOUT, NULL.
    8% Discard leading spaces, tabs.
   16% Reduce spaces, tabs to 1 space.
   32% Convert lower to upper case.
   64% Convert [ to (, and ] to ).
  128% Discard trailing spaces, tabs.
  256% Don't alter characters in quotes.
 
*DATE$
Y$ = date$(0%)
 Current date in dd-Mmm-yy format
 
Y$ = date$(N%)
 Calendar date dd-Mmm-yy (or yy.mm.dd)
 where N% = julian day + 1000*(year - 1970)
 
*DET
Y = det
 Following INV(X) function evaluation, variable DET equals
 determinant of X.
 
*DIF$
Y$ = dif$(A$, B$)
 A$ minus B$ (string arithmetic)
 
*ERL
Y% = erl
 Line number where last error occurred if ON ERROR GOTO is
 in program
 
*ERR
Y% = err
 Value associated with last encountered error if ON ERROR GOTO
 is in program
 
*EXP
Y = exp(X)
 Value of e^X, where e = 2.71828...
 
*FIX
Y = fix(X)
 Truncated value of X, sgn(X) * int(abs(X))
 
*INSTR
Y% = instr(N1%, A$, B$)
 Find B$ within A$.  Start at N1%.  Always returns 1% if B$ is null.
 
*INT
Y = int(X)
 Greatest integer in less than or equal to X
 
*INV
mat Y = inv(X)
 Inverse of matrix X
 
*LEFT
Y$ = left(A$, N%)
 Leftmost N% characters of A$
 
*LEN
Y% = len(A$)
 Number of characters in A$, including trailing blanks
 
*LINE
Y% = line
 Line number of statement being executed at time of CTRL/C
 
*LOG
Y = log(X)
 Natural log of X
 
*LOG10
Y = log10(X)
 Common log of X
 
*MID
Y$ = mid(A$, N1%, N2%)
 Substring of A$ starting with N1% and N2% characters long
 
*NUM
Y% = num
 Following input of matrix, NUM contains number of rows input,
 (for 1-dimensional matrix, number of elements)
 
*NUM$
Y$ = num$(N)
 String of numerics showing value of N as PRINT would output it;
 example:  num$(1.0000) yields (space) 1 (space)
 
*NUM1$
Y$ = num1$(N)
 Same as Y$ = num$(N), but without spaces, rounding, or E format
 
*PI
Y = pi
 Constant value = 3.14159265358979323...
 
*PLACE$
Y$ = place$(A$, P%)
 Y$ = A$ with precision P% (string arithmetic)
 
*POS
Y% = ccpos(X%)  or  Y% = pos(X%)
 Number of columns between the left margin and the current
 print position on I/O channel X%.
 
*PROD$
Y$ = prod$(A$, B$, P%)
 A$ multiplied by B$ with precision P% (string arithmetic)
 
*QUO$
Y$ = quo$(A$, B$, P%)
 A$ divided by B$ with precision P% (string arithmetic)
 
*RAD$
Y$ = rad$(N%)
 Convert integer value to 3-character string.
 Used to convert from Radix-50 back to ASCII.
 
*RAD%
N% = rad%(Y$)
 Convert the first 3 characters of Y$ to its Radix-50 equivalent.
 
*RIGHT
Y$ = right(A$, N%)
 Rightmost characters of A$ starting with Nth character
 
*RND
Y = rnd
 Random number between 0. and 1.
 
*SGN
Y = sgn(X)
 Sign function of X (-1, 0, or 1)
 
*SIN
Y = sin(X)
 Sine of X (X given in radians)
 
*SPACE$
Y$ = space$(N%)
 String of N% space characters
 
*SQR
Y = sqr(X)
 Square root of X
 
*STATUS
Y% = status                            (Y% and 255%) =
 Status of program's most recently          0 Disk
 executed OPEN statement or filename        2 Keyboard
 string scan call.                          4 TU56 DECtape
                                            6 Line Printer
 (Y% and 256%)<>0%    non-file structured   8 PT reader
 (Y% and 512%)<>0%    no read access       10 PT punch
 (Y% and 1024%)<>0%   no write access      12 Card reader
 (Y% and 2048%)<>0%   keeps horiz pos      14 Magnetic tape
 (Y% and 4096%)<>0%   accepts modifiers    16 pseudo-keyboard
 (Y% and 8192%)<>0%   character device     18 Flexible diskette
 (Y% and 16384%)<>0%  interactive device   20 RJ: device
   Y% < 0%   random access blocked device  22 NL: Null device
                                           24 DMC11/DMV11/DDCMP
                                           26 Auto-dialer
                                           28 X-Y plotter
                                           30 TU58 DECtape II
                                           32 KMC
                                           34 IBM interconnect
					   36 Reserved
					   38 DMP11/DMV11
 
*STRING$
Y$ = string$(N1%, N2%)
 Create Y$ of length N1% and characters of ASCII value N2%
 
*SUM$
Y$ = sum$(A$, B$)
 A$ plus B$ (string arithmetic)
 
*SWAP%
Y% = swap%(N%)
 Return integer N% with its bytes swapped
 
*TAB
Y$ = tab(X%)
 Move head to position X% in current print record; ignored if
 current position is beyond X% (1st position counted as 0%).
 
*TAN
Y = tan(X)
 Tangent of X (X given in radians)
 
*TIME
Y$ = time$(0%)
 String corresponding to current time
 
Y$ = time$(N%)
 String corresponding to time at N% minutes before midnight
 
Y = time(0%)
 Clock time in seconds since midnight
 
Y = time(1%)
 CPU time used by job in 10ths of seconds
 
Y = time(2%)
 Connect time in minutes
 
Y = time(3%)
 Kilo-core-ticks used by job
 
Y = time(4%)
 Device time in minutes
 
*TRN
MAT Y = trn(X)
 Transpose of maxtrix X
 
*VAL
Y = val(A$)
 Compute numeric value of A$; if A$ contains a character
 unacceptable as numeric with INPUT, an ILLEGAL NUMBER (ERR=52)
 results, but arbitrary value is returned
 
*XLATE
Y$ = xlate(A$, B$)
 Translate A$ to Y$ using table B$
