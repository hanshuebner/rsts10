	$BEGIN	RDWRIT,<28.11>,<COMMON ROUTINES FOR READ AND WRITE>,R$$SUP,<RDWRIT,RDWRSL>
; 
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;  
; COPYRIGHT (c) 1982, 1986 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
; 
; PETER H. LIPMAN 11-AUG-73
;
; PREVIOUSLY MODIFIED BY
;
;	ELLEN R SIMICH
;
; Last Modification Date :  29-JAN-86
; Modified for RSX-11M-PLUS Update C by :
;
; Todd Schoeller	28.11
;		TMS029 -- Make room in REST segment for csi changes.
;


;+
; VERIFY READ/WRITE PARAMETERS
; CALLING SEQUENCE:
;	CALL	..RWCK
; INPUTS:
;	R0=FDB
; OUTPUTS:
;	C=0 IF READ/WRITE IS OK
;	C=1 IF NOT LEGAL, F.ERR SET TO REASON
;	ALL REGISTERS PRESERVED
; OPERATION:
;	CHECKS THAT FILE IS OPEN IN READ/WRITE MODE,
; THAT DEVICE IS BLOCK ORIENTED .
;-
..RWCK::TST	F.BDB(R0)
	BEQ	20$		;BRANCH IF FILE NOT OPEN
	BITB	#FD.RWM,F.RACC(R0)  ;READ/WRITE BIT MUST BE SET
	BEQ	20$
	BITB	#FD.REC,F.RCTL(R0)  ;ILLEGAL IF RECORD ORIENTED DEVICE
	BNE	20$
	TST	F.BKDS(R0)	;ERS BYTE COUNT TOO LARGE
	BMI	20$		;ERS YES -ILLEGAL
	CLC
	RETURN

20$:	MOVB	#IE.ILL,F.ERR(R0)
30$:	SEC
	RETURN
;+
; COMMON CODE FOR READ/WRITE - ISSUE THE QI/O AND BUMP THE
; VBN
; CALLING SEQUENCE:
;	CALL	..WTRD
; INPUTS:
;	R0=FDB
;	R4=I/O FUNCTION CODE FOR READ/WRITE LOGICAL BLOCK
; OUTPUTS:
;	R0 PRESERVED R1-R5 DESTROYED
;	C=0 FOR SUCCESS, C=1 FOR ERROR, F.ERR IS SET
;-
..WTRD::CALL	.SUCSS		;INIT ERROR CODE TO SUCCESSFUL
	CALL	..IDPB		;INIT THE DPB AND SET R5 TO PARAM BLOCK
	MOV	F.BKDS+2(R0),(R5)+ ;ADDRESS TO TRANSFER
	MOV	F.BKDS(R0),(R5)+ ;SIZE IN BYTES OF TRANSFER
	CLR	(R5)+		;NO CARRIAGE CONTROL
	MOV	F.BKVB(R0),(R5)+ ;HIGH ORDER VBN
	MOV	F.BKVB+2(R0),(R5) ;LOW ORDER VBN
	SUB	#10.*2,R5	;R5 BACK TO BEGINNING OF DPB
	MOV	F.BKDN(R0),R2	;R2=I/O DONE AST ADDRESS OR 0 IF NONE

	.IF	GT,R$$SUP
;
; THE RSX-11M-PLUS EXECUTIVE CONSIDERS AN ODD AST COMPLETION ROUTINE ADDRESS TO
; BE A CUE THAT THE ROUTINE IS IN THE OPPOSITE MODE FROM THE ONE IN WHICH THE
; QIO$ IS EXECUTED.  TO PERMIT EASY AND FLEXABLE USE OF AST COMPLETION ROUTINES
; WHEN FCS IS IN AN M-PLUS SUPERVISOR MODE LIBRARY, ALTERNATE MODULES EXIST FOR
; FINIT AND RDWRIT, CALLED FINTSL AND RDWRSL.  IN FINTSL, FCS DETERMINES
; WHETHER IT IS IN USER OR SUPERVISOR MODE, SETTING $$FSR2 WORD A.MODE IF
; SUPERVISOR MODE.  IN RDWRSL, IF A.MODE INDICATES THAT FCS IS IN SUPERVISOR
; MODE, AND THE USER HAS SPECIFIED AN AST COMPLETION ROUTINE ADDRESS, THE LOW
; ORDER BIT OF THE ADDRESS WILL BE INVERTED AS FOLLOWS: 
;
;
; FCS EXECUTES	USER SPECIFIES AST	FCS MAKES THE	EXECUTIVE CONSIDERS 
; QIO$ IN	ROUTINE ADDRESS AS	AST ADDRESS	AST ROUTINE TO BE IN
; -----------	------------------	-------------	--------------------
; USER MODE	EVEN			EVEN		USER MODE
; USER MODE	ODD			ODD		SUPER MODE
; SUPER MODE	EVEN			ODD		USER MODE
; SUPER MODE	ODD			EVEN		SUPER MODE
;
	BEQ	15$		;NO AST COMPLETION ROUTINE - GO ON
	MOV	@#.FSRPT,R1	;GET FSR POINTER
	BIT	A.MODE(R1),R2	;IS SUPER/USER MODE WORD OR AST ADDRESS EVEN?
	BEQ	10$		;YES- ONE OR BOTH ARE EVEN
	DEC	R2		;NO - BOTH ARE ODD - MAKE AST ADDRESS EVEN, SO
	BR	15$		;THAT AST ADDRESS IS CONSIDERED IN SUPER MODE
10$:	ADD	A.MODE(R1),R2	;IF FCS IN USER MODE, NO CHANGE
				;IF SUPER MODE, EVEN ADDRESS IS INC'ED TO 
				;FORCE USER MODE FOR AST ROUTINE
	.ENDC	;R$$SUP

15$:	MOV	F.BKST(R0),R1	;R1=I/O STATUS BLOCK ADDRESS
	MOV	#12.*400+1,R3	;R3=DIRECTIVE CODE AND DPB SIZE
	CALL	..XQI1		;ISSUE THE QI/O
	BCS	20$		;BRANCH IF QI/O FAILED
30$:	ADD	#1,F.VBN+2(R0)	;INCREMENT THE VBN FOR AUTOMATIC
	ADC	F.VBN(R0)	;SEQUENTIAL OPERATION - C =0
	RETURN

20$:	MOV	@#$DSW,F.ERR(R0)  ;RETURN QI/O ERROR CODE IN F.ERR
	RETURN
;
;
	$END	RDWRIT
;
;
	.END
