	$BEGIN	PPNASC,<28.1>,<CONVERT PPN TO ASCII STRING>
; 
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;  
; COPYRIGHT (c) 1982 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
; 
; PETER H. LIPMAN
;+
; CONVERT PPN TO ASCII STRING
; CALLING SEQUENCE:
;	CALL	.PPASC
; INPUTS:
;	R2=STRING ADDRESS TO PUT ASCII CHARS IN
;	R3=PPN - .BYTE PROG,PROJ
;	R4=FLAGS
;		BIT 0 = 0 MEANS SUPPRESS LEADING ZEROS
;		      = 1 MEANS DON'T SUPPRESS
;		BIT 1 = 0 MEANS PUT SEPARATORS IN STRING ([,])
;		      = 1 MEANS SUPPRESS SEPARATORS
; OUTPUTS:
;	R2 UPDATED STRING POINTER
;	ALL OTHER REGISTERS PRESERVED
;-
.PPASC::
	MOV	R5,-(SP)
	MOV	R4,-(SP)
	MOV	R3,-(SP)
	BIT	#PP.SEP,R4
	BNE	10$		;BRANCH IF SUPPRESSING SEPARATORS
	MOVB	#'[,(R2)+
10$:	SWAB	R3		;TRANSLATE THE PROJECT NUMBER FIRST
	CALL	BYTASC		;TRANSLATE FIRST BYTE TO ASCII
	BIT	#PP.SEP,R4
	BNE	20$		;BRANCH IF SUPPRESSING SEPARATORS
	MOVB	#',,(R2)+	;PUT COMMA IN STRING
20$:	MOVB	@SP,R3		;R3=PROGRAMMER NUMBER
	CALL	BYTASC		;CONVERT IT TO ASCII
	BIT	#PP.SEP,R4
	BNE	30$		;BRANCH IF SUPPRESSING SEPARATORS
	MOVB	#'],(R2)+	;PUT RIGHT BRACKET IN STRING
30$:	MOV	(SP)+,R3
	MOV	(SP)+,R4
	MOV	(SP)+,R5
	RETURN


;+
; CONVERT BYTE TO OCTAL ASCII
; CALLING SEQUENCE:
;	CALL	BYTASC
; INPUTS:
;	R2=STRING ADDRESS TO PUT ASCII BYTES IN
;	R3=BYTE TO CONVERT
;	R4=FLAGS, BIT 0 SET MEANS DON'T SUPPRESS LEADING ZEROS
; OUTPUTS:
;	R2=UPDATED STRING POINTER
;	R0,R1,R4 PRESERVED, R3,R5 DESTROYED
;-
BYTASC:	BIC	#177400,R3
	.IF	GT,R$$EIS
	ASH	#2,R3		;FIRST DIGIT ONLY 2 BITS
	.IFF
	ASL	R3
	ASL	R3
	.ENDC
	MOV	#3,R5		;CONVERT 3 DIGITS
	BIT	#PP.ZER,R4
	BNE	10$		;BRANCH IF NOT SUPPRESSING ZEROS
5$:	BIT	#177400,R3	;THIS DIGIT ZERO?
	BNE	10$		;BRANCH IF NO, END SUPPRESS LOOP
	.IF	GT,R$$EIS
	ASH	#3,R3
	.IFF
	ASL	R3
	ASL	R3
	ASL	R3
	.ENDC
	SOB	R5,5$		;CHECK NEXT CHARACTER
	INC	R5		;BYTE WAS 0, PUT ONE DIGIT OF 0
10$:	SWAB	R3
	ADD	#'0,R3		;CONVERT TO ASCII DIGIT
	MOVB	R3,(R2)+	;STORE THE BYTE
	CLRB	R3		;ZERO THE BYTE
	SWAB	R3		;AND SET UP FOR NEXT DIGIT
	.IF	GT,R$$EIS
	ASH	#3,R3
	.IFF
	ASL	R3
	ASL	R3
	ASL	R3
	.ENDC
	SOB	R5,10$
	RETURN
;
;
	$END	PPNASC
;
	.END
