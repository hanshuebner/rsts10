$BEGIN	PARSDV,<29.07>,<PARSE DEVICE STRING>
; 
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;  
; COPYRIGHT (c) 1985, 1987, 1991 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
; 
; PETER H. LIPMAN
;
; PREVIOUSLY MODIFIED BY
;
;	SHAO-SUN CHIEN
;	P. K. M. WEISS
;
; MODIFIED FOR M-PLUS V4.0
;
;	P. K. M. WEISS		13-MAY-1987	29.04
;		PKW124	-  FIX LOGICAL NAME SUPPORT TO WORK ON CPR
;
;	P. K. M. WEISS		12-JUN-1987	29.05
;		PKW124	-  FIX BECAUSE GLUN WILL SET THE FL.VCP BIT
;
;
; MODIFIED FOR RSTS V10.1
;
;	S. LeVan		19-Apr-1991	29.06
;		SEL001  -  Merge RSTS-specific code into RSX V4.3 version.
;
;	S. LeVan		21-Oct-1991	29.07
;		SEL002  -  Shrink code by assuming N.DVSZ=0
;

;+
; PARSE DEVICE STRING - ZERO THE FILE NAME BLOCK AND PARSE AND
; ASSIGN THE LUN FOR THE SPECIFIED DEVICE AND UNIT
;
; CALLING SEQUENCE:
;	CALL	.PRSDV
; INPUTS:
;	R0=FDB ADDRESS
;	R1=ADDRESS OF FILE NAME BLOCK
;	R2=POINTER TO DEV, DIR, AND NAME DESCRIPTORS
;	R3=DEFAULT FILE NAME BLOCK OR ZERO IF NONE SPECIFIED
; OUTPUTS:
;	C=0 IF SUCCESSFUL, C=1 IF ERROR, F.ERR SET TO REASON
;	ALL REGISTER PRESERVED
;	N.DVNM(R1), N.UNIT(R1) SET TO DEVICE NAME AND UNIT
;	LUN IN F.LUN(R0) ASSIGNED
;	F.RCTL(R0) SET TO DEVICE CHARACTERISTICS BITS
;	F.BBFS(R0), F.VBSZ(R0) SET TO DEFAULT BUFFER SIZE
;
; OPERATION:
;	IF THE DEVICE IS SPECIFIED IN THE ASCII STRING SPECIFIED BY R2
; THEN THIS DEVICE IS USED, IF THIS IS NULL, THE THE DEFAULT NAME BLOCK
; DEVICE AND UNIT FIELDS ARE USED (N.DVNM(R3), N.UNIT(R3)). FINALLY
; IF THE DEFAULT NAME BLOCK IS MISSING, OR THE DEVICE FIELD IS 0, THEN
; THE CURRENT ASSIGNMENT OF THE LUN IS USED AND READ BACK INTO
; N.DVNM(R1) AND N.UNIT(R1).
;
;
;-
	.IIF DF L$$GCL	.MCALL	ACHN$S

.PRSDV::.SAVR1
	MOV	#1,F.ERR(R0)
..PSDV::
	MOV	R1,R4		;ZERO THE FILE NAME BLOCK
	MOV	#S.FNBW,R5	;R5=SIZE IN WORDS OF FNB
4$:	CLR	(R4)+
	SOB	R5,4$
;
; PARSE THE DEVICE NAME AND UNIT
	MOV	R3,-(SP)
	MOV	R2,-(SP)
	BEQ	20$		;BRANCH IF NULL DEVICE DESCRIPTOR
	MOV	N.DVPT(R2),R5	;R5=ADDRESS FOR DEVICE STRING
	;MOV	N.DVSZ(R2),R2	;R2=SIZE IN BYTES OF DEVICE STRING; SEL002
	MOV	(R2),R2		;R2=SIZE IN BYTES OF DEVICE STRING; SEL002
	ASSUME	N.DVSZ,0	;SEL002
	BEQ	20$		;BRANCH IF NULL DEVICE DESCRIPTOR

	.IF DF L$$GCL		;LOGICAL NAME SUPPORT

	MOV	R2,-(SP)	;SAVE THE LENGTH
	MOV	R5,-(SP)	;SAVE THE ADDRESS
	MOV	@#.FSRPT,R3	;POINTER TO FSR
	ADD	#A.PRS,R3	;PARSE BLOCK IS NOT BEING USED NOW
	MOV	R3,-(SP)	;NOW SAVE THIS ADDRESS
	MOV	R2,R4		;COPY LENGTH TO R4
	BITB	#FL.AEX,F.FLG(R0) ;ALREADY EXPANDED?
	BEQ	1$		;IF EQ NO, JUST SEND IT OFF

	.IF DF V$$ACP		;IF THIS CAN BE RUN USING THE VMS ACP

	BIT	#AF.RLG,A.FLAG-A.PRS(R3) ;IF REMOTE LOGICALS, IGNORE AEX BIT
	BNE	1$		;YES, DON'T ADD UNDERSCORE

	.ENDC	;V$$ACP

	MOVB	#'_,(R3)+	;ADD UNDERSCORE TO TELL ACHN NOT TO EXPAND
	INC	R2		;BUMP THE BYTE COUNT
1$:	MOVB	(R5)+,(R3)+	;MOVE A BYTE
	SOB	R4,1$		;ALL OF THEM
	CMPB	#':,-1(R3)	;DO WE ALREADY HAVE A COLON?
	BEQ	115$		;IF YES, DON'T ADD ANOTHER
	MOVB	#':,(R3)+	;ADD THE COLON
	INC	R2		;ADD THE COLON INTO THE LENGTH
115$:	MOV	(SP)+,R3	;RESTORE THE ADDRESS
	MOV	(SP)+,R5	;AND THIS ADDRESS
2$:	ACHN$S	,,F.LUN(R0),R3,R2 ;SEE IF THE DEVICE IS A LOGICAL
	MOV	(SP)+,R2	;RESTORE THE LENGTH
	BCC	40$		;IF CC, SUCCESS.  SINCE N.DVNM IS CLEAR
				;..ALUN WILL JUST DO THE GLUN
	CMP	@#$DSW,#IE.SDP	;DIRECTIVE NOT SUPPORTED?
	BEQ	5$		;IF EQ YES, GO DO IT THE OLD WAY
	MOV	@#$DSW,F.ERR(R0);PUT THE ERROR STATUS IN F.ERR
	CMP	@#$DSW,#IE.LNF	;WAS IT LOGICAL TRANSLATION ERROR?
	BNE	3$		;IF NO, CONTINUE
	MOV	#IE.IDU,F.ERR(R0) ;MAKE IT ILLEGAL DEVICE OR UNIT
3$:	SEC			;SET CARRY TO INDICATE FAILURE
	BR	85$		;AND EXIT
5$:
	.ENDC			;L$$GCL

	BIS	#NB.DEV,N.STAT(R1) ;NOTE EXPLICIT DEVICE SEEN
	.IF	GT,R$RSTS	;++RSTS 7.2					;SRM001
	MOV	SP,R3		;++RSTS 7.2	PUT TEMPORARY STRING ON STACK	;SRM001
	MOVB	#':,-(R3)	;++RSTS 7.2	WITH A COLON AT THE END		;SRM001
	ADD	R2,R5		;++RSTS 7.2	POINT TO END OF STRING		;SRM001
	MOV	R2,R4		;++RSTS 7.2	SET UP COUNTER			;SRM001
5$:	MOVB	-(R5),-(R3)	;++RSTS 7.2	COPY THE STRING			;SRM001
	SOB	R4,5$		;++RSTS 7.2					;SRM001
	ADD	R2,R5		;++RSTS 7.2	POINT TO END OF STRING AGAIN	;SRM001
	CMPB	#':,-(R5)	;++RSTS 7.2	IS COLON ALREADY THERE?		;SRM001
	BEQ	6$		;++RSTS 7.2					;SRM001
	INC	R2		;++RSTS 7.2	IF NOT USE OUR COLON		;SRM001
6$:	MOV	SP,R4		;++RSTS 7.2	GET COUNT OF BYTES PUSHED	;SRM001
	SUB	R3,R4		;++RSTS 7.2					;SRM001
	ADD	#3,R4		;++RSTS 7.2	ADD ONE WORD AND ROUND		;SRM001
	BIC	#1,R4		;++RSTS 7.2					;SRM001
	SUB	R4,SP		;++RSTS 7.2	UPDATE STACK POINTER		;SRM001
	MOV	R4,(SP)		;++RSTS 7.2	AND SAVE THE COUNT		;SRM001
	MOV	R5,-(SP)	;++RSTS V9	SAVE R5				;FEK001
	MOV	#70200,-(SP)	;++RSTS V9	SET UP THE MASK WORD		;FEK001
	MOV	SP,R5		;++RSTS V9	SET UP THE MASK WORD POINTER	;FEK001
	CALL	..FSS		;++RSTS V9	CALL RSTS FILE STRING SCANNER	;FEK001
	INC	(SP)+		;++RSTS V9	DUMP THE MASK WORD		;FEK001
	MOV	(SP)+,R5	;++RSTS V9	RESTORE R5			;FEK001
	ROL	R5		;++RSTS 7.2	SAVE C BIT			;SRM001
	ADD	(SP),SP		;++RSTS 7.2	POP JUNK FROM STACK		;SRM001
	ROR	R5		;++RSTS 7.2	GET C BIT BACK			;SRM001
	BCS	78$		;++RSTS 7.2	EXIT IF FSS ERROR		;SRM001
	CMP	R2,#10000	;++RSTS 7.2	WAS DEVICE NAME FOUND?		;SRM001
	BLO	78$		;++RSTS 7.2	IF NOT, EXIT WITH C SET		;SRM001
	MOV	#FIRQB+FQDEV,R3	;++RSTS 7.2	POINT TO DEVICE NAME		;SRM001
	MOV	(R3)+,N.DVNM(R1);++RSTS 7.2	SET DEVICE NAME			;SRM001
	BNE	7$		;++RSTS 7.2					;SRM001
	MOV	#"SY,N.DVNM(R1)	;++RSTS 7.2	NULL DEFAULTS TO "SY"		;SRM001
	CLR	(R3)		;++RSTS 7.2	WITH NO UNIT			;SRM001
7$:	INCB	1(R3)		;++RSTS 7.2	CLEAR UNIT NUMBER FLAG IF SET	;SRM001
	BEQ	8$		;++RSTS 7.2	BRANCH IF UNIT NUMBER PRESENT	;SRM001
	MOV	#-1,(R3)	;++RSTS 7.2	ELSE INDICATE NO UNIT NUMBER	;SRM001
8$:	MOV	(R3),N.UNIT(R1)	;++RSTS 7.2	PUT UNIT NUMBER IN FDB		;SRM001
	BIT	R2,#200		;++RSTS 7.2	LOGICAL INCLUDES PPN?		;SRM001
	BEQ	9$		;++RSTS 7.2	IF SO,				;SRM001
	MOV	@#FIRQB+FQPPN,N.DID(R1)	;++RSTS 7.2	MOVE PPN TO FDB		;SRM001
9$:				;++RSTS 7.2					;SRM001
	.IFF			;++RSTS 7.2					;SRM001

	MOVB	(R5)+,N.DVNM(R1) ;SET DEVICE NAME
	MOVB	(R5)+,N.DVNM+1(R1)
	SUB	#2,R2		;ADJUST BYTE COUNT
	BEQ	40$		;BRANCH IF NO UNIT SPECIFIED
	BLT	78$		;ERROR IF ONLY 1 CHAR STRING, C BIT SET
	MOV	R5,R3		;SAVE R5=BEGINNING OF UNIT NO.
	CLR	R4		;INIT UNIT NO. BYTE COUNT
10$:	CMPB	#':,(R3)+	;IF FIND :
	BEQ	15$		;THEN DON'T COUNT IT
	INC	R4		;COUNT ALL OTHERS
; IF MORE CHARS AFTER : THEN .ODCVT WILL COMPLAIN OF BAD NUMERIC SYNTAX
15$:	SOB	R2,10$
	TST	R4		;CHECK BYTE COUNT
	BEQ	40$		;SKIP CONVERSION OF NULL NUMBER
	MOV	R1,R3
	ADD	#N.UNIT,R3	;R3=ADR TO RETURN NUMBER
	CALL	.ODCVT		;R4=SIZE OF STRING, R5=ADDRESS
	BCS	78$

	.ENDC			;++RSTS 7.2					;SRM001

	BR	40$
;
; NO EXPLICIT DEVICE, USE DEFAULT FROM DEFAULT NAME BLOCK
20$:	TST	R3
	BEQ	40$		;BRANCH IF NO DEFAULT NAME BLOCK
	MOV	N.DVNM(R3),N.DVNM(R1)
	MOV	N.UNIT(R3),N.UNIT(R1)
	.IF	GT,R$RSTS	;SEL001
	BNE	40$		;++RSTS 7.2 CONTINUE IF A UNIT WAS SPECIFIED	;SRM001
	MOV	#-1,N.UNIT(R1)	;++RSTS 7.2 OTHERWISE INDICATE NO UNIT		;SRM001
	.ENDC	;R$RSTS
;
; ASSIGN THE LOGICAL UNIT NUMBER
40$:	CALL	..ALUN
	BR	85$
78$:	MOVB	#IE.BDV,F.ERR(R0)
85$:	MOV	(SP)+,R2
	MOV	(SP)+,R3
90$:	RETURN									; EM001
;										;**-1
;
	$END	PARSDV
;
	.END
