	$BEGIN	FLUSH,<30.02>,<FLUSH BLOCK BUFFER>
;
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;
; COPYRIGHT (c) 1985 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; STEVE RUZICH 22-MAY-81
;
; Previously modified by
;	M. Pettengill
;	S. Thomas
;
; Last Modification Date :  29-JAN-86
; Modified for RSX-11M-PLUS Update C by :
;
; Todd Schoeller	30.02
;		TMS029 -- Make room in REST segment for csi changes.
;
;+
; CALLING SEQUENCE:
;	CALL	.FLUSH
;
; OPERATION:
;	WRITES CURRENT BUFFER AS IF AT END-OF-FILE.
;
;    INPUT:	R0 -	ADDRESS OF FDB
;
;    OUTPUT:	ALL REGISTERS PRESERVED
;		CC -	SUCCESS
;		CS -	ERROR CODE IN F.ERR(R0)
;
;    INPUT:	R0=FDB
;		F.BDB+#S.BFHD=ADDRESS OF DATA
;		F.BBFS(R0)=NO. OF BYTES TO WRITE
;		0=CARRIAGE CONTROL
;
;-
.FLUSH::.SAVR1				;SAVE REGISTERS 1-5
	CALL	.SUCSS			;INIT ERROR CODE TO SUCCESS
	BITB	#FD.SQD!FD.REC,F.RCTL(R0) ; Sequential or record device?
	BNE	10$			; If NE yes
	CALL	..WTWD			; Write out buffers
	BCS	10$			; Exit if error
	CLR	-(SP)			; Set attribute list end
	MOV	R0,-(SP)		; Address of attributes to write
	MOV	(PC)+,-(SP)		; Write record I/O attributes
	.BYTE	HA.UAT,S.FATT		;
	CALL	..IDPB			; Initialize dpb
	MOV	SP,2(R5)		; Point to attribute list
	MOV	#IO.WAT,R4		; Set I/O function code
	CALL	..QIOW			; Execute I/O function
	ADD	#6,SP			; Clean stack
10$:	RETURN				; Exit
;
;
	$END	FLUSH
;
;
	.END
