	$BEGIN	ASCPPN,<30.00>,<TRANSLATE ASCII FORM OF PPN TO BINARY>
;
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;
; COPYRIGHT (c) 1985, 1991 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
; PETER H. LIPMAN
;
; PREVIOUSLY MODIFIED BY
;
;	SHAO-SUN CHIEN
;	G. H. KUENNING
;	LONI BROWN
;
; MODIFIED:
;
;	S. M. THOMAS	30-APR-83
;
;	SMT033 - NAMED DIRECTORY SUPPORT BASED ON SIMON SZETO'S CHANGES
;
;	S. LeVan	02-May-91
;
;	Merge RSTS V10.1 code into RSX V4.3 version of this module.
;+
; TRANSLATE THE ASCII FORM OF PPN, [200,210] TO THE BINARY
; CALLING SEQUENCE:
;	CALL	.ASCPP
; INPUTS:
;	R2=DESCRIPTOR OF PPN STRING
;	R3=ADDRESS TO RETURN PPN
; OUTPUTS:
;	C=0 IF OK, C=1 IF BAD SYNTAX
;	ALL REGISTERS PRESERVED
; OPERATION:
;	THE ASCII INPUT IS OF THE FORM [PROJ,PROG], WHERE THE
; NUMBERS ARE STANDARD NUMERIC SYNTAX, IN PARTICULAR
; A TRAILING DECIMAL POINT IS USED TO DENOTE DECIMAL, OTHERWISE OCTAL
; PPN OUTPUT IS OF THE FORM .BYTE PROG,PROJ
;-

	.ENABL	LSB
.ASCPP::.SAVR1
	.IF	GT,R$RSTS							;LEB001
	MOV	R3,R5		;SAVE DESTINATION ADDR				;LEB001
	MOV	2(R2),R3	;DEFINE STRING ADDR				;LEB001
	MOV	(R2),R2		;DEFINE STRING SIZE				;LEB001
	MOV	R5,-(SP)	;SAVE R5					;FEK001
	MOV	#200,-(SP)	;SETUP THE MASK					;FEK001
	MOV	SP,R5		;POINT TO THE MASK				;FEK001
	CALL	..FSS		;CALL RSTS FSS					;LEB001
	INC	(SP)+		;DUMP THE MASK LEAVING CARRY			;FEK001
	MOV	(SP)+,R5	;RESTORE THE REAL R5				;FEK001
	BCS	10$		;EXIT IF ERROR					;LEB001
	BIC	#4000,R2	;IGNORE PROTECTION				;LEB001
	CMP	R2,#200		;WAS A PPN PARSED?				;LEB001
	BLO	10$		;EXIT IF NOT					;LEB001
	MOV	FQPPN(R3),(R5)	;SET IN PPN					;LEB001
10$:	RETURN									;LEB001
	.IFF
	MOV	@R2,R1		;R1=SIZE OF DIRECTORY STRING
	MOV	2(R2),R2	;R2=ADDRESS OF STRING
	DEC	R1		;COUNT THE BRACKET
	BLE	15$
	.IF	GT,R$$NAM	; IF NAMED DIRECTORIES SUPPORTED
	MOVB	(R2),-(SP)	; SAVE BRACKET ON STACK
	.IFTF	; R$$NAM
	CMPB	#'[,(R2)+	; IS IT A "["?
	.IFT	; R$$NAM
	BEQ	12$		; IF EQ, YES, CONTINUE
	CMPB	#'<,(SP)+	; IS IT A "<"?
	.IFTF	; R$$NAM
	BNE	15$		; IF NE, NO, SYNTAX ERROR
	.IFT	; R$$NAM
	TST	-(SP)		; SAVE BRACKET ON STACK
12$:	
	.IFTF	; R$$NAM
	MOV	#',,R4
	CALL	SCNCVT		;SCAN FIRST NUMBER, STORE @R3
	.IFT	; R$$NAM
	MOV	(SP)+,R4	; R4 - SAVED BRACKET
	.IFTF	; R$$NAM
	BCS	15$		;BRANCH IF SYNTAX ERROR
	MOV	@R3,-(SP)	;SAVE CONVERTED NUMBER
	.IFT	; R$$NAM
	ADD	#2,R4		; INCREMENT R4 BY TWO TO GET RIGHT BRACKET
	.IFF	; R$$NAM
	MOV	#'],R4
	.ENDC	; R$$NAM
	CALL	SCNCVT
	MOV	(SP)+,R5	;R5=PROJECT
	BCS	15$		;BRANCH IF SYNTAX ERROR
	TST	R1		;COUNT MUST BE ZERO
	BNE	15$		;BRANCH IF NOT
	BIT	#^C<377>,R5	;IS PROJECT NO. OVER 8 BITS?
	BNE	15$		;IF NE YES, SYNTAX ERROR
	TSTB	1(R3)		;NO, IS PGMR NO. TOO WIDE?
	BNE	15$		;IF NE IT IS, SYNTAX ERROR
; 0(R3) ALREADY CONTAINS THE PROGRAMMER NUMBER, JUST STORE THE PROJECT
	MOVB	R5,1(R3)
	RETURN


;+
; SCAN ASCII STRING UNTIL SPECIFIED TERMINATOR AND CONVERT TO A NUMBER
; CALLING SEQUENCE:
;	CALL	SCNCVT
; INPUTS:
;	R1=STRING SIZE
;	R2=STRING ADDRESS
;	R3=ADDRESS TO RETURN NUMBER IN
;	R4=CHARACTER TO TERMINATE SCAN
; OUTPUTS:
;	C=0 IF OK, C=1 IF SYNTAX ERROR
;	NUMBER RETURNED @R3
;	R1,R2 UPDATED TO  POINT AT TERMINATING CHARACTER
;	R0,R3 PRESERVED, R4,R5 DESTROYED
;-
SCNCVT:	MOV	R2,R5		;SAVE ADR OF BEGINING OF NUMBER
10$:	CMPB	R4,(R2)+
	BEQ	20$		;BRANCH IF MATCHED TERMINATOR
	SOB	R1,10$
; END OF STRING AND TERMINATOR WAS NOT FOUND
15$:	SEC
	RETURN			;RAN OUT OF CHARACTERS, SYNTAX ERROR
20$:	DEC	R1		;COUNT THE DELIMITER TOO
	MOV	R2,R4		;CALCULATE BYTES IN STRING
	SUB	R5,R4
	DEC	R4
	CALLR	.ODCVT
	.ENDC	; R$RSTS
	.DSABL	LSB
;
;
	$END	ASCPPN
;
	.END
