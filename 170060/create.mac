	$BEGIN	CREATE,<30.3>,<ISSUE THE CREATE FILE QI/O>
;
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;
; COPYRIGHT (c) 1985, 1987, 1991 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
;
; PETER H. LIPMAN 17-AUG-73
;
; PREVIOUSLY MODIFIED BY
;
;	SHAO-SUN CHIEN
;	S. RUZICH
;	LONI BROWN
;	S. RUZICH
;
; MODIFIED:
;
;	M. S. HARVEY	9-DEC-1983
;
;		MSH222 -- ADD SUPPORT FOR COMBINED CREATE AND ENTER TO ENSURE
;			  CORRECT ACL PROPAGATION ON VMS
;
;	P. K. M. WEISS	7-MAY-1987	30.1
;
;		PKW126 -  FIX CREATE AND ENTER FUNCTION TO WORK ON CPR
;
;
; MODIFIED FOR RSTS V10.1 BY:
;
;
;	S. LeVan	2-May-91	30.2
;		SEL001 - Merge RSTS code into RSX V4.3 version of module.
;
;	S. LeVan	21-Oct-91	30.3
;		SEL002 - Shrink code by assuming F.RTYP=0.
;
	.MCALL	FSROF$
	FSROF$	DEF$L		;FORCE LOCAL DEFINITIONS OF THE FSR OFFS
;+
; ISSUE THE CREATE FILE QI/O
; CALLING SEQUENCE:
;	CALL	..CREA
; INPUTS:
;	R0 = FDB ADDRESS
;	R1 = FILE NAME BLOCK ADDRESS
; OUTPUTS:
;	C=0 IF OK, C=1 IF ERROR, F.ERR SET TO WHY
;	R0,R1 PRESERVED, R2-R5 ALTERED
; OPERATION:
;	F.CNTG IS USED AS THE NUMBER OF CONTIGUOUS BLOCKS
; TO ALLOCATE AT CREATE TIME.  CAUSES FILE TO BE CONTIGUOUS
; IF F.CNTG IS NON-ZERO AND SETS F.HIBK+2
;-
..CREA::
	BITB	#FD.REC,F.RCTL(R0)
	.IF	EQ,R$RSTS
	BNE	20$		;SKIP THIS IF RECORD DEVICE
	.IFF
	BEQ	2$		;TOO FAR TO BRANCH
	JMP	20$		;SO JUMP
2$:				;REF LABEL
	.IFT
	.IF	GT,R$$ANI
	BITB	#CH.AND,F.CHR(R0) ; IF ANSI THEN REC NOT ALLOWED
	BEQ	5$
	BISB	#FD.BLK,F.RATT(R0) ; TO CROSS BLOCK BOUNDRY
5$:				; REF TAG
	.ENDC
	MOV	R1,-(SP)	;SAVE FNB ADDRESS
	MOV	SP,R1		;SAVE STACK RESET VALUE
	MOV	@#.FSRPT,R2	;R2=ADDRESS OF FSR CONTROL BLOCK

; PUSH ATTRIBUTE BLOCK ONTO THE STACK
	.IFF
	CLR	F.FNB+N.FID(R0)	;CLEAR FILE ID
	CALL	..IFQB		;SET FIRQB AND POINTERS
	.IFT
	CLR	-(SP)		;END OF ATTRIBUTE BLOCK
	ADD	#A.FIPR,R2	;POINT TO USER SPECIFIED FILE PROTECTION
	CMP	#-1,(R2)	;-1 IS THE DEFAULT
	BEQ	10$		;BRANCH IF YES
	MOV	R2,-(SP)	;PUT PROTECTION ATTRIBUTE ON STACK
	MOV	(PC)+,-(SP)
	.BYTE	HA.FP,2
	.IFF
	MOV	@#USRPRT,FQPROT-1(R5) ;SET DEFAULT PROTECTION
	.IFT
10$:	MOV	R0,-(SP)	;ADDRESS OF RECORD ATTRIBUTES
	MOV	(PC)+,-(SP)	;WRITE RECORD ATTRIBUTES
	.BYTE	HA.UAT,S.FATT
	MOV	R0,-(SP)
	ADD	#F.FNAM,(SP)	;ADDRESS OF FILE NAME
	MOV	(PC)+,-(SP)	;WRITE FILE NAME, TYPE, AND VERSION
	.BYTE	HA.NAM,10.
	.IFTF
	.IF	GT,R$$ANI
	BITB	#CH.AND,F.CHR(R0)	;ANSI TAPE?
	BEQ	11$
	.IF	EQ,R$RSTS
	MOV	R0,-(SP)
	ADD	#F.VBSZ,(SP)	;ADDRESS OF F.FFBY HOLDS BLOCK SIZE
	MOV	(PC)+,-(SP)	;WRITE BLOCK SIZE
	.BYTE	BL.SZ,2
;
; ATTRIBUTE BLOCK IS NOW ON THE STACK
; SET UP CREATE QI/O DPB
;
	.IFF
	MOV	F.VBSZ(R0),FQSIZ(R5)	; FQSIZ MAX BLOCK SIZE
	MOV	F.RSIZ(R0),R2		; FQCLUS RECORD LENGTH
	BIC	#170000,R2		; CLEAR HIGH BITS
	CMPB	#R.VAR,F.RTYP(R0)	; ANSI "D"
	BNE	101$
	BIS	#100000,R2		; FQCLUS OR (32767%+1%)
	BR	102$
101$:	CMPB	#R.FIX,F.RTYP(R0)	; ANSI "F"
	BNE	102$
	BIS	#40000,R2		; FQCLUS OR 16384%
102$:	BITB	#FD.CR,F.RATT(R0)	; <LF> DATA <CR> CTRL
	BEQ	103$
	BIS	#20000,R2		; FQCLUS OR 8192%
	BR	104$
103$:	BITB	#FD.FTN,F.RATT(R0)	; FORTRAN CARRIAGE CTRL
	BEQ	104$
	BIS	#10000,R2		; FQCLUS OR 4096%
104$:	MOV	R2,FQCLUS(R5)		; STORE IN FIRQB+FQCLUS
	BR	14$
	.ENDC
	.ENDC
11$:
	.IFT
11$:	CALL	..IDPB		;INIT DPB AND SET R5 TO PARAM BLOCK
	MOV	(R1),(R5)+	;ADDRESS OF FILE ID TO BE RETURNED
	MOV	SP,(R5)+	;ADDRESS OF WRT ATTRIBUTES CONTROL BLOCK
	CLR	R2		; SET DEFAULT VALUES FOR EXTEND

	.IFF
	;CMPB	#R.FIX,F.RTYP(R0) ;IS RECORD TYPE FIXED?; SEL002
	CMPB	#R.FIX,(R0) 	;IS RECORD TYPE FIXED?; SEL002
	ASSUME	F.RTYP,0	;SEL002
	BEQ	112$		;YES, LEAVE RECORD SIZE ALONE
	CLR	F.RSIZ(R0)	;VARIABLE, CLEAR RECORD SIZE
112$:
	.IFTF
	MOV	F.CNTG(R0),R3
	BEQ	12$		;BRANCH IF NO INITIAL SIZE DESIRED
	.IFT
	MOV	#<200!4!1>*400,R2 ;R2=EXTEND CONTIG, FILE CONTIG
	.IFF
	BIS	#100020,FQMODE(R5) ;SET CONTIG MODE BIT
	.IFTF
	TST	R3
	BGT	12$		;BRANCH IF CONTIGUOUS FILE DESIRED
	NEG	R3		;GET POSITIVE SIZE
	.IFT
	BIC	#<4!1>*400,R2	;FILE NOT CONTIGUOUS, EXTEND NON CONTIGU
12$:	MOV	R2,(R5)+
	MOV	R3,(R5)+
	.IFF
	CLR	FQMODE(R5)	; CLEAR THE MODE
12$:	MOV	R3,FQSIZ(R5)	; SET INITIAL FILE SIZE
	CLR	FQCLUS(R5)	; INIT CLUSTER SIZE TO DEFAULT
	MOV	F.ALOC(R0),R3	; GET THE EXTEND SIZE
	DEC	R3
	BLE	14$		; IF 1 OR NON-CONTIG USE DEFAULT
	INC	FQCLUS(R5)
13$:	ASL	FQCLUS(R5)	; ROUND EXTEND SIZE TO POWER OF 2
	ASR	R3
	BNE	13$
14$:
	.IFTF
	.IF	GT,R$$ANI
	TST	F.ACTL(R0)	;IS ACCESS CONTROL ENABLED ?
	BPL	15$
	.IF	EQ,R$RSTS
	MOV	F.ACTL(R0),(R5)	;YES-MOVE ACCESS CONTROL WORD
	BIC	#FA.ENB,(R5)	;DISABLE ACCESS
	.IFF
	BIT	#FA.RWD,F.ACTL(R0) ;REWIND ON OPEN OR CLOSE
	BEQ	15$		;NO, LEAVE MODE ALONE
	BIS	#100140,FQMODE(R5) ;FQMODE OR (64%+32%)
	.ENDC
15$:
;
; THIS WILL EITHER BE A CREATE FUNCTION, OR A COMBINATION OF THE CREATE AND
; ENTER FUNCTIONS. IF AF.CCR IS SET IN A.FLAG IN THE FSR REGION, THEN THE
; COMBINED FORM IS DESIRED. THE COMBINED FORM IS SPECIFIED SIMPLY BY INCLUDING
; THE FILE NAME BLOCK WITH THE DIRECTORY ID FIELD FILLED IN FOR THE QIO'S P6,
; AS IS ALSO DONE FOR FILE CREATION ON MAGTAPE. THIS COMBINED FORM IS USED ON
; VMS SYSTEMS WHERE ACL PROPAGATION WILL NOT OCCUR CORRECTLY UNLESS THE
; DIRECTORY CONTEXT IS AVAILABLE AT THE TIME THE FILE IS CREATED.
;
	.IF DF	V$$ACP

	MOV	@#.FSRPT,R2	;POINT TO FSR REGION
	BIT	#AF.CCR,A.FLAG(R2) ;COMBINED CREATE AND ENTER FUNCTION DESIRED?
	BEQ	16$		;IF PL NO, ISSUE VANILLA CREATE
	BIC	#AF.CCR,A.FLAG(R2) ;CALLER MUST SET FLAG EACH TIME 
	BR	165$		;PROVIDE THE NECESSARY DIRECTORY CONTEXT
16$:
	.ENDC

	BITB	#CH.AND,F.CHR(R0)	;ANSI TAPE?
	BEQ	17$			;NO - CONTINUE
165$:	MOV	(R1),2(R5)	;MTAACP NEEDS FNB, AS DOES COMBINED CREATE/ENTER
17$:
	.ENDC
	.IFT
	MOV	R1,-(SP)	;PUT STACK RESET VALUE ON STACK
	MOV	#IO.CRE,R4	;I/O FUNCTION CODE FOR CREATE QI/O
	CALL	..QIOW		;ISSUED THE CREATE QI/O AND WAIT



	.IFF
	MOV	#CREFQ,R4	; SET FIP CODE TO CREATE FILE
	BITB	#FA.TMP,F.FACC(R0) ; IF CREATING TEMP FILE
	BEQ	16$
	MOV	#CRTFQ,R4	; SET FIP CODE TO CREATE TEMP FILE
16$:	BITB	#FO.TSK,F.FACC(R0) ; IF CREATING EXECUTABL FILE
	BEQ	1717$
	MOV	#CRBFQ,R4	; SET FIP CODE TO CREATE RUNABL FILE
1717$:	CALL	..FIP		; CALL FIP TO CREAT THE FILE
	BCS	30$		; EXIT IF ERROR
	.IF	GT,R$$ANI
	BITB	#FD.SQD,F.RCTL(R0)	; SEQUENTIAL DEVICE?
	BEQ	18$			; NO
	MOV	#7,@#XRB+XRLEN		; NOW GET CHARACTERISTICS
	MOVB	FQFIL(R5),@#XRB+XRCI	; FILL IN CHAN*2
	MOVB	FQFLAG(R5),@#XRB+XRCI+1	; MAGTAPE HANDLER INDEX
	.SPEC
	TST	@#XRB+XRBC		; DOS MT?
	BEQ	18$			; YES
	BISB	#CH.AND,F.CHR(R0)	; MARK IT AS ANSI MT AND
	BISB	#FD.BLK,F.RATT(R0)	; NO SPAN
18$:
	.ENDC
	.IFT
	MOV	2(R1),F.HIBK+2(R0)  ;NO. OF BLOCK ALLOCATED IF ANY
	MOV	(SP),SP		;RESETT STACK
	.IFF
	MOV	FQSIZ(R5),F.HIBK+2(R0)	; SET FILE SIZE
	MOV	FQDEV(R5),N.DVNM(R1)	; AND UNIT NAME
	MOV	FQDEVN(R5),N.UNIT(R1)	; AND UNIT NUMBER
	CLRB	N.UNIT+1(R1)		; THROW AWAY THE FLAG
	MOV	R1,-(SP)	;SAVE FILE NAME BLOCK POINTER			;SRM001
	ASSUME	N.FID,0		;						;SRM001
	MOV	FQPPN(R5),(R1)+	;SET FILE ID					;SRM001
	MOV	FQCLUS(R5),@R1	;						;SRM001
	MOV	#7,R4		; NUMBER OR WORDS OF ATTRIBUTES			;LEB001
$.NOA0==.-2			;PATCH TO 0 TO WRITE NO ATTRIBUTES ON CREATE	;FEK001
	CALL	..ATR		; WRITE OUT THE ATTRIBUTES
	.ENDC
	MOV	(SP)+,R1	;RESTORE FILE NAME BLOCK ADR
	ASSUME	N.FID,0
20$:	TST	(R1)
	BNE	30$		;IF NO FILE ID RETURNED
	INC	(R1)		;MAKE IT 1
30$:	CALLR	..FCSX
;
;
	$END	CREATE
;
;
	.END
