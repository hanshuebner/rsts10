        $BEGIN  VECJMP,<28.3>,<LIBRARY JUMP VECTOR>,R$$VEC,<FCSJMP,FCSVEC>
; 
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED OR COPIED ONLY IN ACCORDANCE WITH THE  TERMS
; OF SUCH LICENSE.
;  
; COPYRIGHT (c) 1985 BY DIGITAL EQUIPMENT CORPORATION.
; ALL RIGHTS RESERVED.
;
;       MODIFIED BY:
;
;
;       R. BISMUTH      09-OCT-83                  (28.2)
;       RB012           DEFINE ADDITIONAL JUMP VECTORS AND OFFSETS FOR ALL
;                       ROUTINES LOCATED IN FCSRES OR FCSFSL WHICH MAKE SENSE
;                       TO HAVE ACCESS VIA THIS MECHANISM.
;
;	P. K. M. WEISS	11-OCT-84		   (28.3)
;	PKW067		ADD LOGICAL NAME SUPPORT TO FCSRES AND FCSFSL
;
;
; THIS MODULE DEFINES TWO TABLES FOR FCS-11 OPERATIONS.
;
; FCSVEC.OBJ CONTAINS ONE TABLE AND A TRANSFER ROUTINE.  IT IS LINKED 
; WITH THE RESIDENT LIBRARIES OF LANGUAGES OR FMS-11
; TO PROVIDE AN ACCESS PATH TO FCS-11 ROUTINES LOCATED IN ANOTHER
; RESIDENT LIBRARY.  ALL "DOT" (THAT IS MAIN) ENTRY POINTS OF FCS-11
; USED BY THE LANGUAGE OR FMS LIBRARY ARE REPRESENTED HERE AND TRANSFER 
; CONTROL INDIRECTLY THROUGH THE ROOT VIA A JUMP VECTOR REFERENCED IN THE 
; FCS-11 IMPURE AREA $$FSR2.  THE LIBRARY SHOULD BE BUILT WITH THE OPTION 
; GBLINC=.FCSJT, AND WITH ALL FCS ENTRY POINTS USED BY THE LIBRARY GLOBALLY 
; EXCLUDED.  FCS ENTRY POINT .SAVR1 SHOULD ALSO BE EXCLUDED, EVEN THOUGH IT
; IS NOT AVAILABLE FROM FCSRES, BECAUSE .SAVR1 IS A COROUTINE.
;
; FCSJMP.OBJ, A TABLE OF OFFSETS, IS LINKED INTO THE ROOT OF THE USER 
; TASK IMAGE.  THE LINKAGE IS ACCOMPLISHED BECAUSE OF THE GBLINC=.FCSJT WHEN 
; THE LANGUAGE OR FMS-11 LIBRARY IS BUILD.  THIS CAUSES .FCSJT TO BE RESOLVED
; WHEN THE USER TASK IS LINKED, WHICH BRINGS IN FCSJMP.OBJ.  THE TABLE IS 
; IN PSECT $$FSR3, WITH $$FSR4 USED AS AN END MARKER.
;
; FCSVEC SHOULD BE INSERTED IN THE SYSTEM LIBRARY WITH ENTRY POINTS DELETED,
; BECAUSE IT CONTAINS DUPLICATES OF FCS USER-ACCESSABLE ENTRY POINTS.
;
	.LIST MC
;
; DEFINE A MACRO TO ASSIGN OFFSETS TO EACH ENTRY POINT
;
	.MACRO	OFFSET	NAME,SYNON

	$'NAME=...TMO		; ASSIGN THE CURRENT VALUE
	.IRP XNAME,<SYNON>	; REPEAT FOR ALL NAMES IN THE LIST
	$'XNAME=...TMO		; DEFINE SYNONYMS
	.ENDR			;
	...TMO=...TMO+2		; AND BUMP IT
	.ENDM
;
; DEFINE A MACRO TO CREATE THE JUMP TABLE
;
	.MACRO VECT NAME,SYNON

	.IRP XNAME,<SYNON>	; REPEAT FOR ALL NAMES IN THE LIST
.'XNAME::			; DEFINE SYNONYM ENTRY POINTS
	.ENDR

.'NAME'::
	MOV	#$'NAME,-(SP)	; STACK FUNCTION SPECIFIC OFFSET
	JMP	COMJMP		; EXIT VIA COMMON CODE

	.ENDM
;
; DEFINE A MACRO TO CREATE THE VECTOR ENTRY
;
	.MACRO JUMP NAME,SYNON

	...TMP=.		; SAVE THE CURRENT LOCATION COUNTER
	.=JMPTAB+$'NAME		; REPOSITION TO LOCATION FOR THIS FUNCTION
	.WORD	.'NAME'		; POINT TO THE REAL ROUTINE
	.IIF GT ...TMP-. .=...TMP ; RETURN TO MAXIMUM EXTENT OF $$FSR3
	.ENDM
;
; DEFINE A MACRO WHICH INVOLKS A MACRO FOR EACH ".DOT" ENTRYPOINT IN FCSRES
;
; ANY FUTURE ADDITIONS SHOULD BE MADE TO THE END OF THIS LIST.
;
	.MACRO CREVEC MACNAM

	MACNAM	CLOSE		;FORTRAN ENTRY POINTS
	MACNAM	CSI1
	MACNAM	CSI2
	MACNAM	DLFNB
	MACNAM	FINIT
	MACNAM	GET,<GETSQ>
	MACNAM	GTDID
	MACNAM	MRKDL
	MACNAM	OPFNB
	MACNAM	PARSE
	MACNAM	POINT
	MACNAM	POSRC
	MACNAM	PRINT
        MACNAM  PUT,<PUTSQ>
        MACNAM  READ
        MACNAM  WAIT
        MACNAM  DELET
        MACNAM  FIND
        MACNAM  ASLUN
        MACNAM  ENTER
        MACNAM  EXTND
        MACNAM  FCTYP
        MACNAM  FLUSH
        MACNAM  GTDIR
        MACNAM  MARK
        MACNAM  OPEN
        MACNAM  OPFID
        MACNAM  POSIT
        MACNAM  PRSDI
        MACNAM  PRSDV
        MACNAM  PRSFN
        MACNAM  REMOV
        MACNAM  RENAM
        MACNAM  TRNCL
        MACNAM  WRITE
	MACNAM	CSI4
	MACNAM	EXPLG
 
;
;       THE FOLLOWING ENTRY POINTS ARE NOT INCLUDED IN THE TABLE
;       ENTRIES FOR ANY ONE OF THE FOLLOWING REASONS:
;
;       1.      THE ROUTINE IN QUESTION IS NOT CONTAINED IN THE
;               RESIDENT LIB.
;       2.      THE ROUTINE IS EITHER SO SMALL OR EXECUTED SO
;               FREQUENTLY THAT THE OVERHEAD OF REFERENCING IT IN
;               THE RESIDENT LIB. WOULD BE TOO GREAT.
;       3.      THE ROUTINE IS SMALL AND ITS INTERFACE WILL NEVER
;               BE CHANGED.
;

;	MACNAM	ASCPP
;	MACNAM	CTRL
;	MACNAM	PPASC
;	MACNAM	PPR50
;	MACNAM	RDFDR
;	MACNAM	RDFFP
;	MACNAM	RDFUI
;	MACNAM	RFOWN
;	MACNAM	WDFDR
;	MACNAM	WDFFP
;	MACNAM	WDFUI
;	MACNAM	WFOWN
;	MACNAM	XQIO

	.ENDM
;
; FIRST ASSIGN THE OFFSET VALUES
;
	...TMO = 0		; INITALIZE THE COUNTER

	CREVEC	OFFSET		; ASSIGN THE OFFSETS

;
; THIS MODULE IS USED TO CREATE BOTH THE TRANSFER VECTOR AND THE
; ROOT RESIDENT JUMP TABLE. THIS GUARENTEES THAT THE SAME OFFSET
; IS DEFINED FOR BOTH COMPONENTS
;

	.IF GT,R$$VEC		; CREATE THE VECTOR


	CREVEC	VECT		; CREATE THE TRANSFER VECTOR FOR EACH ENTRY
;
; INSERT THE SERVICE CODE HERE TO ALLOW USE OF BRANCH INSTRUCTIONS
;

COMJMP:
	MOV	R0,-(SP)	; SAVE A REGISTER
	MOV	@#.FSRPT,R0	; PICK UP THE ADDRESS OF THE $$FSR2 AREA

	CMP	2(SP),A.JUMP+2(R0) ; IS THE OFFSET WITHIN RANGE?
	BHI	200$		; BR IF NOT. NO ENTRY IN JUMP TABLE FOR US

	ADD	A.JUMP+0(R0),2(SP) ; ADD BASE OF TABLE TO OFFSET
	MOV	@2(SP),2(SP)	; GET ADDRESS OF TARGET FROM JUMP TABLE
	BEQ	200$		; AND TRAP IF NO SUCH ENTRY

	MOV	(SP)+,R0	; RESTORE TEMPORARY
	RETURN			; AND TRANSFER TO THE TARGET
200$:
	BPT			; GIVE THE USER A SCARE

	.IFF			; CREATE THE JUMP TABLE

	.PSECT	$$FSR3,D,OVR,GBL ;THE JUMP TABLE OVERLAYS THE ROOT DEFAULT
.FCSJT::			; USER GBLREF'S THIS GLOBAL TO GET JUMP TABLE
JMPTAB:
	CREVEC	JUMP		; CREATE THE JUMP TABLE FOR EACH ENTRY
JMPEND:
	.PSECT			; RETURN TO BENIGN SECTION

	.ENDC			;
;
;
	$END	VECJMP
;
;
	.END
