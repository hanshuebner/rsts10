	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
TITLE	ERLDVR,<COMMON DRIVER ERROR LOGGING>,0A,10-MAY-91,MHB/DBM/TPT

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR ERLDVR
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	DBM  02-Jun-85	Allow possibility of no DDB (For MU support)
;  002	TPT  17-Jun-85	Fix bug with no DDB
;-

	DEFORG	ERLDVR

.SBTTL	COMMON DRIVER ERROR LOGGING

;+
; ERLDVR - COMMON DRIVER ERROR LOGGING.
;
;	R1 -> DDB	(0 if no DDB such as MU controller error)
;	R3 -> CSR
;
;	CALL	ERLDVR,R5
;	  .BYTE	<ERROR CODE>
;	  .BYTE	<SIZE OF DDB IN BYTES>
;	  .BYTE	<OFFSET TO START REG>,<# REGS TO SAVE>	** OPTIONAL **
;	  .BYTE	<OFFSET TO START REG>,<# REGS TO SAVE>	** OPTIONAL **
;	  .BYTE	0,0
;
;	R0 -> TIMEOUT INDICATION LOCATION (WORD)
;	R1 -> POINTER WORD FOR FILLING IN A DDB EXTENSION (2 WORDS)
;	R2 -> TERMINATOR (-1) +2 IN CONTROL TABLE (WORD) (2 WORDS)
;	R5 -> CONTROL TABLE FOR ERROR LOGGER
;-

ERLDVR:	MOV	#ERLTBL,R2	;;;POINT TO THE CONTROL TABLE
	MOV	R2,(SP)		;;;PRESET FOR RETURNING POINTER
	MOVB	(R5)+,(R2)+	;;;SET THE ERROR CODE
	MOV	#ERLAUX+6,R0	;;;POINT TO THE 4 WORD AREA @ DDB SIZE (+6) ;001
	CLR	(R0)		;;;CLEAR OUT DDB SIZE WORD		;001
	CLR	-(R0)		;;;Clear unit # and flag word		;001
	CLR	-(R0)		;;;Clear device name			;001
	CLR	-(R0)		;;;Say not a timeout for now		;001
	CLRB	(R2)+		;;;Assume there's no job		;001
	MOV	R2,-(SP)	;;;Save room on stack for DDB extension	;001
	TST	R1		;;;Is there a job? (DDB existant?)	;001
	BNE	5$		;;;YES, SO CONTINUE			;002
	TSTB	(R5)+		;;;NO SO GET RID OF DDB SIZE		;002
	BR	10$		;;;AND GET OUT				;002

5$:	MOVB	DDJBNO(R1),-1(R2) ;;;Yes, set job number times 2	;001
	MOV	#2*400+4,(R2)+	;;;FIELD 2, 4 WORDS
	MOV	#ERLAUX+6,R0	;;;POINT TO THE 4 WORD AREA @ DDB SIZE (+6)
	MOVB	(R5)+,(R0)	;;;SET DDB SIZE IN BYTES
	;CLC			;;;C=0 FROM 'CLR' ABOVE
	ROR	(R0)		;;;NOW HAVE DDB SIZE IN WORDS
	MOVB	#-1,-(R0)	;;;SET 'UNIT IS REAL' FLAG
	MOVB	DDUNT(R1),-(R0)	;;;SET THE DEVICE UNIT NUMBER
	MOV	R1,-(SP)	;;;SAVE THE DDB POINTER
	MOVB	(R1),R1		;;;GET THE DRIVER INDEX
	MOV	DEVNKB-2(R1),-(R0) ;;;SET THE DEVICE NAME (2 BYTES ASCII)
	CLR	-(R0)		;;;INDICATE NOT A TIMEOUT FOR NOW
	MOV	R0,(R2)+	;;;SET POINTER TO THE INFORMATION AREA
	MOVB	ERLAUX+6,(R2)+	;;;SET DDB SIZE AS # WORDS
	MOVB	#2,(R2)+	;;; FOR FIELD 2
	MOV	(SP)+,(R2)+	;;;POINT TO THE DDB
	MOV	#2*400+0,(R2)+	;;;SET 0 WORDS FOR MORE FIELD 2
	MOV	R2,(SP)		;;;Save the actual pointer location	;001
	CLR	(R2)+		;;; THEN SET POINTER=0 INITIALLY
10$:	JMPX	ERLCMN		;;;NOW GO FINISH UP IN THE COMMON CODE

GLOBAL	<ERLTBL,ERLAUX,DEVNKB>

.END

