	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /CMN:PPDEF/
TITLE	PPDVR,<PAPER TAPE PUNCH I/O SERVICE>,0A,10-MAY-91,MHB/GW/ABC/AJK

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR PPDVR
;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;
;  001  AJK  16-JUN-81  CHANGED I/O SERVICE ROUTINE TO USE R4
;			FOR COMPUTING CHARACTER PARITY.
;-

	DEFORG	PPDVR

	DEFORG	PPDINT

	INCLUDE	ERLDVR

	ORG	PPDVR

; DEFINE 'DDSTS' VALUE FOR PAPER TAPE PUNCH

STS.PP	==	DDRLO/400
		;WRITE ONLY DEVICE

; DEFINE FLAGS FOR PAPER TAPE PUNCH

FLG.PP	==	FLGFRC!DDRLO!DDNFS!PTPHND
		;BYTE ORIENTED
		;WRITE ONLY
		;NON-FILE STRUCTURED
		;PAPER TAPE PUNCH

; DEFINE WIDTH

SIZ.PP	==	5*14.+1
		;DEFAULT FOR "NO WIDTH"

; DEFINE DEFAULT BUFFER SIZE

BUF.PP	==	128.
		;DEFAULT BUFFER SIZE IS 128. CHARACTERS

; BLANK TRAILER

TRAILR	=	120.
		;120 BLANK FRAMES FOR TRAILER


	TMPORG	PPDINT

PPDINT:	CALLX	INTSAV,R5	;SAVE ALL REGISTERS
	  .WORD	1200		;PAR5 VALUE
	  .WORD	INT$PP		;INTERRUPT SERVICE ENTRY POINT

	UNORG

.SBTTL	LEVEL 3 USER I/O SERVICE

;+
; SER$PP - USER LEVEL READ/WRITE SERVICE.
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> DDB/FCB
;	R2 =  2 (.READ)
;	      4 (.WRITE)
;	R3 -> XRB
;	R4 =  CALLING JOB NUMBER TIMES 2
;	R5 -> USER'S BUFFER (THROUGH KISAR6)
;	IF Z=1 OR C=0 THEN THIS IS THE FIRST CALL
;	IF Z=0 OR C=1 THEN THIS IS A "REDO" CALL
;
; NOTES:
;
;	1) ACCESS RIGHTS HAVE BEEN VERIFIED.
;	2) DIRECTIONAL RIGHTS HAVE BEEN VERIFIED.
;
; EXITS:
;
;	1) ALL COMPLETE WITH NO ERROR
;
;		JMP	IOEXIT
;
;	2) ALL COMPLETE WITH ERROR
;
;		SETERR	CODE
;		JMP	IOEXIT
;
;		-OR-
;
;		ERROR	CODE
;
;	3) STALL DESIRED (FOR "REDO" LATER)
;
;		JMP	IOREDO
;-

SER$PP::CLR	XRBLK(R3)	;INDICATE SEQUENTIAL DEVICE
	CLRB	XRBLKM(R3)	; IN BOTH PLACES
	TST	(R3)+		;POINT TO XRBC
10$:	TST	(R1)		;ARE WE HUNG?
	BMI	40$		;YES (C=0 FROM 'TST')
	TST	(R3)+		;ANYTHING LEFT TO TRANSFER?
	BEQ	50$		;NO. EXIT STARTING PUNCH (C=0 FROM 'TST')
	BIT	DDBUFC+FP(R1),#40-1 ;IS THE CURRENT BUFFER ALL FILLED UP?
	BNE	20$		;NO
	CALLX	FREBUF,R5,BFQ.PP ;YES, CHECK IF BUFFERS ARE AVAILABLE
	BCS	50$		;NONE AVAILABLE, STALL USER (C=1)
20$:	GETUSR			;GET A CHARACTER FROM THE USER'S BUFFER
	MOV	DDFLAG(R1),R4	;GET THE PARITY FLAGS			;001
	BIC	#^C<PPPRTY!PPPODD>,R4 ; AND ISOLATE THEM		;001
	BEQ	30$		;NO PARITY CHECKING, PASS 8-BIT CHARACTERS
	ASR	R4		;SHIFT ODD-PARITY FLAG TO 200 IN LOW BYTE;001
.ASSUME	PPPODD/2	EQ	200
.ASSUME	PPPRTY/2&377	EQ	0
	BIC	#^C<177>,R2	;STRIP THE CHARACTER TO BE 7-BIT
	BIS	R2,R4		;MAKE THE CHARACTER HAVE THE SOUGHT PARITY;001
	ASH	#-4,R4		;SHIFT FOUR BITS DOWN			;001
	XOR	R2,R4		; AND PUT FOUR BITS TOGETHER FOR TABLE 	;001
	BIC	#^C<17>,R4	; INDEX AND ISOLATE TABLE INDEX		;001
	BISB	PTABLE(R4),R2	;TURN ON 200 BIT IF PARITY SAYS SO	;001
30$:	CALLX	STORE,R5,DDBUFC+FP ;STORE IT IN THE BUFFER CHAIN
	BCS	50$		;STORE FAILED, STALL (C=1)
	INC	(R3)		;O.K., BUMP THE BUFFER POINTER
	DEC	-(R3)		; AND DECREMENT THE BYTE COUNT
	BR	10$		;LOOP FOR MORE CHARACTERS

40$:	SETERR	HNGDEV,@IOSTS	;TELL USER THE PUNCH IS HUNG
50$:	CALL	START		;NOW TRY TO START UP THAT PUNCH
	BCS	60$		;IF C=1 THEN WE ARE STALLING THE JOB
	JMPX	IOEXIT		;IF C=0 THEN I/O IS ALL DONE

60$:	JMPX	IOREDO		;GO STALL THIS USER

GLOBAL	<BFQ.PP,PTABLE>

.SBTTL	PAPER TAPE PUNCH CLOSE

;+
; CLS$PP - CLOSE SERVICE FOR PAPER TAPE PUNCH.
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> DDB/FCB
;	R5 -> DDB/FCB (MUST BE PRESERVED)
;	IF Z=1 THEN A REAL CLOSE CALL
;	IF Z=0 THEN A "RESET" CLOSE CALL
;
;	...
;
;	RETURN
;-

CLS$PP::BNE	START		;NO TRAILER IF RESET CLOSE
	CALLX	FREBUF,R5,BFQ.PP ;ENOUGH FREE SPACE?
	BCS	START		;NO, SO NO TRAILER
	MOV	#TRAILR,R3	;ABOUT ENOUGH TRAILER
	CLR	R2		;SEND OUT NULLS
10$:	CALLX	STORE,R5,DDBUFC+FP ;I.E., STORE THEM IN THE BUFFER
	SOB	R3,10$		;LOOP UNTIL MEDIUM WELL
	BR	START		;NOW EXIT STARTING THE PUNCH

GLOBAL	<BFQ.PP>

.SBTTL	PAPER TAPE PUNCH OPEN

;+
; OPN$PP - OPEN SERVICE FOR PAPER TAPE PUNCH.
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> DDB (MUST BE PRESERVED)
;	R4 -> FIRQB (DEFAULT FQFLAG AND FQBUFL VALUE LOADED)
;	R5 -> JOB'S IOB ENTRY (MUST BE PRESERVED)
;
;	...
;
;	RETURN
;
;	-OR-
;
;	CALL	RETDEV
;	ERROR	CODE
;-

OPN$PP::MOV	FQMODE(R4),R2	;GET THE MODE BITS FOR PARITY CHECKING
	BIC	#^C<2+1>,R2	;ISOLATE ONLY BIT 1 (ENABLE) AND BIT 0 (ODD)
	ASR	R2		;SHIFT EVEN/ODD INTO CARRY
	BEQ	10$		;NO ENABLING BIT, SO LEAVE A ZERO MODE
	ROL	R2		;PUT EVEN/ODD BIT BACK
10$:	MOVB	R2,DDFLAG+1(R1)	;STOW THE PARITY MODE
	.BR	START		;NOW MAKE THE PUNCH INTERRUPT

; NOTE: START UP DOESN'T CHANGE THE CARRY BIT.

START:	MOV	#5.,TIM.PP(R0)	;SET A TIMEOUT VALUE
	BIS	#100,@CSR.PP(R0) ; AND START PUNCH
	RETURN			;  THEN EXIT

GLOBAL	<TIM.PP,CSR.PP>

.SBTTL	DEVICE ASSIGNMENT SERVICE

;+
; ASN$PP - DEVICE ASSIGNMENT SERVICE FOR PAPER TAPE PUNCH.
;
;	R0 =  JOB NUMBER OF ASSIGNER TIMES 2
;	R1 -> DDB
;
;	...
;
;	RETURN		(WITH ALL REGISTERS PRESERVED)
;-

ASN$PP::			;SIMPLY FORCE AN INTERRUPT

.SBTTL	DEVICE DEASSIGNMENT SERVICE

;+
; DEA$PP - DEVICE DEASSIGNMENT SERVICE FOR PAPER TAPE PUNCH.
;
;	R1 -> DDB
;
;	...
;
;	RETURN		(WITH ALL REGISTERS PRESERVED)
;-

DEA$PP::MOV	R0,-(SP)	;SAVE R0
	MOVB	DDUNT(R1),R0	;GET THE UNIT NUMBER
	ASL	R0		; TIMES 2 FOR WORD ADDRESSING
	CALL	START		;NOW FORCE A PUNCH INTERRUPT
	MOV	(SP)+,R0	;RESTORE R0
	RETURN			; AND EXIT

.SBTTL	INTERRUPT SERVICE (PR4)

;+
; INT$PP - INTERRUPTS FOR PAPER TAPE PUNCH.
;
;	R0 =  UNIT NUMBER TIMES 2
;	PRIORITY IS INTERRUPT PRIORITY
;
;	...
;
;	RETURN
;-

.ENABL	LSB

INT$PP::MOV	DEV.PP(R0),R1	;;GET POINTER TO PUNCH DDB
	MOV	CSR.PP(R0),R3	;; AND THE CSR POINTER
	CLR	TIM.PP(R0)	;;CLEAR TIMEOUT IF WE INTERRUPTED
	BIC	#DDSTAT,(R1)	;;ASSUME NO ERROR INITIALLY
	TST	(R3)		;;REALLY AN ERROR?
	BMI	20$		;;YES.
	CALLX	FETCH,R5,DDBUFC+EP ;;GET A CHARACTER FROM THE BUFFER
	BCS	30$		;;BUFFER EMPTY - CLEAR INT. ENABLE
	MOVB	R2,PPB(R3)	;;PUNCH THE CHARACTER
	CALL	START		;; AND RESET TIMEOUT, ETC.
10$:	CALLX	IOFINC,R5,<BFQ.PP-2.,JS.PP> ;;ALLOW JOB TO BE SCHEDULED
	RETURN			;;EXIT FROM INTERRUPT

20$:	BIS	#DDSTAT,(R1)	;;INDICATE THE PUNCH ERROR
	CALLX	CLRBUF,R5,DDBUFC+EP ;; AND CLEAR BUFFER CHAIN
30$:	CLR	(R3)		;;DISABLE INTERRUPT - WE'RE DONE
	BR	10$		;; AND BACK

GLOBAL	<DEV.PP,CSR.PP,TIM.PP,BFQ.PP,JS.PP>

.SBTTL	TIMEOUTS

;+
; TMO$PP - TIMEOUT ENTRY POINT.
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> DDB
;	R3 -> CSR
;	PRIORITY IS PR5
;
;	...
;
;	RETURN
;-

TMO$PP::LOG$PP			;;LOG AN ERROR IF TIMEOUT
	BR	30$		;;DISABLE INTERRUPT AND EXIT

.DSABL	LSB

GLOBAL	<LOG$PP>

.SBTTL	SPECIAL FUNCTION SERVICE

;+
; SPC$PP - SPECIAL FUNCTION SERVICE FOR PAPER TAPE PUNCH.
;
;	R0 =  UNIT NUMBER TIMES 2
;	R1 -> DDB/FCB
;	R2 =  SPECIAL FUNCTION CODE
;	R3 -> XRB
;	R4 =  CALLING JOB NUMBER TIMES 2
;	R5 -> (MAPPED) XRB
;
;	...
;
;	JMP	RTI3
;
;	-OR-
;
;	ERROR	CODE
;-

SPC$PP::ERROR	PRVIOL		;NO SPECIAL FUNCTION SERVICE

.SBTTL	ERROR LOGGING

;+
; ERL$PP - PAPER TAPE PUNCH ERROR LOGGING.
;-

ERL$PP::CALLX	ERLDVR,R5	;;;USE THE COMMON ROUTINE
	  .BYTE	ERC$PP		;;;ERROR CODE
	  .BYTE	DDS.PP		;;;DDB SIZE IN BYTES
	  .BYTE	0,2		;;;NO OFFSET, 2 REGISTERS
	  .BYTE	0,0		;;;THAT'S ALL
	COMB	(R0)		;;;TIMEOUT ERROR
	RETURN			;;; AND BACK

GLOBAL	<DDS.PP>

.END

