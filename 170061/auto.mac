	.TITLE	AUTO
	.IDENT	/10.04/

;
;		COPYRIGHT (c) 1986 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD
;	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;
; THIS  SOFTWARE  IS  FURNISHED  UNDER  A LICENSE AND MAY BE USED
; AND  COPIED  ONLY IN  ACCORDANCE WITH THE TERMS OF SUCH LICENSE
; AND WITH  THE INCLUSION  OF THE ABOVE  COPYRIGHT  NOTICE.  THIS
; SOFTWARE  OR ANY OTHER  COPIES  THEREOF, MAY NOT BE PROVIDED OR
; OTHERWISE MADE  AVAILABLE TO ANY OTHER PERSON.  NO TITLE TO AND
; OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERED.
;
; THE INFORMATION  IN THIS DOCUMENT IS SUBJECT  TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT  BY  DIGITAL
; EQUIPMENT CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.
;
; D. N. CUTLER/C. MONIA 11-JAN-74
;
; MODIFIED FOR RSX-11M/M-PLUS V4.0/V2.0 BY:
;
;	J. E. POLLACK
;	C. B. PETROVIC
;
; MODIFIED BY:
;
;	C. B. PETROVIC	6-JUL-84	10.03
;		CBP131	CORRECT ASTEN TO SAVE THE WORK REGISTER BEFORE
;			DESTROYING IT'S CONTENTS.
;
; MODIFIED FOR RSX-11M-PLUS AND MICRO/RSX V4.0 BY:
;
;	L. M. PETERSON	5-JUN-86	10.04
;		LMP046	ADD SUPPORT FOR OTS OPTIMIZATION
;			(MODIFY TEST FOR ROOT SEGMENTS)
;
;
;+
; **-$AUTO-AUTOLOAD SEGMENT
;
; THIS ROUTINE IS CALLED VIA A JSR INSTRUCTION FROM AN AUTOLOAD VEC-
; TOR TO TRANSPARENTLY LOAD A SEGMENT. IT IS ONE OF THE RUN TIME
; OVERLAY ROUTINES. IF THE SPECIFIED SEGMENT IS IN MEMORY, THEN CON-
; TROL IS TRANSFERED DIRECTLY TO THE AUTOLOAD ENTRY POINT. ELSE ALL
; APPROPRIATE SEGMENTS ARE MARKED OUT OF MEMORY AND THE PATH TO THE
; SPECIFIED SEGMENT IS LOADED. CONTROL IS THEN TRANSFERED TO THE AUTO-
; LOAD ENTRY POINT.
;
; INPUTS:
;
;	(SP) = ADDRESS OF 2 WORD AUTOLOAD PACKET
;
; 	PACKET FORMAT:
;
;	.WORD	CALL SEG
;	.WORD	AUTO ENT
;
;	WHERE:
;
;	CALL SEG=ADDRESS OF SEGMENT DESCRIPTOR OF THE SEGMENT THAT CON-
;		TROL IS TO BE TRANSFERED INTO.
;	AUTO ENT=ADDRESS OF THE AUTOLOAD ENTRY POINT IN THE CALLED SEG-
;		MENT.
;
; OUTPUTS:
;
;	THE APPROPRIATE SEGMENTS ARE MARKED OUT OF MEMORY, THE PATH IS
;	LOADED TO THE CALLED SEGMENT, AND CONTROL IS TRANSFERED TO THE
;	AUTOLOAD ENTRY POINT.
;
;	NOTE:	IF A LOAD ERROR OCCURS THEN A CALL TO '$ALERR' IS EXECUTED
;		TO ACCOMPLISH ERROR RECOVERY. ON RETURN, THE REQUEST TO
;		READ THE SEGMENT IS REPEATED. THE RECOVERY ROUTINE IS
;		SUPPLIED WITH THE FOLLOWING INPUTS:
;
;		R2 = ADDRESS OF SEGMENT DESCRIPTOR BEING PROCESSED WHEN
;		      LOAD ERROR OCCURRED.
;
;		'$ALERR' IS NORMALLY INCLUDED DIRECTLY IN THE TASK IMAGE
;		RATHER THAN WITHIN A RESIDENT LIBRARY TO FACILITATE SUBSTITU-
;		TION OF A USER-WRITTEN RECOVERY PROCEDURE AT LINK TIME
;
; ACCESS TO EXTERNAL ROUTINES IS VIA INDIRECT CALL THROUGH THE OVDAT
; OVERLAY DATA VECTOR. THIS INCLUDES $MARKS, RDSEG, AND ERROR BUT NOT PDLSV
; AND THE AST CONTROL ROUTINES. THE INDIRECT ACCESS FOR MARK AND READ
; IS PROVIDED TO PERMIT OVERLAY INTERCEPTION FOR DEBUGGERS AND OVERLAY
; TRACE TOOLS. INTERCEPT OF CLUSTER LIBRARY AND AST ROUTINES IS NOT
; REQUIRED AND IS THEREFORE DIRECT THROUGH OVERMAPPED PSECTS.
;
;-
	.NLIST CND		; DON'T LIST CONDITIONALLY EXCLUDED CODE

;--------------------------------------------------------------------
	 .IIF NDF A$$TRP .TITLE AUTO AUTOLOAD (-TR)
	 .IIF DF A$$TRP  .TITLE AUTOT AUTOLOAD (TR)
;--------------------------------------------------------------------

	.PSECT	$$AUTO	I,RO,LCL,REL,CON

	.ENABL	LSB

$AUTO::				;
	.IF DF A$$TRP		; IF AST SUPPORT IS TO BE INCLUDED

	CALL	ASTDS		; DISABLE AST RECOGNITION

	.IFTF			; IF AST OR NOT

	MOV	@(SP),-(SP)	; REPLACE TOS WITH SEGMENT DESCRIPTOR ADDRESS

	BIT	#TR$MEM,@(SP)+	; SEGMENT IN MEMORY?
	BNE	AUTO1		; IF NE NO
	ADD	#2,(SP)		; POINT TO ENTRY POINT ADDRESS
$ALBP1::			; AUTOLOAD ODT BREAKPOINT
	.IFF			; IF AST SUPPORT IS NOT INCLUDED


	MOV	@(SP)+,PC	; TRANSFER CONTROL TO ENTRY POINT

	.IFT			; IF AST SUPPORT IS INCLUDED

	MOV	@(SP)+,-(SP)	; GET THE TRANSFER ADDRESS

	BR	$ALBP2		; AND USE COMMON AST RESTORE EXIT

	.IFTF			; IF AST IS INCLUDED OR NOT

AUTO1:				;
	JSR	R5,.SAVR1	; SAVE R1,R2,R3,R4,R5
	MOV	@#N.OVPT,R1	; PICK UP ADDRESS OF IMPURE DATA
;
; AT THIS POINT THE STACK CONTENTS ARE:
;
;	SP+14 = ADDRESS OF 2-WORD PACKET
;	SP+12 = SAVED R5
;	...
;	SP+02 = SAVED R1
;	SP+00 = RETURN TO REGISTER RESTORE ROUTINE
;

	MOV	14(SP),R5	; GET ADDRESS OF PACKET (IN I-SPACE)

	MOV	(R5)+,R2	; GET SEGMENT DESCRIPTOR ADDRESS
	MOV	(R5),14(SP)	; REPLACE PACKET ADDR WITH EPT ADDRESS

	CALL	@N.MRKS(R1)	; MARK APPROPRIATE SEGMENTS OUT OF MEMORY
;
; NOW PATH LOAD SEGMENTS STARTING WITH THE TARGET AND PROCEEDING
; DOWN-MEMORY TOWARD THE FIRST ENCOUNTERED SEGMENT ALREADY IN MEMORY
; OR TO THE ROOT.
;
$ALBPL::
20$:				;
	CLR	R5		; NO AST TRAP ADDRESS
	CLR	R4		; NO I/O STATUS DOUBLEWORD
	CLR	R3		; SYNCHRONOUS LOAD REQUEST
	CALL	@N.RDSG(R1)	; READ IN SEGMENT
	BCS	70$		; IF C/S ERROR
50$:				;
	TST	(R2) 		; REACHED ROOT SEGMENT?
	BPL	60$		; IF PL, YES
	MOV	T$RDWN(R2),R2	; GET NEXT LINK DOWN
	BEQ	60$		; IF EQ ROOT SEGMENT
	BIT	#TR$MEM,(R2)	; SEGMENT IN MEMORY?
	BNE	20$		; IF NE NO
	BR	50$		; GET NEXT LINK DOWN
60$:				;
	MOV	N.DTDS(R1),R2	; GET ADDRESS OF DISPLACED SEGMENT
				; AS DETECTED BY MARKS ROUTINE
	BNE	68$		; BR IF WE HAVE A PUSHDOWN MAP CALL
$ALBP2::			; AUTOLOAD ODT BREAKPOINT
	.IFT			; IF AST SUPPORT IS INCLUDED

	CALLR	ASTEN		; REENABLE AST RECOGNITION IF DISABLED ON ENTRY

	.IFF			; IF NO AST SUPPORT IS INCLUDED

	RETURN			; RETURN TO REGISTER RESTORE AND THENCE
				; TO TARGET

	.IFTF			; IF AST SUPPORT IS INCLUDED OR NOT
;
; A PUSHDOWN MAPPING HAS BEEN DETECTED, GO PREPARE THE STACK AND
; CALL THE TARGET.
;
68$:
	CALLR	NPDLS		; GO TO PDL SERVICE
;
; LOAD REQUEST ERROR
;
70$:				;
	CALL	@N.ALER(R1)	; CALL ERROR RECOVERY ROUTINE
	BR	20$		; RETRY LOAD REQUEST

	.DSABL	LSB

;
; DEFINE OVERMAPPED PSECT FOR ACCESS TO THE CLUSTER LIBRARY CONTROL ROUTINE
;
	.PSECT	$$PDLS	I,RO,LCL,REL,OVR
NPDLS:				; ADDRESS OF CLUSTER SERVICE ROUTINE

	.IFT			; IF AST SUPPORT IS INCLUDED
	.ENABL	LC
;+
; **-AST Recognition Control Routines for Autoload
;
; These (paired) routines disable AST recognition around an autoload
; operation when the user has set a flag bit (the sign bit of the flags
; byte at offset N.FAST in the overlay run-time system impure area).
; They protect an autoload operation from interruption by another such
; operation at task AST level during the periods when the overlay run-time
; system impure area and/or structure linkages are in an indeterminate
; state.  If the sign bit of the flags byte is set by the user (and this
; variant of the autoload routines has been selected), AST recognition
; is disabled at the beginning of the autoload (or the start of the
; cluster-library exit re-load) and the low bit of the flags byte is
; set if AST recognition was already disabled, cleared otherwise.  At
; the completion of the autoload or cluster-library re-load, AST
; recognition is restored to its state upon entry (based on the low
; bit of the flags byte).
;
; The routines are included into their own psects as a packaging
; convention to allow link-time determination of the intended support.
; If the user has not explicitly extracted this module from SYSLIB
; for inclusion in the task image, then the references to
; ASTDS/ASTEN included in other run time routines collapses
; to a return instruction contained in the $$RTS .PSECT.
;-
	.MCALL	ENAR$S,DSAR$S

	.PSECT	$$RTQ	I,RO,GBL,REL,OVR

ASTDS:
	MOV	R0,-(SP)	; Save a work register and get the base of
	MOV	@#N.OVPT,R0	; the overlay run-time system impure area.
	ASRB	N.FAST(R0)	; Shift flags byte, replicating high
	BPL	10$		; bit.  If high bit was clear, branch.
	DSAR$S			; Else:  Disable AST recognition and
10$:
	ROLB	N.FAST(R0)	; Restore high bit, capturing directive
	MOV	(SP)+,R0	; status (if any), restore the work
	RETURN			; register, and RETURN.

	.PSECT	$$RTR	I,RO,GBL,REL,OVR

ASTEN:
	MOV	R1,-(SP)	; Save a work register
	MOV	@#N.OVPT,R1	; Get address of impure area.
	ASRB	N.FAST(R1)	; Shift flags byte, replicating high
	BPL	10$		; bit.  If high bit was clear, branch.
	BCS	10$		; Else:  If AST recognition was disabled
	ENAR$S			; on entry, branch.  Else:  Enable it.
10$:
	ROLB	N.FAST(R1)	; Restore high bit, capturing directive
	MOV	(SP)+,R1	; status (if any), restore the work
	RETURN			; register, and RETURN.

	.PSECT	$$RTS	I,RO,GBL,REL,OVR
				; DEFINE RTS PSECT FOR ORDER

	.ENDC			; IF AST SUPPORT IS INCLUDED OR NOT

	.END
