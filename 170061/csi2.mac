	.TITLE	.CSI2
	.IDENT	/06/

;
; COPYRIGHT (C) 1973,1976, 1983
; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
; IN DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;
;
; VERSION 06
;
;
; WRITTEN BY:
;	A. MAROTTO  (CCA)
;
; MODIFIED BY:
;	C.A. D'ELIA	31-JAN-74	001
;	C.A. D'ELIA	15-MAR-74	002
;	C.A. D'ELIA	04-JUN-74	003
;	P.H. LIPMAN	28-JAN-76	004
;	C.A. D'ELIA	20-AUG-76	005
;	FEK		26-AUG-83	006 ADD PSECT DEFINITIONS FOR I/D
;
;
;
;	COMMAND STRING INTERPRETER - SEMANTIC PARSER
;
;
;
;
ASVAL=1		;SWITCH VALUE TABLE ASCII CVT CODE
DECVAL=3		;++003 SWITCH TABLE VALUE FOR DECIMAL CONVERT
;
;
;
	.PSECT	PURE$I	RO,I,LCL,REL.CON

.CSI2::				;++002
	JSR	R5,.SAVR1	;++002 SAVE REGISTERS
	BICB	#^C<CS.EQU>,C.STAT(R0)	  ;++005 CLEAR MOST STATUS BITS
	CLR	C.MKW1(R0)		;CLEAR SWITCHES MASK
	CLR	C.MKW2(R0)
	CLR	R1			;SET INPUT SWITCHES
	MOV	C.ISTR(R0),R2		;GET INPUT STRING ADDR
	CMPB	#CS.INP,(R0)		;BRANCH IF INPUT REQUEST
	BEQ	CSI21
	CMPB	#CS.OUT,(R0)		;BRANCH IF OUTPUT REQUEST
	BEQ	CSI20
	SEC				;SET ERROR
	RTS	PC			;EXIT
CSI20:	INC	R1			;SET OUTPUT SWITCH
	MOV	C.OSTR(R0),R2		;GET OUTPUT STRING ADDR
CSI21:	JSR	PC,DELSCN		;SCAN TO A DELIM
	MOV	#DVVECT,R3		;ADDR DEV INFO CTL VECT
	JSR	PC,DIDVSN		;DO DEV PROCESSING
	MOV	#DIVECT,R3		;ADDR DIR INFO CTL VECT
	JSR	PC,DIDVSN		;DO DIR PROCESSING
	.IF	DF,RSTS			;++ RSTS V7.1
	CMP	R2,R4			;++ RSTS V7.1 END-OF-STRING?
	BEQ	30$			;++ RSTS V7.1 YES, FILNAME NO PRESENT
	MOV	#PPNTAB,R3		;++ RSTS V7.1 PONT TO PPN
10$:	CMPB	(R3)+,(R2)		;++ RSTS V7.1 IS CHAR A SPECIAL PPN?
	BEQ	20$			;++ RSTS V7.1 GOT ONE
	TSTB	(R3)			;++ RSTS V7.1 CHECK FOR END OF TABLE
	BNE	10$			;++ RSTS V7.1 LOOP BACK FOR MORE
	BR	30$			;++ RSTS V7.1 CAN'T FIND ONE, CONTINUE

20$:	BISB	#CS.DIF,C.STAT(R0)	;++ RSTS V7.1 SET FOUND A PPN
	MOV	#C.IDIL,R3		;++ RSTS V7.1 DISP TO 4WD IO SAVE PTRS
	ADD	R0,R3			;++ RSTS V7.1 ADDR OF INPUT SAVE PTRS
	TST	R1			;++ RSTS V7.1 INPUT OR OUTPUT?
	BEQ	25$			;++ RSTS V7.1 BRANCH IF INPUT
	CMP	(R3)+,(R3)+		;++ RSTS V7.1 SKIP TO OUTPUT PTRS
25$:	MOV	#1,(R3)			;++ RSTS V7.1 SET A LENGTH OF 1
	MOV	(R3)+,C.DILN(R0)	;++ RSTS V7.1 
	MOV	R2,(R3)			;++ RSTS V7.1 SET ADDR OF THE PPN
	MOV	R2,C.DILN+2(R0)		;++ RSTS V7.1 
	INC	R2			;++ RSTS V7.1 STEP OVER THE PPN
30$:					;++ RSTS V7.1 CONTINUE....
	.IFTF				;++ RSTS V7.1 
	BR	CSI26			;DO FILENAME PROCESSING

	.PSECT	PURE$D	RO,D,LCL,REL,CON

	.IFT				;++ RSTS V7.1 

PPNTAB:					;++ RSTS V7.1 TABLE OF PPN'S
	.BYTE	'$			;++ RSTS V7.1 [1,2]
	.BYTE	'!			;++ RSTS V7.1 [1,3]
	.BYTE	'%			;++ RSTS V7.1 [1,4]
	.BYTE	'&			;++ RSTS V7.1 [1,5]
	.BYTE	'#			;++ RSTS V7.1 [PROJ,0]
	.BYTE	'@			;++ RSTS V7.1 ASSIGNABLE PPN
	.BYTE	0			;++ RSTS V7.1 END OF TABLE
	.EVEN				;++ RSTS V7.
	.ENDC				;++ RSTS V7.

;
DVVECT:	.BYTE	C.IDVL,COLON,0,0,CS.DVF,C.DVLN,0,COLON
;
DIVECT:	.BYTE	C.IDIL,RBRAC,1,0,CS.DIF,C.DILN,1,RBRAC
;

	.PSECT	PURE$I

DIDVSN:	MOV	R4,-(SP)		;SAVE STRING SEG END
	MOV	R2,-(SP)		;AND START PTRS
	MOV	R5,-(SP)		;SAVE DELIM
	MOVB	(R3)+,R5		;DISP TO 4WD I/O SAVE PTRS
	ADD	R0,R5			;ADDR OF INPUT SAVE PTRS
	TST	R1			;BRANCH IF INPUT
	BEQ	CSI22
	CMP	(R5)+,(R5)+	;++001 INCR R5 TO PNT TO OUTPUT
CSI22:	CMPB	(R3)+,(SP)		;BRANCH IF NOT DEV/DIR INFO
	BNE	CSI23
	ADD	(R3)+,R4		;ADJUSTMENT FOR DIR INFO
	SUB	R2,R4			;CALC LEN OF SEG
	.IF	DF,RSTS			;++ RSTS V7.1 
	BNE	10$			;++ RSTS V7.1 IF LENGTH IS ZERO
	INC	R4			;++ RSTS V7.1 STEP OVER DELIMITER
10$:					;++ RSTS V7.1 
	.ENDC				;++ RSTS V7.1 
	BISB	(R3)+,C.STAT(R0)	;SET FOUND THIS SEG
	BR	CSI24
CSI23:	ADD	#3,R3			;STEP OVER CTL VECT BYTES
	MOV	(R5),R4		;GET PREVIOUS LEN
	MOV	2(R5),R2		;AND ADDR
CSI24:	MOV	R4,(R5)+	;++001 SAVE LENGTH/ADDR INFO IN ...
	MOV	R2,(R5)		;++001 ... LAST FOUND WORDS
	MOVB	(R3)+,R5		;CALC ADDR OF
	ADD	R0,R5			;RETURN LEN AND ADDR
	MOV	R4,(R5)+		;RETURN LENGTH AND ADDR
	MOV	R2,(R5)
	TSTB	(R3)+			;FALL THRU FOR DIR INFO
	BEQ	CSI25			;ONLY
	TST	R4
	BEQ	CSI25			;BRANCH IF NO DIR INFO
	ADD	R2,R4
	JSR	PC,WILDCK		;WILD CARD SCAN
CSI25:	MOV	(SP)+,R5		;RESTORE DELIM
	MOV	(SP)+,R2		;SEG LEN AND ADDR
	MOV	(SP)+,R4
	CMPB	(R3),R5		;BRANCH IF WAS NOT
	BNE	CSI25X			;DEV(OR DIR) INFO
	MOV	R4,R2			;ELSE SET NEW PTRS
	INC	R2
	JSR	PC,DELSCN		;SCAN TO DELIM
CSI25X:	RTS	PC
;
;
CSI26:	MOV	R2,C.FNAD(R0)		;SET FILE NAME ADDR
	MOV	R4,R3
	SUB	R2,R3			;CALC FILE NAME LEN
	MOV	R3,C.FNLN(R0)		;SET FILE NAME LENGTH
	BEQ	CSI27			;BRANCH IF NONE
	BISB	#CS.NMF,C.STAT(R0)	;SET FILE NAME FOUND STATUS
	JSR	PC,WILDCK
CSI27:	MOV	R4,R2			;POINT TO LAST FOUND DELIM
	CLR	R4			;CLEAR ERROR SWITCH
	CMPB	#SLASH,R5
	BNE	CSI28			;BRANCH IF NO SWITCHES
	JSR	PC,SWITCH		;GO PROCESS SWITCHES
CSI28:	CMPB	#EQUAL,R5		;BRANCH IF AT END OF STRING
	BEQ	CSI29
	BISB	#CS.MOR,C.STAT(R0)	;ELSE SET MORE STRINGS FOLLOW
	INC	R2			;STEP OVER LAST DELIMITER
CSI29:	TST	R1
	BNE	CSI30			;BRANCH IF OUTPUT
	MOV	R2,C.ISTR(R0)		;SAVE INPUT STRING PTR
	BR	CSIXIT
CSI30:	MOV	R2,C.OSTR(R0)		;SAVE OUTPUT STRING PTR
CSIXIT:	ROR	R4			;SET ERROR VALUE(C-BIT ON IF ERROR)
	RTS	PC			;EXIT
;
;
;	PROCESS SWITCHES HERE
;
;	R2 = STRING PTR(POINTS TO /)(RETURNED AT END OF STRING)
;	R4 = RETURNED 0=NO ERROR, 1=ERROR
;	R5 = DELIMTER AT END OF THIS STRING
;
;++004 THE FOLLOWING CHANGES IMPLEMENT VARIABLE LENGTH SWITCHES
;
SWITCH:	INC	R2		;STEP OVER THE CURRENT DELIMITER
	CALL	DELSCN		;AND SCAN TO THE NEXT ONE
	MOV	R4,-(SP)	;SAVE THE DELIMITER POINTER
	MOV	R5,-(SP)	;AND THE CHARACTER ITSELF
	CLR	-(SP)		;INIT NEGATED FLAG TO NOT NEGATED
;
; CHECK FOR NEGATED SWITCH
;
	MOV	R4,R3	
	SUB	R2,R3		;R3=SIZE OF SWITCH STRING
	BLE	SWER1		;IF NO CHARACTER, THEN ERROR
	CMPB	#MINUS,(R2)	;NEGATED WITH "-"?
	BEQ	10$		;BRANCH IF YES
	CMP	R3,#2		;IF 2 OR LESS CHAACTERS
	BLE	SW		;THEN CAN'T BE "NO..."
	CMPB	#'N,(R2)	;SEE IF "NO" ON FRONT
	BNE	SW
	CMPB	#'O,1(R2)
	BNE	SW
;
; STRIP OFF THE "NO" AND ASSUME THE SWITCH IS NEGATED
; BUT IT THE LOOKUP FAILS, TRY AGAIN WITH THE ENTIRE SWITCH NAME
;
	INC	R2		;SKIP OVER THE "N"
10$:	INC	R2		;SKIP OVER THE "O" OR "-"
	INC	(SP)		;INDICATE THAT SWITCH IS NEGATED
	MOV	R4,R3
	SUB	R2,R3		;R3=SIZE OF SWITCH TO SCAN FOR
	MOV	R2,-(SP)	;SAVE ADDRESS OF START OF SWITCH
	CALL	SWMAT		;SEE IF THIS SWITCH IS IN SWITCH TABLE
	MOV	(SP)+,R2	;RESTORE POINTER TO SWITCH
	BCS	30$		;BRANCH IF SWITCH NOT FOUND
	BIT	#1,4(R4)	;IS SWITCH NEGATABLE?
	BNE	SW3		;BRANCH IF YES, COMPLETE THE PORCESSING
30$:	CMPB	#MINUS,-(R2)	;WAS THE NEGATION WITH "-"
	BEQ	SWER1		;BRANCH IF YES, SWITCH NOT FOUND
	CLR	(SP)		;SAY NOT NEGATED
	DEC	R2		;BACK OVER THE "N"
	MOV	4(SP),R3	;RECOVER THE NEXT DELIMITER POINTER
	SUB	R2,R3		;R3=SIZE OF SWITCH TO LOOK FOR
SW:	CALL	SWMAT		;MATCH THE SWITCH
	BCS	SWER1		;BRANCH IF NOT FOUND
;
;++004 END OF CHANGES FOR LONG SWITCH NAMES
;
SW3:	BIS	(R4),C.MKW1(R0)	;++001 SET 'OR' OF MASK WORDS
	TST	(SP)			;BRANCH IF NEG SWITCH
	BNE	SW3A
	BIS	(R4),C.MKW2(R0)	;++001 SET SWITCH ON
	BR	SW3B
SW3A:	BIT	#1,4(R4)	;++001 IS NEGATIVE SWITCH ALLOWED?
	BEQ	SWER1			;ERROR IF NOT
	BIC	(R4),C.MKW2(R0)	;++001 SET SWITCH OFF
SW3B:	MOV	2(R4),R5	;++001 ADDR OF LOCN TO BE MASKED
	CLC
	ROR	R5
	BEQ	SW5			;BRANCH IF NO MASK ADDR
	BCS	SW4			;BRANCH IF TO CLEAR LOCN WITH MASK
	ROL	R5
	TST	(SP)			;BRANCH IF NEG SW TO CLEAR
	BNE	SW4A
SW3C:	BIS	(R4),(R5)	;++001 CLEAR MASK IN LOCN
	BR	SW5
SW4:	CLC
	ROL	R5
	TST	(SP)			;BRANCH IF NEG SW TO SET
	BNE	SW3C
SW4A:	BIC	(R4),(R5)	;++001 CLEAR MASK IN LOCN
SW5:	TST	(SP)+
	MOV	(SP)+,R5		;LAST DELIMITER SCANNED
	MOV	(SP)+,R2		;ADDR OF IT
	MOV	4(R4),R4	;++001 ADDR OF VALUE TABLE (IF ANY)
	BIC	#1,R4			;DEL NEG SW ALLOWED BIT
SW6:	CMPB	R5,#SLASH		;DOES ANOTHER SWITCH FOLLOW
	BEQ	SWITCH			;BRANCH IF SO
	CMPB	R5,#COLON		;DOES A SWITCH VALUE FOLLOW
	BEQ	SWVAL			;GO PROCESS
	CLR	R4			;SET NO ERROR
	RTS	PC			;EXIT
;
SWER1:	TST	(SP)+
	MOV	(SP)+,R5		;GET LAST DELIM FOUND
	MOV	(SP)+,R2		;GET ITS ADDR
SWER:	CMPB	R5,#EQUAL		;IS IT END OF CURRENT SECTION
	BEQ	SWERX
	CMPB	R5,#COMMA
	BEQ	SWERX			;BRANCH IF SO
	INC	R2			;ELSE STEP OVER IT
	JSR	PC,DELSCN		;GET NEXT DELIM
	BR	SWER			;LOOP UNTIL END OF CURRENT SECTION
SWERX:	MOV	#1,R4			;SET ERROR
	RTS	PC			;EXIT
;
;
SWVAL:	MOV	R4,R3
	BEQ	SWER			;ERROR IF NO VALUE TABLE
	TST	(R3)
	BEQ	SWER			;ERROR IF NO MORE ENTRIES
	INC	R2			;STEP OVER LAST DELIM
	JSR	PC,DELSCN		;SCAN TO NEXT
	MOV	R4,-(SP)		;SAVE PTR TO DELIM
	MOV	R5,-(SP)		;AND DELIM CHAR
	MOV	2(R3),R5	;++001 GET RESULT ADDR
	CMPB	(R3)+,#ASVAL	;++001 SHOULD SW-VALUE BE ASCII?
	BNE	SVNUM			;BRANCH IF NUMBERIC CVT REQUIRED
	SUB	R2,R4			;GET VALUE LEN
	CMPB	(R3),R4		;++001 CMPR WITH ALLOWED LENGTH
	BHIS	SWVL1			;BRANCH IF SAME OR SMALLER THAN ALLOWED
	MOVB	(R3),R4		;++001 SET LENGTH ALLOWED
SWVL1:	MOV	R4,-(SP)		;SAVE LEN
	BEQ	SWVL3			;BRANCH IF NONE TO MOVE
SWVL2:	MOVB	(R2)+,(R5)+		;MOVE CHARS
	DEC	R4			;UNTIL COUNT EXHAUSTED
	BNE	SWVL2
SWVL3:	MOVB	(R3),R4		;++001 GET ALLOWED LENGTH
	SUB	(SP)+,R4		;CALC SPACE LEFT TO PAD
	BEQ	SWVL5			;BRANCH IF NONE
SWVL4:	CLRB	(R5)+			;PAD WITH NULLS
	DEC 	R4
	BNE	SWVL4
SWVL5:	ADD	#3,R3		;++001 ADDR OF NEXT VAL TABLE ENTRY
	MOV	(SP)+,R5		;GET LAST DELIM CHAR
	MOV	(SP)+,R2		;GET ADDR OF DELIM CHAR
	MOV	R3,R4
	BR	SW6			;GO DECIDE WHAT TO DO
;
SVNUM:	MOV	R3,-(SP)
	MOV	#.ODCVT,-(SP)	;++003 ASSUME NUMERIC CONVERT (OCTAL DFLT)
	CMPB	#DECVAL,-(R3)	;++003 IS DECIMAL DEFAULT DESIRED?
	BNE	10$		;++003 BRANCH IF NOT
	MOV	#.DCCVT,(SP)	;++003 ELSE, SPECIFY DECIMAL DEFAULT
10$:				;++003
	MOV	R5,R3		;++001 SET RESULT ADDR
	CLR	(R3)
	SUB	R2,R4			;LENGTH OF DIGIT STRING
	BEQ	SVNMX			;SKIP NULL STRING
	MOV	R2,R5			;SET STRING ADDR
	JSR	PC,@(SP)+	;++003 CALL NUMERIC CONVERT
	BCS	SWER1			;BRANCH IF ERROR
	BR	SVNMX2		;++003 BRANCH TO LEAVE
SVNMX:	TST	(SP)+		;++003 PURGE CONVERT ADDR FROM STACK
SVNMX2:	MOV	(SP)+,R3	;++003 RESTORE R3
	BR	SWVL5
;
;
;	SCAN COMMAND STRING FOR : / = , ] OR END OF STRING
;	RETURN ADDR IN R4, DELIMETER IN R5(END OF STRING BECOMES=)
;
;	NOTE: CHARS INSIDE [] IGNORED.
;
DELSCN:	MOV	C.BFAD(R0),-(SP)	;ADDRESS END OF STRING
	ADD	C.BFLN(R0),(SP)
	MOV	R2,R4			;ADDR FOR SCAN START
DEL:	MOV	#DELTAB,R5		;ADDR DELIMITER TABLE
	CMP	R4,(SP)		;++001 CMPR WITH END OF STRING
	BEQ	DEL3			;BRANCH IF AT END OF STRING
	CMPB	(R4),(R5)+	;++001 IGNORE CHARS INSIDE []
	BNE	DEL2
DEL1:	INC	R4		;++001 INCR TO NEXT CHAR
	CMPB	(R4),(R5)	;++001 IS IT R-BRACKET?
	BNE	DEL1		;++001 NO, TRY NEXT CHAR
	BR	DELX
DEL2:	CMPB	(R4),(R5)	;++001 CMPR CHAR WITH DELIMITER
	BEQ	DELX		;++001 BRANCH IF DELIMITER FOUND
	TSTB	(R5)+		;++001 LAST DELIMITER IS NULL
	BNE	DEL2			;BRANCH IF NOT AT END OF TABLE
	INC	R4			;ADVANCE STRING PTR
	BR	DEL			;GO CHECK NEXT CHAR
DEL3:	CMPB	(R5)+,(R5)+	;++001 POINT R5 TO EQUAL SIGN
DELX:	MOVB	(R5),R5		;++001 SET THE DELIMITER FOUND
	TST	(SP)+		;++001 CLEAN STACK
	RTS	PC			;EXIT

	.PSECT	PURE$D
DELTAB:	.BYTE	LBRAC,RBRAC,EQUAL,COLON,SLASH,COMMA,NULL ;++001
	.EVEN

	.PSECT	PURE$I

;
;	CHECK IF WILD CARD VALUE IN FILE NAME JUST FOUND
;
WILDCK:	CMPB	#STAR,(R2)+
	BEQ	WILDEX			;BRANCH IF WILD CARD FOUND
	CMP	R2,R4
	BNE	WILDCK			;BRANCH IF NOT AT END OF NAME
	RTS	PC			;EXIT
WILDEX:	BISB	#CS.WLD,C.STAT(R0)	;SET WILD CARD STATUS
	RTS	PC			;EXIT
;
;++004 THE FOLLOWING ROUTINE WAS BROKEN OUT AND REWRITTEN
;	TO ALLOW THE IMPLEMENTATION OF LONG SWITCH NAMES
;
;+
; MATCH THE STRING
;
; INPUTS:
;	R2=ADDRESS OF STRING
;	R3=SIZE OF STRING
;
; OUTPUTS:
;	C=0 IF FOUND, C=1 IF NOT.  IF C=0, THEN
;	R4=ADDRESS OF 3 WORDS OF SWITCH DATA
;	R0,R1 PRESERVED, R2,R3,R5 ALTERED
;-

SWMAT:	MOV	R2,-(SP)	;SAVE ADDRESS
	MOV	R3,-(SP)	;AND SIZE OF SWITCH STRING
	MOV	C.SWAD(R0),R4	;GET SWITCH TABLE ADDRESS
	BEQ	60$		;NO MATCH IF NO SWITCH TABLE
	BR	50$		;START AT BOTTOM OF LOOP
;
; START HERE FOR 2ND AND SUBSEQUENT WORDS OF ASCII SWITCH IN THE
; SWITCH TABLE.  SIGN BIT IN WORD INDICATES ANOTHER WORD IS PRESENT
;
10$:	MOV	(R4)+,R5	;IF NEGATIVE, THEN MORE TO CHECK
	BMI	20$
	TSTB	R5		;IS AN EXACT MATCH REQUIRED?
	BPL	80$		;BRANCH IF NO, THIS IS A MATCH
	TST	R3		;MUST BE NO CHARS LEFT TO MATCH
	BLE	80$		;BRANCH IF EXACT MATCH
	BR	45$		;GO LOOK AT NEXT SWITCH TABLE ENTRY
;
; HERE FOR THE FIRST WORD OF EACH SWITCH TABLE ENTRY
;
20$:	MOV	(R4),R5		;FIRST/NEXT WORD OF ASCII
	BEQ	60$		;WORD OF 0 MEANS END OF TABLE
	BIC	#100200,R5	;SHUT OFF "MORE CHARS COMING" BITS
	DEC	R3
	BMI	40$		;BRANCH IF SWITCH TOO SHORT
	CLR	-(SP)
	MOVB	(R2)+,(SP)	;FORM WORD WITH NEXT 2 CHARACTERS
	DEC	R3		;IF NO MORE CHARACTERS
	BMI	30$		;LEAVE A NULL IN THE HIGH BYTE
	BIT	#177400+200,(R4) ;IF HIGH BYTE IS NULL
				;AND IF EXACT MATCH BIT IS 0
	BEQ	30$		;THEN LEAVE A NULL
	MOVB	(R2)+,1(SP)	;OTHERWISE GET A 2ND CHARACTER
30$:	CMP	(SP)+,R5	;COMPARE THE WORD
	BEQ	10$		;IF EQUAL, SEE IF MORE TO BE MATCHED
;
; SKIP OVER THE REST OF THIS SWITCH TABLE ENTRY
;
40$:	TST	(R4)+		;LAST ASCII WORD WILL BE POSITIVE
	BMI	40$		;SKIP OVER THE NEGATIVE ONES
45$:	ADD	#6,R4		;SKIP THE FIXED LENGTH PART
50$:	MOV	(SP),R3		;RESTORE THE STRING SIZE
	MOV	2(SP),R2	;AND ADDRESS OF THE SWITCH
	BR	20$		;AND TRY THE NEXT SWITCH TABLE ENTRY
60$:	SEC			;SWITCH NOT FOUND
;
; COMMON EXIT, C=0 IF SUCCESSFUL, C=1 IF ERROR
;
80$:	BIT	(SP)+,(SP)+	;CLEAN 2 WORDS OFF STACK
	RETURN
;
;++004 END OF CHANGES FOR LONG SWITCH NAMES
;
;
	.END
