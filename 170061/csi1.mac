	.TITLE	.CSI1
	.IDENT	/06.01/

;
; COPYRIGHT (C) 1973, 1976, 1978, 1983
; DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE FOR USE ONLY ON A
; SINGLE COMPUTER SYSTEM AND MAY  BE  COPIED   ONLY  WITH  THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE,  OR
; ANY OTHER COPIES THEREOF, MAY NOT BE PROVIDED  OR  OTHERWISE
; MADE AVAILABLE TO ANY OTHER PERSON   EXCEPT FOR  USE ON SUCH
; SYSTEM AND TO ONE WHO AGREES TO THESE LICENSE  TERMS.  TITLE
; TO AND OWNERSHIP OF THE SOFTWARE SHALL AT ALL  TIMES  REMAIN
; IN DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES NO RESPONSIBILITY FOR THE USE OR RELIABILITY OF
; ITS SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DEC.
;
;
; VERSION 06
;
; WRITTEN BY:
; 	A. MAROTTO  (CCA)
;
; MODIFIED BY:
;	C.A. D'ELIA	19-OCT-73	001
;	C.A. D'ELIA	15-JAN-74	002
; 	C.A. D'ELIA	11-FEB-74	003
;	C.A. D'ELIA	23-MAY-74	004
;	C.A. D'ELIA	07-JUN-74	005
;	C.A. D'ELIA	01-AUG-74	006
;	C.A. D'ELIA	04-OCT-74	007
;	C.A. D'ELIA	22-JAN-76	008
;
; B. SCHREIBER	7-JUN-78
;
;	BLS053 -- READ VERSIONS WITH OCTAL DEFAULT!
;
;		26-AUG-83
;	FEK	- CHANGE FOR I/D SPACE (ADD PSECTS)
;
;		02-Nov-84
;	KPH	- Add support for $ logicals
;
;	COMMAND STRING INTERPRETER-SYNTAX ANALYZER
;
;

;++003
;
; DEFINITION OF MACRO TO GENERATE STATE TABLE ENTRIES
;
;--003

	.MACRO	GENDSP	LIST
	.IRP	X,<LIST>
	.BYTE	X'DSP
	.ENDM
	.ENDM	GENDSP


;
;
;
;
;
	.PSECT	PURE$I	RO,I,LCL,REL,CON

.CSI1::				;++004
	JSR	R5,.SAVR1	;++004 SAVE REGISTERS
;
;	CLEAR CSI CMMD BLOCK
;
	MOV	R0,R3		;COMMAND BLOCK ADDR
	MOV	C.BFAD(R0),R1	;GET BUFF ADDR
	MOV	C.BFLN(R0),R2	;AND BUFF LENGTH
	MOV	#<C.SIZE/2>,R4	;++003 SET SIZE OF CSI BLOCK (WDS)
CSICLR:	CLR	(R3)+		;CLEAR BLOCK
	DEC	R4
	BNE	CSICLR
	MOV	R1,C.BFAD(R0)	;RESTORE BUFF ADDR
	MOV	R1,C.OSTR(R0)	;SET OUTPUT SIDE STRING PTR
;
;	COMPRESS COMMAND STRING(ELIMINATE NULLS, STABS, RUBOUTS AND BLANKS)
;	ALSO ESTABLISH THAT THERE IS AT MOST 1 EQUALS AND SAVE ITS LOCN+1
;
	MOV	R1,R3		;SET PTRS FOR COMPRESS
	MOV	R0,R4		;++003 SET R4 TO THE ...
	ADD	#C.ISTR,R4	;++003 ... INPUT STRING POINTER
	TST	R2
	BNE	COMPRS		;BRANCH IF NOT NULL LINE
	MOV	R1,(R4)		;++003 ELSE, SET INPUT STRING POINTER
	RTS	PC		;++003 RETURN -- CC-C ALREADY CLEAR
COMPRS:	TSTB	(R3)		;++003 BRANCH IF NULL, RUBOUT ...
	BEQ	ELIM		;TAB OR BLANK
	CMPB	#TAB,(R3)
	BEQ	ELIM
	CMPB	#RUBOUT,(R3)
	BEQ	ELIM
	CMPB	#BLANK,(R3)
	BEQ	ELIM
	.IF	NDF,RSTS	;++ RSTS V7.1
	MOVB	(R3),(R1)+	;ELSE MOVE CHAR TO COMPRESSED STRING
	.IFF			;++ RSTS V7.1
	MOVB	(R3),(R1)	;++ RSTS V7.1 MOVE CHAR TO COMPRESSED STRING
	CMPB	#'(,(R1)	;++ RSTS V7.1 REPLACE LEFT PAREN
	BNE	10$		;++ RSTS V7.1
	MOVB	#LBRAC,(R1)	;++ RSTS V7.1 WITH LEFT SQUARE BRACKET
10$:	CMPB	#'),(R1)	;++ RSTS V7.1 REPLACE RIGHT PAREN
	BNE	20$		;++ RSTS V7.1
	MOVB	#RBRAC,(R1)	;++ RSTS V7.1 WITH RIGHT SQUARE BRACKET
20$:	INC	R1		;++ RSTS V7.1 UPDATE CHAR POINTER
	.ENDC			;++ RSTS V7.1
	CMPB	#EQUAL,(R3)	;BRANCH IF NOT EQUALS
	BNE	ELIM
	TST	(R4)		;++003 ERROR IF ALREADY FOUND EQUAL SIGN
	BEQ	SETINP		;ELSE BRANCH
	MOV	R3,C.FNAD(R0)	;SET LOCN OF BAD SYNTAX
	MOV	R2,C.FNLN(R0)	;SET LENGTH
	SEC			;SET ERROR
	RTS	PC		;EXIT
SETINP:	MOV	R1,(R4)		;++003 SET INPUT STRING POINTER
	BISB	#CS.EQU,C.STAT(R0)  ;++005 INDICATE EQUAL SIGN SEEN
ELIM:	INC	R3		;NEXT UNCOMPRESSED CHARS ADDR
	DEC	R2		;BRANCH IF MORE TO CHECK
	BNE	COMPRS
;
	TST	(R4)		;++003 BRANCH IF EQUAL SIGN ALREADY FOUND
	BNE	INPSET
	MOV	R1,(R4)		;++003 ELSE, SET INPUT STRING POINTER
INPSET:	MOV	C.BFAD(R0),R2	;++003 GET STRING ADDRESS
	SUB	R2,R1		;++003 SET COMPRESSED STRING LENGTH
	MOV	R1,C.BFLN(R0)
;
;	COMMAND BLOCK IS SET UP AND STRING IS COMPRESSED
;	PREPARE FOR SYNTAX SCAN OF COMPRESSED STRING
;
	MOV	R0,-(SP)	;SAVE CMMD BLOCK ADDR
	CLR	R0		;SET SCAN STATE
	ADD	R2,R1		;END OF STRING ADDR
	MOV	R2,R4
SCAN:	CMP	R4,R1		;BRANCH IF DONE
	BEQ	DONE
	JSR	PC,GETDEL	;SCAN TO A DELIMITER
;
;	GO TO PROPER ROUTINE VIA STATE TABLE
;
	MOV	R5,R3
	ADD	#STAT0,R3	;BASE OF TABLES
NXTAB:	DEC	R0		;BRANCH IF IN PROPER TABLE
	BMI	JUMP
	ADD	#7.,R3		;++003 ADVANCE TO NEXT TABLE
	BR	NXTAB
;
JUMP:	MOVB	(R3),R3		;++003 LOAD OFFSET INTO DISP TBL
	JMP	@DSPTBL(R3)	;++003 JUMP TO PROPER ROUTINE
;
;
;
DONE:	MOV	(SP)+,R0	;RESTORE CSI BLK ADDR
	CLC
	RTS	PC
;++003
;
; GENERATE THE OFFSET SYMBOLS TO USE THE DISPATCH TABLE
;
;--003

XTMPX=0
	.IRP	X,<FN,DV,PP,ER,VR,SW>
X'DSP=XTMPX
XTMPX=XTMPX+2
	.ENDM



;++003
;
; TABLE OF ROUTINE ADDRESSES
;
;--003

	.PSECT	PURE$D	RO,D,LCL,REL,CON

DSPTBL:				;++003
	.WORD	FNSCAN		;++003 SCAN FILE NAME
	.WORD	DVSCAN		;++003 SCAN DEVICE NAME (AND NUMBER)
	.WORD	PPSCAN		;++003 SCAN UIC SPECIFICATION
	.WORD	ERROR		;++003 DECLARE SYNTAX ERROR
	.WORD	VRSCAN		;++003 SCAN VERSION NUMBER
	.WORD	SWSCAN		;++003 SCAN SWITCHES


;
;	STATE TABLES FOR SYNTAX SCAN
;
	.BYTE	FNDSP		;++003

STAT0:	GENDSP	<FN,DV,PP,FN,FN,ER,FN> ;++003

STAT1:	GENDSP	<FN,ER,PP,FN,FN,ER,FN> ;++003

STAT2:	GENDSP	<FN,ER,ER,FN,FN,ER,VR> ;++003

STAT3:	GENDSP	<VR,ER,ER,ER,VR,ER,SW> ;++003

STAT4:	GENDSP	<SW,SW,ER,ER,SW,ER> ;++003

	.EVEN			;++003
;
;
;
;	SCAN TO A DELIMITER
;
;	DELIMITERS ARE-
;	COLON, COMMA, SLASH, EQUALS(OR END OF STRING), SEMICOLON, RIGHT BRACKET,
;	LEFT BRACKET
;	CALL SEQUENCE-
;
;	R1=END OF STRING ADDR
;	R2=CURRENT STRING PTR
;	JSR PC,GETDEL
;
;	RETURNS-
;
;	R4=ADDR OF DELIMITER FOUND
;	R5=VALUE OF DELIMITER
;
;	VALUE OF DELIMITERS-
;	1, 0, 4, -1, 3, 5, 2 RESPECTIVELY(SEE DELIMITERS ABOVE)
;
DELTAB:
	.BYTE	EQUAL,-1	;++003
	.BYTE	RBRAC,5		;++003
	.BYTE	SLASH,4		;++003
	.BYTE	SEMIC,3		;++003
	.BYTE	LBRAC,2		;++003
	.BYTE	COLON,1		;++003
	.BYTE	COMMA,0		;++003
;
	.PSECT	PURE$I

GETDEL:	MOV	R2,R4		;ADDR DELIM
GD:	MOV	#DELTAB,R5	;ADDR DELIMITER TABLE
	CMP	R4,R1		;BRANCH IF NOT AT END OF STRING
	BNE	GD1
	INC	R5		;++003 SET END-OF-STR VALUE POINTER
	BR	GDX		;++003 BRANCH TO GET THE VALUE
;
GD1:	CMPB	(R4),(R5)+	;IS THIS CHAR THIS DELIM
	BNE	GD2		;BRANCH IF NOT
GDX:	MOVB	(R5),R5		;++003 GET DELIMITER VALUE
	RTS	PC		;EXIT
;
GD2:	TSTB	(R5)+		;++003 BRANCH IF NOT AT END OF
	BNE	GD1		;DELIMITER TABLE
;
	INC	R4		;ADVANCE TO NEXT CHAR
	BR	GD		;GO CHECK
;
;
;
;
;	GIVEN CHAR(ADDR IN R0) DETERMINE ITS CLASS(RETURN IN R3)
;
;	CLASSES ARE:
;	NUMER, ALPHA, DOLSGN, PERIOD, ASTER,  OTHER
;
CHRTYP:	MOV	#OTHER,R3
	CMP	R0,R4
	BHIS	TYPEX
	CMPB	(R0),#CHARZ+40	;++008 IS CHARACTER .GT. LOWER CASE Z ?
	BHI	TYPEX		;++008 IF HI YES
	CMPB	(R0),#CHARA+40	;++008 IS CHARACTER .LT. LOWER CASE A ?
	BLO	10$		;++008 IF LO YES
	BICB	#40,(R0)	;++008 ELSE, CONVERT CHAR TO UPPER CASE
10$:				;++008
	CMPB	(R0),#CHARZ
	BHI	TYPEX
	CMPB	(R0),#CHARA
	BLO	CT1
	MOV	#ALPHA,R3
	BR	TYPEX
CT1:	CMPB	(R0),#CHAR9
	BHI	TYPEX
	CMPB	(R0),#CHAR0
	BLO	CT2
	MOV	#NUMER,R3
	BR	TYPEX
CT2:	CMPB	(R0),#STAR
	BNE	CT3
	MOV	#ASTER,R3
	BR	TYPEX
CT3:	CMPB	(R0),#DOT
	BNE	CT4
	MOV	#PERIOD,R3
	BR	TYPEX
CT4:	CMPB	(R0),#DOLLAR
	BNE	TYPEX
	MOV	#DOLSGN,R3
TYPEX:	INC	R0
	RTS	PC
;
NUMER=0
ALPHA=1
DOLSGN=2
PERIOD=3
ASTER=4
OTHER=5
;
;
;
;
;	SYNTAX ERROR COMES HERE
;
ERROR:	MOV	(SP)+,R0	;GET CMMD BLOCK
	MOV	R2,C.FNAD(R0)	;SET ERROR STRING ADDR
	CMP	R4,R1		;IF AT END OF STRING,
	BHIS	ERR1		;DONT RETURN DELIM
	INC	R4
ERR1:	SUB	R2,R4		;SET ERROR STRING LENGTH
	MOV	R4,C.FNLN(R0)
	SEC			;SET ERROR
	RTS	PC		;EXIT
;
;
;
;	VALIDATE DEVICE NAME SYNTAX
;
DVSCAN:	MOV	R2,R0		;SET START CHAR
	.IF	NDF,RSTS	;++ RSTS V7.1
	JSR	PC,CHRTYP	;GET CHAR TYPE

	CMP	#ALPHA,R3	;IF FIRST 2 CHARS NOT ALPHA
	BNE	ERROR		;OR LESS THAN 2 CHARS - ERROR
	JSR	PC,CHRTYP
	CMP	#ALPHA,R3
	BNE	ERROR
	.IFF			;++ RSTS V7.1
	CMPB	#'_,(R0)	;++ RSTS V7.1 DEVICE PREFIXED BY "_"?
	BNE	DVS		;++ RSTS V7.1 NO
	INC	R0		;++ RSTS V7.1 YES SO SKIP PAST "_"
	.ENDC			;++ RSTS V7.1
DVS:	CMP	R0,R4		;EXIT IF AT END OF STRING
	BEQ	DVSX
	JSR	PC,CHRTYP
	.IF	DF,RSTS		;++ RSTS V7.1
	CMP	#ALPHA,R3	;++ RSTS V7.1 ANY NUMBER OF ALPHAS ALLOWED
	BEQ	DVS		;++ RSTS V7.1 GO FOR ANOTHER ALPHA
	CMP	#DOLSGN,R3	;++ RSTS V9.0 Dollar sign?
	BEQ	DVS		;++ RSTS V9.0 Yes, try again
	.ENDC			;++ RSTS V7.1
	CMP	#NUMER,R3	;IF ALL SUBSEQUENT CHARS ARE
	BEQ	DVS		;NOT NUMERIC
	BR	ERROR		;ERROR
DVSX:	MOV	R5,R0		;++003 SET NEXT STATE
DVSX1:				;++003
	MOV	R4,R2		;SET NEW SCAN PTR
	INC	R2
DVSX2:				;++003
	JMP	SCAN		;GO SCAN NEXT SECTION
;
;
;	VALIDATE PROJECT/PROGRAMMER NUMBER SYNTAX
;
PPSCAN:	CMP	R2,R4		;IF CHARS PRECEED [
	BNE	ERROR		;ERROR
	INC	R2		;STEP OVER DELIM
	JSR	PC,GETDEL	;GET NEXT DELIM
	TST	R5
	BNE	ERROR		;ERROR IF NOT COMMA
PP1:	MOV	R2,R5		;SET UP FOR CALL TO CONVERT RTN
	MOV	R4,-(SP)	;++003 SAVE POINTER
	SUB	R2,R4
	CLR	-(SP)
	MOV	SP,R3
	.IF	NDF,RSTS	;++ RSTS V7.1
	JSR	PC,.ODCVT	;CONVERT NUM
	.IFF			;++ RSTS V7.1
	JSR	PC,.DCCVT	;++ RSTS V7.1 CONVERT NUM (DECIMAL)
	.ENDC			;++ RSTS V7.1
	MOV	(SP)+,R3
	BMI	PVER2		;++003 ERROR IF NEGATIVE NUMBER
	BCC	PPOK		;++003 ELSE, BRANCH IF NO BAD CHARS
	JSR	PC,PVER		;++003 ELSE, CHECK FOR WILD FIELD SPEC
PPOK:	.IF	NDF,RSTS	;++ RSTS V9.0
	CMP	R3,#377		;++006 COMPARE RESULT W/ MAX UIC
	.IFF
	CMP	R3,#376
	.ENDC			;++ RSTS V9.0
	BGT	PVER2		;++006 ERROR IF IT'S GREATER
	MOV	(SP)+,R2	;++003 ELSE, SET NEXT SCAN POINTER
	MOV	R2,R4
	CMPB	(R2)+,#RBRAC	;DID LAST SECTION END WITH ]
	BEQ	PPX		;DONE IF SO
	JSR	PC,GETDEL	;GET DELIM
	CMP	R5,#5		;ERROR IF NOT ]
	BEQ	PP1		;ELSE GO CVT NUM
	BR	ERROR
PPX:	MOV	#2,R0		;++003 SET NEXT STATE
	BR	DVSX2		;++003 BRANCH TO SCAN NEXT FIELD
;++003
;
;  BAD CHAR FOUND IN PPN OR VERSION -- CHECK FOR WILD (*)
;
;--003
PVER:	DEC	R4		;++003 NO ERROR IF FIELD IS ...
	BNE	PVER1		;++003 ... ONE CHAR LONG ...
	CMPB	#STAR,(R2)	;AND IS *
	BEQ	PVOK		;++003
PVER1:	TST	(SP)+		;++003 ERROR -- PURGE RETURN ADDRESS
PVER2:	MOV	(SP)+,R4	;++003 SET POINTER
	BR	ERROR
PVOK:	RTS	PC		;++003 NO ERROR -- RETURN
;
;
;	VALIDATE VERSION NUMBER SYNTAX
;
VRSCAN:	MOV	R5,R0		;SET NEXT STATE
	MOV	R4,-(SP)	;SAVE NEXT PTR
	MOV	R2,R5		;SET ADDR
	CLR	-(SP)
	SUB	R2,R4		;++001 CALC LENGTH OF STRING
	BEQ	1$		;++001 BRANCH IF NULL
	MOV	SP,R3		;SET RESULT ADDR
	.IF	NDF,RSTS	;++ RSTS V7.1
	JSR	PC,.VRCVT	;CONVERT NUMBER
	.IFF			;++ RSTS V7.1
	JSR	PC,.DCCVT	;++ RSTS V7.1 CONVERT NUMBER (DECIMAL)
	.ENDC			;++ RSTS V7.1
1$:				;++001
	MOV	(SP)+,R3
	BCC	VRCK		;++003 NO ERRORS DETECTED
	JSR	PC,PVER		;++003 CHECK FOR WILD FIELD SPEC
VRCK:	MOV	(SP)+,R4	;++007 SET NEXT FIELD POINTER
	BR	DVSX1		;++003 BRANCH TO SCAN NEXT SECTION
;
;
;
;	VALIDATE SWITCH SYNTAX
;
SWSCAN:	MOV	R2,R0
	CMPB	(R0),#MINUS	;STEP OVER LEADING MINUS
	BNE	SW1
	INC	R0
SW1:	CMP	R0,R4		;BRANCH IF AT END OF NAME
	BEQ	SW2
	JSR	PC,CHRTYP	;GET NEXT CHARS TYPE
	CMP	R3,#PERIOD	;IF NOT RAD50 CHAR
	BLOS	SW1
SWER:	BR	ERROR		;++003 ELSE, REPORT ERROR DETECTED
SW2:	CMP	#1,R5		;++003 IS COLON THE DELIMITER?
	BNE	DVSX		;++003 NO, BRANCH TO SCAN NEXT
	MOV	R4,R2		;++003 SET POINTER
	INC	R2		;++003
	JSR	PC,GETDEL	;++003 SKIP THE SWITCH VALUE
	MOV	R5,R3		;++004 COPY DELIMITER VALUE INTO R3
	SUB	#2,R3		;++004 IF DELIMITER IS '[' THEN ...
	BEQ	ERROR		;++004 ... DECLARE SYNTAX ERROR
	DEC	R3		;++004 IF DELIMITER IS ';' THEN ...
	BEQ	ERROR		;++004 ... DECLARE SYNTAX ERROR
	DEC	R3		;++004 IF DELIMITER IS ']' THEN ...
	BGT	ERROR		;++004 ... DECLARE SYNTAX ERROR
	BR	SW2		;++003 TRY TO LEAVE AGAIN
;
;	VALIDATE FILE NAME SYNTAX
;	NOTE: 0 CHARS AND WILD CARD SWITCHES ALLOWED
;
FNSCAN:	CMP	R2,R4		;++003 IF FILE NAME STRING IS NULL, ...
	BEQ	DVSX		;++003 ... BRANCH TO SCAN NEXT SECTION
	CLR	-(SP)		;++003 RESERVE LENGTH WORD ON STACK
	MOV	R2,R0		;++003 SET POINTER
	.IF	DF,RSTS		;++ RSTS V7.1
	JSR	PC,RSTSPP	;++ RSTS V7.1 CHECK FOR 'SPECIAL' PPN'S
	.ENDC			;++ RSTS V7.1
FN1:	JSR	PC,CHRTYP	;GET CHAR TYPE
	INC	(SP)		;++003 INCREMENT FILE NAME LENGTH
	SUB	#PERIOD,R3
	BMI	FN1		;GET NEXT IF RAD50 CHAR
	BEQ	FNP		;BRANCH IF PERIOD
	DEC	R3
	BEQ	FNS		;BRANCH IF STAR
	CMP	#10.,(SP)+	;++003 IF MORE THAN 10 CHARS ...
	BLT	SWER		;++003 ... FILE NAME IS IN ERROR
	DEC	R0		;++003 IF CHAR IS NOT THE DELIMITER ...
	CMP	R0,R4		;++003 ... THEN THE FILE NAME ...
	BNE	SWER		;++003 ... IS IN ERROR
FDONE:	BR	DVSX		;++003 ELSE, FILE SCAN IS DONE
;++003   STAR WAS DETECTED
FNS:	DEC	(SP)+		;++003 IF MORE THAN ONE CHAR ...
	BNE	SWER		;++003 ... THEN * IS IN ERROR
	CMPB	#DOT,(R0)+	;++003 IF NEXT CHAR IS NOT A DOT ...
	BNE	SWER		;++003 ... THEN * IS IN ERROR
	BR	FNP1		;++003 ELSE, LOOK AT FILE TYPE
;++003   DOT WAS DETECTED
FNP:	CMP	#10.,(SP)+	;++003 IF MORE THAN 10 CHARS ...
	BLT	SWER		;++003 ... FILE NAME IS IN ERROR
FNP1:	MOV	R4,R3		;++003 SET POINTER
	SUB	R0,R3		;IF NO FILE TYPE
	BEQ	FDONE		;++006 ... THEN JUST RETURN
	CMP	#3,R3		;OR IF LONGER THAN 3 CHARS
	BLO	SWER		;++003 ... FILE TYPE IS IN ERROR
	DEC	R3		;IF 1 CHAR
	BNE	FN2
	CMPB	#STAR,(R0)	;CHECK IF STAR
	BEQ	FDONE		;++004 IF SO, DONE
FN2:	JSR	PC,CHRTYP	;GET CHAR TYPE
	SUB	#PERIOD,R3	;IF RAD50 CHAR BRANCH
	BMI	FN2
	CMP	R0,R4		;ELSE IF DELIM,
	BHI	FDONE		;++003 DONE
	BR	SWER		;++003 ELSE, ERROR

	.IF	DF,RSTS		;++ RSTS V7.1
RSTSPP:	MOV	#PPNTAB,R0	;++ RSTS V7.1 POINT TO PPN TABLE
10$:	CMPB	(R0)+,(R2)	;++ RSTS V7.1 IS CHAR A SPECIAL PPN?
	BNE	20$		;++ RSTS V7.1 NOT THIS ONE ANYWAY
	INC	R2		;++ RSTS V7.1 SKIP OVER THE PPN
	BR	30$		;++ RSTS V7.1 RESTORE R0 AND EXIT
20$:	TSTB	(R0)		;++ RSTS V7.1 CHECK FOR END OF TABLE
	BNE	10$		;++ RSTS V7.1 LOOP BACK FOR MORE
30$:	MOV	R2,R0		;++ RSTS V7.1 RESTORE R0
	RETURN			;++ RSTS V7.1 AND BACK WE GO

	.PSECT	PURE$D

PPNTAB:				;++ RSTS V7.1 TABLE OF PPN'S
	.BYTE	'$		;++ RSTS V7.1 [1,2]
	.BYTE	'!		;++ RSTS V7.1 [1,3]
	.BYTE	'%		;++ RSTS V7.1 [1,4]
	.BYTE	'&		;++ RSTS V7.1 [1,5]
	.BYTE	'#		;++ RSTS V7.1 [PROJ,0]
	.BYTE	'@		;++ RSTS V7.1 ASSIGNABLE PPN
	.BYTE	0		;++ RSTS V7.1 END OF TABLE
	.EVEN			;++ RSTS V7.
	.ENDC			;++ RSTS V7.

;
;
;
	.END
