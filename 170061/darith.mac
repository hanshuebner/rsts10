	.TITLE	DARITH - DOUBLE PRECISION MUL, DIV
	.IDENT	/0007/
;  
; 		COPYRIGHT (c) 1981 BY
; 	DIGITAL EQUIPMENT CORPORATION, MAYNARD
; 	 MASSACHUSETTS.  ALL RIGHTS RESERVED.
;  
; THIS  SOFTWARE  IS FURNISHED UNDER A LICENSE AND MAY
; BE USED AND  COPIED  ONLY  IN  ACCORDANCE  WITH  THE
; TERMS  OF SUCH LICENSE AND WITH THE INCLUSION OF THE
; ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR ANY  OTHER
; COPIES  THEREOF  MAY  NOT  BE  PROVIDED OR OTHERWISE
; MADE AVAILABLE TO ANY OTHER  PERSON.   NO  TITLE  TO
; AND OWNERSHIP OF THE SOFTWARE IS HEREBY TRANSFERRED.
;  
; THE  INFORMATION  IN  THIS  SOFTWARE  IS  SUBJECT TO
; CHANGE WITHOUT NOTICE AND SHOULD  NOT  BE  CONSTRUED
; AS  A  COMMITMENT  BY DIGITAL EQUIPMENT CORPORATION.
;  
; DIGITAL ASSUMES NO RESPONSIBILITY  FOR  THE  USE  OR
; RELIABILITY  OF  ITS  SOFTWARE  ON EQUIPMENT THAT IS
; NOT SUPPLIED BY DIGITAL.
;  
;	VERSION 0007
;
; PETER H. LIPMAN	27-FEB-74
;
; MODIFIED BY:
;
;	J. MATTHEWS	15-MAR-78
;
;		JM005	CHANGED PSECT NAME FROM $$RESL TO $$RESM FOR IAS
;
;	S. RUZICH	12-MAY-79
;
;		SR021 -	REMOVED JM005 SO THAT FCSRES IS ALL IN PSECT $$RESL
;
;	S. RUZICH	4-MAR-81
;
;		SR110 - GIVE .PSECT $$RESL READ-ONLY ATTRIBUTE
;
;
; DOUBLE PRECISION MULTIPLY AND DIVIDE
;


	.MCALL	RETURN

	.PSECT	$$RESL,RO


;+
; **-$DMUL-DOUBLE PRECISION MULTIPLY
;
; INPUTS:
;
;	R0=SINGLE PRECISION MAGNITUDE MULTIPLIER
;	R2,R3=DOUBLE PRECISION MAGNITUDE MULTIPLICAND
;
; OUTPUTS:
;
;	C=0
;	R0,R1=DOUBLE PRECISION MAGNITUDE RESULT
;	R2,R3 ALTERED
;	R4,R5 PRESERVED
;-
$DMUL::
	MOV	R0,-(SP)	;SINGLE PRECISION MULTIPLIER
	CLR	R0		;INIT THE RESULT
	CLR	R1		;
10$:	TST	(SP)		;IF REMAINING MULTIPLIER IS ZERO
	BEQ	30$		;THEN ALL THROUGH
	ROR	(SP)		;IF NEXT BIT IS A ONE
	BCC	20$		;
	ADD	R3,R1		;THEN ADD MULTIPLICAND TO RESULT
	ADC	R0
	ADD	R2,R0
20$:	ASL	R3		;IN EITHER CASE, DOUBLE THE MULTIPLICAND
	ROL	R2
	BR	10$		;AND SEE IF ANY MORE MULTIPLIER
30$:	TST	(SP)+		;CLEAN UP THE STACK, RETURN C=0
	RETURN			;AND RETURN


;+
;
; **-$DDIV-DOUBLE PRECISION DIVIDE ROUTINE
;
; INPUTS:
;
;	R2=LOW ORDER OF DIVIDEND
;	R1=HIGH ORDER OF DIVIDEND
;	R0=DIVISOR, (15 BITS UNSIGNED)
;
; OUTPUTS:
;
;	R2=LOW ORDER OF QUOTIENT
;	R1=HIGH ORDER OF QUOTIENT
;	R0=REMAINDER
;
;-

$DDIV::	MOV	R3,-(SP)	;SAVE R3
	MOV	#32.,R3		;SET ITERATION COUNT IN R3
	MOV	R0,-(SP)	;PUT DIVISOR IN STACK
	CLR	R0		;SET REMAINDER TO ZERO
1$:	ASL	R2		;SHIFT THE ENTIRE DIVIDEND...
	ROL	R1		;... ONE BIT TO THE LEFT AND ...
	ROL	R0		;... INTO THE REMAINDER
	CMP	R0,(SP)		;IS REMAINDER .GE. DIVISOR?
	BLO	2$		;NO, SKIP TO ITERATION CONTROL
	SUB	(SP),R0		;YES, SUBTRACT DIVISOR OUT
	INC	R2		;AND INCREMENT THE QUOTIENT
2$:	DEC	R3		;REPEAT AS LONG AS NECESSARY
	BGT	1$
	TST	(SP)+		;PURGE DIVISOR FROM STACK
	MOV	(SP)+,R3	;RESTORE R3
	RETURN			;
;
;
	.END
