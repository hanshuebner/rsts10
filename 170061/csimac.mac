;
; CSI MACRO DEFINITIONS
;
; COPYRIGHT 1974, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1975, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
; COPYRIGHT 1976, DIGITAL EQUIPMENT CORP., MAYNARD, MASS.  01754
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM, AND CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE) ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN THIS DOCUMENT IS SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT BE CONSTRUED AS A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; VERSION 03
;
; WRITTEN BY:
;	A. MAROTTO
;
; MODIFIED BY:
;	C.A. D'ELIA	11-NOV-73
;	C.A. D'ELIA	04-JUN-74
;	C.A. D'ELIA	24-MAR-75
;	P.H. LIPMAN	28-JAN-76
;
;
 
;
; CSI$1 - CALL COMMAND STRING SYNTAX ANALYZER
;
 
	.MACRO	CSI$1 CSBLK,BUFF,LEN
	.GLOBL	.CSI1
	.MCALL	CSI$,LDR0$
	.IF NDF C.SIZE
	CSI$
	.ENDC
	LDR0$	CSBLK
	.IF NB	<BUFF>
	MOV	BUFF,C.CMLD+2(R0)
	.ENDC
	.IF NB	<LEN>
	MOV	LEN,C.CMLD(R0)
	.ENDC
	JSR	PC,.CSI1
	.ENDM
 
 
 
 
;
; CSI$2 - CALL COMMAND STRING SEMANTIC PARSER
;
 
	.MACRO	CSI$2 CSBLK,IO,SWTAB
	.GLOBL	.CSI2
	.MCALL	CSI$,LDR0$
	.IF NDF C.SIZE
	CSI$
	.ENDC
	LDR0$	CSBLK
	.IF NB	<IO>
	.IF IDN	<INPUT>,<IO>
	MOVB	#CS.INP,(R0)
	.IFF
	.IF IDN	<OUTPUT>,<IO>
	MOVB	#CS.OUT,(R0)
	.IFF
	.ERROR	;INCORRECT REQUEST TO .CSI2  ;
	.ENDC
	.ENDC
	.ENDC
	.IF NB	<SWTAB>
	MOV	SWTAB,C.SWAD(R0)
	.ENDC
	JSR	PC,.CSI2
	.ENDM
 
 
 
 
;
; CSI$SW - DEFINE SWITCH TABLE ENTRY
;
 
	.MACRO	CSI$SW	SW,MK,MKW,CLR,NEGS,VALTAB,LNG
	.IF	B,SW
	.ERROR	;MISSING SWITCH NAME  ;
	.IFF
	.EVEN			;FORCE TO WORD ALIGNMENT
	.NCHR	SIZ$$,SW	;SET SIZ$$ TO NO. OF CHARS IN SW
	.IF	GT,SIZ$$-2	;IF STRING IS LONGER THAN 2 CHARS
	.IF	B,LNG		;AND NOT "LONG" OR "EXACT"
	SIZ$$=2			;TRIM IT BACK TO 2 CHARACTERS
	.ENDC
	.ENDC

	CNT$$=0
	.IRPC	CHR$$$,SW	;FOR EACH CHARACTER IN SW
	CHR$$=''CHR$$$
	CNT$$=CNT$$+1
	.IF	GE,<CHR$$-<'A+^O40>> ;IF .GE. LOWER CASE A
	.IF	LE,<CHR$$-<'Z+^O40>> ;AND .LE. LOWER CASE Z
	CHR$$=CHR$$-^O40	;CONVERT TO UPPER CASE ALPHA
	.ENDC
	.ENDC
	.IF	LE,CNT$$-SIZ$$	;IF MORE CHARACTERS TO STORE
	$$=0
	.IF	NB,LNG	;IF "LONG" OR "EXACT"
	.IF	IDN,<LNG>,<EXACT> ;IF "EXACT"
	.IF	GT,CNT$$&1	;AND IF FIRST BYTE OF WORD
	.IF	GE,CNT$$+1-SIZ$$ ;AND IF LAST WORD IN SWITCH NAME
	$$=^O200		;THEN SET THE EXACT MATCH FLAG
	.ENDC
	.IFF			;IF 2ND BYTE OF WORD
	.IF	LT,CNT$$-SIZ$$	;AND IF NOT THE LAST CHARACTER
	$$=^O200		;SET THE "MORE ASCII WORDS COMING" BIT
	.ENDC
	.ENDC			;END OF "IF FIRST BYTE OF WORD"
	.IFF			;IF NOT "EXACT"
	.IF	IDN,<LNG>,<LONG> ;MUST BE "LONG", OTHERWISE ERROR
	.IF	EQ,CNT$$&1	;IF 2ND BYTE OF WORD
	.IF	LT,CNT$$-SIZ$$	;AND NOT THE LAST CHARACTER
	$$=^O200		;SET THE "MORE ASCII WORDS COMING" BIT
	.ENDC
	.ENDC
	.IFF			;IF NOT "LONG"
	.ERROR		;ILLEGAL "LONG" OR "EXACT" SPECIFIER  ;
	.ENDC			;END OF IF "LONG"
	.ENDC			;END OF IF "EXACT"
	.ENDC			;END IF NB,LNG

	.BYTE	CHR$$!$$	;GENERATE A CHARACTER
	.ENDC			;END OF "IF MORE CHARACTERS"
	.ENDM			;END OF THE IRPC LOOP
	.EVEN			;ROUND UP TO NEXT WORD BOUNDARY
	.ENDC			;END OF ".IF B,SW"

	.IF	NB	MK
	.WORD	MK
	.IFF
	.WORD	0
	.ENDC
$$=0
	.IF	NB	CLR
	.IF	IDN	<CLEAR>,<CLR>
$$=1
	.IFF
	.IF	IDN	<SET>,<CLR>
	.IFF
	.ERROR	;INVALID SET/CLEAR SPEC  ;
	.ENDC
	.ENDC
	.ENDC
	.WORD	MKW+$$
$$=0
	.IF	NB	NEGS
	.IF	IDN	<NEG>,<NEGS>
$$=1
	.IFF
	.ERROR	;INVALID NEGATE SPEC  ;
	.ENDC
	.ENDC
	.WORD	VALTAB+$$
	.ENDM
 
 
 
 
;
; CSI$ND - SWITCH/VALUE TABLE END
;
 
	.MACRO	CSI$ND
	.WORD	0
	.ENDM
 
 
 
 
;
; CSI$SV - DEFINE SWITCH VALUE TABLE ENTRY
;
 
	.MACRO	CSI$SV	TYPE,ADDR,LEN,VALTAB
	.IF	NB	VALTAB
VALTAB:
	.ENDC
	.IF	NB	TYPE
	.IF	IDN	<ASCII>,<TYPE>
	.BYTE	1
	.IFF
	.IF	IDN	<NUMERIC>,<TYPE>
	.BYTE	2
	.IFF
	.IF	IDN	<OCTAL>,<TYPE>
	.BYTE	2
	.IFF
	.IF	IDN	<DECIMAL>,<TYPE>
	.BYTE	3
	.IFF
	.ERROR	;INVALID CONVERSION TYPE  ;
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.IFF
	.BYTE	1	;ASCII CONVERSION ASSUMED
	.ENDC
	.IF	NB	LEN
	.BYTE	LEN
	.IFF
	.ERROR	;LENGTH MISSING  ;
	.BYTE	0
	.ENDC
	.IF	NB	ADDR
	.WORD	ADDR
	.IFF
	.ERROR	;VALUE ADDRESS MISSING  ;
	.WORD	0
	.ENDC
	.ENDM
 
 
 
 
;
; LDR0$ - CONDITIONALLY LOAD R0
;
 
	.MACRO	LDR0$	ARG
	.IIF	B,ARG,.MEXIT
	.NTYPE	PAR$$$,ARG
	.IIF	EQ,PAR$$$,.MEXIT
	MOV	ARG,R0
	.ENDM
 
 
 
 
;
; CSI$ - COMMAND STRING INTERPRETER SYMBOL DEFINITIONS
;
 
	.MACRO	CSI$	GBL
	.IF IDN <GBL>,<DEF$G>
.GLOBL	C.TYPR,C.STAT,C.CMLD,C.DEVD,C.DIRD,C.FILD,C.SWAD,C.MKW1,C.MKW2
.GLOBL	C.SIZE,C.DSDS,CS.INP,CS.OUT
.GLOBL	CS.NMF,CS.DIF,CS.DVF,CS.WLD,CS.MOR,CS.EQU
	.ENDC
;
C.TYPR	=0	;REQUEST TYPE(FOR CSI2)
C.STAT	=1	;STATUS(FROM CSI2)
C.CMLD	=2	;LENGTH OF COMMAND STRING BUFFER
		;ADDRESS OF COMMAND STRING BUFFER
C.DEVD	=6	;LENGTH OF DEVICE NAME STRING
		;ADDR OF MOST RECENT DEVICE NAME STRING
C.DIRD	=^O<12>	;LENGTH OF MOST RECENT DIR INFO
		;ADDRESS OF DIR INFO
C.FILD	=^O<16>	;LENGTH APPROPRIATE TO C.FILD+2
		;CSI1 - ADDR OF STRING SEG WHERE ERROR OCCURED
		;CSI2 - ADDR OF FILE NAME FOR CURRENT REQUEST
C.SWAD	=^O<22>	;ADDR OF CURRENT SWITCH TABLE
C.MKW1	=^O<24>	;'OR' OF MASKS FOR ALL SWITCHES FOUND THIS CALL
C.MKW2	=^O<26>	;ON/OFF SETTINGS OF MASKS FOR SWITCHES FOUND
;
C.SIZE	=^O<54>	;SIZE OF CSI CONTROL BLOCK(IN BYTES)
;
C.DSDS	=C.DEVD	;DISP TO 6 WORD BLOCK FOR FCS
;
;	C.TYPR VALUES
;
CS.INP	=1	;REQUEST INPUT STRING
CS.OUT	=2	;REQUEST OUTPUT STRING
;
;	C.STAT VALUES
;
CS.NMF	=1	;1=FILE NAME SPECIFIED THIS SEG OF STRING
CS.DIF	=2	;1=DIR INFO SPECIFIED THIS SEG OF STRING
CS.DVF	=4	;1=DEVICE NAME SPECIFIED THIS SEG OF STRING
CS.WLD	=^O<10>	;FILE NAME HAS WILD CARD SWITCH
CS.MOR	=^O<20>	;MORE STRING SEGS FOLLOW
CS.EQU	=^O<40>	;EQUAL SIGN SEEN BY CSI1
;
; MACRO REDEFINITION
;
	.MACRO	CSI$	X
	.ENDM	CSI$
 
	.ENDM	CSI$
