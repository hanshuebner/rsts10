	.TITLE	CRFP1
	.IDENT	/01/

;
; COPYRIGHT   1974,  DIGITAL  EQUIPMENT  CORP.,  MAYNARD,   MASS.
;
; THIS SOFTWARE IS FURNISHED TO PURCHASER UNDER A LICENSE FOR USE
; ON A SINGLE COMPUTER SYSTEM  AND  CAN BE COPIED (WITH INCLUSION
; OF DEC'S COPYRIGHT NOTICE)  ONLY FOR USE IN SUCH SYSTEM, EXCEPT
; AS MAY OTHERWISE BE PROVIDED IN WRITING BY DEC.
;
; THE INFORMATION IN  THIS DOCUMENT IS  SUBJECT TO CHANGE WITHOUT
; NOTICE AND SHOULD NOT  BE CONSTRUED AS  A COMMITMENT BY DIGITAL
; EQUIPMENT CORPORATION.
;
; DEC ASSUMES  NO  RESPONSIBILITY  FOR  THE  USE  OR  RELIABILITY
; OF ITS  SOFTWARE  ON  EQUIPMENT  WHICH IS NOT  SUPPLIED BY DEC.
;
; VERSION 01
;
; C. MONIA 26-DEC-74
;
; MODIFICATIONS:
;
;		CM001 -- 29-OCT-75
;
;			 DELETE SECOND PASS THROUGH CROSS REFERENCE
;			 INPUT FILE.
;
;		CM003 -- 17-JUN-76
;
;			 ALLOW CREF TO CONTINUE AFTER FAILURE TO DELETE
;			 DATA INPUT FILE
;
;
; CREF PHASE 1
;
; MACRO LIBRARY CALLS
;

	.MCALL	CLOSE$,OFNB$R

;+
; **-$CRFP1-CREF PHASE 1
;
; THIS SUBROUTINE IS CALLED TO READ THE CREF INPUT FILE AND
; BUILD THE SYMBOL TABLES
;
; INPUTS:
;
;	$CRIDB=ADDRESS OF CREF INPUT FILE FDB
;
; OUTPUTS:
;
;	CREF SYMBOL TABLE IS CONSTRUCTED FOR EACH CREF TYPE
;
;-

$CRFP1::			;
	SAVRG			; SAVE NON-VOLATILE REGISTERS
	CLR	R1		; SET FOR INITIAL CALL
	CALL	$ALSVB		; INITIALIZE SMALL CORE BLOCK ALLOCATOR
	OFNB$R	#$CRIDB		; OPEN CREF INPUT FILE
	BCS	35$		; IF C/S OPEN FAILURE
	CALL	$GTCRF		; GET CREF HEADER RECORD
	BCS	40$		; IF C/S PREMATURE E-O-F
	MOV	#$CRFTK,R2	; POINT TO PARAMETER STORAGE
	MOV	#<H$DLTH/2>,R3	; SET NUMBER OF WORDS TO MOVE
10$:				;
	MOV	(R1)+,(R2)+	; COPY HEADER
	SOB	R3,10$		; ...
	CALL	$FNDFM		; FIND FORMAT CONTROL TABEL ENTRY
	MOV	R5,$FMTPT	; SAVE ADDRESS OF CONTROL TABLE
15$:				;
	CALL	@(SP)+		; GET NEXT RECORD
	BCS	20$		; IF C/S END-OF-FILE
	MOV	R1,R4		; SAVE ADDRESS OF RECORD
	MOV	#R$FLTH,R1	; GET SIZE OF REFERENCE LIST ENTRY
	CALL	$ALSVB		; ALLOCATE VIRTUAL MEMORY
	CALL	$LCKPG		; LOCK REFERENCE IN MEMORY
	MOV	D$SREF(R4),R$FSYM(R0) ; SET REFERENCE NAME
	MOV	D$SREF+2(R4),R$FSYM+2(R0) ; ...
	MOVB	D$ATTR(R4),R$FLG(R0) ; SET ATTRIBUTES BYTE
	MOV	R1,-(SP)	; SAVE VIRTUAL ADDRESS OF ENTRY
	MOV	R0,R3		; SAVE REAL ADDRESS OF ENTRY
	MOV	R4,R1		; RESTORE ADDRESS OF RECORD
	CALL	$FNDTD		; LOCATE TABLE DESCRIPTOR
	SUB	#S$YM,R1	; CONVERT NEW SYMBOL TO DESCRIPTOR FORMAT
	MOV	D$SVAL(R4),S$YVAL(R1) ; SET VALUE FIELD
	MOVB	D$ATTR(R4),S$YFLG(R1) ; SET FLAGS BYTE
	CLRB	S$YFLG+1(R1)	; CLEAR UPPER BYTE
	MOV	(SP),S$YREF(R1)	 ; SET POINTER TO REFERENCE LIST ENTRY
	CALL	$SRCIV		; SEARCH FOR INSERTION
	BCS	17$		; IF C/S NOT IN TABLE
	CALL	$CVRL		; CONVERT ENTRY TO REAL ADDRESS
	CALL	$WRMPG		; WRITE-MARK PAGE
	MOV	S$YREF(R0),(R3)	; MOVE OLD FIRST TO NEW FIRST
	MOV	(SP),S$YREF(R0)	; SET NEW FIRST
	BISB	R$FLG(R3),S$YFLG(R0) ; MERGE FLAGS
	MOV	D$SVAL(R4),S$YVAL(R0) ; JAM VALUE FIELD
	MOV	(SP)+,R1	; GET VIRTUAL ADDRESS OF REFERENCE
	CALL	$UNLPG		; UNLOCK REFERENCE
	BR	15$		; GO AGAIN
17$:				;
	MOV	(SP)+,R1	; GET VIRTUAL ADDRESS OF REFERENCE
	CALL	$UNLPG		; FREE UP A PAGE BUFFER
	CALL	$ISYMV		; INSERT SYMBOL
	BR	15$		; GO AGAIN
20$:				;
	MOV	#$CRIDB,R0	; GET ADDRESS OF INPUT FILE FDB
	CALL	.DLFNB		; DELETE CREF INPUT FILE
	BCC	30$		; IF C/C FILE SET FOR DELETION
	MOV	R0,R2		; COPY ADDRESS OF FDB
	ADD	#<F.FNB+N.FNAM>,R2 ; POINT TO FILE NAME
	ERROR$	E$R8,S$V0	; REPORT FAILURE TO DELETE
30$:				;
	CLOSE$	#$CRIDB		; CLOSE CREF INPUT FILE
	RETURN			;

;
; OPEN FAILURE ON CREF INPUT FILE
;

35$:				;
	ERROR$	E$R2,S$V2,#<$CRIDB+F.FNB+N.FNAM> ; FATAL ERROR, NO RETURN

;
; CREF INPUT FILE HAS ILLEGAL FORMAT
;

40$:				;
	ERROR$	E$R7,S$V2,#<$CRIDB+F.FNB+N.FNAM> ; FATAL ERROR, NO RETURN

	.END
