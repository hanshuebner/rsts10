	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /CMN:FLDEF/
TITLE	DIR,<DIRECTORY LOOKUPS>,0A,10-MAY-91,MHB/ABC/SJK/SRM/JTC/FEK/WJS/DRP/KPH/GPK/FRL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR DIR

;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001  SRM  15-Apr-81	Clear the contiguous bit from a file's FCB
;			when it marked as not being contiguous.
;  002  SRM  01-May-81	Fix the problem I should have fixed above.
;  003	JTC  11-Oct-81	Add "SGNRES" to FQFSRT
;  004	FEK  23-Sep-82	ADD SUPPORT FOR V1 OF ODS
;  005	FEK  28-Sep-82	Bring in common 'RAD' code & remove file utility code
;  006	WJS  29-Oct-82	New UUOENT for EMT Logger
;  007	DRP  31-JAN-83	Improve performance of UU.RAD
;
;				[RSTS V9.0]
;  008	GPK  31-Mar-83	Multiple privileges
;  009	GPK  20-Sep-83	Multiple privilege bugfix
;  010	GPK  22-Nov-83	Change privilege check for executable flag check
;  011	KPH  16-Jan-84	Move wildcard lookup to OPN phase (for ONXFQ)
;  012	GPK  29-Dec-83	Split ACNT privilege into WACNT/GACNT
;  013	KPH  29-Feb-84	Change register conventions for INISCN/FNDFIL
;			Add look-up marked-for-delete files
;			Add bit to UU.RAD to return protection violation
;  014	DRP  05-Mar-84	Logged-in disk quotas support
;  015  FRL  01-Apr-84  V9.0 logicals
;  016	GPK  17-Apr-84	Privilege name changes
;  017	KPH  29-Aug-84	Changes for APR5 FIP pool
;  018	GPK  30-Oct-84	Fix GACNT handling
;  019	GPK  27-Feb-85	Fix CHKACC call in RAD (for third party case)
;
;				[RSTS V10.0]
;  020	FEK  02-Nov-89	Add BACKUP/IGNORE support
;-

	IONLY			;Invoke I-only FIP definitions		;017

FQFSRT	DIR,LODABL							;017

.SBTTL	DIRECTORY LOOKUP

;+
; DIRFQ - DIRECTORY LOOKUP.
; UU.DIR - DIRECTORY LOOKUP.
;
;	R1 -> JOB DATA BLOCK
;	R4 -> FIRQB
;		FQFIL  =  INDEX NUMBER (0 TO N)
;		FQPPN  =  PPN (0=>SELF)
;		FQMODE =  Flags						;013
;			BIT 14 = Include marked-for-delete files	;013
;									;013
;		FQDEV,FQDEVN = DEVICE TO USE (0=>PUBLIC)
;
;	IN FIRQB ON RETURN
;		FQFIL  =  SAME AS PASSED
;		FQPPN  =  PPN
;		FQNAM1 =  FILE NAME (2 WORDS)
;		FQEXT  =  EXTENSION
;		FQSIZ  =  FILE SIZE
;		+20    =  PROTECTION CODE
;		+21    =  FILE SIZE (MSB)
;		+22    =  DATE OF LAST ACCESS/WRITE
;		+24    =  DATE OF CREATION
;		+26    =  TIME OF CREATION (without any flag bits)	;020
;		FQDEV,FQDEVN = SAME AS PASSED
;		FQCLUS =  FILE CLUSTER SIZE
;		FQNENT =  NUMBER OF ENTRIES (8.)
;		+37    =  STATUS BYTE
;-

	FQFENT	DIR,,<FQPPN,FQNAM1,FQNAM1+2,FQEXT,FQSIZ,20,22,24,26,FQCLUS,FQNENT,37>

	UUOENT	DIR,,,LOGABL	;DIRECTORY LOOKUP

	MOVB	#DIRFQ,JDPOST(R1) ;ENSURE DIRECTORY LOOKUP POSTING
	CALLX	GUN,R5		;GET THE UNIT
	 BR	30$		;IT IS DISK
	CALLX	GETDEV		;TRY TO GET THE DEVICE
	CALLX	RETDEV		;THEN RETURN IT...
	CMP	R0,#DTAHND	;DECTAPE?
	BEQ	10$		;YES
	CMP	R0,#MTAHND	;MAGTAPE?
	BEQ	20$		;YES
	ERROR	DEVNFS		;OTHER, ERROR

10$:	FJMPDV	DT,DIR		;DO DECTAPE DIRECTORIES

20$:	FJMPDV	MT,DIR		;DO MAGTAPE DIRECTORIES

30$:	CALL	LCKCHK		;CHECK FOR LOCKED PACK, ETC.
	CALLM	INISCN,OPNAP5	;INITIALIZE DIRECTORY SCAN		;011
40$:	CALLM	NXTENT,OPNAP5	;GET NEXT ENTRY IN DIRECTORY		;011
	BCS	40$		;SKIP IF PROTECTED AGAINST US
	SOB	R1,40$		;LOOP UNTIL IT IS THE ONE WE WANT

;	R0 -> FIRQB @ FQPPN
;	R5 -> N.E. IN FIBUF
;
;	CALL	LOOKDN
;
;	R0 -> FIRQB @ FQNENT+2
;	R1 =  RANDOM
;	R3 -> FIRQB @ FQDEV
;	R5 -> A.E. IN FIBUF @ URTS+2

.ENABL	LSB

LOOKDN:	CALLX	SNE		;SEARCH OPEN FILES FOR THIS FILE
	CMP	(R5)+,(R0)+	;SKIP MARKER AND FQPPN
	MOV	(R5)+,(R0)+	;SET NAME
	MOV	(R5)+,(R0)+	; AND
	MOV	(R5)+,(R0)+	;  EXTENSION
	MOV	(R5),-(SP)	;SAVE UPROT/USTAT
	MOV	UAA-USTAT(R5),R3 ;GET A.E. LINK
	CALLX	RDE		; AND READ IT
	TST	(R5)+		;SKIP MARKER
	MOV	(R5)+,-(SP)	;SAVE LAST ACCESS/WRITE FOR LATER
.ASSUME UDLA	EQ	2
	MOV	(R5)+,(R0)+	;SET SIZE LSB
	MOVB	3(SP),(R0)+	;SET PROTECTION CODE
	TST	R1		;IS THIS FILE CURRENTLY OPEN?
	BEQ	10$		;NO, SET SIZE MSB 0 FOR NOW
	MOVB	F$STAT(R1),2(SP) ;YES, REPLACE USTAT BYTE WITH OPEN USTAT
	MOV	F$SIZL(R1),FQSIZ-21(R0) ;REPLACE LSB SIZE WITH THE TRUE SIZE
	MOVB	F$SIZM(R1),R1	;GET TRUE MSB SIZE
10$:	MOVB	R1,(R0)+	;SET SIZE MSB TO FCB SIZE MSB OR 0 IF NOT OPEN
	MOV	(SP)+,(R0)+	;SET LAST ACCESS/WRITE
	MOV	(R5)+,(R0)+	;SET CREATION DATE
.ASSUME UDC	EQ	6
	MOV	(R5)+,(R0)	;SET CREATION TIME			;020
.ASSUME UTC	EQ	10
	BIC	#^C<UTC.TM>,(R0)+ ;Clear out the flag bits		;020
	MOV	R0,R3		;SAVE POINTER TO FIRQB @ FQDEV
	CMP	(R0)+,(R0)+	;SKIP FQDEV,FQDEVN
	BIS	(R5)+,R1	;ANY RTS NAME, OR IS MSB ALREADY SET FROM FCB?
	BNE	20$		;YES, LEAVE SIZE MSB 0 OR FCB VALUE
	MOVB	(R5),21-FQCLUS(R0) ;NO, SET MSB (F$SIZM=0 => DIR SIZM=0!)
20$:	MOV	UCLUS-<URTS+2>(R5),(R0)+ ;SET CLUSTER SIZE
	MOVB	#8.,(R0)+	;SET NUMBER OF ENTRIES
	MOVB	(SP)+,(R0)+	;SET STATUS BYTE
	RETURN			;EXIT

.DSABL	LSB

.SBTTL	WILD CARD LOOKUP

;+
; LOKFQ - DO A WILD CARD LOOKUP.
; UU.LOK - DO A WILD CARD LOOKUP.
;
;	R1 -> JOB DATA BLOCK
;	R4 -> FIRQB
;		FQFIL  =  INDEX NUMBER (0 TO N)
;		          -1 TO INDICATE SPECIFIC FILE LOOKUP
;		FQPPN  =  PPN (0=>SELF)
;		FQNAM1 =  FILE NAME (2 WORDS)
;		FQEXT  =  EXTENSION
;		FQMODE =  Flags						;013
;			BIT 14 = Include marked-for-delete files	;013
;				(Not for specific file lookup)		;013
;		FQDEV,FQDEVN = DEVICE TO USE (0=>PUBLIC)
;
;	IN FIRQB ON RETURN
;		FQPPN  =  PPN
;		FQNAM1 =  FILE NAME (2 WORDS)
;		FQEXT  =  EXTENSION
;		FQSIZ  =  FILE SIZE
;		+20    =  PROTECTION CODE
;		+21    =  FILE SIZE (MSB)
;		+22    =  DATE OF LAST ACCESS/WRITE
;		+24    =  DATE OF CREATION
;		+26    =  TIME OF CREATION (without any flag bits)	;020
;		FQDEV,FQDEVN = SAME AS PASSED
;		               SPECIFIC DEVICE NAME/UNIT [IF -1 @FQFIL]
;		FQCLUS =  FILE CLUSTER SIZE
;		FQNENT =  NUMBER OF ENTRIES (8.)
;		          FILE ID [IF -1 @FQFIL]
;		+37    =  STATUS BYTE
;		          HIGH BYTE OF FILE ID [IF -1 @FQFIL]
;
; NOTE:	ONLY THE PPN HAS BEEN FILLED IN IF THE CALL IS A SPECIFIC
;	FILE LOOKUP CALL AND THE ERROR IS "NOSUCH".
;-

FQFENT	LOK,,<FQPPN,FQNAM1,FQNAM1+2,FQEXT,FQSIZ,20,22,24,26,FQDEV,FQDEVN,FQCLUS,FQNENT,37>

	UUOENT	LOK,,,LOGABL	;LOOKUPS COME HERE

	MOVB	#LOKFQ,JDPOST(R1) ;ENSURE WILDCARD LOOKUP POSTING
	CALL	LOKINI		;GET UNIT, CHECK FOR LOCKED, FIX PPN
	TST	(R4)		;ANY NAME?
	BNE	10$		;NAME, SO O.K.
	ERROR	BADNAM		; ELSE A BAD NAME

10$:	INC	FQFIL-FQPPN(R0)	;WILD CARD LOOKUP (& CORRECT INDEX)?
	BNE	30$		;YES
	CALLX	SDU		;NOPE, SO DO NORMAL LOOKUP
	BCS	NOSERR		;NOT FOUND...
	CALLM	CKPRIV,OPNAP5	;ARE WE ALLOWED READ ACCESS TO THE FILE?   ;011
	BCS	NOSERR		;IF NOT, DENY DIRECTORY ACCESS
	MOV	R3,-(SP)	;FOUND, SAVE THE LINK (FID)
	CALL	LOOKDN		;NOW LOAD FIRQB WITH DATA
	MOV	(SP)+,-(R0)	;SET THE FID @ FQNENT
	MOVB	@#FIPUNT,R2	;GET THE UNIT
	MOV	R2,R1		;COPY UNIT NUMBER
	MUL	#DL$SIZ,R1	; INDEX INTO THE DISK TABLE		;015
	MOV	DSKLOG+DL$DEV(R1),(R3)+ ;SET THE PHYSICAL DISK NAME	;015
	MOV	(R3),R0		;SAVE THE ORIGINAL FQDEVN
	MOV	DSKLOG+DL$NUM(R1),(R3)+ ;SET THE UNIT AND FLAG (=377)	;015
	ASL	R2		;GET UNIT TIMES 2 FOR WORD ADDRESSING
	BIT	#UC.PRI,UNTCNT(R2) ;PRIVATE UNIT?
	BNE	20$		;YES, LEAVE FLAG = 377
	ASLB	-(R3)		;NO, PUBLIC, SET FLAG = 376
	TST	R0		;WAS IT AN EXPLICIT REFERENCE??
	BNE	20$		;YES, LEAVE FLAG = 376
	ASLB	(R3)		;NO, GENERAL, FLAG = 374
20$:	RETURN			;NOW EXIT

GLOBAL	<FIPUNT,DSKLOG,UNTCNT>						;015

30$:	CLR	R5		;Indicate start of directory		;013
	MOV	FQFIL-FQPPN(R0),R1 ;Pick up index to lookup		;011
	CALLM	FNDFIL,OPNAP5	;Go and find the file			;011
	CALLR	LOOKDN		;LOAD UP THE FIRQB WITH FOUND DATA and exit ;011

; LOKINI - INITIALIZE FOR LOOKUP
;
;	R4 -> FIRQB
;
;	CALL	LOKINI
;
;	R0 -> FIRQB @ FQPPN, WHICH IS LOADED WITH FIUSER IF PASSED NULL
;	R1 =  INDEX FROM FQFIL + 1
;	R2 =  RANDOM
;	R4 -> FIRQB @ FQNAM1

LOKINI:	CALLX	GUN,R5		;DETERMINE DEVICE TYPE
	 BR	LCKCHK		;IT IS DISK
NOSERR:	ERROR	NOSUCH		;OTHER IS AN ERROR

; LCKCHK - CHECK FOR LOCKED PACK, ETC.
;
;	R1 -> RESULT FROM GUN
;	R4 -> FIRQB
;
;	CALL	LCKCHK
;
;	R0 -> FIRQB @ FQPPN, WHICH IS LOADED WITH FIUSER IF PASSED NULL
;	R1 =  INDEX FROM FQFIL + 1
;	R2 =  RANDOM
;	R4 -> FIRQB @ FQNAM1

LCKCHK:	CMP	(R4)+,(R4)+	;POINT TO FQFIL IN FIRQB
	MOV	(R4)+,R1	; AND GET THE INDEX
	INC	R1		;  MAKING IT IN 1-N RANGE
	MOV	R4,R0		;SAVE POINTER TO FQPPN
	TST	(R4)+		;OWN DIRECTORY?
	BNE	20$		;NO
	MOV	@#FIUSER,(R0)	;IF SO, THEN GIVE OWN PPN
20$:	RETURN			;DONE NOW

GLOBAL	<FIPRVM,FIUSER>							;008

FQFEND

FQFSRT

.ENABL	LSB

.SBTTL	WILD CARD PPN LOOKUP

;+
; UU.PPN - DO A WILD CARD PPN LOOKUP
;
;	R4 -> FIRQB
;		FQFIL  =  INDEX NUMBER (0 TO N)
;		FQPPN  =  PPN TO FIND (255. BYTE MEANS WILD) (0=>SELF)
;		FQDEV,FQDEVN = DEVICE TO USE (0=>SY0:)
;
;	IN FIRQB ON RETURN
;		FQPPN  =  PPN FOUND
;-

	UUOENT	PPN,,,LOGABL	;WILD CARD PPN SEARCHES COME HERE

	CALLX	GUN,R5		;DETERMINE THE DEVICE TYPE
	 BR	6$		;DISK, SO CONTINUE
	BR	70$		;NON-DISK, SO CAN'T FIND THE ACCOUNT

6$:	CMP	(R4)+,(R4)+	;ADD 4 TO R4. R4->FIRQB @ FQFIL
	INC	(R4)+		;CHANGE THE COUNT FROM 0-N TO 1-N+1
	BEQ	70$		;65535+1=0, CAN'T EXIST SO DON'T LOOK
	MOV	R4,R0		;R0 -> THE PPN AT FQPPN
	TST	(R4)		;PPN specified?				;019
	BNE	9$		;DID GIVE US A PPN
	MOV	@#FIUSER,(R0)	;NO, SO USE THE CALLERS PPN
9$:	MOV	PC,-(SP)	;SET A <>0 FLAG ON THE STACK		;019
	BR	60$		;AND ENTER THE COMMON CODE

GLOBAL	<FIPUNT,FIUSER>							;016

.SBTTL	ACCOUNTING DATA READ/RESET

;+
; UU.RAD - READ/RESET ACCOUNTING DATA.
;
;	R4 -> FIRQB
;		FQFIL	=  0 =>	USE PPN @ FQNAM1
;			<> 0 =>	INDEXED LOOKUP (FIND NTH OCCURANCE)
;		FQPPN	=  0 =>	ONLY READ ACCOUNTING DATA
;		     	<> 0 =>	READ AND RESET ACCONTING DATA
;		FQNAM1	=  PPN TO LOOKUP IF FQFIL=0 (0=>SELF)
;		FQNAM1+2
;		  BIT 0	=  1	DO NOT RETURN ALLOCATED DISK
;		  BIT 1 =  1	FQNAM1 CONTAINS A WILD CARD PPN
;				 TO BE USED WITH THE INDEX
;		  BIT 2 =  1	RETURN NEW FORM OF DISK QUOTAS		;014
;		  BIT 3 =  1	Return protection violation if user isn't ;013
;				privileged enough for request		;013
;
;		FQDEV,FQDEVN = (DISK) DEVICE TO USE
;
;	IN FIRQB ON RETURN 	(Old style)
;		FQFIL	=  SAME AS PASSED
;		FQPPN	=  TOTAL DISK OWNED (65535. IF OVERFLOW,
;						0 IF NOT RETURNING ALLOCATION)
;		FQNAM1	=  PPN
;		+12,+14	= PASSWORD
;		+16	=  CPU TIME
;		+20	=  CONNECT TIME
;		+22	=  KCT'S
;		+24	=  DEVICE TIME
;		+26	=  MSB OF CPU TIME/KCT'S
;		FQDEV,FQDEVN = SAME AS PASSED
;		+34	=  DISK QUOTA
;		+36	=  UFD CLUSTER SIZE
;
;	IN FIRQB ON RETURN	(NEW FORM OF QUOTAS)
;		FQFIL	=  SAME AS PASSED
;		FQNAM1	=  PPN
;		+12	=  LOGGED-OUT QUOTA (LSB)
;		+14	=  LOGGED-IN QUOTA  (LSB)
;		+16	=  LOGGED-IN QUOTA  (MSB)
;		+17	=  LOGGED-OUT QUOTA (MSB)
;		+20	=  RESERVED QUOTA   (MSB)
;		+21	=  CURRENT USAGE    (MSB)
;		+22	=  RESERVED QUOTA   (LSB)
;		+24	=  CURRENT USAGE    (LSB)
;		+26	=  OPEN COUNT (LOW 10 BITS)
;			   LOGGED-IN COUNT (HIGH 6 BITS)
;		FQDEV,FQDEVN = SAME AS PASSED
;
; NOTE:	NON-PRIVILEGED CALLERS ONLY GET LOOKUP ON SELF AND
;	ONLY READ. ALSO, PASSWORDS ARE NEVER RETURNED TO
;	A NON-PRIVILEGED CALLER.
;
;		FQFIL	=  0
;		FQPPN	=  0
;		FQNAM1	=  USERS PPN
;-

	UUOENT	RAD,,,LOGABL,DOLOG	;READ/RESET ACCOUNTING DATA

	CALLX	GUN,R5		;GET UNIT
	 BR	20$		;IT IS DISK
	ERROR	DEVNFS		;OTHER IS ERROR
 
10$:	ERROR	PRVIOL		;DISK IS WRITE LOCKED

20$:	ADD	#FQNAM1,R4	;Point to PPN (at funny offset)		;019
	CLR	-(SP)		;ASSUME ONLY READ (NO RESET)
	MOV	#-1,-(SP)	;ASSUME NO PASSWORD RETURNED
	TST	FQFIL-FQNAM1(R4) ;Indexed?				;019
	BEQ	25$		;No, skip				;019
	BIT	#2,2(R4)	;Wildcard PPN?				;019
	BNE	25$		;Yes, so actual PPN spec is present	;019
	MOV	#-1,(R4)	;Straight indexing, set [*,*]		;019
25$:	MOV	(R4),R0		;Get PPN being accessed			;019
	BNE	30$		;Not defaulted, skip			;019
	MOV	@#FIUSER,R0	;Defaulted, use caller's		;019
	MOV	R0,(R4)		; and set that in work block		;019
30$:	CALLX	CHKACC		;Check access rights			;019
	BIT	#DDSTAT!DDAUXA,R0 ;Check both types of accounting rights ;019
	BNE	40$		;Got some kind of access, go on		;019
	CMP	(R4),@#FIUSER	;Trying to access self?			;019
	BEQ	10$		;Yes, and 3rd party check disallowed it	;019
	BIT	#10,2(R4)	;Do they want protection violation?	;013
	BNE	10$		;Yes, so report it			;013
	CLR	(R4)		;No, so default to self			;019
	CLR	FQFIL-FQNAM1(R4) ; and not indexed			;019
	CLR	FQPPN-FQNAM1(R4) ;  and readonly			;019
	BR	25$		;See if that one flies			;019

40$:	BPL	50$		;Read access means looking at self, so RO ;019
.ASSUME	DDSTAT LT 0							;019
	CLR	(SP)		;Accounting change access, return pwd	;019
	TST	FQPPN-FQNAM1(R4) ;READ AND RESET?			;019
	BEQ	40$		;NO - ONLY READ
	BIT	#UC.WLO,(R1)	;IS DISK WRITE LOCKED?
	BNE	10$		;YES, ERROR
	COM	2(SP)		;ELSE RESET DATA AFTER READING IT
50$:	MOV	(R4),-(R4)	;MOVE THE PPN TO FQPPN			;019
.ASSUME	FQPPN EQ FQNAM1-2						;019
	CLR	-(SP)		;CLEAR THE ENTRY FLAG (FOR UU.RAD)

;+									;019
; Registers at this point						;019
;	R4 ->	FIRQB @ FQPPN						;019
;-

60$:	MOV	R1,-(SP)	;SAVE THE UNTCNT POINTER
	MOV	FQFIL-FQPPN(R4),R1 ;GET COUNTER				;019
	BNE	80$		;<>0 => INDEXED LOOKUP (OR WILD PPN)
	MOV	R4,R0		;SET R0 FOR THE PPN IN FQPPN
	CALLX	SDM		;SEARCH IT
	BCS	70$		;NOT FOUND
	BR	95$		;FOUND, SO CONTINUE

70$:	ERROR	NOSUCH		;ELSE ERROR

GLOBAL	<FIPRVM,UNTLVL,UNTCNT,FIUSER>					;008

80$:	MOV	R4,R0		;COPY THE FIRQB POINTER @FQPPN
	MOVB	1(R0),R2	;GET THE PROJECT NUMBER REQUESTED
	INCB	R2		;SEE IF THEY REQUESTED WILD
	BEQ	801$		;YES, LEAVE HIGH BYTE=255, LOW=0
	CLR	R2		;NO, SO CLEAR IT ALL
801$:	CMPB	#255.-1,(R0)	;PROGRAMMER NUMBER WILD???
	SBCB	R2		;IF 255., C=1 FROM 'LO' SO SET 255
	TST	R2		;NOW, TEST THE WHOLE FLAG WORD!!
	BNE	802$		;SOMETHING WILD, SO MAY FIND IT HERE!
	CMP	R1,#1		;IF NONE WILD, THEN INDEX BETTER BE 1
	BNE	70$		;  ELSE, WE'LL NEVER FIND IT.
802$:	MOV	(SP),R3		;GET THE UNTCNT POINTER BACK AGAIN
	TST	UNTLVL-UNTCNT(R3) ;IS IT NEW OR OLD???
	BEQ	88$		;OLD, SO LOOK THE SLOW WAY
	MOV	@#FIPUNT,-(SP)	;SAVE FIPUNT AND FIPGEN
	FJMP	NEWDSK		;NEW, HEY WE'RE HIP

88$:	MOV	R2,-(SP)	;SAVE R2 FROM READMF
	CALLX	READMF		;READ IN THE MFD
	MOV	(SP)+,R2	;AND NOW, GET IT BACK AGAIN
	MOV	#FIBUF,R5	;GET INITIAL POINTER
90$:	CALLX	RDENXT		;READ NEXT ENTRY
	BEQ	70$		;NO MORE, ERROR
	BITB	#US.DEL!US.UFD,USTAT(R5) ;UFD?
	BLE	90$		;NO OR MARKED FOR DELETION
.ASSUME	US.DEL	EQ	200
	MOV	UNAM(R5),-(SP)	;GET THIS PPN
	BIS	R2,(SP)		;SET IN THE FLAGS
	CMP	(SP)+,(R0)	;IS IT ONE WE WANT???
	BNE	90$		;NO, SO JUST SKIP IT
	SOB	R1,90$		;LOOP UNTIL CORRECT ENTRY FOUND
95$:	TST	(SP)+		;DUMP THE UNTCNT POINTER WORD
	TST	(SP)+		;COME FOR A 'RAD' OR 'PPN'
	BEQ	100$		;AND CONTINUE INLINE (FOR THE RAD CALL)

	;IF WE GET HERE, THEN THIS CODE WAS
	;  ENTERED VIA THE WILD CARD PPN LOOKUP

	MOV	UNAM(R5),(R0)	;RETURN THE PPN WE FOUND AT FQPPN
	RETURN			;AND THATS ALL THERE IS TO IT

100$:	MOV	@#FIPUNT,R2	;SAVE FIPUNT AND FIPGEN
	BITB	#4,<FQNAM1+2>-FQPPN(R4) ;New form of call?		;014
	BEQ	110$		;No, old form				;014
	FJMP	NEWRAD		;Yes					;014

110$:	FJMP	MORRAD		;RETURN DATA INCLUDING USAGE STUFF	;014

GLOBAL	<UNTCNT,UNTLVL,NEWDSK,MORRAD,NEWRAD>				;014

.DSABL	LSB

FQFEND

FQFSRT
.ENABL	LSB

.SBTTL	VERSION 8.0 DIRECTORY LOOKUP

;+
; VERSION 8.0 DIRECTORY LOOKUP
;
;	CONTINUE HERE IF THIS IS A NEW TYPE DISK
;		THE FIRST SECTION OF CODE, READS THE MFD
;		INTO SATBUF AND LOOKS FOR THE REQUESTED GROUP
;
;	R0 -> FIRQB @ FQPPN
;	R1  = INDEX COUNT
;	R2  = MASK WORD
;	R3  = UNTCNT POINTER WORD
;	R4 -> FIRQB @ FQPPN
;	SP -> SAVED FIPUNT AND FIPGEN
;	      UNTCNT POINTER WORD
;	      UU.RAD OR UU.PPN INDICATOR
;
;-

NEWDSK::MOV	(SP)+,@#FIPUNT	;RESET FIPUNT AND FIPGEN
	MOV	R4,-(SP)	;SAVE THE FIRQB POINTER
	MOV	R2,-(SP)	;STORE THE MASK WORD
	MOV	R1,-(SP)	;SAVE THE INDEX COUNTER
	MOV	MFDPTR-UNTCNT(R3),R2 ;GET THE MFD POINTER
	CALLX	CNVDCN		;AND CONVERT TO FBN
	ADD	#1,R2		;THE FBN FOR THE GFD
	ADC	R3		;  POINTER TABLE IN THE MFD
	CALLX	REDSAT		;NOW, READ IT INTO SATBUF
	MOV	#LSTFUN,R2	;-> TO THE DIRECTORY CELLS
	CMPB	@#FIPUNT,(R2)+	;IS IT THE SAME FIP UNIT # ?
	BNE	810$		;NO, TOO BAD HAVE TO TAKE THE LONG ROAD
	INC	R2		;LOOKING GOOD, POINT TO THE NEXT WORD
	CMP	(R0),(R2)+	;SAME PPN ?
	BNE	810$		;NO, LONG WAY AROUND THEN
	CMP	(SP),(R2)	;IS THE INDEX LESS THAN THE COUNT
	BLO	810$		;YES, NUTS HAVE TO START FROM BEGINNING
	SUB	(R2),(SP)	;GREAT, COMPUTE A NEW INDEX
	ADD	(SP),(R2)+	;UPDATE THE LAST INDEX CELL
	INC	(SP)		;WE ALWAYS REFETCH THE LAST ONE
	MOV	(R2)+,R1	;SET UP THE SATBUF POINTER
	MOV	(R2)+,R4	;  AND THE FIBUF POINTER
	MOV	-2(R1),R2	;  AND FETCH THAT GFD'S DCN
	CALL	REDGFD		;READ THE GFD NAME BLOCKETTE TABLE
	BR	841$		;  AND GO START THE SEARCH

GLOBAL	<MFDPTR,FIPUNT,LSTFUN>

810$:	MOVB	@#FIPUNT,@#LSTFUN ;SAVE THE FIP UNIT #
	MOV	(SP),@#NDXUSD	;SET THE LAST INDEX USED CELL
	MOV	(R0),@#GRPUSR	;SAVE THE PPN WE'RE LOOKING FOR
	MOV	#SATBUF,R1	;GET A POINTER INTO THE TABLE
	CLR	R2		;START WITH A CLEAR PROJ #
	BISB	1(R0),R2	;GET THE PROJECT NUMBER (OR WILD?)
	INCB	R2		;MAKE WILD INTO 0
	BEQ	821$		;WILD, LOOK ALL GROUPS IN THE MFD
	DECB	R2		;GET THE REAL PROJECT NUMBER BACK
	ASL	R2		;MAKE IT THE # * 2
	ADD	R2,R1		;SET UP POINTER TO IT (IN FIBUF)
	BR	821$		;NOW, JOIN COMMON CODE

70$:	MOVB	#-1,@#LSTFUN	;NO MATCH, INVALIDATE THE CELL
	ERROR	NOSUCH		;ELSE ERROR

82$:	CMPB	1(R0),#255.	;WILD PROJECT???
	BNE	70$		;NO, THEN WE CAN'T FIND IT.
821$:	MOV	(R1)+,R2	;GET THE NEXT GFD'S DCN
	BIT	#777,R1		;END OF THE MFD'S TABLE???
	BEQ	70$		;YES, SO NO ACCOUNT FOUND
	TST	R2		;FIND A GFD???
	BEQ	82$		;NO, SO GET THE NEXT ONE
	MOV	R1,@#GRPPTR	;SAVE THE GROUP ->
	CALL	REDGFD		;READ THE GFD NAME BLOCKETTE TABLE

	;	NOW, THE REQUESTED GFD IS IN FIBUF, TO LOOK FOR THE
	;	REQUESTED USER WITHIN THE GROUP

	MOV	#FIBUF,R4	;POINT TO FIBUF (WHERE IT WAS READ INTO)
	CLR	R5		;START CLEAR (TO PREVENT SIGN EXTEND)
	BISB	(R0),R5		;NOW, SET IN THE PROGRAMMER #
	INCB	R5		;MAKE IT SO WILD=0
	BEQ	841$		;YES, SO DO IT THE WILD WAY
	DECB	R5		;MAKE IT THE REAL PROG # AGAIN
	ASL	R5		;AND PROG # *2 FOR A POINTER
	ADD	R5,R4		;GET THE POINTER RIGHT
	BR	841$		; AND CONTINUE INLINE

84$:	CMPB	(R0),#255.	;IS IT A WILD PROGRAMMER NUMBER???
	BNE	82$		;NO, SO WE CAN'T FIND IT HERE THEN
841$:	MOV	(R4)+,R5	;AND GET THE NAME BLOCKETTE ->
	BIT	#777,R4		;END OF THIS GFD???
	BEQ	82$		;YES, SO GET NEXT GFD
	TST	R5		;GET A REAL ACCOUNT???
	BEQ	84$		;NO, SO TRY THE NEXT ONE.
	;	BUILD THE PPN FROM THE POINTERS
	TST	-(R4)		;WE WANT TO POINT AT THE CURRENT ENTRY
	MOV	R4,@#USRPTR	;  AND SAVE THAT USER ->
	TST	(R4)+		;  AND RESET IT
	MOV	R1,-(SP)	;GET THE PROJ POINTER INTO SATBUF
	BIC	#^C<777>,(SP)	;CLEAR ALL BUT THE INDEX PART
	ASR	(SP)		; AND THEN JUST THE PROJECT NUMBER
	DEC	(SP)		; -1 CAUSE OF THE AUTO INCREMENT
	SWAB	(SP)		;THEN, MOVE IT TO THE RIGHT PLACE
	MOV	R4,-(SP)	;GET THE PROG POINTER INTO FIBUF
	BIC	#^C<777>,(SP)	; CLEAR ALL BUT THE INDEX PART
	ASR	(SP)		; AND THEN JUST THE PROGRAMMER NUMBER
	DEC	(SP)		; -1 CAUSE OF THE AUTO INCREMENT
	MOVB	(SP)+,(SP)	;AND MERGE IT INTO THE PPN FOUND
	;	THE PPN FOUND IS ON THE STACK, SEE IF IT MATCHES
	BIS	4(SP),(SP)	;MASK IN ANY WILD CARD FLAGS
	CMP	(SP)+,(R0)	;IS IT ONE THAT WE WANT???
	BNE	84$		;NO, SO LOOK AT THE NEXT ONE
	DEC	(SP)		;SAY, THAT WE FOUND ONE THAT WE WANT
	BNE	84$		;BUT, NOT THE ONE WE REALLY WANT
	MOV	R2,-(SP)	;SAVE THE CURRENT BLOCK
	MOV	R3,-(SP)	;  NUMBER IN CASE ITS US.DEL
	CALLX	RDETB		;READ THE ENTRY->R5 WITH TABLE BLOCK
	BEQ	85$		;NOT A REAL LINK???
	BITB	#US.DEL!US.UFD,USTAT(R5) ; MARKED FOR DELETE??
.ASSUME	US.DEL	EQ	200
	BGT	86$		;NO, SO USE THIS ONE
85$:	MOV	(SP)+,R3	;GET THE BLOCK # BACK
	MOV	(SP)+,R2	;   AND GET ALL OF IT
	INC	(SP)		;DON'T COUNT THIS ONE
	CALLX	READ		;AND GET THE CORRECT BLOCK BACK IN
	BR	84$		;AND READ IT AGAIN.

86$:	ADD	#10,SP		;CLEAN UP THE STACK NOW
	MOV	(SP)+,R4	;GET OUR FIRQB POINTER BACK AGAIN
95$:	TST	(SP)+		;DUMP THE UNTCNT POINTER WORD
	TST	(SP)+		;COME FOR A 'RAD' OR 'PPN'
	BEQ	100$		;AND CONTINUE INLINE (FOR THE RAD CALL)

	;IF WE GET HERE, THEN THIS CODE WAS
	;  ENTERED VIA THE WILD CARD PPN LOOKUP

	MOV	UNAM(R5),(R0)	;RETURN THE PPN WE FOUND AT FQPPN
	RETURN			;AND THATS ALL THERE IS TO IT

100$:	MOV	@#FIPUNT,R2	;SAVE FIPUNT AND FIPGEN
	BITB	#4,<FQNAM1+2>-FQPPN(R4) ;New form of call?		;014
	BEQ	110$		;No, old form				;014
	FJMP	NEWRAD		;Yes					;014

110$:	FJMP	MORRAD		;RETURN DATA INCLUDING USAGE STUFF	;014

GLOBAL	<FIBUF,FIPUNT,LSTFUN,SATBUF,NDXUSD,GRPPTR>
GLOBAL	<USRPTR,GRPUSR,MORRAD,NEWRAD>					;014

; REDGFD - READ THE NAME BLOCKETTE TABLE INTO FIBUF
;
;	R2 = DCN OF THE NAME BLOCKETTE TABLE
;

REDGFD:	CALLX	CNVDCN		;CONVERT TO FBN
	ADD	#2,R2		;-> THE NAME BLOCKETTE TABLE
	ADC	R3		; NOW, THE REAL FBN
	CALLRX	READ		;READ IT INTO FIBUF
				;  AND EXIT

.DSABL	LSB

FQFEND

.END
