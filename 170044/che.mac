	.INCLUDE /CMN:COMMON/
	.INCLUDE /CMN:KERNEL/
	.INCLUDE /CMN:FLDEF/
TITLE	CHE,<DISK CACHEING ENABLE/DISABLE>,0A,10-MAY-91,MHB/JTC/WJS/GPK/FEK/KPH/DWF

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR CHE

;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	JTC  10-Feb-81	Fix Cache limits task complete
;  002	WJS  29-Oct-82	New UUOENT for EMT Logger
;
;				[RSTS V9.0]
;  003	GPK  28-Mar-83	Multiple privileges
;  004	GPK  20-Sep-83	Add SYSMGR privilege
;  005	FEK  04-Apr-84	Make ..CAGE a variable
;  006	GPK  17-Apr-84	Privilege name changes
;  007	FEK  29-Oct-84	Return cache usage counters
;
;				[RSTS V9.2]
;  008  KPH  25-Jul-85	Job Control Region
;  009	DWF  10-Nov-86	Change FQFSRT to avoid conflict with CHECNT in KERNEL
;
;-


FQFSRT	DCC								;009

.SBTTL	ENABLE/DISABLE DISK CACHEING

;+
; UU.CHE - ENABLE/DISABLE DISK CACHEING.
;
;	R1 -> JOB DATA BLOCK
;	R4 -> FIRQB
;		 +4 =     0 => ENABLE DISK CACHE, CHANGE PARAMETERS
;		        200 => NO CHANGES, JUST RETURN CURRENT PARAMETERS
;		          1 => DISABLE DISK CACHE
;	THE ARGUMENTS BELOW ARE FOR ENABLE CALLS ONLY.  0 => NO CHANGE.
;		 +5 = CACHE CLUSTER SIZE (1, 2, 4, OR 8)
;		 +6 = LIMIT ON TOTAL NUMBER EXTENDED CACHE NODES
;		+10 = LIMIT ON EXTENDED DIRECTORY NODES
;		+12 = LIMIT ON EXTENDED DATA NODES
;		+14 = ENABLE/DISABLE DATA CACHEING FLAG
;		          0 => NO CHANGE
;		        200 => DISABLE
;		          1 => ENABLE CACHEING BASED ON OPEN MODE
;		        100 => ENABLE CACHEING FOR ALL DATA
;		+15 = ENABLE/DISABLE USE OF MONITOR BUFFER POOL
;		          0 => NO CHANGE
;		        200 => DISABLE USE
;		          1 => ENABLE USE
;		+16 = Chache replacement time 0= nochange
;
;	IN FIRQB ON RETURN
;		 +4    =  0 => CACHE IS OFF, DATA CACHEING NOT PRESENT
;			  1 => CACHE IS ON,  DATA CACHEING NOT PRESENT
;			200 => CACHE IS OFF, DATA CACHEING PRESENT
;			201 => CACHE IS ON,  DATA CACHEING PRESENT
;		+5-+17 = CURRENT SETTINGS (AS ABOVE)
;		+20    = count of monitor pool buffers
;		+22    = count of XBUF pool buffers
;		+24    = count of directory buffers (if data caching)
;		+26    = count of Data buffers (if data caching)
;		+30    = count of invalid tags (if data caching)
;-

	UUOENT	CHE,,SYNC,LOGABL	;ENABLE/DISABLE DISK CACHEING

	MOV	@#CHECTL+CH$NXT,R0 ;CHECK TO SEE IF ANY CACHER IS THERE
	BIT	R0,#1		;ANYTHING THERE?
	BNE	10$		;NOPE, WE'LL ONLY ALLOW A DISABLE CACHE
	MOVB	@#CHECTL+CH$DAT,R0 ;YEP, GET 177600=>DATA CACHER ELSE 0
10$:	CMP	(R4)+,(R4)+	;POINT TO ENABLE/DISABLE/INQUIRE FLAG @ +4
	MOVB	(R4),R2		; AND GET IT
	CMP	R2,#177600	;SIMPLY RETURN DATA?
	BEQ	80$		;YES, GO DO IT
	MOV	R0,-(SP)	;Save some regs				;006
	MOV	R5,-(SP)						;006
	MOVB	FQJOB-4(R4),R0	;Get caller's job number		;006
	CALLX	CHKPRV,R4						;006
	 .BPRIV	TUNE		;Allowed to tune?			;006
	BCS	40$		;No, error				;006
	MOV	(SP)+,R5	;Restore regs				;006
	MOV	(SP)+,R0						;006
	MOV	#MAXUNT,R1	;START AT LAST UNIT
20$:	CALLX	CHEZAP		;ZAP CHAIN FOR THIS UNIT
	DEC	R1		;MORE?
	BPL	20$		;YES, LOOP
	CLR	R2		;GUESS AT CACHE DISABLE
	TSTB	(R4)		;GOOD GUESS?
	BNE	70$		;YES
	TST	R0		;NO, IS DISK CACHEING PRESENT?
	BLE	50$		;YEP, IT'S THERE
30$:	ERROR	ERRERR		;NOPE, SAY IT'S MISSING...

40$:	ERROR	PRVIOL		;NON-PRIV'D CAN'T ENABLE/DISABLE

50$:	BPL	60$		;IT IS NOT THE DATA CACHER
	CMP	@#CHECTL+CH$NXT,#CHECTL+CH$PRV ;ANY NODES NOW IS USE?
	BNE	60$		;O.K. TO ENABLE IF SO
	TST	@#CHECTL+CH$TAG	;NO NODES, ANY TAGS AVAILABLE?
	BNE	60$		;O.K. TO ENABLE IF TRUE
	ERROR	NOROOM		;ELSE ERROR...

60$:	MOV	#400,R2		;SAY CACHE ENABLE
70$:	MOV	R2,@#CHECTL+CH$CTL ;SET THE ENABLE/DISABLE FLAG
	MOV	FQSIZ-FQFIL(R4),R3 ;GET THE CACHE AGE VALUE		;005
	BEQ	80$		;NO CHANGE				;005
	MOV	R3,@#..CAGE	;SET IT.				;005

GLOBAL	<CHECTL,MAXUNT,..CAGE>

80$:	MOVB	@#CHECTL+CH$CTL+1,(R4) ;RETURN CURRENT SETTING (0=>OFF; 1=>ON)
	TST	R0		;DO WE HAVE A CACHER?
	BGT	230$		;NOPE
	BISB	R0,(R4)+	;YEP, SAY DATA CACHER IS IT'S THERE
	CMP	R2,#400		;A CACHE ENABLE CALL?
	BNE	200$		;NO, SO NO PARAMETER CHANGES
	MOVB	(R4)+,R3	;CHANGE CACHE CLUSTER SIZE?
	BEQ	120$		;NO
	MOV	#1,R1		;YES, SET CACHE CLUSTER SIZE TO ONE INITIALLY
	CLR	R2		;SET DIVIDE SHIFT TO ZERO INITIALLY
90$:	ASR	R3		;DID WE FIND THE CORRECT SIZE?
	BCS	100$		;YES
	ASL	R1		;NO, DOUBLE THE CLUSTER SIZE
	DEC	R2		; AND FORM NEW DIVIDE SHIFT AMOUNT
	CMP	R1,#8.		;UP TO THE LIMIT?
	BLO	90$		;NOT YET, LOOP...
100$:	CMP	R1,@#CHECTL+CH$BSZ ;CHANGING TO CURRENT SIZE?
	BNE	110$		;NOPE, SO ALWAYS TRY IT
	TST	R0		;YEP, WHAT KIND OF CACHER?
	BPL	120$		;NON-DATA CACHER NEED NOT BE CALLED...
110$:	CALLX	CHEUUO		;GO OFF AND CHANGE THE CACHE CLUSTER SIZE
120$:	MOV	(R4)+,R1	;CHANGE TOTAL EXTENDED LIMIT?
	BEQ	130$		;NO
	CMP	R1,@#CHECTL+CH$LIM ;YES, SEE IF WE'RE LOWERING IT
	MOV	R1,@#CHECTL+CH$LIM ;RECORD NEW LIMIT (C-BIT UNCHANGED BY MOV)
	BHIS	130$		;NOT LOWERING IT, WE'RE OK (BHIS = BCC)
	TST	R0		;LOWERING IT, WHAT KIND OF CACHER?
	BPL	130$		;NON-DATA CACHER NEED NOT BE CALLED...
	CLR	R1		;TELL DATA CACHER NO CLUSTER SIZE CHANGE,
	CALLX	CHEUUO		; BUT GIVE BACK THE XBUF IT OWNS
130$:	MOV	(R4)+,R1	;CHANGE EXTENDED DIRECTORY LIMIT?
	BEQ	140$		;NO
	MOV	R1,@#CHECTL+CH$FLM ;YES, SO CHANGE IT
140$:	MOV	(R4)+,R1	;CHANGE EXTENDED DATA LIMIT?
	BEQ	150$		;NO
	TST	R0		;NOPE, WHAT KIND OF CACHER?
	BPL	30$		;NON-DATA, YOU CAN'T DO THAT...
	MOV	R1,@#CHECTL+CH$DLM ;SET EXTENDED DATA LIMIT
150$:	MOVB	(R4)+,R1	;CHANGE DATA CACHEING MODE?
	BEQ	180$		;NO
	ASLB	R1		;YES, MAKE INTO FLAG FORM
	BEQ	170$		;DISABLE ALL DATA (200*2 = 0)
	SXT	R1		;SET -1 IF 100 (100*2 < 0); 0 IF 1 (1*2 > 0)
	BMI	160$		;ENABLE ALL DATA
	INC	R1		;ENABLE OPEN MODE
160$:	TST	R0		;WHAT KIND OF CACHER?
	BPL	30$		;NON-DATA, YOU CAN'T DO IT...
170$:	MOVB	R1,@#CHECTL+CH$MOD ;SET DATA CACHEING MODE

GLOBAL	<CHECTL>

180$:	MOVB	(R4),R1		;CHANGE MONITOR BUFFER POOL USAGE?
	BEQ	190$		;NO
	CLR	@#CHECTL+CH$USM	;YES, GUESS AT NO USAGE
	CMP	R1,#177600	;GOOD GUESS?
	BEQ	190$		;YEP, IT IS DISABLE
	TST	R0		;NOPE, WHAT KIND OF CACHER?
	BMI	30$		;DATA, YOU CAN'T DO THAT...
	COM	@#CHECTL+CH$USM	;NON-DATA, ENABLE MONITOR POOL USAGE
190$:	ADD	#5-15,R4	;CORRECT THE FIRQB POINTER
200$:	MOVB	@#CHECTL+CH$BSZ,(R4)+ ;RETURN CACHE CLUSTER SIZE IN BLOCKS
	MOV	@#CHECTL+CH$LIM,(R4)+ ;RETURN TOTAL EXTENDED LIMIT
	MOV	@#CHECTL+CH$FLM,(R4)+ ;RETURN EXTENDED DIRECTORY LIMIT
	MOV	@#CHECTL+CH$DLM,(R4)+ ;RETURN EXTENDED DATA LIMIT
	MOVB	#200,(R4)	;GUESS AT NO DATA CACHEING
	TSTB	@#CHECTL+CH$MOD	;GOOD GUESS?
	BEQ	220$		;YES, RETURN THE 200
	BMI	210$		;NO, CACHEING ALL DATA, GO RETURN A 100
	MOVB	#1*2,(R4)	;NO, OPEN MODE CACHEING, SET TO RETURN A 1
210$:	;CLC			;C=0 FROM THE 'TSTB' ABOVE
	RORB	(R4)		;FORM THE CORRECT RETURN VALUE
220$:	INC	R4		;SKIP TO THE NEXT LOCATION
	MOVB	#200,(R4)+	;GUESS AT NO MONITOR BUFFER POOL USAGE
	TSTB	@#CHECTL+CH$USM	;GOOD GUESS?
	BEQ	225$		;YES, RETURN THE 200
	MOVB	#1,-1(R4)	;NO, USING MONITOR POOL, RETURN A 1
225$:	MOV	@#..CAGE,(R4)+	;RETURN THE CACHE AGE			;005
	MOV	#CHENUE-2,R1	;GET ADDRESS OF COUNTERS		;007
	MOV	(R1)+,(R4)+	;RETURN THE MONITOR POOL USAGE		;007
	MOV	(R1)+,(R4)+	;RETURN EXTEND POOL USAGE		;007
	MOV	(R1)+,(R4)+	;RETURN # DIRECTORY TAGS (IF DATA)	;007
	MOV	(R1)+,(R4)+	;RETURN # DATA TAGS (IF DATA GENNED)	;007
	MOV	(R1)+,(R4)+	;RETURN # INVALID TAGS (IF DATA GENNED)	;007
230$:	CLRB	(R4)+		;CLEAR WHOLE FIRQB
	BIT	R4,#40-1	;DONE?
	BNE	230$		;NOT YET...
	RETURN			;ELSE EXIT

GLOBAL	<CHECTL,..CAGE,CHENUE>

;+
; UU.WCS - WCS CONTROL.
;
;	R1 -> JOB DATA BLOCK
;	R4 -> FIRQB
;		+4  =  0 => READ WCS CONTROL & C(WHAMI)	[NON-PRIVILEGED]
;		       2 => WRITE WCS CONTROL & C(WHAMI) [PRIVILEGED]
;		       4 => READ FROM WCS ARRAY		[PRIVILEGED]
;		       6 => WRITE TO WCS ARRAY		[PRIVILEGED]
;
;	FOR CODE = 0
;
;	    RETURNED:
;		+12 =  C(WCS CONTROL)
;		+14 =  0 FOR NO ERROR; ELSE ERROR CODE
;		+16 =  C(WHAMI)
;		+20 =  0 FOR NO ERROR; ELSE ERROR CODE
;
;	FOR CODE = 2
;		+6  =  NEW VALUE FOR WCS CONTROL
;		+10 =  NEW VALUE FOR C(WHAMI)
;
;	    RETURNED:
;		+12 =  NEW C(WCS CONTROL)
;		+14 =  0 FOR NO ERROR; ELSE ERROR CODE
;		+16 =  NEW C(WHAMI)
;		+20 =  0 FOR NO ERROR; ELSE ERROR CODE
;
;	FOR CODE = 4
;		+6  =  WCS ARRAY "ADDRESS"
;
;	    RETURNED:
;		+10 =  C(WCS ARRAY)
;		+12 =  C(WCS CONTROL)
;		+14 =  0 FOR NO ERROR; ELSE ERROR CODE
;		+16 =  C(WHAMI)
;		+20 =  0 FOR NO ERROR; ELSE ERROR CODE
;
;	FOR CODE = 6
;		+6  =  WCS ARRAY "ADDRESS"
;		+10 =  NEW WCS ARRAY 16-BIT WORD VALUE
;
;	    RETURNED:
;		+10 =  NEW C(WCS ARRAY)
;		+12 =  C(WCS CONTROL)
;		+14 =  0 FOR NO ERROR; ELSE ERROR CODE
;		+16 =  C(WHAMI)
;		+20 =  0 FOR NO ERROR; ELSE ERROR CODE
;-

.EQUATE	UU.WCS,	-5.	;RE-USE UNUSED BASIC-PLUS "SEND" SLOT...

.DSECT	177540		;WCS CONTROL REGISTERS

WCSCTL:	.BLKW		;WCS CONTROL
WCSADR:	.BLKW		;WCS ARRAY "ADDRESS"
WCSDAT:	.BLKW		;WCS ARRAY 16-BIT DATA WORD

UNORG

	UUOENT	WCS,,SYNC,LOGABL	;WCS CONTROL

	MOV	R0,R5		;Place the job # * 2 in a safe place	;008
	CMP	(R4)+,(R4)+	;INDEX TO FUNCTION CODE (FIRQB +4)
	CALL	50$		;READ/VERIFY 'WHAMI' AND WCS CONTROL
	BNE	40$		;;;WHOOPS, AN ERROR
	MOV	(R4)+,R1	;;;GET FUNCTION CODE
	BIC	#^C<6>,R1	;;; AND TRIM IT TO 0, 2, 4, OR 6
	BEQ	40$		;;;0, JUST READ, SO EXIT
	MOV	R5,R0		;;;Get job # * 2 back			;008
	CALLX	CHKPRV,R4	;;;Check to see if the user has		;008
	 .BPRIV	SYSMOD		;;; SYSMOD privilege			;008
	BCS	20$		;;;NOPE, SO AN ERROR			;008
	CMP	R1,#4		;;;YEP, CHECK THE FUNCTION CODE
	BLO	30$		;;;2, WRITE NOW, GO DO IT
	BEQ	10$		;;;4, READ WCS ARRAY, GO DO IT
	;BHI			;;;6, WRITE WCS ARRAY
	MOV	#000020,@#WCSCTL ;;;TURN OFF PARITY CHECKING FOR A WHILE...
	MOV	(R4)+,@#WCSADR	;;;SET THE WCS ARRAY "ADDRESS" FROM +6
	MOV	(R4),@#WCSDAT	;;; THEN WRITE THE WCS 16-BIT WORD FROM +10
	TST	-(R4)		;;;RE-INDEX TO +6 AGAIN
10$:	MOV	(R4)+,@#WCSADR	;;;SET THE WCS ARRAY "ADDRESS" FROM +6
	MOV	@#WCSDAT,(R4)	;;; THEN READ THE WCS 16-BIT WORD FROM +10
	MOV	12-10(R4),@#WCSCTL ;;;RESTORE CORRECT WCS CONTROL VALUE
	BR	40$		;;;GO EXIT

20$:	ERROR	PRVIOL		;;;NON-PRIVILEGED ERROR

30$:	MOV	(R4)+,@#WCSCTL	;;;WRITE WCS CONTROL FROM +6
	MOV	(R4),R0		;;;GET NEW C(WHAMI) FROM +10
	CMP	-(R4),-(R4)	;;;RE-INDEX TO +4 AGAIN
	.WORD	076600,	222	;;;NOW WRITE C(WHAMI)
	CALL	50$		;;;RE-READ AGAIN FOR ANSWERS
40$:	SPLC	3		;;;BACK TO LEVEL 3
	RETURN			;EXIT

50$:	MOV	#WCSCTL,R1	;FORM POINTER TO WCS CONTROL REGISTER
	MOV	#PR7&4340,@#PS	;;;NO INTERRUPTS & PREVIOUS=KERNEL
	CALLX	DPEEKR		;;;TRY TO GET C(WCS CONTROL)
	MOV	R2,12-4(R4)	;;;SAVE C(WCS CONTROL)
	MOV	R0,14-4(R4)	;;; AND ANY ERROR INDICATION
	MOV	@#10,R1		;;;SAVE CURRENT C(TRAP-TO-10) VECTOR
	CALL	60$		;;;GET A NEW CONTENTS IN A PIC WAY
	CMP	(SP)+,(SP)+	;;;POP THE PC/PS PUSHED BY THE TRAP-TO-10
	SETERR	B.10,20-4(R4),WORD ;;;INDICATE THE ERROR
	BR	70$		;;;GO EXIT

60$:	MOV	(SP)+,@#10	;;;SET NEW TRAP-TO-10 VECTOR
	CLR	20-4(R4)	;;;GUESS AT NO ERROR INDICATION
	MOV	#-1,R0		;;;PUT GARBAGE INTO R0 INITIALLY
	.WORD	076600,	022	;;;TRY TO READ C(WHAMI)
70$:	MOV	R0,16-4(R4)	;;;GOT IT, SO SAVE IT
	MOV	R1,@#10		;;;RESTORE C(TRAP-TO-10) VECTOR
	MOV	14-4(R4),R1	;;;GET ANY ERROR FROM READING WCS CONTROL
	BIS	20-4(R4),R1	;;; AND .OR. IN ANY READING C(WHAMI) ERROR
	RETURN			;;;EXIT WITH Z=0 IF ANY ERROR(S)

FQFEND

.END

