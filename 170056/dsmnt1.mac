TITLE	DSMNT1,<DIALOGUE ROUTINES>,0A,10-MAY-91,JDB/VAM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	Edit history for DSMNT1

;+
;
;  000	GPK  10-Aug-82	Changes for Init bootstrap work
;  002	JDB   7-OCT-82	CHANGES FOR NEW FILE STRUCTURE			;JDB002
;  003	JDB  15-MAY-85	CHANGES FOR TMSCP				;JDB003
;  004  VAM  07-Jul-85	Add BOOLAB for new-format boot label		;VAM004
;  005  VAM  12-Jul-85	Created DSMNT1 and DSMNT2
;  006  VAM  15-Jul-85	Fix online bootstrap transfer address bug
;
;-


.SBTTL	DIALOGUE MOUNT TEXT

	I.MESS
	.ENABL	LC
OUTPID:	.ASCII	"Output "
PIDMSG:	.ASCIZ	"Pack ID is "
SAVINI:	.ASCIZ	"INIDEV"
BADMAG:	.ASCIZ	"Bad block on magtape - can't continue"<200>
NOMIX:	.ASCIZ	"Can't mix device types in SAVE Set"<200>
	.EVEN
	UNORG

	I.DATA
	.EVEN

MLABEL:	.RAD50	"MGBOOTSYS"	;Our pre-built extended DOS label.	;004
	.BYTE	1,0		;PPN of [0,1].				;004
	.BYTE	155.		;Protection code of <155>.		;004
	.BYTE	0		;This byte must be zero.		;004
	.WORD	0		;This is filled in with internal date.	;004
	.WORD	0		;We write this word as zero.		;004
MLBEND:				;This word marks the end.		;004

	.EVEN
NUMDCN:	.BLKW0			;# OF DCN'S OCCUPIED BY INIT
	UNORG


.SBTTL	CHKOUT - CHECK AN OUTPUT VOLUME FOR SAVE

;+
; CHKOUT - CHECK AN OUTPUT VOLUME FOR SAVE OPERATION
;
;	CALL: 	CALL	CHKOUT
;
;	RETURN:	C=0 - EVERYTHING OK
;		C=1 - SOME CHECK FAILED
;-

	.ENABL	LSB

CHKOUT:	REGSCR			;SAVE THEM REGISTERS
	MOV	#SSVOL,R0	;POINT TO SAVE SET DATA
	TSTB	SSSEQ(R0)	;THIS THE FIRST SAVE SET VOLUME ?
	BEQ	10$		;YES - SKIP HANDLER INDEX CHECK
	CMPB	MAGTAP,SSHIDX(R0) ;THIS VOLUME HAVE CORRECT HANDLER INDEX ?
	BNE	60$		;NO - ERROR
10$:	TSTB	MAGTAP		;THIS MAGTAPE ?
	BNE	40$		;YES - SKIP DISK BLOCK CHECK
	CLR	R3		;GET FBN'S 0 THRU DCS+15.
	CLR	R2		;BEGIN WITH # 0
	MOVB	M.CHN,R1	;CHANNEL NUMBER
	CALL	SETIO		;SET UP DSQ
	MOV	DCS,R0		;GET DCS
	ADD	#16.,R0
	MOV	#SATBUF+2000,BUFPTR ;POINT TO SATBUF (PAST SS LABEL) FOR I/O
	MOV	#512.,R1	;WANT TWO BLOCKS ON FIRST READ
20$:	CALL	RDSKIO,R5	;READ BLOCK	
	  BR	70$		;BAD BLOCK ERROR
	  MOV	#256.,R1	;NEW WORD COUNT (ONE BLOCK)
	TST	R2		;ON FBN 0 ?
	BNE	30$		;NO
	ASL	R1		;PUT TWO BLOCKS ON FIRST WRITE
30$:	CALL	WDSKIO,R5	;WRITE BLOCK
	  BR	70$		;BAD BLOCK ERROR
	  MOV	#256.,R1	;ONE BLOCK
	INC	R2		;NEXT FB
	CMP	R0,R2
	BLO	20$		;GET ALL DCS+16. BLOCKS
40$:	TST	(PC)+		;OK THIS WAY
50$:	SEC			;FAILURE
	RETURN

60$:	MOV	#NOMIX,ERRADR	;%%% CAN'T MIX DEVICE TYPES IN SAVE SET
	BR	50$

70$:	CALL	JPERC
	MESSAG	<"Bad block in first ">
	CALLX	DECZER		;PRINT NUMBER
	MESSAG	<" blocks of output disk"<200>>
	BR	50$

GLOBAL	<DCS,SSVOL,SATBUF>
.DSABL	LSB

.SBTTL	INIDEV - INITIALIZE AN OUTPUT VOLUME

;+
; INIDEV - INITIALIZE A VOLUME:
;	   IF IT'S TO BE A SAVE VOLUME:
;		- IF THE VOLUME IS A MAGTAPE:
;			- BOOT BLOCK
;			- PRIME LABEL BLOCK
;			- EOF
;			- INIT IMAGE
;			- EOF
;			- SAVE LABEL
;			- EOF
;		- IF THE VOLUME IS A DISK:
;			- BOOT BLOCK
;			- PRIME LABEL BLOCK
;			- (SPACE FOR BAD BLOCKS)
;			- INIT IMAGE
;			- SAVE LABEL
;
;	   IF IT'S TO BE A RSTS DISK:
;		- PUT A SKELETON BOOT BLOCK (WITHOUT HOOKED FILE DCN'S)
;
;	CALL:	THE FOLLOWING TABLES SET UP:
;			- MNTTBL & MNTTBL+2
;			- SSVOL
;			- ORGDSK
;
;		CALL	INIDEV
;
;	RETURN:	C=0 - INITIALIZATION SUCCESSFUL
;		      CURFBN CONTAINS THE NEXT SAVE CLUSTER TO USE
;		C=1 - INITIALIZATION UNSUCCESSFUL
;		      THE CURRENT OUTPUT VOLUME CANNOT BE USED
;-

.ENABL	LSB
.ENABL	LC

INIDEV:	REGSCR			;SAVE THE REGISTERS
	MOV	RTNNAM,-(SP)	;SAVE CALLING ROUTINE'S NAME
	MOV	#SAVINI,RTNNAM	;INSTALL THIS ROUTINE'S NAME
10$:	CLRB	HIGHBF		;WE WILL BE DOING I/O TO/FROM LOW MEMORY
	CALL	SELEC2		;SELECT OUTPUT DEVICE
	CALL	GETBOO		;GET THE BOOT BLOCK IN SATBUF+0
	TST	SATBUF+4	;Did we find a bootstrap for this device?
	BNE	15$		;Yes
	CALL	JPERC		; "%%%"
	MESSAG	<"This output volume is not bootable"<200>>
15$:	CALL	SELEC2		;SELECT OUTPUT DEVICE AGAIN
	BIT	#OPSV,OPFLG	;DOING A SAVE ? (VOLUME WILL BE SAVE VOL.)
	BNE	20$		;YES - GO INITIALIZE IT
	CALL	RSTBOO		;NO - WRITE BOOT BLOCK TO RSTS DISK
	BR	80$

20$:	MOVB	SSVOL+SSHIDX,MAGTAP	;REMEMBER IF WE'RE MAGTAPE
	CMPB	#1,SSVOL+SSSEQ	;FIRST SAVE VOLUME ?
	BNE	30$		;NO - DON'T CHANGE DUMMY BOOT
	SUB	#16,SATBUF+BUFBEG+<B.XFER-B.BOOT> ;SAVE BOOT ENTRY POINT
30$:	MOV	#17.,CURFBN	;WE WILL ATTEMPT TO WRITE THE INIT IMAGE
	CLR	CURFBN+2	; TO FBN 17. IF DISK
	TSTB	SSVOL+SSHIDX	;SAVE VOLUME MAGTAPE ?
	BEQ	40$		;NO
	CALL	MAGBOO		;WRITE OUT MAGTAPE BOOT/PRIME LABEL CLUSTER
	BCS	90$		;FAILURE TO WRITE IT
40$:	CALL	WRINIT		;WRITE OUT INIT IMAGE
	BCS	90$		;FAILURE
	TSTB	SSVOL+SSHIDX	;SAVE VOLUME MAGTAPE ?
	BNE	50$		;YES - SKIP THIS
	CALL	BOODCN		;SET UP INIT DCN'S IN BOOT AND INIT
	BCS	70$		;FATAL ERROR
50$:	CALL	WRSAVL		;WRITE SAVE LABEL
	BCS	70$		;FAILURE
	TSTB	SSVOL+SSHIDX	;SAVE VOLUME MAGTAPE ?
	BNE	60$		;YES - WE'RE DONE
	CALL	DSKBOO		;WRITE OUT DISK BOOT/PRIME LABEL CLUSTER
	BCS	70$		;FAILURE
60$:	MOV	MNTTBL+2,R4	;POINT TO SAVE VOLUME MOUNT TABLE
	MOV	#SSVOL,R3	;POINT TO SSVOL
	MOV	SSNAM(R3),MNTPID(R4)	;GET THE NEW SAVE SET NAME
	MOV	SSNAM+2(R3),MNTPID+2(R4)
	MOV	SSDCR(R3),MNTDCR(R4)	;THE NEW CREATION DATE
	MOV	SSEXP(R3),MNTEXP(R4)	;THE NEW EXPIRATION DATE
	MOVB	#FMTSAV,MNTFMT(R4)	;CHRISTENED A SAVE VOLUME
	TST	(PC)+
70$:	SEC
80$:	MOV	(SP)+,RTNNAM	;RESTORE CALLING ROUTINE'S NAME
	RETURN

90$:	CMP	#NOREC,ABTADR	;ARE WE ABORTING DUE TO A NON-RECOVERABLE
				; MAGTAPE I/O ERROR ?
	BNE	70$		;NO - RESUME DYING
	CLR	ABTADR		;GET RID OF ERROR
	BR	10$		;TRY IT AGAIN

.DSABL	LSB
GLOBAL	<RTNNAM,HIGHBF,OPFLG,SSVOL,SATBUF,CURFBN,MNTTBL>

.SBTTL	MAGBOO - WRITE OUT MAGTAPE BOOT/PRIME LABEL BLOCK

;+
; MAGBOO - WRITE OUT THE MAGTAPE BOOT/PRIME LABEL BLOCK
;
;	CALL:	CALL	MAGBOO
;
;	RETURN:	C=0 - BOOT/PRIME LABEL CLUSTER HAS BEEN WRITTEN
;		C=1 - FAILED TO DO WRITE DUE TO USER ABORT OR BAD BLOCK
;-

.ENABL	LSB

MAGBOO:	CALL	REWIND		;REWIND THE TAPE
	CALL	BOOLAB		;Set up new format boot DOS label.	;004
	BCS	20$		;See if it really worked.		;004
	MOV	(PC),NOTAG	;Make sure we don't get tags.		;004
	CALL	40$		;And write it out.			;004
	BCS	20$
	CALL	SETPLB		;SET UP PRIME LABEL BLOCK (PLB)
	MOV	#8.,SATBUF+BUFBEG+PLBSLA ;SAVE LABEL RECORD NUMBER IS 8.
	MOV	#256.,R1 	;SIZE OF BOOT
	MOV	#SATBUF+4,BUFPTR	;POINT TO BOOT
	CALL	40$		;WRITE BOOT BLOCK
	BCS	20$
	CALL	30$		;WRITE PRIME LABEL BLOCK
	BCS	20$
	MOV	#1,R5		;WRITE ONE EOF
	CALL	WRTEOF		;DO IT
	MOV	#8.,CURFBN	;SAVE LABEL RECNO IS 8.
;	BCS	20$		;CARRY IS SET OR CLEARED IN WRTEOF
;	CLC
20$:	MOV	#0,NOTAG	;CLEAR NOTAG W/O AFFECTING CARRY
	RETURN

30$:	MOV	#SATBUF+1004,BUFPTR ;POINT TO DOS LABEL/PLB
40$:	CALL	MTIO,R5,WFUN	;WRITE TO TAPE
	  BR	50$		;UNRECOVERABLE I/O ERROR
	  BR	60$		;BAD BLOCK
	  BR	60$		;EOF
	  TST	(PC)+		;GOOD EXIT
50$:	SEC
	RETURN

60$:	MOV	#BADMAG,ABTADR	;%%% BAD BLOCK ON MAGTAPE - CAN'T CONTINUE
	BR	50$

.DSABL	LSB
GLOBAL	<SATBUF,CURFBN,SSVOL>

.SBTTL	WRSAVL - WRITE OUT SAVE LABEL

;+
; WRSAVL - WRITE OUT SAVE LABEL
;
;	CALL:	R0 = SAVE VOLUME INDEX
;		R1 = SAVE VOLUME UNIT #
;		CALL	WRSAVL
;
;	RETURN:	C=0 - IT WAS WRITTEN
;		C=1 - IT WASN'T WRITTEN
;-

.ENABL	LSB

WRSAVL:	MOV	#BUFBEG+SATBUF+PLBBEG,R2  ;POINT TO WHERE SAVE LABEL WILL GO
	MOV	#SSVOL,R3	;POINT TO SSVOL TABLE
	MOV	SSNAM(R3),(R2)+	;SAVE SET NAME (RAD50)
	MOV	SSNAM+2(R3),(R2)+
	MOV	SSDCR(R3),(R2)+	;DATE OF SS CREATION
	MOV	SSTCR(R3),(R2)+	;TIME OF SS CREATION
	MOV	SSEXP(R3),(R2)+	;DATE OF SS EXPIRATION
	MOVB	SSSEQ(R3),(R2)+	;SS SEQUENCE NUMBER
	TSTB	(R2)+		;BUMP UP UNUSED BYTE
	MOV	#ORGDSK,R4	;POINT TO ORIGINAL DISK TABLE
	MOV	#12.,R5		;PREPARE TO FILL IN
10$:	MOVB	(R4)+,(R2)+	;AS FOLLOWS
	SOB	R5,10$		;ORIGINAL DISK TYPE
				;ORIGINAL DISK INDEX
				;ORIGINAL DISK PCS
				;ORIGINAL DISK CREATION DATE
				;ORIGINAL DISK SIZE (PART 1)
				;ORIGINAL DISK SIZE (PART 2)
				;# ALLOCATED PC'S ON ORIGINAL DISK
	MOVB	#SAVLAB,RECTYP	;SAVE LABEL CODE (3)
20$:	MOV	#256.,I.DSQ+DSQCNT ;WE WILL TRANSFER ONE BLOCK
	MOV	CURFBN,TMPFBN	;SAVE CURFBN
	MOV	CURFBN+2,TMPFBN+2
	MOV	CBADO,TMPCBO	;SAVE CBADO
	CALL	SELEC2		;SET UP FOR I/O TO SAVE VOLUME
	MOV	#BUFBEG+SATBUF+PLBBEG,BUFPTR	;FROM SATBUF
	CALL	SAVIO,R5,WFUN	;WRITE SAVE LABEL
	  BR	40$		;UNRECOVERABLE I/O ERROR
	  BR	40$		;BAD BLOCK ERROR
	  BR	40$		;EOF ERROR - ASSUMING ONLY MAGTAPE
	  CALL	WRT1EF		;WRITE 1 EOF IF MAGTAPE
				;C-BIT SET OR CLEARED IN WRT1EF
30$:	RETURN

40$:	CALL	BBOUSV		;BAD BLOCK ON SAVE VOLUME
	BCS	30$		;CAN'T GO ON
	BR	20$		;CONTINUE

.DSABL	LSB
GLOBAL	<SATBUF,SSVOL,ORGDSK,I.DSQ,CURFBN,CBADO>

.SBTTL	WRTEOF - WRITE END-OF-FILE RECORDS

;+
; WRTEOF - WRITE # OF EOF'S SPECIFIED BY R5
; WRT1EF - WRITE 1 EOF (IF SAVE VOLUME IS MAGTAPE)
;
;	CALL:	R0 = MAGTAPE INDEX
;		R1 = MAGTAPE UNIT #
;		R5 = # OF EOF'S TO WRITE (IF WRTEOF)
;		CALL	WRTEOF OR CALL WRT1EF
;
;	RETURN:	C-BIT INDICATES SUCCESS OR FAILURE
;		ERROR IN IOERR
;		R5 = # EOF'S NOT WRITTEN
;-

.ENABL	LSB

WRT1EF:	TSTB	SSVOL+SSHIDX	;SAVE VOLUME MAGTAPE?
	BEQ	40$		;NO, (C-BIT IS CLEAR) BYPASS MOV BEFORE RETURN
	MOV	#1,R5		;JUST WRITING 1 EOF
WRTEOF:	REGSCR			;SAVE REGISTERS
	TST	R5		;ANYTHING TO DO ?
	BEQ	20$		;NO - GET OUT
10$:	CALL	MTSPC,R5,2.	;WRITE AN EOF
	BCS	50$		;ERROR ON WRITE
	SOB	R5,10$		;WRITE AS MANY AS REQUESTED
20$:	TST	(PC)+		;ALL IS WELL - POP OVER SEC
30$:	SEC			;FAILURE
	MOV	R5,TOS.R5(SP)	;R5 = # EOF'S NOT WRITTEN ON RETURN
40$:	RETURN

50$:	CMPB	#DATERR,IOERR	;ERROR BAD BLOCK ?
	BEQ	30$		;YES - EXIT WITH ERROR
	CMPB	#NOROOM,IOERR	;ERROR NOROOM ?
	BNE	60$		;NO - RETRY
	DEC	R5		;YES - WE REALLY WROTE AN EOF
	BR	30$		;EXIT WITH ERROR

60$:	CALL	RETRY		;CHECK FOR DEVICE HUNG
	BR	10$		;DO RETRY

GLOBAL	<IOERR,SSVOL>
.DSABL	LSB

.SBTTL	BOOLAB - Set up new format DOS boot label			;004+

;+
; BOOLAB - Set up new format DOS boot label
;
;	Call:
;		CALL	BOOLAB
;
;	Return:	It is done.
;		Extended DOS label is 2062. bytes long, and is written at
;		SATBUF+11000.  Location BUFPTR points to SATBUF+11000, and
;		R1 contains the correct word count.
;
;		R4 and R5 are random.
;-

.ENABL	LSB

BOOLAB:	MOV	R0,-(SP)	;Save R0.
	MOV	#SATBUF+11000,R5;R5 -> the piece of SATBUF we'll use.
	MOV	#MLABEL,R0	;R0 -> our pre-built extended DOS label
10$:	MOV	(R0)+,(R5)+	;Move stuff into the buffer.
	CMP	R0,#MLBEND	;Are we done yet?
	BNE	10$		;No, so keep going.
	MOV	STDATE,SATBUF+11000+12 ;Put creation date into label.
	SUB	#16,XFERAD	;Set transfer address for SAVRES vol.	;006
	CALLRX	BLDB1		;Go into SROOT and get the boots.

BOOLR1::TST	R0		;Did everything go OK??
	BEQ	20$		;Nope, so say error and leave.
	MOV	#<2062./2>,R1	;Word count goes into R1.
	MOV	#SATBUF+11000,BUFPTR	;Put address of buffer away.
	TST	(PC)+			;Clear C and skip next instruction...
20$:	SEC				;Otherwise, give an error!!
	MOV	(SP)+,R0	;Put R0 back (without disturbing C).
	RETURN			;And, go back.

.DSABL	LSB

GLOBAL	<SATBUF,STDATE,INITGO,XFERAD,BOOTWC>				;004-


.SBTTL	DOSLAB - SET UP DOS LABEL

;+
; DOSLAB - SET UP DOS LABEL
;
;	CALL:	R4 -> LABEL FILE NAME IN RAD50 (3 WORDS)
;		R5 -> WHERE THE LABEL GOES
;		CALL	DOSLAB
;
;	RETURN:	IT HAS BEEN DONE
;-

.ENABL	LSB

DOSLAB:	MOV	R5,-(SP)	;SAVE R5
	MOV	(R4)+,(R5)+	;GET FILE NAME WORD 1
	MOV	(R4)+,(R5)+	;WORD 2
	MOV	(R4)+,(R5)+	;WORD 3
	MOV	#1,(R5)+	;ACCOUNT [0,1]
	MOVB	#-1,(R5)+	;PROTECTION CODE (155)
	CLRB	(R5)+		;UNUSED BYTE
	MOV	STDATE,(R5)+	;CREATION DATE
	CLR	(R5)+		;UNUSED WORD
	MOV	#7,R1		;LABEL IS ONLY 7 WORDS LONG
	MOV	(SP)+,R5	;RESTORE R5
	RETURN

.DSABL	LSB
GLOBAL	<STDATE>


.SBTTL	DSKBOO - WRITE DISK BOOT/PRIME LABEL CLUSTER

;+
; DSKBOO - WRITE DISK BOOT/PRIME LABEL CLUSTER
;
;	CALL:	R0 = DISK INDEX
;		R1 = DISK UNIT #
;		CALL DSKBOO
;
;	RETURN:	C=0 - DID IT
;		C=1 - DIDN'T DO IT
;-

.ENABL	LSB

DSKBOO:	CALL	SETPLB		;SET UP MAJORITY OF PLB
	MOV	#BUFBEG+SATBUF,R0	;WHERE THE PLB IS
	MOV	TMPFBN,R2	;GET FBN WHERE WE TRIED TO PUT SAVE LABEL
	MOV	TMPFBN+2,R3
	CALL	CHKSBN		;GET THE ACTUAL FBN WHERE IT WAS PUT
	MOV	R2,PLBSLA(R0)	;ADDRESS OF
	MOV	R3,PLBSLA+2(R0)	; SAVE LABEL
	MOV	#2,PLBBBA(R0)	;ADDRESS OF BAD BLOCK FILE
	MOV	#4,PLBBBL(R0)	;LENGTH OF BAD BLOCK FILE(S)
	MOV	SATBUF+10000,R2	;GET FIRST DCN WHERE INIT IMAGE WAS PUT
	CALLX	CNVRIB		;CONVERT DCN TO FBN
	MOV	R2,PLBINA(R0)	;ADDRESS OF
	MOV	R3,PLBINA+2(R0)	; INIT IMAGE
	CLR	R2		;WE WANT TO WRITE TO FBN 0
	CLR	R3
	MOV	#BUFBEG+SATBUF,BUFPTR	;FROM SATBUF
	MOV	#PLBSIZ/2,R1	;SIZE OF BOOT AND PLB (IN WORDS)
	CALL	WDSKIO,R5	;WRITE THE BOOT BLOCK AND PLB
	  BR	40$		;BAD BLOCK ERROR
	  CMPB	#1,DCS		;SAVE VOLUME DCS = 1 ?
	BEQ	20$		;YES - FBN 1 HAS PLB, SO EXIT
	INC	R2		;WILL WRITE BLOCK OF ZEROES TO FBN 1
	MOV	#256.,R1	;CLEAR 256. WORDS IN SATBUF
	MOV	#BUFBEG+SATBUF,R0	;STARTING ADDRESS IN SATBUF
10$:	CLR	(R0)+		;CLEAR A WORD
	SOB	R1,10$		;CLEAR 'EM ALL
	MOV	#256.,R1	;A BLOCK
	CALL	WDSKIO,R5	;WRITE THE ZEROED BLOCK
	  BR	40$		;BAD BLOCK - FAIL
20$:	  CLC
30$:	RETURN

40$:	MOV	#NOWRTB,ABTADR	;%%% CAN'T WRITE BOOT BLOCK
	SEC
	BR	30$

.DSABL	LSB
GLOBAL	<SATBUF,CURFBN>

.SBTTL	SETPLB - SET UP PRIME LABEL BLOCK

;+
; SETPLB - SET UP ALL INFORMATION COMMON TO MAGTAPE AND DISK PRIME
;	   LABEL BLOCKS
;
;	CALL:	CALL	SETPLB
;
;	RETURN:	THE INFORMATION HAS BEEN SET UP
;-

.ENABL	LSB

SETPLB:	REGSCR			;SAVE REGISTERS
	MOV	#BUFBEG+SATBUF+PLBBEG,R0  ;POINT WHERE PLB WILL GO IN SATBUF
	MOV	#256.,R1	;PLB IS ONE BLOCK
10$:	CLR	(R0)+		;CLEAR A WORD
	SOB	R1,10$		;CLEAR THE WHOLE PLB
	MOV	#BUFBEG+SATBUF,R0	;POINT TO SATBUF
	MOV	NUMDCN,R1	;GET NUMBER OF DCN'S
	MUL	DCS,R1		;COMPUTE # OF BLOCKS
	MOV	R1,PLBINL(R0)	;LENGTH OF INIT IMAGE
	MOV	#1,PLBSLL(R0)	;LENGTH OF SAVE LABEL
	MOV	PKSTAT,PLBSTA(R0)	;ORIGINAL PACK STATUS WORD	;JDB002
	MOV	R0,R4		;GET ADDRESS OF DEC STANDARD LABEL
	ADD	#PLBDSL,R4	;DEC STD LABEL
	MOV	R0,-(SP)	;SAVE POINTER TO PLB
	MOV	SSVOL+SSNAM,R0	;GET 1ST WORD OF SAVE SET NAME
	CALLX	RADCNV		;PUT IT INTO PLB (DEC STANDARD PACKID)
	ADD	#3,R4		;SET UP FOR SECOND HALF
	MOV	SSVOL+SSNAM+2,R0;GET 2ND WORD OF SS NAME
	CALLX	RADCNV		;PUT IT INTO PLB
	MOV	(SP)+,R0	;RESTORE PLB POINTER
	ADD	#PLBDSO,R0	;POINT TO DEC STANDARD OWNER
	MOV	#"RS,(R0)+	;SET
	MOV	#"TS,(R0)+	;  UP
	MOV	#"E/,(R0)+	;   THE
	MOV	#"SA,(R0)+	;     DEC
	MOV	#"VR,(R0)+	;       STANDARD
	MOV	#"ES,(R0)+	;              OWNER
	MOV	#"SA,(R0)+	;SET UP THE
	MOV	#"VR,(R0)+	;         DEC STANDARD
	MOV	#"ES,(R0)+	;                    FORMAT
	MOV	#SYSVEL,(R0)+	;SET UP THE CURRENT VERSION
	MOV	#SYSVEE,(R0)+	; AND LEVEL
	MOV	#$$$VER,(R0)+	; AND EDIT LEVEL
	RETURN

.DSABL	LSB
GLOBAL	<SATBUF,DCS,SSVOL,PKSTAT>


