TITLE	OMNT,<SAV MOUNT FILE>,0A,10-MAY-91,AWR/NMC/JBL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY
.SBTTL	001  15-APR-81  AWR	V7.0 PATCH 1.1.12 INSTALLED
.SBTTL	002  19-JUN-85  JDB	Fixed looping on overflow DIR blocks	;JDB002

.SBTTL	OUTPUT MOUNT MACROS

.MACRO	STAR	M
.NLIST
	 CALL	STAR,R5
	  .WORD	M
.LIST
.ENDM	STAR

.SBTTL	MESSAGES

	I.MESS
	.ENABL	LC
BBLMSG:	.ASCIZ	"Unknown disk type in BBLOK"<200>
DEVINI:	.ASCIZ	"Disk must be DSKINTed"<200>
VONMSG:	.ASCIZ	"The volume on "
	.EVEN
	UNORG

.SBTTL	OUTMNT - MOUNT FOR OUTPUT

.ENABL	LSB

OUTMNT:	TSTB	MAGTAP		;THIS MAGTAPE ?
	BEQ	30$		;NO
	CALL	DENSET,R5	;SET MAGTAPE DENSITY
	  JMP	OUTEND		;COULDN'T READ TAPE - DON'T CHECK LABEL
	  BR	20$		;ERROR ON DENSITY SET
10$:	  JMP	SAVOUT		;MUST BE SAVE VOLUME
20$:	JMP	160$		;ERROR ON DENSITY SET

30$:	CALL	CHKRST		;THIS VOLUME RSTS ?
	  BCS	10$		;NOPE
	BIT	#OPSV,OPFLG	;THIS A SAVE OPERATION ?
	BEQ	40$		;NO
	CALL	CHKOUT		;MAKE OUTPUT VOLUME CHECKS
	BCS	20$		;ERROR
40$:	STAR	VONMSG		;'*** THE VOLUME ON'
	TYPDEV			;PRINT THE OUTPUT DEVICE
	MESSAG	<" is a RSTS disk">
	STAR	PIDMSG		;'*** Pack ID is'
	PRTIDC	R4		;PRINT THE PACK ID
	BIT	#SCR,SWTWRD	;/SCRATCH SPECIFIED ?
	BNE	50$		;YES - SKIP LABEL CHECK
	CALL	JSTAR		;'*** '
	MESSAG	<"Pack will be reinitialized"<200>>
	CALLX	YESNO,R5	;CONTINUE ANYWAY ?
	  .WORD	MNTANY
	  GENTXT
LOSDAT:	   .ASCII "*** This is your last chance to prevent the"<200>
	   .ASCII "*** loss of any data on the output volume"<200>
MNTANY:	   .ASCIZ "Mount it anyway <NO>? "
	  UNORG
	 BR	20$		;CTRL/Z - BACK TO PREVIOUS QUESTION
	 BR	20$		;LF - DEFAULT IS NO
	 BR	20$		;NO
50$:	 CALL	RSTBAD		;READ IN RSTS BAD BLOCK DCN'S
	BCS	150$		;ERROR ON READ
	CALL	CHBBO		;CHOOSE CORRECT OUTPUT BB FILE
				; R5 WILL POINT TO IT ON RETURN
	MOV	R1,-(SP)	;R1 = # OF BAD BLOCKS
	BEQ	120$		;IF NONE, ALL DONE
	MOV	#SATBUF,R0	;POINT TO WHERE THEY ARE
	BIT	#OPSV,OPFLG	;WILL DISK BE USED AS SAVE VOLUME ?
	BEQ	80$		;NO
60$:	MOV	(R0)+,R2	;GET DCN
	CALLX	CNVRIB		;CONVERT TO AN FBN
	MOV	R2,(R5)+	;MOVE IN FBN LSB
	MOV	R3,(R5)+	;MOVE IN FBN MSB
	CMP	#16.,DCS	;DCS = 16. ?
	BNE	70$		;NO
	ADD	#8.,R2		;THERE ARE TWO FBN'S PER DCN
	ADC	R3
	INC	(SP)		;ONE MORE BAD BLOCK IN LIST
	CMP	(SP),MAXBB	;TOO MANY ?
	BGT	140$		;YUP
	MOV	R2,(R5)+	;MOVE IN THE EXTRA
	MOV	R3,(R5)+
70$:	SOB	R1,60$		;DO FOR ALL DCN'S
	MOV	(SP),R1		;GET THE NUMBER OF BAD BLOCKS
	MOV	BADBO,R2	;GET ADDRESS OF OUTPUT BADB FILE
	MOV	R2,R0		;MAKE A COPY FOR SAVFBN
	CLR	R3
	CALL	SAVFBN		;MAKE FBN'S ALIGN ON SC BOUNDARY
	BR	120$		;ALL DONE

80$:	CLR	(SP)		;ZERO BB COUNT
	CLR	R3
	MOVB	ORGDSK+ORGPCS,R3;ORIGINAL DISK PCS
	MOV	R3,-(SP)	;SAVE IT
	CLR	R2		;FOR DIVIDE
	DIV	DCS,R2		;COMPUTE NEW CLURAT
	MOV	R2,CLURAT
	CLR	R2		;ANOTHER DIVIDE
	MOV	PCS,R3		;THIS ONE IS NPCS/OPCS
	DIV	(SP)+,R2	;DO IT
	BNE	90$		;RESULT NON-ZERO
	INC	R2		;LOOP AT LEAST ONCE
90$:	MOV	R2,-(SP)	;STACK RATIO
100$:	MOV	(R0)+,R2	;GET A DCN
	MOV	(SP),R4		;GET RATIO
	CALLX	RIB2CN		;CONVERT DCN TO PCN
110$:	MOV	R3,(R5)+	;PUT IN BADB FILE
	INC	2(SP)		;BAD BLOCK COUNT
	CMP	2(SP),MAXBB	;TOO MANY ?
	BGT	130$		;YUP
	INC	R3		;NEXT PCN
	SOB	R4,110$		;FOR ALL NEW PC'S IN OLD PC
	SOB	R1,100$		;DO FOR ALL DCN'S
	TST	(SP)+		;POP RATIO
120$:	MOV	(SP)+,R1	;;# OUTPUT BB'S FOR SORT ROUTINE
	CALL	BBSORT		;SORT 'EM (SETS UP R1 AND R5 PROPERLY)
	MOV	R1,NBADO	;;# OUTPUT BB'S
	MOV	R5,NEWOBB	;;ADDRESS OF NEW BB'S
	JMP	OUTEND		;GO FINISH UP

130$:	TST	(SP)+		;POP RATIO
140$:	MOV	(SP)+,R1	;GET THE COUNT
150$:	CALL	BBERR		;BAD BB ERROR - SET UP ERRADR
160$:	SEC			;INDICATE AN ERROR
	RETURN

GLOBAL	<CLURAT,NEWOBB,BADBO,ORGDSK,NBADO,OPFLG,SWTWRD,SATBUF,DCS>
GLOBAL	<MAXBB,PCS>
.DSABL	LSB

.SBTTL	SAVE VOLUME ON OUTPUT

.ENABL	LSB

SAVOUT:	CALL	CHKSAV		;IS THIS A SAVE VOLUME ?
	  BCC	10$		;YUP
	BISB	#FMTUND,MNTFMT(R4)	;FORMAT UNDEFINED
	TSTB	MAGTAP		;THIS MAGTAPE ?
	BNE	80$		;YUP - WRAP IT UP
	BIT	#ONLIN,MNTFLG	;ONLINE ?
	BNE	90$		;YES - ERROR - DISK NOT DSKINTED
	JMP	UNDOUT		;NO - GO HANDLE AN UNFORMATTED OUTPUT DISK

10$:	BIT	#OPSV,OPFLG	;THIS A SAVE OPERATION ?
	BEQ	50$		;NO
	TSTB	SSVOL+SSSEQ	;MOUNTING FIRST VOLUME ?
	BEQ	20$		;YES - DATE/TIME ALREADY CORRECT
	MOV	SSVOL+SSDCR,STDATE	;SETUP CORRECT DATE
	MOV	SSVOL+SSTCR,STTIME	;SETUP CORRECT TIME
20$:	CMP	STDATE,MNTDCR(R4)	;CREATION DATE SAME AS SAVE SET ?
	BNE	30$		;NO
	CMP	STTIME,MNTTCR(R4)	;CREATION TIME SAME AS SAVE SET ?
	BEQ	100$		;YES - ERROR - VOLUME PART OF SAVE SET
30$:	CALL	CHKOUT		;MAKE OUTPUT VOLUME CHECKS
	BCC	50$		;EVERYTHING OK
40$:	JMP	110$		;ERROR IN CHECK OUT
50$:	BIT	#SCR,SWTWRD	;/SCRATCH SPECIFIED ?
	BNE	60$		;YUP - WRAP IT UP
	STAR	VONMSG		;'*** THE VOLUME ON'
	TYPDEV			;PRINT THE DEVICE
	MESSAG	<" is SAVE Set ">
	PRTID	R4		;PRINT THE SAVE SET NAME & <CR>
	CALL	PRTSAV		;PRINT SAVE VOLUME INFO.
	CALLX	TYPECR		;NEW LINE
	CMP	MNTEXP(R4),I.DATE	;IS THE EXPIRATION DATE PASSED ?
	BLT	60$		;YES - EVERYTHING OK
	MESSAG	<"%%% Its expiration date has not yet passed"<200>>
	CALLX	YESNO,R5	;MOUNT IT ANYWAY ?
	  .WORD	MNTANY
	  .WORD	LOSDAT
	 BR	110$		;CTRL/Z - BACK TO PREVIOUS QUESTION
	 BR	110$		;LF - DEFAULT IS NO
	 BR	110$		;NO
60$:	TSTB	MAGTAP		;MAGTAPE ?
	BNE	80$		;YES - ALL DONE
	CALL	SAVBAD		;READ SAVE VOLUME BAD BLOCK FILE(S)
	BCS	BBERR		;ERROR ON READ OR TOO MANY BAD BLOCKS
	CALL	CHBBO		;CHOOSE CORRECT OUTPUT BB FILE
				; R5 WILL POINT TO IT ON RETURN
	MOV	R1,NBADO	;R1 = # OF BAD BLOCKS
	BEQ	80$		;IF NONE, ALL DONE
	MOV	#SATBUF,R0	;WHERE THE BAD BLOCKS ARE
	MOVB	ORGDSK+ORGPCS,PCS	;GET DESTINATION PCS
	MOV	#8.,R3		;WILL DIVIDE INTO 8.
	CLR	R2		;FOR DIVIDE
	DIV	PCS,R2		;R2 = 8./NPCS = 0 OR # NEW PC'S IN ONE OLD PC
	BNE	70$		;RESULT NON-ZERO - IT'S OK
	INC	R2		;MAKE R2 = 1
70$:	CALL	CNVLBN		;CONVERT OUR LBN APPROPRIATELY FOR DESTINATION
	BCS	BBERR		;TOO MANY BAD BLOCKS ON OUTPUT
80$:	JMP	OUTEND		;GO FINISH UP

90$:	MOV	#DEVINI,ERRADR	;%%% DISK MUST BE DSKINTED
	BR	110$

100$:	MOV	#WRGVOL,ERRADR	;%%% WRONG VOLUME
	BR	110$

BBERR:	MOV	#NORBAD,ERRADR	;%%% COULDN'T READ SAVE BAD BLOCK FILE
	CMP	R1,MAXBB	;TOO MANY BAD BLOCKS ?
	BLE	110$		;NO
TMBB:	MOV	#TMBBO,ERRADR	;%%% TOO MANY BAD BLOCKS ON OUTPUT
110$:	SEC
	RETURN

.DSABL	LSB
GLOBAL	<STDATE,STTIME,I.DATE,MNTFLG,OPFLG,SSVOL,SWTWRD>
GLOBAL	<NBADO,ORGDSK,SATBUF,PCS,MAXBB>

.SBTTL	UNFORMATTED DISK ON OUTPUT (OFFLINE ONLY)

.ENABL	LSB

UNDOUT:	MOVB	MNTIDX(R4),SYSNDX	;SET UP OUTPUT DISK INDEX
	MOVB	MNTUNT(R4),SYSUNT	;ITS UNIT #
	CLR	R0		;INDICATE DIALOGUE MOUNT UNTIL FURTHER NOTICE
	BIT	#DIALMT,MNTFLG	;IS THIS A DIALOGUE MOUNT ?
	BNE	10$		;YES - WE'RE OK
	INC	R0		;NO - INDICATE SAVE MOUNT
10$:	CALLRX	BBLOK		;GET THE FACTORY BAD BLOCKS
BBRET:	CMP	#5,R1		;RETURN POINT FOR BBLOK
				;R1 IS SET UP AS FOLLOWS:
				; = 5 -> NORMAL RETURN
				; = 4 -> NO BAD BLOCKS
				; = 3 -> UNKNOWN DISK TYPE
				; = 2 -> TOO MANY BAD BLOCKS
				; = 1 -> DRIVE NOT READY
				; = 0 -> DATA ERROR
	BNE	80$		;R1 <> 5 -> THERE IS AN ERROR
	MOV	#SATBUF+1000,R0	;THIS IS WHERE THE FACTORY BAD BLOCKS ARE
	CLR	R1		;R1 WILL BE THE BAD BLOCK COUNT
20$:	TST	(R0)+		;LSB ZERO ?
	BNE	30$		;NO - THIS IS ONE
	TST	(R0)+		;MSB ZERO ?
	BEQ	40$		;YES - END OF LIST
30$:	INC	R1		;NO - THIS IS ONE SO COUNT IT
	BR	20$		;LOOP FOR ANOTHER

40$:	CALL	CHBBO		;CHOOSE THE CORRECT OUTPUT BB FILE
				; R5 WILL POINT TO IT ON RETURN)
	TST	R1		;DID WE FIND ANY ?
	BEQ	OUTEND		;NO - GET OUT
	MOV	#SATBUF+1000,R0	;AGAIN, THIS IS WHERE THEY ARE
	CALL	W2SORT		;SORT THEM
	MOVB	ORGDSK+ORGPCS,PCS	;DESTINATION PCS
	MOV	#1,R2		;EACH LBN TRANSLATES TO ONE OUTPUT #
	CALL	CNVLBN		;CONVERT LBN APPROPRIATELY FOR OUTPUT
	BCS	BBERR		;TOO MANY BAD BLOCKS
	BR	OUTEND		;GO FINISH UP

80$:	DEC	R1
	BMI	BBERR		;BAD BLOCK ERROR (R1=0)
	DEC	R1
	BGE	90$
	MOV	#HNGDEV,IOERR	;DRIVE NOT READY ERROR (R1=1)
	CALL	RETFRE		;RETRY/RESET
	BR	10$

90$:	DEC	R1
	BMI	TMBB		;TOO MANY BAD BLOCKS (R1=2)
	DEC	R1
	BEQ	OUTEND		;DISK HAS NO BB'S (R1=4)
	MOV	#BBLMSG,ERRADR	;'UNKNOWN DISK TYPE IN BBLOK' (R1=3)
	SEC
	RETURN

.DSABL	LSB
GLOBAL	<MNTFLG,SYSNDX,SYSUNT,SATBUF,ORGDSK,IOERR>

.SBTTL	OUTEND - FINISH UP MOUNT FOR OUTPUT

.ENABL	LSB

OUTEND:	MOV	NEWOBB,CNBBO	;SETUP POINTER FOR NEW ENTRIES
	MOV	MNTTBL,R3	;POINT TO INPUT MOUNT TABLE
	BIT	#OPSV,OPFLG	;THIS A SAVE OPERATION ?
	BNE	10$		;YES
	CALL	ALLOC2		;CHECK FOR ENOUGH ROOM ON OUTPUT DISK
	BCS	80$		;USER DECIDED NOT TO USE THE DISK
	BIT	#PACKID,MNTFLG	;PACKID/SSN SPECIFIED ?
	BEQ	40$		;NO - GO GET INPUT VOL. PACKID
	BR	60$		;YES - GO GET IT

10$:	MOV	#SSVOL+SSSATL,R0;POINT TO SATT LENGTH IN SSVOL
	MOV	#4,R1		;CLEAR ONLY FOUR WORDS			;JDB002
				;(I.E. DON'T MUNG PUNY DIR BLK INDICATOR;JDB002
20$:	CLR	(R0)+		;CLEAR ONE
	SOB	R1,20$		;CLEAR 'EM ALL
	MOV	#SSVOL,R0	;POINT TO SSVOL TABLE AGAIN
	TSTB	SSSEQ(R0)	;THIS FIRST SAVE VOLUME ?
	BNE	60$		;NO
30$:	MOV	(R4),(R0)	;DEFAULT DEVICE TYPE
	MOVB	MNTIDX(R4),SSDIDX(R0)	;DEFAULT DEVICE INDEX
	MOV	STTIME,SSTCR(R0)	;TIME OF CREATION
	MOV	STDATE,SSDCR(R0)	;DATE OF CREATION
	MOV	#16.,SSSATL(R0)	;SATT.SYS LENGTH ALWAYS 16.
	MOVB	MAGTAP,SSHIDX(R0)	;DEVICE HANDLER INDEX
	BIT	#PACKID,MNTFLG	;PACKID SPECIFIED ?
	BNE	50$		;YES
	MOV	MNTPID(R3),SSNAM(R0)	;GET PACKID FROM INPUT VOLUME
	MOV	MNTPID+2(R3),SSNAM+2(R0)  ;TWO WORDS
40$:	MOV	MNTPID(R3),SPCPID	;GET PACKID FROM INPUT VOLUME
	MOV	MNTPID+2(R3),SPCPID+2
	BR	60$		;GET ON WITH EXIT

50$:	MOV	SPCPID,SSNAM(R0);SAVE SET NAME IS AS SPECIFIED
	MOV	SPCPID+2,SSNAM+2(R0)
60$:	TSTB	MAGTAP		;THIS A MAGTAPE VOLUME ?
	BEQ	70$		;NO
	MOV	SSVOL+SSDEN,R5	;GET SAVE SET DENSITY
	CMP	R5,MNTDEN(R4)	;SAME AS THAT CURRENTLY SET ?
	BEQ	70$		;YES
	MOV	SYSNDX,R0	;SYS INDEX
	MOV	SYSUNT,R1	; AND UNIT
	CALL	SETIT		;NO - SET SAVE SET DENSITY
	BCS	90$		;DENSITY SET ERROR
	MOV	R5,MNTDEN(R4)	;VOL IS NOW AT THE PROPER DENSITY
70$:	CALLX	GETTTY		;KICK CLOCK
	TST	(PC)+		;EVERYTHING OK
80$:	SEC
	RETURN

90$:	WARN	TAPWON		;'%%% TAPE WON'T RESPOND TO '
	MESSAG	<"density ">
	MOV	R5,R0
	CALLX	DECZER		;PRINT DENSITY
	CALLX	TYPECR		;PRINT <CR>
	BR	80$

GLOBAL	<SYSNDX,SYSUNT,NEWOBB,CNBBO,MNTTBL,OPFLG,MNTFLG,SSVOL,SPCPID>
.DSABL	LSB

.SBTTL	BBOUSV - BAD BLOCK ON OUTPUT SAVE VOLUME HANDLER

;+
; BBOUSV - BAD BLOCK ON OUTPUT SAVE VOLUME HANDLER
;
;	CALL:	CALL	BBOUSV
;
;	RETURN:	C=0 - BAD BLOCK HAS BEEN ENTERED INTO BAD BLOCK FILE
;		      CURFBN HAS BEEN UPDATED
;		C=1 - DEVICE WAS MAGTAPE OR TOO MANY BAD BLOCKS
;-

.ENABL	LSB

BBOUSV:	MOV	R4,-(SP)	;SAVE R4
	TSTB	MAGTAP		;SAVE VOLUME MAGTAPE ?
	BNE	20$		;YES -PRINT MSG AND EXIT
	INC	UNKBBO		;NO - ADD IN BAD BLOCK
	MOV	NBADO,R4	;THE OLD BAD BLOCKS
	ADD	UNKBBO,R4	; AND THE NEW ONES
	CMP	R4,MAXBB	;TOO MANY BAD BLOCKS ?
	BHI	30$		;YES
	MOV	CNBBO,R4	;GET SLOT TO PUT NEW BAD BLOCK
	MOV	CURFBN,(R4)+	;PUT IN BAD BLOCK
	MOV	CURFBN+2,(R4)+
	MOV	R4,CNBBO	;NEW FREE SLOT NUMBER
	ADD	#8.,CURFBN	;INCREMENT UP TO NEXT FBN
	ADC	CURFBN+2
	CMP	#4000, R3	;WERE < 8 BLOCKS LEFT TO TRANSFER?	;AWR001
	BHIS	5$		;YES, WE'RE DONE			;AWR001
	CMP	#BUFMID,IOADDR	;LAST I/O TO 2ND HALF OF BUFFER?	;AWR001
	BHIS	5$		;NO					;AWR001
	SUB	#4000,R3	;ADJUST: 8 FEWER BLOCKS TO TRANSFER	;AWR001
	ADD	#10000,BUFPTR	;POINT TO 2ND HALF OF BUFFER		;AWR001
5$:	MOV	R3,I.DSQ+DSQCNT	;UPDATE WORD COUNT FOR I/O		;AWR001
	TST	(PC)+
10$:	SEC
	MOV	(SP)+,R4	;RESTORE R4
	RETURN

20$:	WARN	BADMAG		;%%% BAD BLOCK ON MAGTAPE
	BR	10$

30$:	WARN	TMBBO		;%%% TOO MANY BAD BLOCKS ON OUTPUT
	BR	10$

.DSABL	LSB
GLOBAL	<NBADO,MAXBB,UNKBBO,CNBBO,CURFBN>

.SBTTL	CNVLBN - CONVERT LBN'S APPROPRIATELY FOR DESTINATION

;+
; CNVLBN - CONVERT LBN'S APPROPRIATELY FOR DESTINATION
;
;	CALL:	R2 = # OUTPUT PCN'S PER INPUT LBN
;		R0 = ADDRESS OF SOURCE TABLE
;		R5 = ADDRESS OF DESTINATION TABLE
;		CALL	CNVLBN
;
;	RETURN:	C=1 IF TOO MANY BAD BLOCKS
;		OTHERWISE -
;		NEWOBB = ADDRESS FOR NEW BB'S
;		NBADO  = # OF BAD BLOCKS
;		R1     = NBADO
;-

.ENABL	LSB

CNVLBN:	MOV	R4,-(SP)	;SAVE R4
	BIT	#OPSV,OPFLG	;DOING A SAVE ?
	BEQ	10$		;NO - OUTPUT WILL BE RSTS
	CALL	LBNFBN		;CONVERT LBN'S TO FBN'S
	BR	40$		;ALL DONE

10$:	MOV	R2,-(SP)	;SAVE RATIO
	MOV	R0,R5		;MAKE DESTINATION ADDRESS SAME AS SOURCE
	CALL	LBNFBN		;CONVERT LBN'S TO FBN'S
	CLR	-(SP)		;WHERE WE WILL ACCUMULATE BB COUNT
	MOV	BADBO,R5	;ADDRESS OF BAD BLOCK FILE
20$:	MOV	(R0)+,R2	;GET FBN LSB
	MOV	(R0)+,R3	;GET FBN MSB
	MOV	2(SP),R4	;GET RATIO
	CALLX	SEG2CN		;CONVERT FBN TO PCN
30$:	MOV	R2,(R5)+	;GET THE PCN
	INC	R2		;NEXT CONTIGUOUS PCN
	INC	(SP)		;ANOTHER BB
	CMP	(SP),MAXBB	;TOO MANY ?
	BGT	60$		;YUP
	SOB	R4,30$		;FOR ALL PCN'S PER LBN
	SOB	R1,20$		;FOR ALL LBN'S WE'VE GOT
	MOV	(SP)+,R1	;NEW BB COUNT
	TST	(SP)+		;POP RATIO
	CALL	BBSORT		;SORT 'EM
40$:	MOV	R5,NEWOBB	;WHERE NEW BB'S WILL GO
	MOV	R1,NBADO	;NUMBER OF BB'S
	CLC
50$:	MOV	(SP)+,R4	;RESTORE R4
	RETURN

60$:	MOV	(SP)+,R1	;GET # BB'S
	TST	(SP)+		;POP RATIO
	SEC			;AN ERROR
	BR	50$

.DSABL	LSB
GLOBAL	<OPFLG,BADBO,MAXBB,NEWOBB,NBADO>

.SBTTL	W2SORT - TWO WORD TABLE SORTER

;+
; W2SORT - SORT A TABLE OF TWO WORD ENTRIES USING A SIMPLE BUBBLE
;
;	CALL:	R0 = ADDRESS OF TABLE
;		R1 = # OF ENTRIES
;		CALL	W2SORT
;
;	RETURN:	ITS SORTED
;-

.ENABL	LSB

W2SORT:	REGSCR			;SAVE REGISTERS
	MOV	#-1,R5		;;FOR DUPLICATES
	MOV	R0,R3		;SAVE ADDRESS
10$:	DEC	R1		;NUMBER OF TIMES TO LOOP
	BLE	90$		; THERE IS NOTHING TO DO
	INC	R5		;INC OUR COUNT
	MOV	R1,R2		;COPY TO WORKING REGISTER
	CLR	R4		;ZERO CHANGE COUNTER
20$:	CMP	(R0)+,2(R0)	;COMPARE LSB'S
	BLO	60$		;ORDER OK
	BNE	40$		;ORDER NOT OK - GO DO SWITCH
	CMP	(R0)+,2(R0)	;ORDER OF LSB'S EQUAL - COMPARE MSB'S
	BLO	70$		;ORDER OK
	BNE	50$		;ORDER NOT OK - GO DO SWITCH
	DEC	TOS.R1(SP)	;ENTRIES EQUAL - WILL BE ONE LESS ON EXIT
	DEC	R1		;ONE LESS TO CHECK
	MOV	R2,-(SP)	;SAVE R2
	ADD	R5,R2		;FOR DUPLICATES
	MOV	R0,-(SP)	;SAVE R0
30$:	MOV	4(R0),(R0)+	;LSB NEXT NUMBER -> LSB THIS NUMBER
	MOV	4(R0),(R0)+	;MSB NEXT NUMBER -> MSB THIS NUMBER
	SOB	R2,30$		;PULL UP ALL NUMBERS PAST EQUAL PAIR
	MOV	(SP)+,R0	;RESTORE R0
	MOV	(SP)+,R2	;RESTORE R2
	BR	70$		;EXIT TO COMPARISON LOOP

40$:	TST	(R0)+		;WE DIDN'T HAVE TO COMPARE MSB'S
50$:	MOV	-4(R0),-(SP)	;D
	MOV	-2(R0),-(SP)	; O
	MOV	(R0),-4(R0)	;   T
	MOV	2(R0),-2(R0)	;    H
	MOV	(SP)+,2(R0)	;     E
	MOV	(SP)+,(R0)	;      SWITCH
	INC	R4		;INDICATE WE DID ONE
	BR	70$

60$:	TST	(R0)+		;WE DIDN'T HAVE TO COMPARE MSB'S
70$:	SOB	R2,20$		;AND LOOP
80$:	TST	R4		;ANY CHANGES ?
	BEQ	90$		;NO - WE'RE DONE
	MOV	R3,R0		;BACK TO THE BEGINNING OF TABLE
	BR	10$		;AND AROUND AGAIN (FOR ANOTHER PASS)

90$:	CALLX	GETTTY		;KEEP GOING
	RETURN

.DSABL	LSB

