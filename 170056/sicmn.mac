TITLE	SICMN,<SAVE/IMAGE COMMON>,0A,10-MAY-91,NMC/JBL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	BBINRS - BAD BLOCK ON INPUT RSTS DISK

;+
; BBINRS - HANDLE A BAD BLOCK ON AN INPUT RSTS DISK
;
;	BADDCN = DCN WHICH WAS FOUND TO BE BAD
;
;	CALL	BBINRS
;
;	RETURNS:
;	C = 0	KNOWN BAD BLOCK OR PREVIOUSLY UNKNOWN BUT /NOERROR WAS
;		NOT SPECIFIED. IF THE 2ND CASE, MESSAGE INDICATING BAD PCN
;		HAS BEEN PRINTED, PCN HAS BEEN ADDED TO BADVER
;	C = 1	UNKNOWN BAD BLOCK AND /NOERROR WAS SPECIFIED
;
;	WE DO NOT RETURN IF TOO MANY INPUT BAD BLOCKS EXIST
;-

.ENABL	LSB

BBINRS:	MOV	R0,-(SP)	;SAVE R0
	MOV	R2,-(SP)	; AND R2
	MOV	R3,-(SP)	; AND R3
	MOV	BADDCN,R2	;GET THE BAD DCN
	CALLX	RIB2CN		;CONVERT TO PCN IN R3 (FOR KWNBB)
	CALL	KWNBB		;IS IT A KNOWN INPUT BAD BLOCK?
	BCC	10$		;YES
	CALL	PRTBBI		;%%% BAD BLOCK ON INPUT
	CALLX	MESSAG,R5,PCNMSG ;', PCN ='
	MOV	R3,R0		;GET THE BAD PCN NUMBER
	CALLX	DECZER		;AND PRINT IT
	CALLX	TYPECR		;NEW LINE
	INC	UNKBBI		;INC THE UNKNOWN INPUT BAD BLOCK COUNTER
	MOV	UNKBBI,R0	;PREPARE TO GET TOTAL
	ADD	NBADI,R0	;ADD IN KNOWN COUNT
	CMP	R0,MAXBB	;WAS THE LAST ONE THE MAX
	BHI	30$		;YUP
	MOV	CNBBI,R0	;POINT TO WHERE THIS ONE GOES
	MOV	R3,(R0)+	;PUT IT THERE
	MOV	R0,CNBBI	;AND STORE THE NEW POINTER
	BIT	#NOER,SWTWRD	;WAS /NOERROR SPECIFIED?
	BNE	20$		;YES
10$:	TST	(PC)+		;ALL IS WELL - POP OVER SEC
20$:	SEC			;BADDI AND /NOERROR
	MOV	(SP)+,R3	;RESTORE R3
	MOV	(SP)+,R2	; AND R2
	MOV	(SP)+,R0	; AND R0
	RETURN

30$:	MOV	#TMBBI,ABTADR	;TOO MANY INPUT BAD BLOCKS
	CALL	CHKABT		;DIE

GLOBAL	<CNBBI,NEWIBB,NBADI,MAXBB,SWTWRD>
.DSABL	LSB

.SBTTL	KWNCHK - NEW/OLD BAD BLOCK?
;+
; KWNCHK - SEE IF A PCN WAS A KNOWN OR NEW BAD BLOCK
;
;	R3	- PCN TO CHECK
;	CALL	KWNCHK
;
;	RETURNS:
;	C = 0	NOT BAD BLOCK
;	C = 1	WAS A BAD BLOCK
;
;-

.ENABL	LSB

KWNCHK:	MOV	M.TBL,-(SP)	;SAVE OUR CURRENT I/O STATUS
	MOV	MNTTBL,M.TBL	;FORCE AN INPUT BB TABLE CHECK
	CALL	KWNBB		;SEE IF IT WAS AN OLD KNOWN BB
	MOV	(SP)+,M.TBL	;RESTORE I/O STATUS
	BCS	20$		;NOT KNOWN - CHECK TO SEE IF NEW BB
10$:	CLR	-2(R4)		;A BAD BLOCK - ZERO THE ENTRY
	BR	50$

20$:	MOV	UNKBBI,R1	;GET COUNT OF NEW BAD BLOCKS
	BEQ	40$		;WEREN'T ANY
	MOV	NEWIBB,R2	;POINT TO TABLE START
30$:	CMP	(R2)+,R3	;DOES IT MATCH OURS?
	BEQ	10$		;YUP - IGNORE IT
	SOB	R1,30$		;ALL OF EM
40$:	TST	(PC)+		;NOT BAD - CLEAR CARRY
50$:	SEC			;WAS OLD OR NEW BADDIE
	RETURN

.DSABL	LSB
GLOBAL	<MNTTBL,UNKBBI,NEWIBB>

.SBTTL	DUMMY ROUTINES

.ENABL	LSB

REPSET:
BADRES:
REPDIR:	JMP	ILLCAL		;ILLEGAL CALL - GO DIE

.DSABL	LSB


