.INCLUDE	%CMN:COMMON%
TITLE	RECV,<Message Receive Routine>,0A,10-MAY-91,DBM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	RECV Edit History
;+
; EDIT	BY	DATE		REASON
; 000	DBM	08-Feb-89	Creation
;-

.SBTTL	Program description

;+
; This routine is called by OMS or OMSMGR to perform message
; receive function.  It returns the same information as the
; BP2 SYS call, but does not require an open channel.
;
; Calling sequence is:
;
;	CALL RECV BY REF (FIRQB$, DATBUF$, SLPTIM%)
;
;	where	FIRQB$	is the address of the buffer used to store
;			the results of the SYS call.  (40 bytes)
;
;	where	DATBUF$	is the address of the buffer where the packet
;			data will be returned.  (512 bytes)
;
;		SLPTIM% is the receive sleep time in seconds, or 0
;			if no sleep is desired.
;
;-

.SBTTL	Define and order the PSECTS

	DEFORG	RECV

.SBTTL	Main program logic

RECV:: 	MOV	#<<FQBSIZ+XRBSIZ>/2>,R3	; Size of area to clear
	MOV	#FIRQB,R4		; R4 -> area to clear
.ASSUME	FIRQB+FQBSIZ EQ XRB
10$:	CLR	(R4)+			; Clear a word
	SOB	R3,10$			;   keep going 'til it's done.
	MOV	#FIRQB,R4		; Reset FIRQB pointer
	MOV	#XRB,R3			; And get one to the XRB
	MOVB	#2,FQFIL(R4)		; Load receive function byte
	MOVB	#4,FQSIZM(R4)		; Local selecion
	MOV	@6(R5),FQMODE(R4)	; Load sleep time
	BEQ	20$			; None, so don't set rcv sleep bit
	BISB	#1,FQSIZM(R4)		; Non-zero, so set sleep bit
20$:	MOV	#512.,(R3)		; Set length of data buffer
.ASSUME	XRLEN EQ 0
	MOV	4(R5),XRLOC(R3)		; Load data buffer address
30$:	.MESAG				; Receive a message
	MOV	(R4)+,R0		; Any error?
	BEQ	40$			; No error, return FIRQB$
	TRAP	377			; Hmmmm...  Let BP2 handle it

40$:	MOV	2(R5),R0		; Get pointer to FIRQB$
	MOV	#5,R1			; Transfer five words from FIRQB & XRB
50$:	MOV	(R4)+,(R0)+		; One word from the FIRQB
	MOV	(R3)+,8.(R0)		;  and one from the XRB
	SOB	R1,50$			; Keep moving until done
	MOV	#10.,R1			; Now transfer ten words from FIRQB
	ADD	R1,R0			;  into FIRQB$ at the proper place
60$:	MOV	(R4)+,(R0)+		; One word at a time
	SOB	R1,60$			;  keep moving until done
	RTS	PC			; All done.  Exit to caller

	.END
