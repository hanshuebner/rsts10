.INCLUDE	%CMN:COMMON%
TITLE	OMSCUI,<OMSMGR CUI COMMAND TABLES>,0A,10-MAY-91,DBM

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	OMSCUI Edit History
;+
;				[RSTS/E V10.0]
;  000	DBM  11-Oct-88	Creation
;  001	DBM  28-Nov-89	Add VMS compatibility commands
;-

.SBTTL	Define and order the .PSECTS

	DEFORG	OMSCUI

.SBTTL	Define OMSCUI  Macros

.LIBRARY	%CUI:CUIMLB%

	.MCALL	$CUI
	$CUI	TABLE				;include the CUI tables

.SBTTL	Define OMSCUI macros

	.MACRO	$CONF	ELEM1,ELEM2
	 .WORD	O$CONF,ELEM1,ELEM2,0
	.ENDM	$CONF

	.MACRO	$DIS	ELEM1
	 .WORD	O$DIS,ELEM1,0
	.ENDM	$DIS

.SBTTL	Define conflict and disallow routines

	.ENABL	LSB

O$CONF:	CALBX	FET.CQ	<(R3)+>		; See if first qualifier was specified
	BCS	15$			; Nope.  Clean-up and return
O$DIS:	MOV	U.POS(R4),CONFPOS	; Save the position in case of error
10$:	CALBX	FET.CQ	<(R3)+>		; See if this qualifier was specified
	BCC	30$			; Yep.  Set error and get out
	TST	(R3)			; More items to check?
	BNE	10$			; Yes.
15$:	CLR	R0			; No conflict here.  Clear status
	CLR	CONFPOS			; Clean-up after ourself
20$:	TST	(R3)+			; Find end of qualifier list
	BNE	20$			; ...
	RETURN				; Done

30$:	MOV	U.POS(R4),LX.ERP	; Set error position
	MOV	#U.CNFE,R0		; Set error code
	BR	20$			; Clean-up and exit

	.DSABL	LSB

GLOBAL	<CONFPOS,U.CNFE,LX.POS,LX.ERP>

.SBTTL	Define OMSMGR command table for CUI

CMDTBL::					;command table entry
	$THR
	$RDCMD	PROMPT=CMD.P			;read command string
	$PARKEY					;parse command keyword
	$ONKEY	RPLY.C,REPLY			; REPLY command
	$ONKEY	RQST.C,REQEST			; REQUEST command
	$ONKEY	SHRQ.C,SHOREQ			; SHOW REQUESTS command
	$ONKEY	STRT.C,START			; START/OPER... command
	$ONKEY	SETO.C,SETOMS  			; SET   OPER... command
	$ONKEY	SHOP.C,SHOOMS			; SHOW  OPER... command
	$ONKEY	STOP.C,STOP			; STOP /OPER... command  
	$ENDKEY
	$ENDTHR

.SBTTL	Define SHOW REQUESTS Command

SHOREQ:	$THR
	$DEFCMD	QUAL=SHRQQL,U.CMDC=SHRQ.C	;Define SHOW REQUESTS command
	$PARM	STR.T,TYPE=U$U16,FLAGS=PF.OPT,MINVAL=1,MAXVAL=9999
;	$FETCQ	INP.Q
;	$IF	PRES
;	 $FETA
;	 LOOKUP	FILE
;	$ENDIF
	$ENDCMD
	$ENDTHR

.SBTTL	Define SHOW REQUESTS Command Qualifiers

SHRQQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL	INP.Q,ARG=REQ			;/INPUT=file-spec
	 DEFARG	TYPE=LF.N.W
	 ENDARG
	DEFQUAL	OUT.Q,FLAGS=QF.NEG,ARG=OPT	;/[NO]OUTPUT=file-spec
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	BEF.Q,ARG=REQ			;/BEFORE=time
	 DEFARG TYPE=U$TIME
	 ENDARG
	DEFQUAL	SIN.Q,ARG=REQ    		;/SINCE=time
	 DEFARG	TYPE=U$TIME
	 ENDARG
	DEFQUAL	FACS.Q,CONF=FAC.Q,ARG=REQ,FLAGS=QF.ALIS	;/FACILITIES=list
	 DEFARG	TYPE=U$LBL
	 ENDARG
	DEFQUAL	FAC.Q,CONF=FACS.Q,ARG=REQ,FLAGS=QF.ALIS	;/FACILITY=list
	 DEFARG	TYPE=U$LBL
	 ENDARG
	DEFQUAL	JOB.Q,ARG=REQ			;/JOB=job-number
	 DEFARG	TYPE=U$U8,MINVAL=1,MAXVAL=63
	 ENDARG
	DEFQUAL	KBN.Q,ARG=REQ			;/TERMINAL={DETACHED!kb#}
	 DEFARG	DET.K				; =DETACHED
	 DEFARG	TYPE=U$DEV			; =dev[:]
	 ENDARG
	DEFQUAL	PPN.Q,ARG=REQ			;/USER=[p,pn]
	 DEFARG	TYPE=U$ACC
	 ENDARG
	DEFQUAL TXT.Q,ARG=REQ			;/TEXT=["]text["]
	 DEFARG TYPE=U$ANY
	 ENDARG
	DEFQUAL	EXA.Q,FLAGS=QF.NEG,REQUIRE=TXT.Q;/[NO]EXACT
	DEFQUAL	BRF.Q,CONF=FUL.Q		;/BRIEF
	DEFQUAL	FUL.Q,CONF=BRF.Q		;/FULL
	DEFQUAL	ALL.Q,CONF=RPLY.Q		;/ALL
	DEFQUAL	RPLY.Q,FLAGS=QF.NEG,CONF=ALL.Q	;/[NO]REPLY
	ENDQUAL

.SBTTL	Define START/OPERATOR_SERVICES Command

START:	$THR
	$DEFCMD	QUAL=STRTQL,U.CMDC=STRT.C	;  Define START/OPER... cmd
	$ENDCMD
	$ENDTHR

.SBTTL	Define START/OPERATOR_SERVICES Command Qualifiers

STRTQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	OUT.Q,FLAGS=QF.NEG,ARG=OPT	;/[NO]OUTPUT=file-spec
	 DEFARG	TYPE=LF.N
	 ENDARG
	DEFQUAL	PRI.Q,ARG=REQ			;/PRIORITY=n
	 DEFARG	TYPE=U$S8,MINVAL=-120,MAXVAL=120
	 ENDARG
	DEFQUAL	RNB.Q,ARG=REQ			;/RUN_BURST=n
	 DEFARG	TYPE=U$U8,MINVAL=1,MAXVAL=127
	 ENDARG
	DEFQUAL KEEP.Q,FLAGS=QF.NEG!QF.ALIS,ARG=OPT ;/[NO]KEEP[=(keyword,...)]
	 DEFARG	MESS.K,FLAGS=AF.NEG
	 DEFARG	RQST.K,FLAGS=AF.NEG
	 DEFARG	ALL.K
	 DEFARG	NONE.K
	 ENDARG
	ENDQUAL

.SBTTL	Define SET OPERATOR_SERVICES Command

SETOMS:	$THR
   	$DEFCMD	QUAL=SETOQL,U.CMDC=SETO.C	;Define SET OPER... command
	$ENDCMD
	$ENDTHR

.SBTTL	Define SET OPERATOR_SERVICES Command Qualifiers

SETOQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL KEEP.Q,FLAGS=QF.NEG!QF.ALIS,ARG=OPT ;/[NO]KEEP[=(keyword,...)]
	 DEFARG	MESS.K,FLAGS=AF.NEG
	 DEFARG	RQST.K,FLAGS=AF.NEG
	 DEFARG	ALL.K
	 DEFARG	NONE.K
	 ENDARG
	ENDQUAL

.SBTTL	Define SHOW OPERATOR_SERVICES command

SHOOMS:	$THR
	$DEFCMD	QUAL=SHOPQL,U.CMDC=SHOP.C	; Define SHOW OPER... command
	$ENDCMD
	$ENDTHR

.SBTTL	Define SHOW OPERATOR_SERVICES Command Qualifiers

SHOPQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL	OUT.Q,FLAGS=QF.NEG,ARG=OPT	;/[NO]OUTPUT=file-spec
	 DEFARG	TYPE=LF.N
	 ENDARG
	ENDQUAL

.SBTTL	Define STOP/OPERATOR_SERVICES Command

STOP:	$THR
	$DEFCMD	QUAL=STOPQL,U.CMDC=STOP.C	; Define STOP/OPER... command
	$ENDCMD
	$ENDTHR

.SBTTL	Define STOP/OPERATOR_SERVICES Command Qualifiers

STOPQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL	ABO.Q,FLAGS=QF.NEG		;/[NO]ABORT
	ENDQUAL

.SBTTL	Define REPLY command

REPLY:	$THR
	$DEFCMD	QUAL=RPLYQL,U.CMDC=RPLY.C	;Define REPLY command
	$CONF	ABO.Q,<PEN.Q,TO.Q,ANS.Q>	;Conflict checks
	$CONF	PEN.Q,<TO.Q,ANS.Q>		;...
	$CONF	ANS.Q,TO.Q			;...
	$CONF	VMS.T,<PRM.Q,ABO.Q,ANS.Q,PEN.Q,TO.Q>
	$CONF	STS.Q,<ENA.Q,DIS.Q>
	$CONF	ENA.Q,DIS.Q

	$PARM	STR.T,TYPE=U$ANY,FLAGS=PF.OPT,CONF=PRM.Q,PROMPT=REP.P
						; Parse REPLY text
	$ENDCMD
	$ENDTHR

.SBTTL	Define REPLY Command Qualifiers
                      
RPLYQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL	PRM.Q,CONF=STR.T		;/PROMPT
	DEFQUAL ABO.Q,ARG=REQ			;/ABORT=n
	 DEFARG	TYPE=U$U16,MINVAL=1,MAXVAL=9999
	 ENDARG
	DEFQUAL	ANS.Q,ARG=REQ			;/ANSWER=n
	 DEFARG	TYPE=U$U16,MINVAL=1,MAXVAL=9999
	 ENDARG
	DEFQUAL	DIS.Q,CLASS=VMS.T		;/DISABLE
	DEFQUAL	ENA.Q,CLASS=VMS.T		;/ENABLE
	DEFQUAL	PEN.Q,ARG=REQ			;/PENDING=n
	 DEFARG	TYPE=U$U16,MINVAL=1,MAXVAL=9999
	 ENDARG
	DEFQUAL	STS.Q,CLASS=VMS.T		;/STATUS
	DEFQUAL	TO.Q,ARG=REQ			;/TO=n
	 DEFARG	TYPE=U$U16,MINVAL=1,MAXVAL=9999
	 ENDARG
	ENDQUAL

.SBTTL	Define REQUEST Command

REQEST:	$THR
	$DEFCMD	QUAL=RQSTQL,U.CMDC=RQST.C	; define REQUEST command
	$FETCQ	RPLY.Q				; Look for /[NO]REPLY
	$IF PRES				; If there
	 $IF NO					;  And /NOREPLY,
	  $DIS	TIM.Q				;   don't allow /[NO]TIME_OUT
	 $ENDIF
	$ENDIF
	$PARM	STR.T,TYPE=U$ANY,CONF=PRM.Q,PROMPT=REQ.P ; Parse REQUEST text
	$ENDCMD
	$ENDTHR

.SBTTL	Define REQUEST Command Qualifiers

RQSTQL:	DEFQUAL	DBG.Q,FLAGS=QF.NEG		;/[NO]DEBUG
	DEFQUAL	SND.Q,FLAGS=QF.NEG		;/[NO]SEND
	DEFQUAL	PRM.Q,CONF=STR.T		;/PROMPT
	DEFQUAL	RPLY.Q,FLAGS=QF.NEG,ARG=OPT	;/[NO]REPLY[=symbol]
	 DEFARG	TYPE=U$SYMN
	 ENDARG
	DEFQUAL	LCL.Q,CONF=GBL.Q		;/LOCAL
	DEFQUAL	GBL.Q,CONF=LCL.Q		;/GLOBAL
	DEFQUAL	TIM.Q,FLAGS=QF.NEG,ARG=OPT,REQUIRE=RPLY.Q ;/[NO]TIME_OUT=mins
	 DEFARG	TYPE=U$U8,MINVAL=1,MAXVAL=255
	 ENDARG
	DEFQUAL	FAC.Q,ARG=REQ			;/FACILITY=name (Debugging)
	 DEFARG	TYPE=U$LBL
	 ENDARG
	ENDQUAL

.SBTTL	Define OMSMGR prompt strings

CMD.P:	.ASCIC	^\"OMSMGR> "\			;command prompt
REP.P:	.ASCIC	^\"Reply: "\			;REPLY prompt
REQ.P:	.ASCIC	^\"Request: "\			;REQUEST prompt

.SBTTL	Declare global constants

GLOBAL	<RPLY.C,RQST.C,SHRQ.C>
GLOBAL	<STRT.C,STOP.C,SETO.C,SHOP.C>
GLOBAL	<ALL.K,DET.K,MESS.K,NONE.K,RQST.K>
GLOBAL	<STR.T,VMS.T>

.END
