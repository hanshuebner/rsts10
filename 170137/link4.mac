.MCALL	.MODULE
.MODULE	LINK,VERSION=21,COMMENT=<Q, Y, U AND V SWITCHES> IDENT=NO,MODNAME=LINK4,GLOBAL=.LINK4

;                       COPYRIGHT (c) 1989 BY
;           DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;                        ALL RIGHTS RESERVED
;
;THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED
;ONLY  IN  ACCORDANCE  WITH  THE TERMS  OF  SUCH  LICENSE AND WITH THE
;INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY OTHER
;COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
;OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS HEREBY
;TRANSFERRED.
;
;THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT NOTICE
;AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT
;CORPORATION.
;
;DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF ITS
;SOFTWARE ON EQUIPMENT THAT IS NOT SUPPLIED BY DIGITAL.

.SBTTL	Q, Y, U AND V SWITCHES
.ENABL	GBL

; CER,MAS,DBB

; EDIT HISTORY

; CHANGE TO SUPPORT ABSOLUTE PSECT (ZERO LENGTH & DON'T STORE TEXT)	;CER02
; FIX /S AND STB FILE TEST						;MAS02
; FIX CORE WRAP ON 177777 BASE ADDRESS					;MAS05
; PUT OVERLAY HANDLER IN SYSLIB						;MAS07
; FIX /H FOR OVERLAID PROGRAMS						;MAS14
; XM OVERLAYS ADDED							;MAS15
; ADD /Q SWITCH FOR ROMMING CODE					;MAS20
; ADD SUPPORT FOR GLOBAL SYMBOL CREF					;DBB01
; STANDARDIZE PROGRAMMED REQUESTS					;DBB02

.SBTTL	SYMBOLIC CONSTANTS

GSD=	1
BYTBLK=	512.		;BYTE BLOCK SIZE

.SBTTL	MISCELLANEOUS MACRO DEFINITIONS

.MCALL	.GTIM,.DATE,.WRITW						;DBB02

.MACRO	ERROR$	ERNB,SEV,ETYP,REG
	.IF NB REG
	.IIF DIF <REG>,<R0> 	MOV 	REG,R0
	.IFF
	.IIF IDN <ETYP>,<E$FIL>	CLR	R0
	.ENDC
	JSR	R5,ERROOT
	.BYTE	ERNB,	SEV*100!ETYP
.ENDM

.MACRO	MAPOUT	MSG
.IF NB MSG
.IIF DIF <MSG>,<R1>	MOV	MSG,R1
.ENDC
	CALL	PUTMSG
.ENDM

.MACRO	SYMADR	R
	ASL	R
	MOV	R,-(SP)
	ASL	R
	ASL	R
	ADD	(SP)+,R
	ADD	SYEN0,R
.ENDM

; IBUF IS USED FOR MAP OUTPUT BUFFER (1 BLOCK)

.PSECT	DATA,D

	.WORD	6	;ERROR HANDLER INDEX(1ST PHYSICAL LOC OF OVLY)
SAVVAL:	.WORD	0	;SAVE R4

.SBTTL	MAP PASS TABLES AND MESSAGES

	.NLIST	BEX
	.ENABL	LC

PTBL:	.RAD50	/$OTABL/	;OVERLAY TABLE PSECT NAME

.PSECT	CODE

.SBTTL	ENDP1	END PASS ONE PROCESSING

;+
; IF THE PROGRAM IS OVERLAYED, GO THROUGH DEFINED SYMBOL TABLE TO
; INDICATE WHICH SYMBOLS GET RESOLVED THROUGH THE OVERLAY HANDLER.
; SYMBOLS THAT DO NOT GO INTO THE OVERLAY HANDLER TABLE ARE:
; 1. SECTION NAME SYMBOLS
; 2. SYMBOLS DEFINED IN ROOT SEGMENT(INCLUDES ABS SYMBOLS)
; 3. SYMBOLS DEFINED IN A "DATA" SECTION (RESOLVED DIRECTLY)
; 4. SYMBOLS NOT REFERENCED OUTSIDE SEGMENT THEY ARE DEFINED
; ALSO, GO THRU SYMBOL TABLE LIST SET ABS PSECT'S TO ZERO LENGTH	;CER02
;-

.ENABL	LSB

ENDP1::	CLRB	PAS1.5		;INIT LIBRARY PASS INDICATOR FOR SAV OUTPUT
;	TSTB	FLGWD		;IS PROGRAM OVERLAYED ?			;CER02
;	BPL	60$		;NO IF +				;CER02
	MOV	#ASECT,R4	;R4 -> ROOT SEGMENT BLK
	MOV	@R4,R1		;GET 1ST SYM PTR
	CLR	R5		;IND PROCESSING ROOT SYMBOLS
	MOV	#SY.IND,R3	;R3 = EXTERNAL REF BIT
	BR	40$		;DON'T ZERO THE LENGTH OF . ABS.

10$:	MOV	S.GNXP(R4),R1	;R1 -> NEXT SEGMENT BLOCK THIS REGION
	BNE	20$		;IF NE THERE IS A NEXT
	INC	R5		;IND NOT PROCESSING ROOT SEGMENT
	MOV	S.GRGP(R4),R4	;R4 -> OVERLAY REGION BLOCK
	MOV	R.GNXP(R4),R4	;NEXT REGION BLOCK ADDRESS
	BEQ	60$		;IF 0 THEN NO MORE REGIONS
	MOV	R.GSGP(R4),R1	;ADR OF SEGMENT BLK THIS REGION
20$:	MOV	R1,R4		;SAVE SEGMENT BLK ADR
30$:	MOV	@R1,R1		;LINK TO NEXT WORD(ENTRY # OF NEXT)
	BIC	#SY.ENB,R1	;MASK OFF SYM PTR INDICATORS
	BEQ	10$		;IF 0 THEN END OF CHAIN FOR SEGMENT
	SYMADR	R1		;CALC. PTR TO SYMB NODE
	MOV	S.YSN(R1),R2	;R2 = CURRENT SECTION FLAG WD
	BIT	#SY.SEC,R2	;BIT SET IF A SECTION?			;CER02+
	BEQ	40$		;NOT A SECTION IF EQ			
	BIT	#CS$REL*400,R2	;ABSOLUTE SECTION?			
	BNE	40$		;NO IF NE				
	CLR	S.YVAL(R1)	;ABS PSECT HAS A LENGTH OF ZERO		;CER02-
40$:	TST	R5		;ROOT SYMBOLS DO NOT GET RESOLVED THRU
	BEQ	50$		;OVERLAY HANDLER
	BIT	#CS$TYP*400!SY.SEC,R2 ;SYM FROM DATA SEC OR SEC NAME NOT AFFECTED
	BNE	50$		;YES IF NE
	BIT	#CS$REL*400,R2	;ABSOLUTE SYMBOL ?
	BEQ	50$		;YES IF 0
	BIT	@R1,R3		;WAS SYMBOL REFERENCED OUTSIDE SEGMENT ?
	BEQ	50$		;NO IF 0
	ADD	#8.,OVCOUN	;SYM GOES IN OVR HNDLR TBL(4 WDS PER ENTRY)
	BR	30$		;CONTINUE

50$:	BIC	R3,@R1		;SAY SYMBOL RESOLVED DIRECTLY
	BR	30$		;R1 -> ENTRY # PTR

;+
; NOW LOOKUP IN SYMBOL TABLE FOR THE VIRTUAL SECTION, IF IT IS THERE
; ZERO IT'S VALUE WORD(INDICATES SIZE OF SECTION) SO DOES NOT
; CONTRIBUTE TO SIZE OF PROGRAM DURING MAP PASS
;-

.PSECT	DATA,D

VSEC:	.RAD50	\. VIR.\	;VIRTUAL SECTION SYMBOL NAME

.PSECT	CODE

60$:	MOV	#VSEC,R3	;R3 -> VIRTUAL SECTION SYMBOL
	MOV	#SY.SEC,LKWD	;SECTION NAME LOOKUP
	MOV	#^CSY.SEC,LKMSK	;CARE ABOUT SECTION FLG
	CALL	LOOKUP		;LOOK IT UP BUT DON'T ENTER IT
	BCS	70$		;C=1 IF NOT FOUND
	CLR	-(R0)		;CLEAR IT'S VALUE WORD

;+
; IF /E WAS GIVEN FOR THE EXTEND SECTION THEN LOOK IT UP IN THE
; SYMBOL TABLE TO EXTEND SIZE OF SECTION TO VALUE GIVEN.
;-

70$:	BIT	SWITCH,#SW.E	;WAS /E INDICATED ?
	BEQ	100$		;NO IF 0
	MOV	#ESWNAM,R3	;R3 -> EXTEND SECTION NAME
	CALL	LOOKUP		;SECTION NAME LOOKUP
				; (LKWD & LKMSK ALREADY SETUP)
	BCC	90$		;C=0 IF FOUND
80$:	ERROR$	ERR54,E$W,E$SYM,R3 ;EXTEND SECTION NOT FOUND <SYMBOL>
	BR	100$

90$:	BIT	#CS$REL*400,S.YSN(R0) ;CAN'T EXTEND THE SIZE OF ABS SECTION ;CER02
	BEQ	80$		;ABS IF EQ SO GIVE ERROR		;CER02
	CMP	ESWVAL,-(R0)	;EXTEND VALUE MUST BE .GT. FORCED SIZE ?
	BLO	100$		;IF LO THEN NO CHANGE
	MOV	ESWVAL,@R0	;UPDATE SIZE

.SBTTL	-	SETUP THE BUFFERS BEFORE GOING TO THE MAP PASS

100$:	MOV	#IBUF,R0	;R0 -> IBUF & 2(R0) -> IBFSIZ
	MOV	HGHLIM,STLML	;MAX # OF SECTIONS IN ANY ONE MODULE(REMEMBER IT)
	MOV	@R0,OBUF	;OUTPUT BUFR STARTS WHERE INPUT DID
	ADD	#512.,(R0)+	;IBUF IS 1 BLOCKSIZE LATER
	SUB	#256.,@R0	;REDUCE INPUT WORD COUNT
	DEC	IBKINC		; & # OF INPUT BLOCKS READ
	MOV	-(R0),EIB512	;DETERMINE THE END OF A 1 BLOCK BUFR
	ADD	#512.,EIB512	;TO BE USED FOR THE MAP OUTPUT.
	TST	MBPTR		;IS A MAP DESIRED ?
	BNE	120$		;YES
	BIT	SWITCH,#SW.S	;IF /S AND STB FILE REQUESTED
	BEQ	110$		;THEN EIB512 GETS IBUF
	BIT	FLGWD,#FG.STB
	BEQ	110$							;MAS02
	MOV	@R0,EIB512	;STB BUFFER USES IBUF AREA
110$:	BR	MAP		;GO TO POST PASS1 ROUTINE

120$:	MOV	@R0,MBPTR	;INIT MAP BUFR PTR TO IBUF
	BR	MAP		;GO TO POST PASS1 ROUTINE

.DSABL	LSB

.SBTTL	MAP	 START PROCESSING FOR MAP, AND Q,U,V,Y SWITCHES

AS2BIG:	ERROR$	ERR14,E$F,E$PRT	;ASECT IS TOO BIG

MAP:	CLR	SEGBAS		;N VLAUE (V:N:M) FOR /V REGION FLAG	;MAS15+
	CLR	VIRSIZ		;SIZE OF THE LARGEST PARTITION IN /V REGION
	CLR	HIPHYS		;PARTITION EXTENDED ADDR HIGH LIMIT
	CLR	SEGBLK		;BASE OF PREVIOUS XM PARTITION		;MAS15-
	BIT	FLGWD,#FG.STB	;IS THERE AN STB FILE?
	BEQ	20$		;NO,
	MOV	#TXTBLK+6,R0	;FILL UP PREFIX PART
	MOV	#GSD,(R0)+	;THIS IS A GSD FB BLOCK
	MOV	#MODNAM,R3	;FIRST GSD ENTRY IS MODULE NAME
	MOV	(R3)+,(R0)+	;2 WORDS OF NAME
	MOV	(R3)+,(R0)+
	CLR	(R0)+		;CODE BYTE INDICATES MODULE NAME
	CLR	(R0)+
	TST	@R3		;IS THERE AN IDENTIFICATION?
	BEQ	10$		;NO
	MOV	(R3)+,(R0)+	;YES, PUT IN THE IDENT NAME
	MOV	(R3)+,(R0)+
	MOV	#6*400,(R0)+	;THIS IS AN IDENT
	CLR	(R0)+
10$:	MOV	(PC)+,(R0)+	;EVERYTHING IS IN THE ASECT
	 .RAD50	/. A/
	MOV	#^RBS.,(R0)+
	MOV	#1*400,(R0)+	;THIS IS A SECTION NAME
	CLR	(R0)+		;ZERO LENGTH
	MOV	R0,TXTBLK	;SAVE POINTER TO NEXT FREE
	MOV	#ESWVAL,R0	;INITIALIZE OUTPUT POINTERS
	CLR	(R0)+		;BLOCK 0
	MOV	EIB512,(R0)+	;USE LOAD MODULE OUTPUT AREA FOR BUFR
	MOV	#BYTBLK,@R0	;512 BYTE BUFFER
20$:	MOV	BOTTOM,R4	;GET SPECIFIED BOTTOM ADDRESS
	MOV	ASECT,R3	;R3 -> START OF SYMBOL CHAIN
	CMP	-(R3),R4	;IS "BOTTOM" .GE. SIZE OF ASECT ?
	BLOS	30$		;YES
	TSTB	SWITCH		;IF /R  GIVE ERROR
	BMI	AS2BIG		;ASECT IS TOO BIG FOR REL FILES
	MOV	@R3,R4		;NO, USE SIZE OF ASECT
	MOV	R4,BOTTOM	; AS BOTTOM ADDRESS
30$:	TSTB	FLGWD		;IS PROGRAM OVERLAID?			;MAS07+
	BPL	40$		;NO IF +				
	MOV	R3,-(SP)	;SAVE R3				
	MOV	#SY.SEC,LKWD	;SET UP TO LOOK UP OVERLAY TABLE	
	MOV	#^CSY.SEC,LKMSK	;PSECT AND ENTER CORRECT LENGTH		
	MOV	#PTBL,R3	;R3->$OTABL				
	CALL	LOOKUP		;LOOK IT UP				
	BCS	ILERR		;C=1 NOT FOUND-SHOULDN'T HAPPEN		
	MOV	OVCOUN,S.YVAL(R0) ;VALUE=ALL 3 AND 4 WD TABLE ENTRIES	
	MOV	(SP)+,R3	;RESTORE R3				;MAS07-
40$:	MOV	R4,(R3)+	;SAVE ASECT TRUE SIZE

.SBTTL	HSWT	PROCESS /H SWITCH

;+
; IF /H WAS GIVEN, ADD UP ALL THE SECTION SIZES IN THE ROOT SEGMENT AND
; THE SIZE OF THE LARGEST SEGMENT OF EACH /O REGION. THIS GIVES THE MINIMUM
; VALUE FOR "HSWVAL". IF /H VALUE WAS LARGE ENOUGH, ADJUST THE VALUE OF
; "BOTTOM" TO EFFECT LINKING TO TOP. (TOP = HIGH LIMIT OF ROOT + /O OVERLAYS.)
; INPUT: R3 = ADR OF ASECT IN SYMBOL TBL
; OUTPUT: R4 = SIZE OF ASECT
;-

HSWT:	BIT	SWITCH,#SW.H	;WAS THERE A /H VALUE?
	BEQ	UYSWT		;NO, RESOLVE ALL ADDRESSES
	MOV	HSWVAL,-(SP)	;YES, GET IT
	MOV	#BOTTOM,R5	;R5 -> DUMMY OVERLAY REGION BLOCK
	MOV	R.GSGP(R5),R1	;SET UP R1				;MAS14
	CLR	R0		;R0 = TOTAL SIZE (NO ID WORD IN ROOT)
	MOV	R3,R2		;R2 -> ASECT TABLE ENTRY
	CLR	-(SP)		;INIT HIGHEST SEGMENT SIZE SO FAR
	CALL	SIZE1		;GET SIZE OF SEGMENT			;MAS15+
	BR	30$		;PROCESS ROOT SEGMENT SIZE

10$:	TST	R.GNB(R5)	;IS THIS A /V REGION?	
	BMI	70$		;- -> /V -> DONE WITH ROUNDING		;MAS15-
	MOV	R.GSGP(R5),R1	;R1 -> FIRST OVERLAY SEGMENT BLOCK
	CLR	-(SP)		;THIS IS THE HIGHEST SEGMENT SIZE SO FAR
20$:	CALL	SIZSEG		;GET SEGMENT SIZE			;MAS15
30$:	CMP	@SP,R0		;IS THIS THE LARGEST SEGMENT THIS REGION
	BHIS	40$		;NO
	MOV	R0,@SP		;YES, REMEMBER THE LARGEST
40$:	MOV	#2,R0		;AND ALL FURTHER SEGMENTS HAVE ID WORD
	MOV	S.GNXP(R1),R1	;R1 -> NEXT SEGMENT THIS REGION		;MAS14
	BNE	20$		;GOT ONE (ALWAYS FAILS FOR ROOT)
	BIT	2(SP),HSWVAL	;IS THIS THE FIRST REDUCTION OF /H:0?	;MAS14
	BEQ	50$		;YES, IGNORE ERROR
	SUB	(SP)+,@SP	;DECREASE HIGH LIMIT BY SEGMENT SIZE
	BHIS	60$		;OK
	ERROR$	ERR27,E$F,E$PRT	;/H VAL TOO LOW

50$:	SUB	(SP)+,@SP	;DECREASE /H:0 BY FIRST NON-0 SEGMENT
60$:	MOV	R.GNXP(R5),R5	;POINT TO NEXT OVERLAY REGION
	BNE	10$		;AND PROCESS IT
70$:	ADD	@SP,BOTTOM	;ADJUST TO GET A HIGH LIMIT
	ADD	(SP)+,R4	;AND FIX ASECT OVERHEAD

.SBTTL	UYSWT	PROCESS /U & /Q SWITCHES

;+
; SCAN THE ROOT SEGMENT FOR THE SECTION NAME, ADDING UP THE SIZES AS WE GO.
; WHEN A /U OR /Y SECTION IS FOUND, PROCESS SWITCHES AS FOLLOWS:
;
; 1./Y PROCESSING: DETERMINE AMOUNT TO ADD TO PREVIOUS SECTION
;   TO MAKE /Y SECTION START ON MULTIPLE OF VALUE GIVEN.
;
; 2./U PROCESSING: ADD THE /U SWITCH ROUND FACTOR TO ITS SIZE. 
;   IF /H WAS ALSO GIVEN MUST UPDATE "BOTTOM" BY THE AMOUNT ROUNDED.
;
; INPUT: R3 = ADR OF ASECT SYM TBL ENTRY
;-

.ENABL	LSB
UYSWT:	BIT	SWITCH,#SW.U!SW.Y ;/U OR /Y ?
	BNE	5$		;IF YES, BRANCH
	JMP	100$		;NO (BEQ NEXT SWITCH PROCESSING)

5$:	CLR	R0		;START AT SIZE 0
	CLR	R1		;START AT SECT TO EXTEND NOT FND
	CLR	-(SP)		;START AT SECT TO BOUND NOT FND
	MOV	R3,R2		;R2 -> ROOT'S BEGINNING
	MOV	R3,R5		;INIT PREVIOUS SECTION FOR /Y		;CER02
	BR	20$		;NOW GO

ILERR:	ERROR$	ERR0,E$F,E$PRT	;ILLEGAL ERROR				

10$:	MOV	@R2,R2		;R2 -> NEXT SYMBOL
	BIC	#SY.ENB,R2	;ISOLATE POINTER
	BEQ	70$		;DONE SCANNING
	SYMADR	R2		;R2 -> SYMBOL BLOCK
20$:	BIT	S.YSN(R2),#SY.SEC ;SECTION?
	BEQ	10$		;NO
	BIT	SWITCH,#SW.Y	;/Y ?
	BEQ	50$		;BRANCH IF NOT
	MOV	R4,SAVVAL	;SAVE R4
	MOV	#<YSWNAM-4>,R4	;POINT TO 2 WORDS BEFORE YSWNAM
43$:	TST	(R4)+		;POINT TO SLOT IN ARRAY YSWNAM
45$:	TST	(R4)+		;ARE THERE ANY MORE NAMES?
	BEQ	48$		;IF BLANK, NO MORE, SO BRANCH
	CMP	S.YNAM(R2),(R4)+ ;IS SECTION NAME FOR /Y ?
	BNE	43$		;NO
	CMP	S.YNAM+2(R2),(R4)+
	BNE	45$
	BIT	#CS$REL*400,S.YSN(R5) ;IS PREVIOUS SECTION ABSOLUTE?	;CER02
	BEQ	48$		;YES IF EQ THEN NOT ALLOWED		;CER02
	INC	@SP		;INDICATE FOUND /Y SECTION
	MOV	R0,-(SP)	;SAVE CURRENT RUNNING SUM
	MOV	@R4,-(SP)	;GET BOUNDARY MULTIPLE (YSWVAL)
	NEG	@SP		;LESS 1 FOR A MASK & NOW FIND
	BIC	(SP)+,R0	; THE ADDITIONAL AMOUNT
	BEQ	30$		;ADD 0, NO CORRECTION
	NEG	R0		;ELSE FIND THE
	ADD	@R4,R0		; ADDITIONAL AMOUNT
30$:	ADD	R0,S.YVAL(R5)	; TO THE SECTION BEFORE THE /Y
	BCC	40$		;C=0 IF OK
	MOV	R0,-(SP)	;SAVE RUNNING SUM
	ADD	#S.YNAM,R0	;R0 -> SECTION NAME
	ERROR$	ERR47,E$W,E$SYM,R0 ;SIZE OVERFLOW OF SECTION <SYMBOL>
	MOV	(SP)+,R0
40$:	ADD	R0,@SP		;ALSO UPDATE RUNNING SUM
	BCS	TOOBIG		;C=1 IF ADDRESSING OVERFLOW
	MOV	(SP)+,R0	;RESTORE RUNNING SUM
48$:	MOV	SAVVAL,R4	;RESTORE R4
50$:	BIT	SWITCH,#SW.U	;/U ?
	BEQ	60$		;BRANCH IF NOT
	CMP	S.YNAM(R2),USWNAM ;YES, OUR NAME?
	BNE	60$		;NO
	CMP	S.YNAM+2(R2),USWNAM+2 ;MIGHT BE
	BNE	60$		;BUT IT ISN'T
	BIT	#CS$REL*400,S.YSN(R2) ;ROUND SECTION CAN'T BE ABS	;CER02
	BEQ	60$		;ABS IF EQ				;CER02
	MOV	R2,R1		;IT IS, REMEMBER THE POINTER
60$:	INC	R0		;WAS EVEN NOW MAKE ODD
	BEQ	TOOBIG		;PREVENT WRAP ON R0=177777		;MAS05
	ADD	S.YVAL(R2),R0	;COLLECT SIZE
	BCS	TOOBIG		;C=1 IF ADDRESSING OVERFLOW
	BIC	#1,R0		;GET RID OF ODD IF ADDED EVEN SIZE
	MOV	R2,R5		;REMEMBER PREVIOUS SECTION FOR /Y
	BR	10$		;AND LOOP

70$:	BIT	SWITCH,#SW.Y	;WAS THIS FOR /Y
	BEQ	80$		;NO
	TST	(SP)+		;YES, DID WE FIND ITS SECTION
	BNE	80$		;WE DID IF NE
	ERROR$	ERR25,E$W,E$PRT	;BOUNDARY SECTION NOT FOUND
80$:	MOV	USWVAL,R2	;GET ROUNDING FACTOR
	NEG	R2		;LESS 1 FOR A MASK & NOW FIND THE
	BIC	R2,R0		;ADDITIONAL AMOUNT
	BEQ	90$		;ADD 0, NO CORRECTION
	NEG	R0		;ELSE FIND THE
	ADD	USWVAL,R0	; ADDITIONAL AMOUNT
90$:	TST	R1		;FOUND OUR SECTION?
	BNE	110$		;YES
	BIT	SWITCH,#SW.U	;WERE WE PROCESSING A ROUND SECTION?
	BEQ	VRSWT		;NO IF 0				;MAS20
	ERROR$	ERR30,E$W,E$PRT	;ROUND SECTION NOT FND
100$:	BR	VRSWT							;MAS20

TOOBIG:	ERROR$	ERR50,E$F,E$PRT	;ADDRESS SPACE EXCEEDED

110$:	BIT	SWITCH,#SW.H	;/H?
	BEQ	120$		;NO
	MOV	BOTTOM,R0	;YES, GET BOTTOM
	BIC	R2,R0		;AND FIND ADDITIONAL AMOUNT
	SUB	R0,BOTTOM	;YES, CORRECT BOTTOM
	SUB	R0,R4		; ... AND .ASECT FIX
120$:	ADD	R0,S.YVAL(R1)	;O.K., ROUND IT UP IN SYMBOL TBL
	BCC	VRSWT		;C=0 IF OK				;MAS20
	ADD	#S.YNAM,R1	;R1 -> SECTION NAME
	ERROR$	ERR47,E$W,E$SYM,R1 ;SIZE OVERFLOW OF SECTION <SYMBOL>
	;BR	VRSWT							;MAS20

.DSABL	LSB

.SBTTL	VRSWT	/V AND /R WITH NO /Y HIGH LIMIT ADJUSTMENT

;+
; IF /V OVERLAYS AND /R BUT NO /Y WAS GIVEN, ADD UP ALL THE SECTION
; SIZES IN THE ROOT SEGMENT AND THE SIZE OF THE LARGEST SEGMENT OF
; EACH /O REGION.  THIS GIVES THE LOW MEMORY HIGH LIMIT.  SUBTRACT
; THIS VALUE FROM THE NEAREST (HIGHER THAN OR SAME) 4K WORD BOUNDARY.
; THIS IS THE AMOUNT TO RELOCATE THE ROOT AND /O OVERLAYS IN ORDER TO
; ELIMINATE ANY UNUSED MEMORY BETWEEN THE TOP OF THE /O OVERLAYS AND
; THE BEGINNING OF THE /V OVERLAYS.  ADJUST "BOTTOM" TO EFFECT LINKING
; TO TOP.  (TOP = HIGH LIMIT OF ROOT + /O OVERLAYS.)
; INPUT: R3 = ADR OF ASECT IN SYMBOL TBL
; OUTPUT: R4 = SIZE OF ASECT
;-

VRSWT:	BIT	SWITCH,#SW.Y	;IS THERE A /Y?
	BNE	QSWT		;YES, GO PROCESS /Q
	BIT	SWITCH,#SW.R	;IS THERE A /R?
	BEQ	QSWT		;NO, GO PROCESS /Q
	BIT	FLGWD,#XM.OVR	;IS THERE /V OVERLAYS?
	BEQ	QSWT		;NO, GO PROCESS /Q
	MOV	#BOTTOM,R5	;R5 -> DUMMY OVERLAY REGION BLOCK
	MOV	R.GSGP(R5),R1	;SET UP R1
	CLR	R0		;R0 = TOTAL SIZE (NO ID WORD IN ROOT)
	MOV	R3,R2		;R2 -> ASECT TABLE ENTRY
	CLR	-(SP)		;CURRENT LOW MEMORY HIGH LIMIT
	CLR	-(SP)		;INIT HIGHEST SEGMENT SIZE SO FAR
	CALL	SIZE1		;GET SIZE OF SEGMENT
	BR	30$		;PROCESS ROOT SEGMENT SIZE

10$:	TST	R.GNB(R5)	;IS THIS A /V REGION?	
	BMI	50$		;- -> /V -> DONE WITH ROUNDING
	MOV	R.GSGP(R5),R1	;R1 -> FIRST OVERLAY SEGMENT BLOCK
	CLR	-(SP)		;THIS IS THE HIGHEST SEGMENT SIZE SO FAR
20$:	CALL	SIZSEG		;GET SEGMENT SIZE
30$:	CMP	@SP,R0		;IS THIS THE LARGEST SEGMENT THIS REGION
	BHIS	40$		;NO
	MOV	R0,@SP		;YES, REMEMBER THE LARGEST
40$:	MOV	#2,R0		;AND ALL FURTHER SEGMENTS HAVE ID WORD
	MOV	S.GNXP(R1),R1	;R1 -> NEXT SEGMENT THIS REGION
	BNE	20$		;GOT ONE (ALWAYS FAILS FOR ROOT)
	ADD	(SP)+,@SP	;ADD IN MEMORY SIZE OF THIS REGION
	MOV	R.GNXP(R5),R5	;POINT TO NEXT OVERLAY REGION
	BNE	10$		;AND PROCESS IT
50$:	MOV	@SP,R0		;R0 = HIGH LIMIT
	ADD	#17777,R0	;ROUND TO 4K WORD BOUNDARY
	BIC	#17777,R0
	SUB	(SP)+,R0	;GET AMOUNT TO BIAS HIGH LIMIT
	ADD	R0,BOTTOM	;ADJUST TO GET A HIGH LIMIT
	ADD	R0,R4		;AND FIX ASECT OVERHEAD
	;BR	QSWT		;GO PROCESS /Q

.SBTTL	QSWT	/Q SWITCH PROCESSING

;+
; CODE BASICALLY TAKEN FROM UYSWT ROUTINE.				;MAS20+
;
; SCAN THE ROOT FOR PSECTS AGAIN. 
; EASIER TO REPEAT THIS, SINCE /Y AND /U MUST SCAN TILL BOTH ARE 
; FOUND BEFORE THEY CAN BE RESOLVED, AND /Q WILL RARELY BE USED.
;
; WHEN A PSECT IS ENCOUNTERED IN THE SYMBOL TABLE, CHECK THE /Q 
; LIST AND IF THE PSECT IS:
;
; FOUND -> UPWARD ADJUSTMENT REQUIRED -> ADD TO PREVIOUS PSECT SIZE 
; 	   TO GET ADDRESS SPECIFIED, AND ADD UP PSECT SIZES AS WE GO. 
;	   ALSO DELETE PSECT FOUND FROM /Q PSECT LIST.
;	   NOTE: ABSOLUTE PSECTS WILL BE ADJUSTED IF REQUIRED.
; FOUND	-> DOWNWARD ADJUSTMENT REQUIRED -> PRINT ERROR, AND IGNORE PSECT.
;	   BUT REMOVE PSECT FROM /Q PSECT LIST.
;
; NOT FOUND -> CONTINUE TO NEXT PSECT IN SYMBOL TABLE.
;
; END OF SYMBOL TABLE -> PRINT MESSAGE ABOUT ANY /Q PSECT NAMES NOT FOUND,
;	   AND CONTINUE LINKING.
;
; INPUTS:
;	R3 -> POINTS TO ASECT SYMBOL TABLE ENTRY
;
; REGISTERS USED:
; 	R0 -> PSECT SIZE 
;	R1 -> POINTER TO /Q LIST
;	R2 -> POINTER TO PSECT IN SYMBOL TABLE
;	R5 -> POINTER TO PREVIOUS PSECT
;
; OUTPUT:
; 	R3 - NO CHANGE
;	R0,R1,R2,R5 -> RANDOM VALUES
;-

QSWT:	TST	REGION		;IS /Q SWTICH PROCESSING REQUIRED?	
	BEQ	XMRND		;NO (BEQ NEXT SWITCH PROCESSING)
	CLR	R0		;INITIALIZE SIZE
	MOV	R3,R2		;R2 -> ROOT'S BEGINNING
	MOV	R3,R5		;INIT PREVIOUS SECTION 
	MOV	QSWVAL,R1	;SET UP POINTER TO START OF /Q LIST
	BR	30$		;NOW GO

10$:	MOV	QSWVAL,R1	;RESET POINTER TO START OF /Q LIST
20$:	MOV	@R2,R2		;R2 -> NEXT SYMBOL
	BIC	#SY.ENB,R2	;ISOLATE POINTER
	BEQ	100$		;DONE WITH SYMBOL TABLE, FIND ALL /Q PSECTS?
	SYMADR	R2		;R2 -> SYMBOL BLOCK
30$:	BIT	S.YSN(R2),#SY.SEC ;SECTION?
	BEQ	20$		;NO
40$:	CMP	R1,PA2LML	;ARE WE AT END OF /Q LIST?
	BHIS	90$		;= -> YES, DO NEXT SYMBOL
	CMP	S.YNAM(R2),@R1	;SECTION NAME MATCH?
	BNE	50$		;NO
	CMP	S.YNAM+2(R2),2(R1) ;MAY BE
	BEQ	60$		;= -> FOUND ONE
50$:	ADD	#6,R1		;TRY NEXT SYMBOL IN /Q LIST
	BR	40$		;LOOP TILL ALL /Q PSECTS TESTED

;+
; FOUND A PSECT IN /Q LIST. REMOVE FROM LIST AND ADJUST PREVIOUS 
; PSECT IF REQUIRED.
;-

60$:	CLR	(R1)+		;CLEAR PSECT NAME IN /Q LIST
	CLR	(R1)+		;TO INDICATE IT WAS FOUND
	CMP	@R1,R0		;IS IT AN UPWARD ROUND?
	BHIS	70$		;HIS -> OK FOR ADJUSTMENT
	MOV	R0,-(SP)	;SAVE SINCE ERROR$ USES IT
	MOV	R2,R0		;COPY R2
	ADD	#S.YNAM,R0	;R0 -> SECTION NAME
	ERROR$	ERR63,E$W,E$SYM,R0 ;SECTION ROUND DOWN ERROR
	MOV	(SP)+,R0	;RESTORE R0
	BR	90$		;ADD IN SECTION SIZE AND CONTINUE

70$:	SUB	R0,@R1		;FIND ADDITIONAL AMOUNT REQUIRED, AND ADD
	ADD	@R1,S.YVAL(R5) 	;TO THE SECTION BEFORE THE /Q
	BCC	80$		;C=0 IF OK
	MOV	R0,-(SP)	;SAVE REGISTER USED IN ERROR$
	MOV	R2,R0		;COPY NAME POINTER
	ADD	#S.YNAM,R0	;R0 -> SECTION NAME
	ERROR$	ERR47,E$W,E$SYM,R0 ;SIZE OVERFLOW OF SECTION <SYMBOL>
	MOV	(SP)+,R0	;RESTORE REGISTER
80$:	ADD	@R1,R0		;RESET R0 PROPERLY
	BCS	TOBIG1		;C=1 -> ADDRESS OVERFLOW

; ADD IN CURRENT PSECT SIZE

90$:	INC	R0		;WAS EVEN NOW MAKE ODD
	BEQ	TOBIG1		;PREVENT WRAP ON R0=177777
	ADD	S.YVAL(R2),R0	;COLLECT SIZE
	BCS	TOBIG1		;C=1 IF ADDRESSING OVERFLOW
	BIC	#1,R0		;GET RID OF ODD IF ADDED EVEN SIZE
	MOV	R2,R5		;REMEMBER PREVIOUS SECTION 
	BR	10$		;AND LOOP

; END OF SYMBOL TABLE, DID WE FIND ALL /Q PSECTS?

100$:	MOV	QSWVAL,R1	;SET POINTER TO START OF /Q LIST
110$:	CMP	R1,PA2LML	;ARE WE AT THE END OF THE LIST?	
	BHIS	XMRND		;GE -> ALL DONE WITH /Q PROCESSING
	TST	@R1		;IS WORD A ZERO?
	BNE	120$		;NE -> DIDN'T FIND THIS PSECT
	TST	2(R1)		;MIGHT HAVE FINISHED
	BEQ	130$		;THIS PSECT OK, TRY NEXT
120$:	ERROR$	ERR64,E$W,E$SYM,R1 ;/Q LOAD SECTION NOT FOUND
130$:	ADD	#6,R1		;CHECK NEXT PSECT POSITION
	BR	110$		;FOR SECTION NOT FOUND			;MAS20-


.SBTTL	SIZSEG	FIND SIZE OF AN OVERLAY SEGMENT				

;+
; CODE REMOVED FROM /H SWITCH PROCESSING (HSWT) TO BE SHARED WITH XMRND	;MAS15+
; SIZE1: -> ENTRY POINT USED BY HSWT ON 1ST CALL
; SIZSEG:-> NORMAL ENTRY POINT
;
; INPUT:R1 -> OVERLAY SEGMENT BLOCK POINTER
;	R0 -> RUNNING SUM OF SEGMENT SIZE
; TEMP:	R2 -> POINTER TO NEXT SYMBOL AND SECTION
;
; OUTPUT:R1 -> UNCHANGED
;	 R2 -> POINTER TO LAST SECTION IN SEGMENT
;	 R0 -> THIS SEGMENT SIZE ADDED IN
;-

.ENABL	LSB
SIZE1:	MOV	R2,-(SP)	;FAKE SAVE -> FOR STACK TO COME OUT RIGHT
	BR	20$		;NOW ENTER ROUTINE IN MIDDLE

SIZSEG:	MOV	@R1,-(SP)	;SAVE POINTER TO 1ST SECTION IN SEGMENT
	MOV	R1,R2		;COPY POINTER
10$:	MOV	@R2,R2		;R2 -> NEXT SYMBOL
	BIC	#SY.ENB,R2	;ISOLATE POINTER
	BEQ	30$		;DONE THIS SEGMENT
	SYMADR	R2		;R2 -> SYMBOL BLOCK
20$:	BIT	S.YSN(R2),#SY.SEC ;IS THIS A SECTION ?
	BEQ	10$		;NO, MOVE ON
	ADD	S.YVAL(R2),R0	;YES, UPDATE SIZE OF THIS SEGMENT
	INC	R0		;EVEN IT OUT
	BIC	#1,R0
	MOV	R2,@SP		;RESET LINK POINTER TO LAST SECTION DONE
	BR	10$		;AND GO ON

30$:	MOV	(SP)+,R2	;SET R2 TO LAST SECTION IN SEGMENT
	RETURN								;MAS15-
.DSABL	LSB

.SBTTL	XMRND	ROUND ALL XM SEGMENTS TO 32. WORDS

;+
; XM SEGMENT SIZES MUST BE MULTIPLES OF 32. WORDS. THE XM SEGMENTS 	;MAS15+
; WILL ALL BE ROUNDED UP TO 32. WORDS (100 OCTAL BYTES=32. WORDS).
; INPUT:R3 -> ADR ASECT SYM TABLE ENTRY
;	R4 -> SIZE OF ASECT
; TEMP:	R0 -> SEGMENT SIZE 
;	R1 -> OVERLAY SEGMENT DEFINITION BLOCK POINTER
;	R2 -> TEMP SECTION POINTER
;	R5 -> PARTITION DEFINITION BLOCK POINTER
;
; OUTPUT:R3 AND R4 THE SAME
;	 R0, R1, R2 ,R5 ARE DESTROYED
;-

TOBIG1:	JMP TOOBIG		;GIVE ERROR

XMRND:	BITB	#XM.OVR,FLGWD	;/V BIT SET?
	BEQ	50$		;= -> NOT /V
	CLR	REGION		;MAKE SURE THIS IS CLEARED		;MAS20
	MOV	#BOTTOM,R5	;GET 1ST PARTITION BLOCK
10$:	MOV	R.GNXP(R5),R5	;GET NEXT BLOCK (1ST IS ROOT)
	BNE	20$		;= ILLEGAL ERROR
	JMP	ILERR		;SHOULDN'T GET HERE

20$:	TST	R.GNB(R5)	;IS THIS A /V PARTITION?
	BPL	10$		;+ -> NOT /V

	; HAVE FOUND THE 1ST /V OVERLAY PARTITION.
	; START ROUNDING LAST PSECT IN EACH SEGMENT SO THE SEGMENT SIZE
	; (INCLUDING THE ID WORD) COMES TO A 32. WORD BOUNDARY.

	CLR	R0		;R0 -> SEGMENT SIZE
30$:	MOV	R.GSGP(R5),R1	;R1 -> OVERLAY SEGMENT BLK IN 1ST XM PARTITION
40$:	CALL	SIZSEG		;GET SEGMENT SIZE
	MOV	R0,-(SP)	;SAVE SIZE
	ADD	#101,R0		;ROUND UP TO 32. WORDS, AND ADD IN SEG ID
	BCS	TOBIG1		;C=1 -> SIZE OVERFLOW
	BIC	#77,R0		;CLEAR BITS LESS THAN 32. WORDS
	SUB	#2,R0		;SUB SEGMENT ID WORD
	SUB	(SP)+,R0	;GET DIFF. BET 32. WORD ROUND AND REAL SIZE
	ADD	R0,S.YVAL(R2)	;ADJUST LAST PSECT SIZE TO GET 32. WD BOUNDARY
	CLR	R0		;RESET R0
	MOV	S.GNXP(R1),R1	;GET NEXT SEGMENT IN PARTITION
	BNE	40$		;= -> NO NEXT SEGMENT
	MOV	R.GNXP(R5),R5	;TRY FOR NEXT PARTITION
	BNE	30$		;= -> NO MORE PARTITIONS
50$:	JMP	MAPHDR							;MAS15-

.SBTTL	OV4DUM:: DUMMY ENTRY POINT FOR ERROR PROCESSING

OV4DUM::RTS	R5

.PSECT	PATCH			;THIS IS A PATCH PSECT,

	.BLKW	64.		;TO BE USED FOR BUG FIXES

.END
