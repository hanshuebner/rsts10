TITLE	EC,<ECONOMIZER>,08,13-MAY-86,TPH/MHB/JDM

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.

	DEFORG	EC
	.GLOBL	ECONOM


	.GLOBL	EDSAVE,EDREST,BASFRC,EDRSR1,PRESET
	.GLOBL	ZOTALL,EDFIPK,GETBUF

PLUSTA=	2		;LOW LIM VARIABLE PART OF STR OR PUSH-POP
MINSTA=	4		;HIGH LIM VARIABLE PART OF HDR OR TAG
PLUDYN=	6		;CURRENT POINTER STR OR PUSH-POP
MINDYN=	10		;CURRENT POINTER HDR OR TAG
PLULIM=	12		;HIGH LIM STR OR PUSH-POP
MINLIM=	14		;LOW LIM HDR OR TAG

;CALL:
;	R1	R1 STACK
;	JSR	R5,ECONOM
;	XXXNOM			;XXX IS AREA IN WHICH SPACE IS NEEDED
;RTRN:
;	R0	SPDA
;	R1	R1 STACK
;	R2-R5	PRESERVED

XXXNOM=	20+XRBSIZ	;TMP STORAGE REL SP

ECONOM:	MOV	(R5)+,-(SP)	;PICK UP XXXNOM
	JSR	R5,EDSAVE	;SAVE R2-R5
	MOV	#XRB,R5		;POINT TO THE XRB
	MOV	#XRBSIZ/2,R4	; AND GET ITS SIZE IN WORDS
10$:	MOV	(R5)+,-(SP)	;SAVE XRB
	SOB	R4,10$		; IN THIS LOOP
	MOV	SPTA,R5		;ACCESS TO HIGH SEG
	MOV	#177776,R4	;USEFUN MASK
	MOV	PLUDYN(R5),-(SP);GET PUSH-POP LIMIT
	BIC	R4,(SP)		;IS IT ODD?
	ADD	(SP),PLUDYN(R5)	;SAVE PARITY/MAKE LIMIT EVEN
	MOV	SPDA,R0		;ACCESS TO DATA
	MOV	PLUDYN(R0),-(SP);MAKE ITS LIMIT EVEN ALSO
	BIC	R4,(SP)		;AND SAVE THE LOW BIT
	ADD	(SP),PLUDYN(R0)	;TO RESTORE FROM STACK
	MOV	R1,-(SP)	;R1 ALSO MUST BE EVEN
	BIC	R4,(SP)		;ODD BIT
	SUB	(SP),R1		;NOW R1 MUST BE EVEN
	CMP	#STRNOM,XXXNOM(SP);ARE WE OUT OF STRING SPACE?
	BNE	4$		;NO
	JSR	PC,RECYCL	;RECYCLE OLD STRINGS
	MOV	PLULIM(R0),R2	;SEE HOW MUCH FREE STRING SPACE NOW
	SUB	PLUDYN(R0),R2	;IS IT AS MUCH OR MORE THAN CALLED FOR?
	CMP	R2,STRNOM(R0)	;USER PUT HIS DESIRE HERE
	BHIS	3$		;THERE IS ENOUGH NOW
	BR	1$		;NOT ENOUGH, TRY REALLOCATING

4$:	JSR	PC,GCFIT	;SUM UP NOMINALS, AVAILABLE SPACE
	BMI	1$		;NOMINALS > 32K, YECH
	CMP	R2,SUMNOM(R0)	;WILL REALLOCATION SUFFICE?
	BHIS	2$		;YES, THERE IS ENOUGH TO GO AROUND
	JSR	PC,RECYCL	;NO, SO RECYCLE STRINGS FIRST
1$:	JSR	PC,ADJUST	;PUNISH OR REWARD NOMINALS
2$:	JSR	PC,REALOC	;REDISTRIBUTE THE AVAILABLE SPACE
3$:	ADD	(SP)+,R1	;RESTORE R1 LOW BIT
	SUB	(SP)+,PLUDYN(R0);RESTORE LOW BIT TO STRING LIMIT
	MOV	SPTA,R5		;AND ALSO TO PUSH-POP LIMIT
	SUB	(SP)+,PLUDYN(R5);(REALOC MOVED WORDS)
	MOV	#XRB+XRBSIZ,R5	;GET JUST BEYOND THE XRB
	MOV	#XRBSIZ/2,R4	; AND GET XRB SIZE IN WORDS
20$:	MOV	(SP)+,-(R5)	;RESTORE THE XRB
	SOB	R4,20$		; IN THIS LOOP
	JSR	R5,EDREST
	TST	(SP)+		;REMOVE XXXNOM
	MOV	SPDA,R0		;RESTORE BASE
	RTS	R5

	.SBTTL	RECYCL - RECOVER USED STRINGS

;CALL:
;	R0	SPDA
;	R1	R1 STACK
;	JSR	PC,RECYCL
;RTRN:
;	R0	SPDA
;	R1	R1 STACK
;	R2-R5	SCRATCH

BIT:	.BYTE	200,100,40,20,10,4,2,1

BITTAB=	BASBUF
BITTLN=	256.		;WORDS
SLICSZ=	BITTLN*2*8.*2	;BYTES

RECYCL:	JSR	PC,BASFRC	;FLUSH .TMP BUFFER TO USE AS BITTAB
	CLR	CURBLK(R3)	;NO USEFUL BLOCK IN BUFFER
	CLRB	CURBKM(R3)	; IN BOTH PLACES
	MOV	R1,-(SP)	;SAVE R1
	MOV	PLUSTA(R0),R1	;GET STRING AREA BOTTOM
	ADD	R0,R1		;MAKE ABSOLUTE
	MOV	R1,-(SP)	;PACK FROM HERE/INITIAL SLICE BASE
SLICLP:	MOV	SPDA,R0		;RESTORE SPDA/POINTER TO STRING LIST
	MOV	(SP),R2		;COMPUTE NEW SLICE BASE
	SUB	R0,R2		;RELATIVE FOR COMPARISON
	CMP	R2,PLUDYN(R0)	;IS NEXT BASE OFF END?
	BLO	GCMARK		;NO, PROCESS A SLICE, RETURN TO SLICLP
	SUB	R0,R1		;MAKE THE PACKING LIMIT RELATIVE
	MOV	R1,PLUDYN(R0)	;AND SAVE AS THE NEW "FREE" PNTR
	TST	(SP)+		;REMOVE SLICE BASE
	MOV	(SP)+,R1	;RESTORE R1
	RTS	PC		;DONE


	.SBTTL	GCMARK - RECYCLER'S MARKING PHASE

;GCMARK MARKS EACH STRING WITHIN SLICE IN THE BITTAB
;IT ALSO SAVES FIRST TWO BYTES OF STRING IN PNTR AND PUTS A
;BACK POINTER TO STRING HEADER IN PLACE OF THESE TWO BYTES.
;IF A STRING WAS ALREADY POINTED TO BY A HEADER
;PREVIOUSLY ENCOUNTERED ON THE STRING LIST THE SIGN BIT OF LEN IS SET.

;ENTRY:
;	R0	SPDA
;	R1	PACKING POINTER
;	R2-R5	SCRATCH
;	(SP)	SLICE BASE
;USAGE:
;	R0	CURRENT STRING HEADER (GOING DOWN STRING LIST)
;	R2	ABSOLUTE STRING LOC.
;	R3	SPDA+INDEX TO BITTAB
;	R4	INDEX TO BIT


LEN=	4		;LENGTH STRING REL HEADER

GCMARK:	MOV	#BITTLN,R5	;WORDS IN BIT TABLE
	MOV	#BITTAB,R4	;RELATIVE BITTAB
	ADD	R0,R4		;NOW ABSOLUTE
9$:	CLR	(R4)+		;CLEAR THE BITTAB
	SOB	R5,9$		;EVERY WORD
1$:	TST	(R0)		;END OF STRING LIST?
	BEQ	GCSWEP		;YES, TIME TO COMPACT
	ADD	(R0),R0		;SLIP DOWN TO NEXT HEADER
	MOV	R0,R2		;ABSOLUTE TO HEADER
	TST	LENGTH(R2)	;SKIP NULL STRINGS
	BEQ	1$		;THEY CAUSE TROUBLE
	ADD	PNTR(R2),R2	;ABSOLUTE TO STRING
	MOV	R2,R3		;COPY TO BREAK UP
	JSR	PC,GCBKUP	;BREAK UP ADDRESS
	BCS	1$		;OUT OF SLICE
	ADD	SPDA,R3		;ADD DATA BASE TO BYTE INDEX
	BITB	BIT(R4),BITTAB(R3);DID WE SEE THIS STRING BEFORE?
	BEQ	2$		;IF NOT; IT IS A PRIMARY REFERENCE
	BIS	#100000,LEN(R0)	;IT IS SECONDARY, NOTE THAT FACT
2$:	BISB	BIT(R4),BITTAB(R3);A STRING STARTS HERE!
	MOV	(R2),PNTR(R0)	;FIRST TWO BYTES OF THE STRING
	MOV	R0,(R2)		;BACK POINTER FROM STRING
	BR	1$


	.SBTTL	GCBKUP - BREAK ABS ADDRESS INTO BIT AND BYTE INDICES

;CALL:
;	R3	ABSOLUTE ADDRESS
;	(SP)	SLICE BASE
;	JSR	PC,GCBKUP
;RTRN:
;	C	SET IFF ADDRESS NOT IN SLICE
;	R3	BYTE INDEX INTO BITTAB
;	R4	BIT INDEX INTO BIT
;	R0,R1,R2,R5	PRESERVED

GCBKUP:	SUB	2(SP),R3	;RELATIVE TO SLICE BASE
	BLO	1$		;IF BELOW SLICE
	CMP	R3,#SLICSZ	;IS IT ABOVE SLICE
	BHIS	1$		;IF ABOVE
	ASR	R3		;STRING POINTERS KNOWN TO BE EVEN
	MOV	R3,R4		;WILL BE THE BIT PART
	BIC	#-BITTLN*2,R3	;MASK FOR BYTE IN BITTAB
	BIC	R3,R4		;CLEAR THESE OUT OF BIT PART
	SWAB	R4		;**GET BIT ADDRESS RIGHT JUSTIFIED
	ASR	R4		;**THESE INSTRUCTIONS DEPEND ON BITTLN
	RTS	PC

1$:	SEC			;OUT OF SLICE
	RTS	PC

	.SBTTL	GCSWEP - RECYCLER'S COMPACTING PHASE

;USAGE:
;	R0	BITTAB BYTE POINTER
;	R1	PACKING POINTER
;	R2	BIT INDEX
;	R3	COUNT OF BYTES-TO-GO IN SWEEP OF BITTAB
;	R4	BIT/STRING STARTING ADDRESS
;	R5	BITTAB INDEX/STRING HEADER ADDRESS
;	(SP)	SLICE BASE

GCSWEP:	CLR	R2		;BIT INDEX - LEFT TO RIGHT SCAN
2$:	MOV	SPDA,R0		;GET DATA BASE
	MOV	PLUDYN(R0),R3	;END OF ACTIVE STRING AREA
	ADD	R0,R3		;NOW ABSOLUTE
	JSR	PC,GCBKUP	;BREAK IT UP
	BCS	8$		;NOT IN THIS SLICE
	CMP	R2,R4		;CHECK BIT INDEX
	BHI	10$		;DONE!
	BLO	8$		;MUST SWEEP ALL THIS BIT
	TST	R3		;CHECK THE BYTE INDEX
	BNE	5$		;SHORT SWEEP CYCLE
	BR	10$		;NONE TO DO

8$:	MOV	#BITTLN*2,R3	;LOOP ON BYTES IN BITTAB
5$:	ADD	#BITTAB,R0	;ABS BIT TABLE BASE
	MOVB	BIT(R2),R4	;GET BIT FOR FAST LOOP
1$:	BITB	R4,(R0)+	;SEARCH FOR BIT ON
	BNE	3$		;A STRING STARTS HERE
9$:	SOB	R3,1$		;LOOP THROUGH ALL BITTAB
	INC	R2		;AND THEN SHIFT OVER A BIT
	CMP	R2,#8.		;SEE IF ALL BITS SCANNED-FOR
	BNE	2$		;NO
10$:	ADD	#SLICSZ,(SP)	;INDEX UP TO NEXT SLICE
	BR	SLICLP


3$:	MOV	R2,R4		;MAKE STRING ADDRESS
	ASL	R4		;**HIGH PART IS FROM BIT
	SWAB	R4		;**THESE INSTS DEPEND ON BITTLN
	MOV	R0,R5		;WORK ON THE BYTE ADDRESS
	SUB	#BITTAB+1,R5	;REMOVE THE BITTAB BASE PART
	SUB	SPDA,R5		;REMOVE DATA BASE
	BIS	R5,R4		;COMBINE PARTS
	ASL	R4		;REMEMBER THIS SHIFT FROM BEFORE?
	ADD	(SP),R4		;ADD SLICE BASE=STRING ADDRESS
	MOV	(R4),R5		;LO, THE HEADER ADDRESS WE STUCK HERE
6$:	MOV	PNTR(R5),-(SP)	;SAVE BACK LINK/2 BYTES OF STRING
	MOV	R1,PNTR(R5)	;NEW STRING LOCATION
	SUB	R5,PNTR(R5)	;MAKE RELATIVE
	TST	LEN(R5)		;SEE IF PRIMARY OR SECONDARY REFERENCE
	BPL	4$		;IF PRIMARY
	BIC	#100000,LEN(R5)	;CLEAR THE FLAG BIT
	MOV	(SP)+,R5	;THAT WAS A BACK POINTER
	BR	6$		;TRACK FURTHER

4$:	MOV	(SP)+,(R4)	;THAT WAS 2 BYTES OF STRING
	MOV	LEN(R5),R5	;# BYTES TO COMPACT
	ASR	R5		;ROUND UP TO WORDS
	ADC	R5		;NOW WORDS
	BEQ	11$		;DONE IF NULL STRING
7$:	MOV	(R4)+,(R1)+	;MOVE ONE STRING WORD DOWN
	SOB	R5,7$		;MOVE EVERY ONE OF THEM
11$:	MOVB	BIT(R2),R4	;RESTORE THE TEST BIT
	BR	9$		;CONTINUE SCAN

	.SBTTL	CORE ALLOCATOR ROUTINES
	.SBTTL	ADJUST - PUNISH OR REWARD NOMINALS

WELFAR=	60			;IF NOM SHRINKS<=40 RESTORED TO THIS

ADJUST:	MOV	XXXNOM+2(SP),R4	;PICK UP AREA INDICATOR
	CMP	R4,#STRNOM	;NO ADJUSTMENT TO THIS ONE
	BEQ	PUNISH		;SO SKIP
	CLR	STRNOM(R0)	;LET IT JUST GET LEFT OVERS
	ADD	R0,R4		;MAKE ABSOLUTE
	MOV	(R4),R5		;MULTIPLY NOMINAL
	ASR	R5		;BY 1.25
	ASR	R5
	ASR	R5		;LESS ONE IF ODD
	ASL	R5
	ADD	R5,(R4)		;UPDATE PARAMETER
PUNISH:	MOV	#TAGNOM,R3	;PUNISH EACH NOM NOW
	ADD	R0,R3		;THUS REDUCING THE REWARDED ONE
	MOV	#3,R2		;PUNISH BY MULT BY (1-1/16)
1$:	MOV	(R3),R4		;OLD VALUE
	ASH	#-5,R4		;PUNISH IT
	ASL	R4		;AND LESS ONE IF ODD
	SUB	R4,(R3)		;REWARD IS 75/64
	BEQ	3$		;0 OK -- FOR RO SYSTEM
	CMP	(R3),#40	;MINIMUM VALUE ALLOWED OTHERWISE
	BHIS	3$		;BIG ENOUGH
	MOV	#WELFAR,(R3)	;SUBSISTANCE
3$:	TST	(R3)+		;ADVANCE TO NEXT PARAMETER
	SOB	R2,1$		;LOOP THROUGH ALL
	RTS	PC


	.SBTTL	GCFIT - SUMS UP FREE SPACE AND NOMINALS

GCFIT:	MOV	R1,R2		;STACK POINTER
	SUB	#NSTORG,R2	;LESS BOTTOM GIVES FREE SPACE
	JSR	PC,CASUMF	;SUM FREE STRING AND STRING HEADER
	MOV	SPTA,R0		;PROGRAM BASE
	JSR	PC,CASUMF	;SUM FREE PUSH-POP AND STATEMENT HDR
	MOV	#TAGNOM,R3	;SUM SOME NOMINALS
	ADD	R0,R3		;ABSOLUTE
	MOV	(R3)+,R4	;TAG
	ADD	(R3)+,R4	;PRO
	ADD	(R3)+,R4	;HDR
	MOV	R4,NSTRNM(R0)	;SAVE THESE
	BMI	GCFITX		;OVERFLOW
	TST	(R3)+		;SKIP STRNOW
	ADD	(R3),R4		;STR
	ADD	R1SNOM(R0),R4	;LAST R1S
	MOV	R4,SUMNOM(R0)	;SAVE ALL HERE
GCFITX:	RTS	PC

	.SBTTL	REALOC - REALLOCATE FREE SPACE
PTAOFF=	0		;PTA OFFSET RELATIVE SP (TMP STORAGE)
PDAOFF=	2
R1SOFF=	4

REALOC:	.STAT			;GET CORE SIZE PARAMETERS
	MOV	XRB+XRLEN,R5	;CURRENT SIZE
	JSR	PC,GCFIT	;COMPUTE SUMS
	BMI	3$		;IF OVERFLOW
2$:	CMP	R2,SUMNOM(R0)	;IF TOTAL SMALL NEED MORE CORE
	BGE	1$		;NO NEED
	CMP	R5,XRB+XRLOC	;MAX SIZE FOR THIS JOB
	BLO	4$		;YES
	BIT	#JFBIG,JOBF	;ALLOWING BIG JOB?
	BEQ	5$		;NOPE
	CMP	R5,XRB+XRCI	;YES, UP TO REAL LIMIT YET?
	BLO	4$		;NOT YET
5$:	JSR	PC,99$		;NOW GET THE MEMORY
	CMP	NSTRNM(R0),#3*WELFAR	;IF LESS THAN THIS
	BLO	3$		;GIVE UP
	JSR	PC,PUNISH	;ELSE KEEP REDUCING NOMS
	BR	REALOC		;AND TRYING AGAIN

99$:	MOV	R5,XRB+XRLEN	;NOW SET NEW K SIZE
	.CORE			; AND ASK THE MONITOR FOR IT
	TSTB	IOSTS		;ERROR?
	BEQ	GCFITX		;NO ERROR, JUST EXIT
3$:	JSR	PC,EDRSR1	;RESET R1 STACK
	JSR	PC,PRESET	;CLEAR ALL VARIABLES - RELEASE STRINGS
	JSR	PC,ZOTALL	;CLOSE ALL USER FILES
	JSR	PC,GETBUF	;NOW GRAB A FIRQB AND
	MOVB	XCDCHN,FQFIL(R4);SET (POSSIBLE) EXTRA CHANNEL TO CLOSE
	BEQ	6$		;THERE IS NONE
	JSR	R5,EDFIPK	;THERE IS ONE, SO CALL FOR
	+	RSTFQ		; A RESET TYPE CLOSE ON IT
6$:	SETERR	XCDCOR		;TO GET TO EDERRN
	IOTERR	!FATAL		;AFTER XCDCOR ERROR

4$:	INC	R5		;ONE MORE K O CORE
	MOV	SPTA,R4		;ADD TO PUSH-POP AREA
	ADD	#BLKLEN,PLULIM(R4);=1 K O CORE
	ADD	#BLKLEN,R2	;AND TO SUM
	BR	2$

1$:	SUB	NSTRNM(R0),R2	;PUT ALL EXTRA SPACE
	MOV	R1SNOM(R0),R4	;GET NOMINAL R1 SPACE
	SUB	R4,R2		;REMOVE IT FROM EXTRA
	MOV	R2,STRNOW(R0)	;IN STRING AREA
	JSR	PC,99$		;GET THE DESIRED K OF MEMORY

	SUB	R1,R4		;LESS CURRENT POINTER
	ADD	#NSTORG,R4	;PLUS LOWER LIMIT
	MOV	R4,-(SP)	;SAVE OFFSET [R1SOFF]
	ADD	R1CORG,R4	;NEW R1 STACK ORIGIN
	ADD	HDRNOM(R0),R4	;BY SEEING HOW IT MOVES FROM BOTTOM
	SUB	MINDYN(R0),R4	;(WHICH IS R1 STACK ORG)
	SUB	R0,R4		;OFFSET FOR DATA AREA
	MOV	R4,-(SP)	;SAVE IT [PDAOFF]
	ADD	STRNOW(R0),R4	;TO GET TO BOUNDARY OF DATA AND PROGRAM
	ADD	PLUDYN(R0),R4	;ADD TWO PIECES
	ADD	R0,R4		;NOW ABSOLUTE NEW ADDRESS OF BOUNDARY
	MOV	SPTA,R2		;PROGRAM BASE
	ADD	TAGNOM(R0),R4	;NOW COMPUTE LAST OFFSET
	SUB	MINDYN(R2),R4	;SAME WAY
	SUB	R2,R4		;NOW OFFSET FOR PROGRAM AREA
	MOV	R4,-(SP)	;SAVE IT [PTAOFF]
	TST	PDAOFF(SP)	;SEE WHICH WAY PDA GOES
	BPL	CA10		;IF UP MOVE PROGRAM,DATA,STACK
	JSR	PC,CAMR1S	;IF DOWN, MOVE STACK
	JSR	PC,CAMPDA	;	DATA
	JSR	PC,CAMPTA	;	PROGRAM
	BR	CA99		;WHEH!

CA10:	JSR	PC,CAMPTA	;MOVE PROGRAM
	JSR	PC,CAMPDA	;	DATA
	JSR	PC,CAMR1S	;	STACK
CA99:	MOV	R1SOFF(SP),R5	;R1 STACK OFFSET
	ADD	R5,R1CORG	;UPDATE R1
	ADD	R5,R1RING	;RELATING TO CSR'S
	ADD	R5,R1		;UPDATE R1 STACK POINTER
	SUB	PDAOFF(SP),R5	;BETWEEN R1S AND PDA
	MOV	MINDYN(R0),R4	;AND TO HEADER ACTIVE REGION
	CMP	(R0),R4		;IS FIRST HEADER ON STACK?
	BGE	CA98		;NO, SO NONE TO RELOC
	ADD	R5,(R0)		;YES,SO UPDATE POINTER
	MOV	R0,R4
	ADD	(R4),R4		;AND GET ABS POINTER TO HEADER ON STACK
CA97:	SUB	R5,2(R4)	;NOW IT IS DIFFERENT DISTANCE TO STRING
	MOV	R4,R3
	ADD	(R4),R4		;NEXT ITEM
	CMP	R4,R1CORG	;DOES IT POINT OFF STACK?
	BLO	CA97		;NO
	SUB	R5,(R3)		;YES, BETTER RELOC
CA98:	MOV	BASE+CURLOC(R0),R2	;FIX DATA POINTER
	ADD	#BASE,R2	;RELATIVE POINTER
	MOV	(SP)+,R3	;[PTAOFF] FIGURE CRAZY RELOCATION
	SUB	(SP)+,R3	;[PDAOFF]
	CMP	R2,PLUDYN(R0)	;CK FOR CORSS STRING AREA
	BLO	CA981		;NO
	ADD	R3,BASE+CURLOC(R0)	;AND MOVE IT IN
CA981:	JSR	PC,CA98S	;CLEAR FREE STRING HEADER SPACE
	MOV	SPTA,R0		;CLEAR TAG SPACE
	TST	(SP)+		;[R1SOFF] DROP TO CLEAR TAG SPACE

CA98S:	MOV	MINDYN(R0),R2	;USE R2 FOR COUNT
	SUB	MINLIM(R0),R2	;OF NUMBER OF FREE BYTES
	ASR	R2		;ERR, I MEAN WORDS
	BEQ	CA98B		;IN CASE THERE AREN'T ANY
	ADD	MINDYN(R0),R0	;POINTER TO HIGH END OF FREE AREA
CA98A:	CLR	-(R0)		;CLEAR ONE WORD
	SOB	R2,CA98A	;AND WORK UNTIL DONE
CA98B:	BR	CA130


;ROUTINE TO SUM UP FREE SPACE IN SPXA AREA

CASUMF:	ADD	#PLUDYN,R0	;AIM AT RELEVENT BLOCK
	SUB	(R0)+,R2	;+DYN
	ADD	(R0)+,R2	;-DYN
	ADD	(R0)+,R2	;+LIM
	SUB	(R0),R2		;-LIM
	BR	CA130		;RESTORE SPDA AND RETURN

	.SBTTL	REALOC'S MOVING ROUTINES


CAMPDA:	MOV	#STRNOW,R3	;SET UP ACCESS TO NOMS
	ADD	R0,R3		;ABSOLUTE
	MOV	PDAOFF+2(SP),R4	;AND OFFSET
	JSR	PC,CAMOVE	;MOVE IT
	ADD	R0,SPDA		;UPDATE SPDA
	MOV	#9.,R3		;AND MANY OTHER PLACES
	MOV	#COSI,R5	;FROM HERE
CA13:	ADD	R0,(R5)+	;ALL IN CSR AREA
	SOB	R3,CA13
	BR	CA130		;RESTORE DATA POINTER

CAMPTA:	MOV	R0,R3		;MAKE AN ABSOLUTE POINTER
	ADD	#PRONOM,R3	;TO NOMINALS AREA
	MOV	SPTA,R0		;MOVE PROGRAM AREA
	MOV	PTAOFF+2(SP),R4	;BY THIS MUCH
	JSR	PC,CAMOVE	;UP OR DOWN AS APPROPRIATE
	ADD	R0,SPTA		;UPDATE SPTA
	ADD	R0,SCTH		;AND SCTH
	ADD	R0,R5RING	;IS SOMETIMES SAVED IPC
CA130:	MOV	SPDA,R0		;RETRIEVE SPDA
	RTS	PC

CAMR1S:	MOV	R1CORG,R2	;SEE HOW MUCH JUNK ON STACK
	MOV	R1SOFF+2(SP),R4	;GET STACK OFFSET
	BPL	CAMR1A		;IF IT GOES UP
	MOV	R1,R5		;IF DOWN MOVE IT NOW
	ADD	R1,R4		;MOVE IT TO HERE
	SUB	R1,R2		;WHICH NEEDS TO BE MOVED
	BR	CAMOVD		;DOWN

CAMR1A:	MOV	R2,R5		;PRESENT BASE OF STACK
	SUB	R1,R2		;NUMBER BYTES TO BE MOVED
	ADD	R5,R4		;NEW BASE
	BR	CAMOVU		;TAKE IT FELLOWS

;ROUTINE TO MOVE AREA TO ESTABLISH NOMINAL FREE SPACE.
;ASSUMES BASE FOR AREA IN R0.  RESETS LIMIT PARAMETERS.

;CALL:
;	R0	SPDA OR SPTA
;	R3	PNTR TO NOM FOR PLUS AREA
;	R4	OFFSET FOR THE AREA
;	JSR	PC,CAMOVE
;RTRN:
;	R0	OFFSET THAT WAS IN R4
;	R1	PRESERVED
;	R2,R3,R4,R5	JUNK

CAMOVE:	MOV	PLUDYN(R0),R2	;GET CURRENT LIMIT
	MOV	R2,R5		;SET NEW UPPER LIMIT
	ADD	(R3),R5		;TO CURRENT POINT PLUS NOMINAL
	MOV	R5,PLULIM(R0)	;NOW IT IS SET
	MOV	MINDYN(R0),R5	;SET NEW LOWER LIMIT
	SUB	-(R3),R5	;TO CURRENT POINT LESS NOMINAL
	MOV	R5,MINLIM(R0)	;SET NOW
	MOV	R2,R5		;COMPUTE ACTIVE REGION LENGTH
	SUB	MINDYN(R0),R2	;TO KNOW HOW MUCH TO MOVE
	ADD	R0,R5		;ABS START (OR END) FOR MOVE
	MOV	R4,R0		;MOVE UP OR DOWN?
	BEQ	CA3		;OR NO MOVE AT ALL
	BMI	CA4		;DOWN, SO START AT MIN END
	ADD	R5,R4		;UP FROM PLUDYN TO HERE
CAMOVU:	ASR	R2		;ONLY HALF AS MANY WORDS AS BYTES
	BEQ	CA3
CA2:	MOV	-(R5),-(R4)	;MOVE ONE WORD
	SOB	R2,CA2		;THESE MANY TIMES
	RTS	PC

CA4:	SUB	R2,R5		;ABS PTR TO MINDYN TO START FROM
	ADD	R5,R4		;TO HERE
CAMOVD:	ASR	R2		;HALVE COUNT
	BEQ	CA3
CA5:	MOV	(R5)+,(R4)+	;IN THIS ORDER TO AVOID OVERLAP
	SOB	R2,CA5		;THIS MANY WORDS
CA3:	RTS	PC

	.END

