TITLE	XCMA2,<MATH MODULE>,08,13-MAY-86,MHB/TGE/LD/TPH

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.

.SBTTL	2-WD FL-PT ADD,SUB,MUL,DIV,CMP, AND CONVERSION ROUTINES

	ORG	MA

;FL-PT TRAP-HANDLING ROUTINE

;FIS ENTRY
;	SP	PC
;		PS
;
.IF	DF	FIS
FIS.IN:
.GLOBL	FIS.IN
	BIT	#1,2(SP)	;DIV BY 0 BIT IN PS
	BEQ	1$		;NO
	POST	,PSTDV0
	BR	2$

1$:	POST	,PSTFLT		;NON-DESCRIPT FLOATING ERROR
2$:	CMP	(R1)+,(R1)+	;POP SECOND ARG
	CLR	(R1)		;0 RESULT
	CLR	2(R1)		;2ND HALF
	RTI
.ENDC

;FPP.IN ENTRY:
;	SP	FEC
;		FEA
;		PC
;		PS
;
.IF	DF	FPU
FPP.IN:
.GLOBL	FPP.IN
	MOV	R3,-(SP)	;SAVE R3 AND
	MOV	R5,-(SP)	; R5 ALSO
	MOV	4(SP),R3	;GET FEC
	MOV	6(SP),R5	; AND FEA ALSO
	BIT	R3,#-16-1	;IS FEC A LEGAL CODE??
	BNE	XXX.IN		;NOPE
	ADD	R3,PC		;YEP, SO INDEX ON IT
	BR	XXX.IN		; 0, UNUSED ON PDP-11/45
	BR	XXX.IN		; 2, FL. OP CODE ERROR
	BR	FPIDV0		; 4, DIVIDE BY 0
	BR	FPIICE		; 6, INTEGER CONVERSION ERROR
	BR	FPIFLO		;10, OVERFLOW
	BR	FPIFLO		;12, UNDERFLOW
	BR	FPICLR		;14, UNDEFINED VARIABLE
	BR	XXX.IN		;16, MAINT. TRAP

FPIICE:	POST,	PSTFIX		;POST ERROR
FPIEXT:	MOV	(SP)+,R5	;RESTORE R5 AND
	MOV	(SP)+,R3	; R3 ALSO
	CMP	(SP)+,(SP)+	;KNOCK OFF FEC,FEA
	RTI			;AND EXIT

FPIDV0:	POST,	PSTDV0		;POST ERROR
FPICLR:	MOV	(R5),R5		;GET INSTRUCTION IN ERROR
	ASH	#-4,R5		;SHIFT RIGHT 4 FOR
	BIC	#-14-1,R5	;FOR F0, F1, F2, OR F3 (0, 4, 10, OR 14)
	ADD	R5,PC		;NOW INDEX
	CLRF	F0		;F0<-0
	BR	FPIEXT
	CLRF	F1		;F1<-0
	BR	FPIEXT
	CLRF	F2		;F2<-0
	BR	FPIEXT
	CLRF	F3		;F3<-0
	BR	FPIEXT

FPIFLO:	POST,	PSTFLT		;POST ERROR
	BR	FPICLR		;AND ZERO A REGISTER
	.ENDC

;	FLT	THE FLOAT ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH AN INTEGER ON THE R1 STACK
;		JSR	PC,FLT
;		(RETURN)
;	RETURNS WITH THE INTEGER CONVERTED TO A FLOATING POINT NUMBER
;	ON THE R1 STACK.
;
;	$IR	IS THE TWO-WORD POLISH VERSION OF THE FLT ROUTINE
;	$ID	IS THE FOUR-WORD POLISH VERSION OF THE FLT ROUTINE
;
FLT:				;CONVERT INTEGER INTO FLOATER (SIGNED)
.IF	DF	FPU
	JSR	R4,$IR		;DO INTEGER INTO FLOATER
	.WORD	10$		;THEN RETURN
10$:
.IF	DF	DECMAP
	MOV	SCAFAC,R2	;GET SCALING POINTER
	BEQ	20$		;NO SCALING
	MULF	(R2),F0		;SCALING, SO DO IT
	STD	F0,(R1)		; AND REPLACE THE ANSWER
20$:
.ENDC	;DF	DECMAP
	MOV	(SP)+,R4	;RESTORE R4
	RETURN			; AND EXIT
.IFF
	MOV	R0,-(SP)	;SAVE R0
	JSR	R4,$IR		;DO INTEGER INTO FLOATER
.IF	DF	DECMAP
	.WORD	CHKSCL,$MLD
.IFTF
	.WORD	FIXTWO		;EXIT BY RESTORING R0 AND R4
.IFT

CHKSCL:	MOV	SCAFAC,R0	;GET SCALING POINTER
	BEQ	20$		;NO SCALING
	CALL	PUSHF2		;SCALING, PUSH THE FACTOR
10$:	JMP	@(R4)+		;EXIT

20$:	TST	(R4)+		;SKIP THE MULTIPLY
	JMP	@(R4)+		; AND CONTINUE

.ENDC	;DF	DECMAP
.ENDC	;DF	FPU

$IR:				;INTEGER INTO FLOATER
$ID:				; DITTO...
.IF	DF	FPU
.IF	EQ	FLTLEN-4
	SETD			;4-WORD
.IFF
	SETF			;2-WORD
.ENDC	;EQ	FLTLEN-4
	SETI			;SHORT INTEGERS
	LDCIF	(R1)+,F0	;CONVERT INTEGER INTO FLOATER
	STF	F0,-(R1)	; AND SAVE THE RESULT
.IFF
	MOV	R3,-(SP)	;SAVE R3
	MOV	#220+1*2,R0	;SET (BIASED) EXPONENT (DOUBLED FOR SIGN)
	CLR	R3		;LSB IS ZERO
	MOV	(R1)+,R2	;SET THE MSB FROM THE INTEGER
	BPL	10$		;POSITIVE OR ZERO, C-BIT=0 FROM 'CLR'
	NEG	R2		;NEGATIVE, CORRECT AND SET C-BIT=1
10$:	ROR	R0		;INSERT SIGN INTO BIASED EXPONENT
	CALL	NORMIT		;GO DO NORMALIZE
	MOV	(SP)+,R3	;RESTORE R3
.ENDC	;DF	FPU
	JMP	@(R4)+		;POLISH EXIT

;	ADDF	THE REAL ADD ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH THE TWO (2-WD FL-PT) ARGUMENTS ON THE R1 STACK
;		JSR	PC,ADDF
;		(RETURN)
;	RETURNS WITH THE SUM ON THE R1 STACK
;
;	SUBF	THE REAL SUBTRACT ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH THE TWO (2-WD FL-PT) ARGUMENTS ON THE R1 STACK
;		JSR	PC,SUBF
;		(RETURN)
;	SUBTRACTS THE TOP STACK ITEM FROM THE SECOND ITEM
;	AND RETURNS WITH THE DIFFERENCE ON THE R1 STACK
;
;	$ADR,$SBR ARE THE POLISH VERSIONS OF THE SINGLE PRECISION
;	ADD AND SUBTRACT ROUTINES
;
	SIGNS=0
;	A1=0	A1 NOT DEFINED TO SAVE WORDS IN ASSEMBLY
	B1=2
	A2=4
	B2=6
$SBR:	ADD	#100000,(R1)
	BR	$ADR
SUBF:	ADD	#100000,(R1)	;CHANGE SIGN OF TOP ITEM
ADDF:	MOV	#RTSLOC,R4
$ADR:
	.IF	DF	FPU
	SETF
	LDF	(R1)+,F0	;GET OPERAND
	ADDF	(R1)+,F0	;ADD
	STF	F0,-(R1)	;SUM TO STACK
	JMP	@(R4)+
	.ENDC
	.IF	NDF	FPU
.IF	DF	FIS
	FADD	R1
	JMP	@(R4)+
.ENDC
.IF	NDF	FIS
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	CLR	-(SP)		;CLEAR SIGNS
	CLR	R4		;CLEAR EXPONENTS
	CLR	R5
	ASL	B1(R1)		;SHIFT B1
	ROL	(R1)		;SHIFT A1
	BISB	1(R1),R5	;GET E1
	BEQ	OUTA		;JUMP IF ZERO
	ROLB	(SP)		;GET S1
	ASL	B2(R1)		;SHIFT B2
	ROL	A2(R1)		;SHIFT A2
	BISB	A2+1(R1),R4	;GET E2
	BNE	A2NZ		;JUMP IF NOT 0
	RORB	(SP)		;RECONSTRUCT A1,B1
	ROR	(R1)
	ROR	B1(R1)
	MOV	(R1)+,B1(R1)	;FIRST ARG TO TOP OF STACK
	MOV	(R1)+,B1(R1)
	BR	AOUT		;DONE
A2NZ:	ROLB	SIGNS+1(SP)   	;GET S2
	MOVB	#1,A2+1(R1)	;INSERT NORMAL BIT
	MOVB	(PC),1(R1)	;INSERT NORMAL BIT
; 	NOTE THAT 1(R1) MUST BE IN INSTRUCTION ABOVE
	SUB	R5,R4		;R4=E2-E1, R5=E1
	BGT	EXPA		;JUMP IF E2>=E1
	MOV	A2(R1),R2	;R2=A2
	MOV	B2(R1),R3	;R3=B2
	MOV	(R1)+,B1(R1)	;POP STACK BUT KEEP FIRST ARG
	MOV	(R1)+,B1(R1)
	BR	SCHK		;CHECK SIGNS
EXPA:	ADD	R4,R5		;R4=E2-E1,R5=E2,E2>E1
	MOV	(R1)+,R2	;R2=A1
	MOV	(R1)+,R3	;R3=B1
	SWAB	(SP)		;EXCHANGE SIGNS
	NEG	R4		;E1-E2
SCHK:	CMPB	SIGNS+1(SP),(SP)	;SEE IF SIGNS ARE THE SAME
	BEQ	ECHK		;YES, CHECK EXPONENTS
	NEG	R3		;NEGATE FRACTION
	ADC	R2
	NEG	R2
ECHK:	TST	R4
	BEQ	SHFTD		;JUMP IF E1=E2
	CMP	#-25.,R4	;IS THERE ANY POINT IN SHIFTING?
	BLE	SHFTR		;YES
	MOV	(R1),R2		;NO, ANSWER IS OPERAND
	MOV	B1(R1),R3	;WITH THE LARGER EXPONENT
	BR	NORMD
SHFTR:	ASHC	R4,R2
SHFTD:	ADD	(R1),R2		;A1+A2
	ADD	B1(R1),R3	;B1+B2
	ADC	R2
	CMPB	SIGNS+1(SP),(SP)
	BNE	SUB		;GO CLEAN UP SUBTRACT
	BIT	R2,#1000
	BEQ	NORMD		;JUMP IF NO NORMAL BIT OVERFLOW
	ASR	R2
	ROR	R3
	INC	R5		;INCREASE EXPONENT
NORMD:	SWAB	R5		;MOVE EXPONENT LEFT
	BNE	AOVER		;JUMP IF OVERFLOW
	BISB	R2,R5
	ROR	(SP)		;INSERT SIGN
	ROR	R5
	ROR	R3
	ADC	R3		;ROUND SUM
	ADC	R5
	BVS	AOVER		;JUMP IF OVERFLOW ON ROUND
	BCS	AOVER
STORQ:	MOV	R5,(R1)		;STORE EXPONENT AND SIGN
	MOV	R3,B1(R1)	;INSERT LOW ORDER FRACTION
	BR	AOUT
OUTA:	CMP	(R1)+,(R1)+	;POP FIRST ARG
AOUT:	TST	(SP)+		;POP SIGNS
	MOV	(SP)+,R5
	MOV	(SP)+,R4
	JMP	@(R4)+		;DONE. RETURN
;
SUB:	TST	R2		;CHECK HIGH ORDER RESULT FRACTION
	BGT	BIT9		;IF POSITIVE SIGN IS OK
	BEQ	ZTEST		;CHECK FOR ZERO RESULT
	NEG	R2		;GET ABSOLUTE VALUE
	NEG	R3
	SBC	R2
	SWAB	(SP)		;EXCHANGE SIGNS
BIT9:
BIT9A:	BIT	R2,#400
	BNE	UTEST		;JUMP IF NORMAL BIT FOUND
	DEC	R5		;DECREASE EXPONENT
	ASL	R3		;DOUBLE FRACTION
	ROL	R2
	BR	BIT9A		;TRY AGAIN
ZTEST:	TST	R3		;CHECK LOW ORDER PART
	BEQ	ZERA
	SWAB	R3		;SAVE NORMALIZE SOME TIME
	BISB	R3,R2		;MOVE BITS LEFT
	CLRB	R3
	SUB	#8.,R5		;TELL EXPONENT ABOUT IT
	BR	BIT9
UTEST:	TST	R5		;CHECK FOR UNDERFLOW
	BGT	NORMD		;JUMP IF NONE
AOVER:	POST,	PSTFLT		;FLOATING POINT ERROR
	CLR	R3		;UNDERFLOW AND OVERFLOW--TREAT AS 0
ZERA:	CLR	R5		;CLEAR EXPONENT
	BR	STORQ
.ENDC
	.ENDC

;	FIXF	FIXF	FUNCTION
;	CALLING SEQUENCE:
;	CALLED WITH ARG (2-WORD FL-PT NO) ON THE R1 STACK
;		JSR	PC,FIXF
;		(RETURN)
;	RETURNS SIGN OF ARG * GREATEST REAL INTEGER < =
;	ABS(ARG) ON THE R1 STACK
;
;	$INTR	SAME FUNCTION AS FIXF, BUT CALLED IN THE 
;	POLISH MODE WITH THE ARGUMENT AND RETURN ON THE STACK.
;
FIXF:	JSR	R5,INTFUN	;STRAIGHTEN OUT ARGS
	+FAF			;DEMAND FLOATER
FIXF1:	MOV	#RTSLOC,R4	;DUMMY UP TO PLAY POLISH
$INTR:	MOV	R1,R2		;THE R1 STACK IS THE R2 STACK
	.IF	DF	FPU
	SETF
	LDF	(R1)+,F0	;GET ARG
	MODF	ONE1,F0		;GET INTEGER PART
	STF	F1,-(R1)
	JMP	@(R4)+		;RETURN
ONE1:	.WORD	040200,0	;FLOATING 1.
	.ENDC

	.IF	NDF	FPU
	MOV	(R2)+,R0	;GET HIGH ORDER ARGUMENT
	MOV	(R2)+,R1	;LOW ORDER
	MOV	R0,R3
	ROL	R3		;DUMP SIGN
	CLRB	R3
	SWAB	R3		;GET EXPONENT
	SUB	#230,R3		;REMOVE EXCESS 200 AND CHECK RANGE
	BGE	DONE		;JUMP IF IT IS ALREADY AN INTEGER
	CMP	#-30,R3
	BLT	SHIFT		;JUMP IF THERE IS WORK TO DO
	CLR	R0		;ARG IS < 1, SO RETURN 0
	CLR	R1
	BR	DONE
SHIFT:	MOV	R3,-(SP)	;PUSH -SHIFT COUNT
	ASHC	(SP),R0		;SHIFT OUT FRACTION
	NEG	(SP)		;SET FOR LEFT SHIFT
	ASHC	(SP)+,R0	;SHIFT INTEGER PART BACK
DONE:	MOV	R1,-(R2)	;PUSH RESULT
	MOV	R0,-(R2)
	MOV	R2,R1		;REPAIR THE DAMAGE TO R1 POINTER
	JMP	@(R4)+		;POLISH RETURN
	.ENDC

;	MULF	THE REAL MULTIPLY ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH THE TWO (2-WD FL-PT) ARGUMENTS ON THE R1 STACK
;		JSR	PC,MULF
;		(RETURN)
;	RETURNS WITH THE PRODUCT ON THE R1 STACK
;
;	$MLR IS THE POLISH VERSION OF THE SINGLE PRECISION
;	MULTIPLY ROUTINE
;
A=8.
B=12.
RESLT=8.
SIGN4=2
MULFR0:	JSR	PC,PUSHF2	;PUSH VIA R0
MULF:	MOV	#RTSLOC,R4
$MLR:
	.IF	DF	FPU
	SETF
	LDF	(R1)+,F0	;GET MULTIPLICAND
	MULF	(R1)+,F0	;MULTIPLY
	STF	F0,-(R1)	;PRODUCT TO STACK
	JMP	@(R4)+
	.ENDC
	.IF	NDF	FPU
.IF	DF	FIS
	FMUL	R1
	JMP	@(R4)+
.ENDC
.IF	NDF	FIS
	MOV	R4,-(SP)
	MOV	R5,-(SP)
;	(A1+A2*2**-16)*(B1+B2*2**-16)
	MOV	6(R1),R5	;LOW ORDER B
	MOV	4(R1),R4	;HIGH ORDER
	BEQ	M.ZERO
	ASHC	#1,R4		;GET SIGN BIT
	ROL	-(SP)		;SAVE IT
	MOV	R4,-(SP)	;SAVE EXPONENT
	CLRB	(SP)
	SWAB	(SP)		;RIGHT JUSTIFY
	ASHC	#7,R4		;LEFT JUSTIFY FRACTION
	MOV	R5,-(SP)	;SAVE B2
	BIS	#100000,R4	;INSERT NORMAL BIT
	MOV	R4,-(SP)	;SAVE B1
	MOV	(R1)+,R2	;GET A1
	MOV	(R1),R3		;GET A2
	TST	R2
	BEQ	ZERO21		;JUMP IF RESULT TO BE 0
	ASHC	#1,R2		;GET SIGN
	ADC	6(SP)		;GET RESULT SIGN
	MOV	R2,R0		;GET EXPONENT
	CLRB	R0
	SWAB	R0
	ADD	R0,4(SP)	;GET SUM OF EXPONENTS
	ASHC	#7,R2		;GET A1
	BIS	#100000,R2	;INSERT NORMAL BIT
	CLR	R0		;CLEAR ACCUMULATOR
	CMP	(R1)+,(R1)+	;POP A2, B1
	CLR	(R1)
	TST	R3		;CHECK A2
	BEQ	A2Z		;JUMP IF 0
	MUL	R3,R4		;GET A2*B1
	ADD	R3,R4
	TST	R3
	BPL	A2P		;JUMP IF A2 +
	ADD	(SP),R4		;B1 CORRECTION
A2P:	MOV	R4,(R1)		;A2*B1*2**-16
A2Z:	MOV	2(SP),R4	;B2 TO MULTIPLIER
	BEQ	B2Z		;JUMP IF 0
	MUL	R2,R4		;GET A1*B2
	ADD	2(SP),R4
	TST	2(SP)
	BPL	B2P		;JUMP IF B2 +
	ADD	R2,R4		;A1 CORRECTION
B2P:	ADD	R4,(R1)		;A1*B2*2**-16
	ADC	R0
B2Z:	MOV	R2,R4		;A1 TO MULTIPLIER
	ADD	R2,R0
	MUL	(SP),R4		;GET A1*B1
	ADD	(SP)+,R0
	ADD	R5,(R1)		;LOW ORDER A1*B1
	ADC	R0
	ADD	R4,R0		;HIGH ORDER A1*B1
	TST	(SP)+		;POP B2
	MOV	(SP)+,R4	;GET SUM OF EXPONENTS
	ROL	(R1)		;SHIFT M.OUT NORMAL BIT
	ROL	R0
	BCS	NORM		;JUMP IF IT WAS FOUND
	ROL	(R1)
	ROL	R0		;MUST HAVE GOT IT NOW
	DEC	R4		;ADJUST EXPONENT
NORM:	SUB	#200,R4		;TAKE M.OUT ONE OF THE EXCESS 128'S
	BLE	UMDER		;JUMP IF UNDERFLOW
	CMP	#377,R4
	BLT	M.OVER		;JUMP IF OVERFLOW
	CLRB	(R1)
	BISB	R0,(R1)
	SWAB	(R1)
	CLRB	R0
	BISB	R4,R0
	SWAB	R0
	ROR	(SP)+		;GET PRODUCT SIGN
	ROR	R0		;INSERT IT IN RESULT
	ROR	(R1)
	ADC	(R1)
	ADC	R0
	BCS	OVER2		;JUMP IF OVERFLOW ON ROUND
	BVS	OVER2
M.OUT:	MOV	R0,-(R1)	;OUTPUT ANSWER
	MOV	(SP)+,R5
	MOV	(SP)+,R4
	JMP	@(R4)+		;RETURN
ZERO21:	CMP	(SP)+,(SP)+	;POP B1,B2
	TST	(R1)+
ZERO1:	CMP	(SP)+,(SP)+	;POP SIGN AND EXPONENT
	BR	ZEROA

M.OVER:
UMDER:	TST	(SP)+		;FLUSH SIGN
OVER2:	POST,	PSTFLT		;FLOATING POINT UNDER OR OVERFLOW
	BR	ZEROB

M.ZERO:	CMP	(R1)+,(R1)+	;CLEAR ARGUMENTS
ZEROA:	TST	(R1)+
ZEROB:	CLR	R0		;CLEAR RESULT
	CLR	(R1)
	BR	M.OUT
.ENDC
	.ENDC

;	DIVF	THE REAL DIVIDE ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH THE TWO (2-WD FL-PT) ARGUMENTS ON THE R1 STACK
;	THE NUMERATOR IS THE SECOND ITEM ON THE STACK
;	AND THE DENOMINATOR IS ON TOP.
;		JSR	PC,DIVF
;		(RETURN)
;	RETURNS WITH THE QUOTIENT ON THE R1 STACK
;
;	$DVR IS THE POLISH VERSION OF THE SINGLE PRECISION
;	DIVIDE ROUTINE
;
	NN=4
DIVF:	MOV	#RTSLOC,R4	;RSTS TO DOS CONVENTION
$DVR:
	.IF	DF	FPU
	SETF
	LDF	(R1)+,F1	;GET DIVISOR
	LDF	(R1)+,F0	;GET DIVIDEND
	DIVF	F1,F0		;DIVIDE
	STF	F0,-(R1)	;QUOTIENT TO STCK
	JMP	@(R4)+
	.ENDC
	.IF	NDF	FPU
.IF	DF	FIS
	FDIV	R1
	JMP	@(R4)+
.ENDC
.IF	NDF	FIS
	MOV	R4,-(SP)
	MOV	R5,-(SP)
	CLR	R0
	CLR	R4
	CLR	-(SP)
	TST	(R1)+		;CHECK FOR DIVISION BY 0
	BEQ	DCHK0		;AND IT IS TOO
	TST	-(R1)		;BACK UP
	ASL	NN(R1)		;SHIFT NUMERATOR
	ROL	(SP)		;GET NUM. SIGN
	CLR	-(SP)
	BISB	NN+1(R1),(SP)	;GET NUMERATOR EXPONENT
	BEQ	ZERO		;JUMP IF NUMERATOR IS ZERO
	BISB	NN(R1),R0
	SWAB	R0		;LEFT JUSTIFY NUMERATOR FRACTION
	SEC			;INSERT NORMAL BIT
	ROR	R0
	BISB	NN+3(R1),R0
	BISB	NN+2(R1),R4
	SWAB	R4
	CLR	R2
	CLR	R3
	ASL	(R1)		;SHIFT DENOMINATOR
	ADC	2(SP)		;GET RESULT SIGN
	BISB	(R1)+,R2	;GET HIGH ORDER FRACTION
	SWAB	R2
	SEC			;INSERT NORMAL BIT
	ROR	R2
	BISB	(R1)+,R3	;GET DIVISOR EXPONENT
	SUB	R3,(SP)		;SUBTRACT EXPONENTS
	CLR	R3
	BISB	(R1)+,R3
	BISB	(R1)+,R2	;GET LOW ORDER FRACTION
	SWAB	R3
	MOV	R4,(R1)		;SV LO DENOM. IN (R1)
	CLC
	ROR	R0		;ENSURE NUM. AND DENOM. +
	ROR	(R1)
	ROR	R2		;LOW ORDER R1 AND R3 ARE 0
	ROR	R3
	CMP	R0,R2		;COMPARE HIGH NUMERATOR AND DENOMINATOR
	BLO	DHI		;JUMP IF DENOMINATOR HIGH
	BHIS	DLOW		;JUMP IF DENOMINATOR LOW OR SAME
ZERO:	CMP	(SP)+,(SP)+	;FLUSH EXP AND SIGN
	CMP	(R1)+,(R1)+	;FLUSH DENOM.
	BR	RTN
DCHK:	TST	(SP)+		;FLUSH EXP
DCHK0:	TST	(R1)+		;FLUSH LOW ORDER DENOM.
	POST,	PSTDV0		;DIVISION BY ZERO
	BR	ECALL
OVER1:	TST	-(SP)		;FAKE SIGN
OVER:
UNDER:	POST,	PSTFLT		;UNDER OR OVERFLOW
ECALL:	TST	(SP)+		;FLUSH SIGN
	CLR	(R1)		;RETURN ZERO
	CLR	2(R1)
	BR	RTN
DLOW:	ROR	R0		;HALVE NUMERATOR  (C=0)
	ROR	(R1)		;TO ENSURE THAT N<D
	INC	(SP)		;COMPENSATE EXPONENT
DHI:	CLC
	ROR	R3
	ROR	R0
	ROR	(R1)
	MOV	R0,R4		;NUMERATOR TO DIVIDEND
	MOV	(R1),R5
	DIV	R2,R4		;(A+S*B)/C
	MOV	R5,(R1)		;SAVE REMAINDER
	MOV	R4,R0		;SAVE QUOTIENT
	MUL	R3,R4		;GET Q*D
	ASR	(R1)		;SCALE R
	SUB	(R1),R4		;Q*D-R
	ASHC	#-1,R4		;SCALE
	DIV	R2,R4		;GET (Q*D-R)/C
	NEG	R4		;(R-Q*D)/C
	ASHC	#-14.,R4	;UNSCALE
	ADD	R0,R4		;Q+(R-Q*D)*S/C
NBTST:	ASHC	#1,R4		;SHIFT
	BMI	NBIT		;CHECK FOR NORMAL BIT
	DEC	(SP)		;COMPENSATE EXPONENT
	BR	NBTST		;GO AGAIN
NBIT:	ASHC	#-7,R4		;ALIGN FRACTION
	MOV	R4,(R1)		;STORE HIGH ORDER
	MOV	(SP)+,R4	;PUSH UP EXPONENT
	ADD	#200,R4		;ADD IN EXCESS 200
	BLE	UNDER		;UNDERFLOW
	CMP	#377,R4
	BLT	OVER		;OVERFLOW
	MOVB	R4,1(R1)	;INSERT EXPONENT IN RESULT
	ROR	(SP)+		;INSERT QUOTIENT SIGN
	ROR	(R1)
	ROR	R5
	ADC	R5		;ROUND
	ADC	(R1)
	MOV	R5,2(R1)	;INSERT LOW ORDER FRACTION
	BCS	OVER1
	BVS	OVER1
RTN:	MOV	(SP)+,R5
	MOV	(SP)+,R4
	JMP	@(R4)+
.ENDC
	.ENDC

;	FIX	THE FIX ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH A FLOATING-POINT NUMBER ON THE R1 STACK
;		JSR	PC,FIX
;		(RETURN)
;	RETURNS WITH THE FLOATING-POINT NUMBER CONVERTED TO AN INTEGER
;	AND STORED ON THE R1 STACK
;
;	$R1	IS THE TWO-WORD POLISH VERSION OF THE FIX ROUTINE
;	$DI	IS THE FOUR-WORD POLISH VERSION OF THE FIX ROUTINE
;
FIX:	MOV	R0,-(SP)	;R0 GETS SAVED
	JSR	R4,$RI		;SO DOES R4
	.WORD	FIXTWO		;RETURN FROM FIX ROUTINE
FIXTWO:	MOV	(SP)+,R4	;RESTORE R4
	MOV	(SP)+,R0	;AND R0
	RTS	PC
$RI:
	.IF	DF	FPU
	.IF	EQ	FLTLEN-4
$DI:	SETD			;DOUBLE PRECISION
	.ENDC
	.IF	NE	FLTLEN-4
	SETF
	.ENDC
	SETI			;SHORT INTEGERS
	LDD	(R1)+,F0	;GET ARG
	STCDI	F0,-(R1)	;CONVERT
	JMP	@(R4)+		;RETURN
	.ENDC

	.IF	NDF	FPU
	.IF	EQ	FLTLEN-4
$DI:	MOV	(R1)+,2(R1)	;TRUNC. TO REAL FORMAT
	MOV	(R1)+,2(R1)
	.ENDC
	CLR	R2		;CLEAR WORK SPACE
	INC	R2		;SET UP NORMAL BIT
	MOV	(R1)+,R0	;GET REAL ARGUMENT
	ROL	(R1)		;GET SIGN
	ROL	R0		;AND
	ROL	-(SP)		;SAVE IT
	MOVB	R0,R3		;GET HIGH ORDER FRACTION
	CLRB	R0
	SWAB	R0		;GET EXPONENT
	SUB	#201,R0
	BLT	ZERO5		;JUMP IF IT IS TOO SMALL
	BEQ	DONE2
	CMP	#15.,R0
	BLT	OVER3		;JUMP IF IT IS TOO BIG
	SWAB	R3		;FORM 16 BITS OF HIGH ORDER FRACTION
	CLRB	R3
	BISB	1(R1),R3
	ASHC	R0,R2
DONE2:	NEG	R2		;MAKE -
	BVS	NEGM		;JUMP IF POSSIBLE NEGMAX
	BGT	OVER3		;JUMP IF MORE THAN 15 BITS
SIGN2:	ROR	(SP)+		;GET SIGN
	BCS	OUT4		;JUMP IF -
	NEG	R2		;- RESULT
OUT4:	MOV	R2,(R1)		;STORE INTEGER RESULT
	JMP	@(R4)+		;RETURN TO CALLER
NEGM:	ROR	(SP)+
	BCS	OUT4		;OK IF RESULT TO BE -
	TST	-(SP)		;FAKE SIGN
OVER3:	POST,	PSTFIX
ZERO5:	CLR	R2		;ANSWER IS 0
	BR	SIGN2
	.ENDC

;	CMPF	THE COMPARE ROUTINE
;	CALLING SEQUENCE:
;	CALLED WITH THE TWO (2-WD FL-PT)
;	COMPARANDS ON THE R1 STACK:
;	FIRST IS AT 4(R1), SECOND IS (R1)
;		JSR	PC,CMPF
;		(RETURN)
;	RETURNS WITH ONLY THE FIRST COMPARAND
;	ON THE R1 STACK AND WITH THE CONDITION CODES SET AS FOLLOWS:
;	FIRST < SECOND  N=1, Z=0
;	FIRST = SECOND  N=0, Z=1
;	FIRST > SECOND  N=0, Z=0
;
;	$CMR	IS THE SINGLE PRECISION POLISH VERSION OF THE COMPARE ROUTINE
;
CMPF:	MOV	#RTSLOC,R4
$CMR:
	.IF	DF	FPU
	SETF
	LDF	(R1)+,F0	;GET SECOND ARG
	CMPF	(R1),F0		;COMPARE
	CFCC			;GET CONDITION CODES
	JMP	@(R4)+
	.ENDC
	.IF	NDF	FPU
	MOV	#16601,R0	;GET 00XXXXX   XXXX01 IN R0
	MOV	4(R1),R3	;GET HIGH ORDER FIRST ARG
	BGE	FPOS		;JUMP IF FIRST ARG +
	ASL	R0		;FLAG FIRST ARG -
	MOV	(R1)+,R2	;GET HIGH SECOND ARG
	BLT	SAME		;JUMP IF BOTH SIGNS -
	BR	NEG		;JUMP IF FIRST - AND SECOND +
FPOS:	MOV	(R1)+,R2
	BLT	PLS		;JUMP IF FIRST + AND SECOND -
SAME:	CMP	R3,R2		;COMPARE MAGNITUDES
	BNE	COUT		;JUMP IF DIFFERENT
	CMP	4(R1),(R1)	;COMPARE LOW ORDER
	BNE	COUT		;JUMP IF DIFFERENT
	CLR	R0		;FLAG =
COUT:	ROR	R0		;SAVE C BIT AND TEST SECOND ARG -
	BCS	PLS		;JUMP IF SECOND ARG +
NEG:	NEG	R0		;REVERSE C BIT
PLS:	TST	(R1)+		;POP WORD, LEAVE SECOND ARG FOR RSTS
	TST	R0		;SET Z AND N BITS CORRECTLY
	JMP	@(R4)+		;RETURN TO CALLER
	.ENDC

	.END

