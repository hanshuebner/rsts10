.IIF	NDF	L$$IST,	.NLIST
TITLE	SYPP,<PUSH-POP DEFINITIONS>,08,13-MAY-86,MHB/JDM/TVG

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.

.MACRO	..	QQ1,QQ2		;ENTER PUSH-POP TABLE ENTRY
	ORG	PT,QQ1+128.*2
	.WORD	QQ2
.ENDM

; PUSH-POP CODE DEFINITIONS

.MACRO	$PPDEF	NAME,DUMMY
NAME	=	TMPTAG
.LIST
NAME	=	NAME
.NLIST
TMPTAG	=	TMPTAG+1
.ENDM

TMPTAG	=	-128.		;START THE LIST HERE

	$PPDEF	PPADDF,ADDF	;FLOATING +
	$PPDEF	PPADDI,ADDI	;INTEGER +
	$PPDEF	PPSUBF,SUBF	;FLOATING -
	$PPDEF	PPSUBI,SUBI	;INTEGER -
	$PPDEF	PPRSBF,RSUBF	;FLOATING REVERSE -
	$PPDEF	PPRSBI,RSUBI	;INTEGER REVERSE -
	$PPDEF	PPMULF,MULF	;FLOATING *
	$PPDEF	PPMULI,MULI	;INTEGER *
	$PPDEF	PPDIVF,DIVF	;FLOATING /
	$PPDEF	PPDIVI,DIVI	;INTEGER /
	$PPDEF	PPRAD$,RAD50$	; RADIX 50 FUNCTION
	$PPDEF	PPSWAP,SWAPBY	;INTEGER SWAP BYTE FUNCTION
	$PPDEF	PPPWRF,PWRF	;FLOATING ^
	$PPDEF	PPPWRI,PWRI	;INTEGER ^
	$PPDEF	PPEQF,.EQ.F	;FLOATING EQUAL OPERATOR
	$PPDEF	PPEQI,.EQ.I	;INTEGER EQUAL OPERATOR
	$PPDEF	PPEQS,.EQ.S	;STRING EQUAL OPRERATOR
	$PPDEF	PPEVS,.EV.S	;STRING EQUIVALENCE
	$PPDEF	PPGTF,.GT.F	;FLOATING >
	$PPDEF	PPGTI,.GT.I	;INTEGER >
	$PPDEF	PPGTS,.GT.S	;STRING >
	$PPDEF	PPGEF,.GE.F	;FLOATING >=
	$PPDEF	PPGEI,.GE.I	;INTEGER >=
	$PPDEF	PPGES,.GE.S	;STRING >=
	$PPDEF	PPLTF,.LT.F	;FLOATING <
	$PPDEF	PPLTI,.LT.I	;INTEGER <
	$PPDEF	PPLTS,.LT.S	;STRING <
	$PPDEF	PPLEF,.LE.F	;FLOATING <=
	$PPDEF	PPLEI,.LE.I	;INTEGER <=
	$PPDEF	PPLES,.LE.S	;STRING <=
	$PPDEF	PPNEF,.NE.F	;FLOATING <>
	$PPDEF	PPNEI,.NE.I	;INTEGER <>
	$PPDEF	PPNES,.NE.S	;STRING <>
	$PPDEF	PPNEGF,NEGF	;FLOATING COMPLEMENT
	$PPDEF	PPNEGI,NEGI	;INTEGER COMPLEMENT
	$PPDEF	PPUSHF,PUSHF	;FLOATING PUSH
	$PPDEF	PPUSHI,PUSHI	;INTEGER PUSH
	$PPDEF	PPUSHS,PUSHS	;STRING PUSH
	$PPDEF	PPOPF,POPF	;FLOATING POP
	$PPDEF	PPOPI,POPI	;INTEGER POP
	$PPDEF	PPOPS,POPS	;STRING POP
	$PPDEF	PPREPF,REPLF	;REPLICATE FLOATING
	$PPDEF	PPREPI,REPLI	;REPLICATE INTEGER
	$PPDEF	PPREPS,REPLS	;REPLICATE STRING
	$PPDEF	PPIDO1,INDO1	;INDEX OPERAND ONE SUBSCRIPT ON STACK
	$PPDEF	PPIDO2,INDO2	;INDEX OPERAND TWO SUBSCRIPTS ON STACK
	$PPDEF	PPIDR1,INDR1	;INDEX RESULT ONE SUBSCRIPT ON STACK
	$PPDEF	PPIDR2,INDR2	;INDEX RESULT TWO SUBSCRIPTS ON STACK
	$PPDEF	PPIRR1,INDL1	;INDEX, REPLICATE ONE SUBSCR.
	$PPDEF	PPIRR2,INDL2	;INDEX, REPLICATE TWO SUBSCRS.
;THE FOLLOWING 12 OPS SHOULD OCCUR CONSECUTIVELY
;WITH PPFLPF FIRST AND PPFLR2 LAST
	$PPDEF	PPFLPF,FPOPF	;FLOAT+POPF
	$PPDEF	PPFIPI,IPOPI	;FIX+POPI
	$PPDEF	PPFLRF,FREPLF	;FLOAT+REPLF
	$PPDEF	PPFIRI,IREPLI	;FIX+REPLI
	$PPDEF	PPFID1,IINR1	;FIX+INDR1
	$PPDEF	PPFLD1,FINR1	;FLOAT+INDR1
	$PPDEF	PPFIR1,IINL1	;FIX+INRR1
	$PPDEF	PPFLR1,FINL1	;FLOATNRR1
	$PPDEF	PPFID2,IINR2	;FIX+INDR2
	$PPDEF	PPFLD2,FINR2	;FLOAT+INDR2
	$PPDEF	PPFIR2,IINL2	;FIXNRR2
	$PPDEF	PPFLR2,FINL2	;FLOAT+INRR2
	$PPDEF	PPFIX0,PUSHI0	;PUSH AN INTEGER 0
	$PPDEF	PPFIX,FIX	;FIX A FLOATING POINT NUMBER
	$PPDEF	PPFLT,FLT	;FLOAT AN INTEGER
	$PPDEF	PPFLT1,FLT1	;SPECIAL FLOAT
	$PPDEF	PPSIN,SIN	;CALCULATE THE SINE
	$PPDEF	PPCOS,COS	;CALCULATE THE COSINE
	$PPDEF	PPATAN,ATAN	;CALCULATE INVERSE TANGENT
	$PPDEF	PPSQRT,SQRT	;CALCULATE SQUARE ROOT
	$PPDEF	PPEXP,EXP	;CALCULATE EXPONENTIAL 
	$PPDEF	PPLN,LOG	;CALCULATE LOGRIRITHM
	$PPDEF	PPLG10,LOG10	;CLACULATE LOGRITHM OF 10
	$PPDEF	PPRND,RND	;FIND A RANDOM NUMBER
	$PPDEF	PPFIXF,FIXF	;FIX FUNCTION
	$PPDEF	PPTAN,TAN	;CALCULATE TANGENT
	$PPDEF	PPLEN,LEN	;FIND STRING LENGTH
	$PPDEF	PPSPAC,SPACES	;MAKE STRING OF SPACES
	$PPDEF	PPSBST,SUBSTR	;FIND SUBSTRING
	$PPDEF	PPSBS1,SUBST1	;FIND OTHER SUBSTRING
	$PPDEF	PPINST,INSTR	;FIND IF IN THERE AT ALL
	$PPDEF	PPNUM,NUM$	;FUNCTION NUM$
	$PPDEF	PPVAL,VAL	;FUNCTION VAL
	$PPDEF	PPSGNF,SGNF	;SIGN FUNCTION
	$PPDEF	PPINTF,INTF	;INT FUNCTION
	$PPDEF	PPABSF,ABSF	;ABS FUNCTION
	$PPDEF	PPUJ,UJ		;UNCONDITIONAL JUMP
	$PPDEF	PPUJX,UJX	;UNCONDITIONAL JUMP EXTERNAL
	$PPDEF	PPIFJ,IFJ	;IF FALSE JUMP
	$PPDEF	PPIFJX,IFJX	;IF FALSE JUMP EXTERNAL
	$PPDEF	PPITJ,ITJ	;IF TRUE JUMP
	$PPDEF	PPITJX,ITJX	;IF TRUE JUMP EXTERNAL
	$PPDEF	PPENTR,ENTR	;ENTER FUNCTION
	$PPDEF	PPXIT,EXIT	;EXIT FROM FUNCTION
	$PPDEF	PPUSHX,PUSHJX	;PUSH AND JUMP EXTERNAL
	$PPDEF	PPOPJ,POPJ	;POP JUMP RETURN
	$PPDEF	PPNOT,.NOT.	;LOGICAL NOT
	$PPDEF	PPAND,.AND.	;LOGICAL AND
	$PPDEF	PPOR,.OR.	;LOGICAL OR
	$PPDEF	PPXOR,.XOR.	;LOGICAL XOR
	$PPDEF	PPIMP,.IMP.	;LOGICAL IMPLIES
	$PPDEF	PPIFF,.IFF.	;LOGICAL IF AND ONLY IF
	$PPDEF	PPREDF,READF	;READ FLOATING
	$PPDEF	PPREDI,READI	;READ INTEGER
	$PPDEF	PPREDS,READS	;READ STRING
	$PPDEF	PPCONC,CONCAT	;STRING CONCATENATE
	$PPDEF	PPENDA,ENDRPT	;END OF CONDITIONAL OPERATOR
;	THE FOLLOWING 12 OPCODES ARE POSITION DEPENDENT
;	DO NOT CHANGE THE ORDER
	$PPDEF	PPFRI,FORI	;FOR INTEGER ENTRY
	$PPDEF	PPRPI,REPTI	;REPEAT INTEGER
	$PPDEF	PPFRF,FORF	;FOR FLOATING
	$PPDEF	PPRPF,REPTF	;REPETE FLOATING
	$PPDEF	PPFRIX,FORIX	;FOR INTEGER EXTERNAL
	$PPDEF	PPRPIX,REPTIX	;REPETE INTEGER EXTERNAL
	$PPDEF	PPFRFX,FORFX	;FOR FLOATING EXTERNAL
	$PPDEF	PPRPFX,REPTFX	;REPEAT FLOATING EXTERNAL
	$PPDEF	PPNXI,NEXTI	;NEXT INTEGER
	$PPDEF	PPNXF,NEXTF	;NEXT FLOATING
	$PPDEF	PPNXIX,NEXTIX	;NEXT INTEGER EXTERNAL
	$PPDEF	PPNXFX,NEXTFX	;NEXT FLOATING EXTERNAL
	$PPDEF	PPCLOS,CLOSER	;CLOSE
	$PPDEF	PPSSI,SSI	;SELECT SLOT FOR INPUT
	$PPDEF	PPSSON,SSONRC	;SELECT SLOT FOR OUTPUT
	$PPDEF	PPINPL,INPUTL	;INPUT LINE
	$PPDEF	PPINPF,INPUTF	;INPUT FLOATING
	$PPDEF	PPINPI,INPUTI	;INPUT INTEGER
	$PPDEF	PPINPS,INPUTS	;INPUT STRING
	$PPDEF	PPRINF,PRINTF	;PRINT FLOATING
	$PPDEF	PPRINI,PRINTI	;PRINT INTEGER
	$PPDEF	PPRINS,PRINTS	;PRINT STRING
	$PPDEF	PPCOMA,NXTZON	;PRINT COMMA THING
	$PPDEF	PPCRLF,CRLF	;PRINT <CR><LF>
	$PPDEF	PPSTOP,STOP	;STOP EXECUTION
	$PPDEF	PPHALT,UJX6	;HALT AFTER IMMEDIATE EXECUTION
	$PPDEF	PPBADC,BADCOD	;ILLEGAL STATEMENT
	$PPDEF	PPUUO,UUOCON	;UUO CONTROL
	$PPDEF	PPTAB,TABF	;TAB FUNCTION
	$PPDEF	PPPOS,POSF	;POS FUNCTION
	$PPDEF	PPCHR,CHR$	;CHR$ FUNCTION
; *** !!! *** WARNING: BAD PUN FORCES PPNXTS=12 ***
	$PPDEF	PPNXTS,NEXTS	;END OF CURRENT STATEMENT GO TO NEXT ONE
	$PPDEF	PPASC,ASCII	;ASC FUNCTION
	$PPDEF	PPDAT$,DATE$	;DATE FUNCTION
	$PPDEF	PPTIM$,TIME$	;TIME OF DAY FUNCTION
	$PPDEF	PPTIME,TIMEF	;GENERAL TIMER FUNCTIONS
	$PPDEF	PPPEEK,PEEKF	;PEEKING TOMG FUNCTION
	$PPDEF	PPSLEP,SLEEP	;SLEEP FUNCTION
	$PPDEF	PPWAIT,WAITF	;WAIT FUNCTION
	$PPDEF	PPUSHC,PUSHC	;PUSH IMEDIATE
	$PPDEF	PPRAND,RANDOM	;RANDOMIZE VERB
	$PPDEF	PPREST,RESTOR	;RESTORE VERB
	$PPDEF	PPRESU,RESUME	;RESUME VERB
	$PPDEF	PPONUB,ONSUB	;ON ... GOSUB ...
	$PPDEF	PPCSV,CSV	;CHANGE STRING TO VECTOR
	$PPDEF	PPCVS,CVS	;CHANGE VECTOR TO STRING
	$PPDEF	PPMRD,MATRD	;MAT READ
	$PPDEF	PPMPRN,MATPRN	;MAT PRINT ;
	$PPDEF	PPMPRT,MATPRT	;MAT PRINT
	$PPDEF	PPMINP,MATINP	;MAT INPUT
	$PPDEF	PPMZR,MATZRO	;MAT ZERO
	$PPDEF	PPMC1,MATC1	;MAT CON
	$PPDEF	PPMID,MATID	;????
	$PPDEF	PPMTRN,MATTRN	;MAT TRANSPOSE
	$PPDEF	PPMINV,MATINV	;MAT INVERSE
	$PPDEF	PPSMPF,MATSMF	;MAT SCALAR MULTIPLY FLOATING
	$PPDEF	PPSMPI,MATSMI	;MAT SCALAR MULTIPLY INTEGER
	$PPDEF	PPMCPY,MATCPY	;MAT COPY
	$PPDEF	PPMMUL,MATMUL	;MAT MULTIPLY
	$PPDEF	PPMADD,MATADD	;MAT ADD
	$PPDEF	PPMSUB,MATSUB	;MAT SUB
	$PPDEF	PPOPIO,OPENIO	;OPEN FOR INPUT AND OUTPUT
	$PPDEF	PPOPIN,OPENI	;OPEN FOR INPUT
	$PPDEF	PPOPOU,OPENO	;OPEN FOR OUTPUT
	$PPDEF	PPNAME,NAMER	;RENAME
	$PPDEF	PPKILL,KILLER	;DELETE
	$PPDEF	PPENDI,ENDINP	;EMPTY THE INPUT BUFFER
	$PPDEF	PPCHAI,RRRRR	;CHAIN ENTRY
	$PPDEF	PPLEFT,LEFT	;INITIAL SUBSTRING
	$PPDEF	PPON,ONSTMT	;ON STATEMENT
	$PPDEF	PPONER,ONERR	;ON ERROR GOTO
	$PPDEF	PPSDRO,SETDRO	;SET THE NEXDRO FLAG FOR LOOP PPOPS
	$PPDEF	PPCALL,CALLFN	;PP FOR FUNCTION CALLS
	$PPDEF	PPDI,DUPLI	;DUPLICATE INTEGER
	$PPDEF	PPIJS,PITJS	;POP INTEGER TO J SPACE
	$PPDEF	PPJSLD,JMPSLD	;JUMP EXTERNAL, THEN NEXTS, ALL IN ONE
	$PPDEF	PPEND,UJX8	;END OF PROGRAM
	$PPDEF	PPMPRC,MATPRC	;COLUMN PRINT ARRAY
	$PPDEF	PPZSMA,ZSMADD	;ADDF WITH SMALL RESULT DUMMIED TO 0
	$PPDEF	PPRDIM,ROWDIM	;GET MATRIX ROW DIMENSION
	$PPDEF	PPCDIM,COLDIM	;GET MATRIX COLUMN DIMENSION
	$PPDEF	PPBEGN,BEGINP	;SUBSTITIUE INTEGER 1 UNLESS 0
	$PPDEF	PPMPUS,MATPUS	;PUSH MATRIX ENTRY - MATRIX ROUTINES
	$PPDEF	PPMPOP,MATPOP	;POP  MATRIX ENTRY - MATRIX ROUTINES
	$PPDEF	PPEVF,.EV.F	;APPROXIMATELY EQUALS (??)
	$PPDEF	PPRNUF,PRINUF	;PRINT FLOATER USING
	$PPDEF	PPRNUI,PRINUI	;PRINT INTEGER USING
	$PPDEF	PPRNUS,PRINUS	;PRINT STRING USING
	$PPDEF	PPRNUE,PRINUE	;EXIT FROM PRINT USING
	$PPDEF	PPEXIT,EXITPP	;RETURN TO NORMAL EXECUTION OF PPCODE
	$PPDEF	PPCALS,CALLPP	;PPCODE SUBROUTINE CALL - MATRIX STUFF
	$PPDEF	PPCORU,CORUPP	;PPCODE COROUTINE CALL - MATRIX STUFF
	$PPDEF	PPCALI,CALIPP	;RUB CALL INDIRECT THRU R1 - "    "
	$PPDEF	PPRTS,RTSPP	;HONEST PPCODE SUB EXIT -   "   "
	$PPDEF	PPREOR,REORPP	;"OR" TOP 2 WORDS, REMOVING NEITHER
	$PPDEF	PPCMPI,CMPIPP	;DIMERR IF TOP 2 WORDS NOT =; OTHWS, POPS ONE
	$PPDEF	PPFFLT,FFLTPP	;FETCH FLOATER JUST BELOW TOP WORD
	$PPDEF	PPMPR,MATPR	;PRINT INDIVIDUAL MATRIX ENTRY
	$PPDEF	PPUFL0,PUSHF0	;PUSH FLOATING 0
	$PPDEF	PPUFL1,PUSHF1	;PUSH FLOATING 1
	$PPDEF	PPMRD0,MATRD0	;READ INDIVIDUAL ITEM FOR MATRIX STUFF
	$PPDEF	PPMAIN,MATIN	;INPUT INDIVIDUAL ITEM FOR MATRIX STUFF
	$PPDEF	PPFIX1,PUSHI1	;PUSH INTEGER 1
	$PPDEF	PPKIF,PFTJS	;KILL TOP FLOATER (POP FLOAT TO J-SPACE)
	$PPDEF	PPFFUF,FFUF	;GET NEXT LOWER FLOATER TO TOP
	$PPDEF	PPTST,TSTFL	;SPECIAL FLAG TEST IN MATINV
	$PPDEF	PPEMC,EMCODE	;EXIT TO MACHINE CODE
	$PPDEF	PPABXF,ABSF00	;FLOATING ABS VALUE SANS TYPE CK
	$PPDEF	PPNXTL,NEXTL	;EXTERNAL JUMP TO NEXT NUMBERED STMT.
	$PPDEF	PPIFNL,IFNL	;IF FALSE NXTL, ELSE INTERNAL JUMP
	$PPDEF	PPCVIS,CVIS	;INTEGER TO 2-BYTE STRING
	$PPDEF	PPCVFS,CVFS	;FLOATER TO BYTE STRING
	$PPDEF	PPCVSI,CVSI	;2-BYTE STRING TO INTEGER
	$PPDEF	PPCVSF,CVSF	;BYTE STRING TO FLOATER
	$PPDEF	PPLSET,LSET	;LEFT-JUSTIFIED STRING SET
	$PPDEF	PPILS1,M1LSET	;SAME TO SINGLY INDEXED ARRAY
	$PPDEF	PPILS2,M2LSET	;SAME TO DOUBLY INDEXED ARRAY
	$PPDEF	PPRSET,RSET	;RIGHT-JUSTIFIED STRING SET
	$PPDEF	PPIRS1,M1RSET	;SAME TO SINGLY INDEXED ARRRAY
	$PPDEF	PPIRS2,M2RSET	;SAME TO DOUBLY INDEXED ARRAY
	$PPDEF	PPFSET,FIELD	;FIELD STATEMENT
	$PPDEF	PPIFS1,M1FSET	;WITH SINGLY INDEXED STRING VAR
	$PPDEF	PPIFS2,M2FSET	;WITH DOUBLY INDEXED STRING VAR
	$PPDEF	PPPUT,PUT	;OUTPUT RECORD
	$PPDEF	PPGET,GET	;INPUT RECORD
	$PPDEF	PPDUPS,DUPLS	;DUPLICATE STRING AT TOP OF R1 STACK
	$PPDEF	PPMAGT,MAGTAP	;MAGTAPE FUNCTION
	$PPDEF	PPULOC,UNTLOC	;UNLOCK FILE SEGMENT
	$PPDEF	PPXLTE,XLATE	;TRANSLATE FUNCTION
	$PPDEF	PPREAL,REALFG	;SET 'REAL' FLAG (BIT 15)
	$PPDEF	PPCVSS,CVSS	;SPECIAL STRING FUNCTION
	$PPDEF	PPSSOR,SSOREC	;SELECT SLOT WITH "RECORD"
	$PPDEF	PPSTNG,STRING	;MAKE STRING
	$PPDEF	PPBUFN,BUFN	;GET BUFFER SIZE FUNCTION
	$PPDEF	PPSUM$,SUM$	;STRING ARITHMETIC SUM
	$PPDEF	PPDIF$,DIF$	;STRING ARITHMETIC DIFFERENCE
	$PPDEF	PPROD$,PROD$	;STRING ARITHMETIC PRODUCT
	$PPDEF	PPQUO$,QUO$	;STRING ARITHMETIC QUOTIENT
	$PPDEF	PPCOM$,COMP.$	;STRING ARITHMETIC COMPARE FUNCTION
	$PPDEF	PPLAC$,PLACE$	;STRING ARITHMETIC ROUND/TRUNCATE FUNCTION
	$PPDEF	PPNM1$,NUM1$	;FLOATING TO LONG PRINT STRING CONVERSION
	$PPDEF	PPUFLX,PUSHXF	;PUSH FLOATING FIRST WORD ONLY
	$PPDEF	PPANOT,ANOT	;ABSOLUTE NOT
	$PPDEF	PPSPEC,SPECAL	;SPECIAL FUNCTION FUNCTION
	$PPDEF	PPCFDI,CNVFDI	;CONVERT FLOATER TO DOUBLE INTEGER
	$PPDEF	PPRADI,RADIFN	;rad%() function
	$PPDEF	PPDATI,DATIFN	;date%() function

.IIF	NDF	L$$IST,	.LIST

