TITLE	SN,<MESSAGE SEND/RECEIVE>,08,13-MAY-86,MHB/JDM/TS/WJS

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.
;
;	MODIFICATIONS:
;*A* 20-MAY-80 BY SCARPELLI: CHECK FOR CTRL/C WAKE UP FROM RECEIVE SLEEP
;*B* 06-JUL-81    SCARPELLI: FIX BUG IN *A* IF NOT TRAPPING CTRL/C
;*C* 12-Feb-90    Sconce:    SYS(18.) split out to M18.MAC

	.M18.	==:	1	;Global to tell BPLGEN that old-format
				;  message SEND/RECEIVE might or might
				;  not be present

	DEFORG	SN

SN:	CMPB	(R3),#18.	;IS IT V6A STYLE MESSAGE SEND/RECEIVE?
	BEQ	10$		;YES
	CMPB	(R3),#22.	;OR V6B MESSAGE SEND/RECEIVE ?
	BEQ	10$		;YES, DO THE COMMON STUFF
	RETURN			;NO, GO CHECK OTHER FUNCTIONS

10$:	TST	(SP)+		;TOSS THE RETURN ADDRESS
	CLR	(R4)		;PRE-CLEAR XRB'S LENGTH (SMALL MESSAGES)
	CALLX	GETBUF		;CLEAR FIRQB AND POINT TO IT WITH R4
	CMP	(R4)+,(R4)+	;NOW INDEX TO PARAMETER LOCATIONS
	DEC	R0		;COMPUTE STRING LENGTH - 2
	CMPB	(R3)+,#18.	;IS IT THE V6A STYLE CALL ?
	BNE	SYS622		;No => continue				*C*
	JMP	SYS618		;Yes => map into V6B-format call	*C*

SYS622:	TST	R0		;ANY STRING BYTES LEFT
	BEQ	120$		;NO, ALL SET UP FOR REMOVE
	MOV	SP,-(R1)	;NOTE OUR CURRENT STACK POSITION
	MOV	#5,R2		;WE WANT 5 WORDS MAX FROM PASSED STRING
10$:	CLR	-(SP)		;CLEAR ROOM FOR OFFSET, LENGTH, CHAN. #
	SOB	R2,10$		; AND TWO XRB WORDS
	MOV	SP,R2		;POINT TO TOP OF STACK
20$:	MOVB	(R3)+,(R4)+	;LOAD FIRQB UP TO PARAMETER AREA
	DEC	R0		;COUNT AS ANOTHER STRING BYTE MOVED
	BEQ	50$		;LENGTH = 0, FIRQB DONE - DO XRB
	CMP	R4,#FIRQB+14	;UP TO PARAMETER AREA OF FIRQB ?
	BLO	20$		;NOT YET
30$:	MOVB	(R3)+,(R2)+	;STACK THE CHANNEL NUMBER
	DEC	R0		;COUNT AS ANOTHER STRING BYTE MOVED
	BEQ	50$		;LENGTH = 0, FIRQB DONE - DO XRB
	CMP	R2,(R1)		;CHANNEL, LENGTH, AND OFFSET ALL MOVED ?
	BLO	30$		;NOPE
40$:	MOVB	(R3)+,(R4)+	;LOAD PARAMETERS INTO FIRQB
	DEC	R0		;COUNT AS ANOTHER STRING BYTE MOVED
	BEQ	50$		;LENGTH = 0, FIRQB DONE - DO XRB
	CMP	R4,#FIRQB+40	;AT END OF FIRQB ?
	BLO	40$		;NOT THERE YET

50$:	MOV	#XRB+XRBC,R4	;FIRQB DONE, POINT TO XRB NOW
	CLR	(R4)+		;PRE-CLEAR XRBC
	MOV	(SP)+,R2	;GET (POSSIBLE) CHANNEL INTO R2
	MOVB	FIRQB+4,(R1)	;SAVE FUNCTION CODE ON THE R1 STACK
	BEQ	100$		;NO CHANNEL MUCKING FOR REMOVE
	TSTB	R2		;ANY CHANNEL?
	BEQ	90$		;SKIP CHANNEL STUFF IF NONE SUPPLIED
	BIC	#^C<17>,R2	;ENSURE A REASONABLE CHANNEL NUMBER
	MOV	R2,-(R1)	;STACK CHANNEL # ON R1 STACK
	MOV	SPDA,R2		;GET DATA RELOC FACTOR AND
	MOV	CURRIO(R2),-(SP) ;SAVE CURRENT I/O POINTER
	CALLX	SSONRC		;NOW SELECT THE NEW I/O CHANNEL
	MOV	(SP)+,CURRIO(R2) ;BUT REALLY RESTORE THE OLD ONE
	ADD	R2,R3		;POINT ABS TO THE BUFFER HEADER
	MOV	R3,(R4)		;SET THE HEADER ADDRESS @ XRLOC
	TST	(R3)+		;NOW SKIP HEADER'S LINKWORD
	ADD	(R3)+,(R4)	; AND FORM THE REAL BUFFER POINTER
	MOV	(R3),XRLEN-XRLOC(R4) ;SET BUFFER LENGTH @ XRLEN
	MOV	(SP)+,R2	;GET USER SUPPLIED LENGTH
	BNE	60$		;JUST STORE AT XRBC IF NON-ZERO
	MOV	(R3),R2		;ZERO, GET BUFFER LENGTH FROM HEADER
	SUB	(SP),R2		; SUBTRACTING ANY BUFFER OFFSET
60$:	MOV	R2,-(R4)	;STORE LENGTH AT XRBC
	SUB	(SP),-(R4)	;XRLEN = XRLEN - OFFSET
	BLOS	70$		;ERROR IF OFFSET >= BUFFER LENGTH
	ADD	(SP)+,XRLOC(R4)	;XRLOC = XRLOC + OFFSET
	CMP	(R4)+,(R4)	;BUFFER LENGTH >= BYTE COUNT ?
	BHIS	80$		;YES, ALL IS WELL
70$:	ERROR	BADCNT,FATAL	;USER BLEW IT

80$:	TSTB	(R1)		;IS FUNCTION A SEND OR RECEIVE ?
	BMI	110$		;SENDS ARE ALL SET UP
	MOV	(R4),XRLEN-XRBC(R4) ;SET (POSSIBLE) SHORT BUFFER
	CLR	(R4)		;ZERO XRBC FOR THE CALL
	BR	110$		;RECEIVE ALL SET UP

90$:	TSTB	(R1)		;WAS THE FUNCTION RECEIVE ?
	BPL	100$		;YES, XRB ALL SET (XRLEN = 0)
	MOV	R3,(R4)		;SET STRING ADDR AS BUF ADDR @ XRLOC
	MOV	R0,-(R4)	;XRBC GETS LENGTH OF REMAINING STRING
	MOV	R0,-(R4)	;XRLEN GETS THE SAME (MAY BE ZERO)
100$:	CMP	(SP)+,(SP)+	;POP THE UNUSED LENGTH AND OFFSET
110$:	MOV	(SP)+,XRB+XRBLK	;STORE TWO WORDS IN XRB 
	MOV	(SP)+,XRB+XRTIME ;FOR (POSSIBLE) FUTURE USE
	TST	(R1)+		;POP FUNCTION CODE FROM R1 STACK
120$:	.MESAG			;CALL FOR MESSAGE SEND/RECEIVE
	BIT	#JFCCC,@#JOBF	; *B* TRAPPING CTRL-C?
	BEQ	125$		; *B* NO, FORGET CHECKING!
	BIT	#JFCC,@#JOBF	; *A* CHECK FOR CTRL-C TYPED
	BEQ	125$		; *A* NO CTRL-C
	CLRB	@#FIRQB		; *A* YES, CLEAR ERROR CODE
125$:	CALLX	IODIE		;DIE ON ANY ERROR
	MOV	#FIRQB+2,R4	;GET POINTER TO THE ANSWERS
	MOV	#40.,R3		;WE'LL RETURN A 40. BYTE STRING
	CALLX	BUILDS		;SO BUILD ONE THAT SIZE
	ADD	#STRLEN,R1	;POP THE STRING
	MOV	#5.,R2		;MOVE 5. WORDS FROM FIRQB TO STRING
130$:	MOV	(R4)+,(R3)+	;ONE WORD AT
	SOB	R2,130$		; A TIME
	MOV	#XRB,R4		;NOW POINT TO THE XRB
	MOV	(R4)+,(R3)+	;SO MOVE EM
	MOV	(R4)+,(R3)+
	MOV	(R4)+,(R3)+
	TST	(R4)+		;POINT TO XRBLK
	MOV	(R4)+,(R3)+	;RETURN XRBLK FOR (POSSIBLE) FUTURE USE
	MOV	(R4)+,(R3)+	;RETURN XRTIME ALSO FOR FUTURE USE
	MOV	#FIRQB+14,R4	;POINT TO PARAMETER AREA OF FIRQB
	MOV	#10.,R2		;TEN WORDS TO FILL THE GAP
140$:	MOV	(R4)+,(R3)+	;SURE IS A PAIN
	SOB	R2,140$		; TO DO ALL THIS MOVING
	JMPX	MID6		;EXIT THROUGH MID6

	deforg	M18			; *C*

SYS618:
..S18. == .		; **PATCH** 'ERROR BADERR,FATAL' IF NO SYS(18)
	ERROR	BADERR,FATAL	;'ILLEGAL STATEMENT' IF SYS(18)

	.end
