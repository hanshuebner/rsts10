.IIF	NDF	L$$IST,	.NLIST
.IIF	NDF	L$$IST,	.DSABL	CRF

.NLIST	TTM
.LIST	TOC,MEB,BEX
.DSABL	GBL
.ENABL	REG,LC
.TITLE	COMMON	Common Definitions
.SBTTL
.SBTTL	COMMON	Common Definitions
.SBTTL
.SBTTL	Edit:		Date:		By:
.SBTTL	 0B	      25-AUG-89		MHB/ABC/SJK/SHG/MJG/RTW/GPK/MND/AJK/AWL/WJS/REJ/FEK/KPH/SHL/DBM/VAM
.SBTTL
.SBTTL
.SBTTL			COPYRIGHT (c) 1974, 1989 BY
.SBTTL		DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
.SBTTL
.SBTTL	THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
.SBTTL	ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
.SBTTL	INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
.SBTTL	COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
.SBTTL	OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
.SBTTL	TRANSFERRED.
.SBTTL
.SBTTL	THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
.SBTTL	AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
.SBTTL	CORPORATION.
.SBTTL
.SBTTL	DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
.SBTTL	SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
.SBTTL

.SBTTL	Edit history for COMMON

;+
;
;  000	RRF  06-MAR-81	CREATION - COPIED FROM V7.0-07
;  001	TG   27-Jun-80	Put Namdir stuff in
;  002	RTW  21-aug-80	Add Handler index for dmp
;  003	TG   20-DEC-80	Changed IDENT for new project
;  004	GPK  16-Feb-81	Added XPEEK and DDCU stuff
;  005	TG   16-Feb-81	Changed IDENT for new project
;  006  GPK  10-Apr-81	Add UU.TB3, add .ENABL REG,LC
;  007  MND  15-Apr-81	Removed comments to Named directories
;
;  008  AWL  17-Apr-82  CREATION - COPIED FROM V7.1-11
;  008  AJK  17-Apr-82  Added support for UDA
;  009  AWL  23-Apr-82  Changed version I.D. from .1 to .2
;
;  010  AWL  13-Aug-82  CREATION - COPIED FROM V7.2-04
;                       Changed version I.D. from 7.2 to 8.0
;
;				[RSTS V9.0]
;  011	GPK  04-Mar-83	Added job header, multiple privileges
;  012	GPK  25-Mar-83	Permanent files, installed tasks
;  013  BSB  28-Jun-83  Add support for .PFB call
;  014  BSB  30-Jun-83  Fix EMT table for reserved words 102-104
;  015  REJ  05-Aug-83  merge org macros with attributes into common
;  016  REJ  10-Aug-83  add VERSN macro for separate .idents
;  017	GPK  22-Sep-83	Add UU.3PP, UU.CHK, .READA, .WRITA, .ASTX
;  018	GPK  02-Nov-83	Removed .HDRSZ and moved .ASTX into its place
;  019	GPK  22-Nov-83	Changed P.STRT and P.CRAS to historical
;  020	KPH  13-Jan-84	Added .CMDLN, UU.ONX
;  021  SHL  25-Jan-84	Add support for UU.CFG directive
;  022	MNB  26-Feb-84  Added .AST
;
;			[RSTS V9.1]
;  023  TPT  28-Nov-84	Fix CMT header and CMT proper (align w/new MSCPDF)
;  024	DBM  08-Mar-85	Replace CM.TYP with CM.FLG.
;
;			[RSTS V9.3]
;  025	KCG  23-Aug-85	Add ETHHND for the handler index for QNA and UNA dvrs
;  026	DRP  08-Jan-86	Add .PSECT to solve RMS assembly problems
;  027  VAM  27-Aug-86	Move MSCP definitions from here to KERNEL.
;  028	DSD  07-Feb-88	Add DDCHND for the handler index for DDCMP driver
;
;			[RSTS V10.0]
;  029	FEK  25-Aug-89	Allow Alpha BL numbers
;
;			[RSTS V10.1]
;  030	FEK  10-Apr-91	Add UU.USC sub-function
;-

	.SBTTL

; General macros

.MACRO	UNORG
.ENDM	UNORG

.MACRO	ORG	SECT,OFFSET,PSCT,ACCESS=RW,SPACE=I,SCOPE=GBL,RELOC=REL,SEG=OVR
.IF	B	<PSCT>
.MACRO	UNORG
.LIST	BEX
.CSECT	SECT
.ENDM	UNORG
.IFF
.MACRO	UNORG
.LIST	BEX
.PSECT	SECT	ACCESS,SPACE,SCOPE,RELOC,SEG
.ENDM	UNORG
.ENDC
	TMPORG	SECT,<OFFSET>,<PSCT>,<ACCESS>,<SPACE>,<SCOPE>,<RELOC>,<SEG>
.ENDM	ORG

.MACRO	DEFORG	SECT,PSCT,ACCESS=RW,SPACE=I,SCOPE=GBL,RELOC=REL,SEG=OVR
	ORG	SECT,,<PSCT>,<ACCESS>,<SPACE>,<SCOPE>,<RELOC>,<SEG>
.DSABL	CRF
.IIF	NE	.-SECT,	.ERROR	;DEFORG NOT AT BEGINNING OF SECT
.GLOBL	SECT
.ENABL	CRF
.SBTTL	DEFINE IN LIBRARY "SECT"
.ENDM	DEFORG

.MACRO	TMPORG	SECT,OFFSET,PSCT,ACCESS=RW,SPACE=I,SCOPE=GBL,RELOC=REL,SEG=OVR
.IF	B	<PSCT>
.LIST	BEX
.CSECT	SECT
.IFF
.LIST	BEX
.PSECT	SECT	ACCESS,SPACE,SCOPE,RELOC,SEG
.ENDC
.DSABL	CRF
.IF	NDF	SECT
.ENABL	CRF
SECT:
.DSABL	CRF
.ENDC
.ENABL	CRF
.IF	NB	<OFFSET>
.	=	OFFSET+SECT
.ENDC
.ENDM	TMPORG

.MACRO	INCLUDE	LIST
.IRP	SECT,<LIST>
.GLOBL	SECT
.SBTTL	Include from library "SECT"
.ENDM
.ENDM	INCLUDE

.MACRO	.DSECT	START,CREF
.IIF	B	<CREF>,	.DSABL	CRF
.IIF	DF	L$$IST,	.DSABL	CRF
.ASECT
.	=	0
.IIF	DF	L$$IST,	.ENABL	CRF
.IIF	B	<CREF>,	.ENABL	CRF
.IF	NB	<START>
.	=	START
.ENDC
.ENDM	.DSECT

.MACRO	.BSECT	START,CREF
.IIF	B	<CREF>,	.DSABL	CRF
.IIF	DF	L$$IST,	.DSABL	CRF
.ASECT
.	=	1
.IF	IDN	<START>,<HIGH>
.	=	400
.ENDC
.IIF	DF	L$$IST,	.ENABL	CRF
.IIF	B	<CREF>,	.ENABL	CRF
.ENDM	.BSECT

.MACRO	.EQUATE	SYMBOL,VALUE,CREF
.IIF	B	<CREF>,	.DSABL	CRF
.IIF	DF	L$$IST,	.DSABL	CRF
.ASECT
.IIF	DF	L$$IST,	.ENABL	CRF
.IIF	B	<CREF>,	.ENABL	CRF
.	=	VALUE
.LIST
SYMBOL:
.NLIST
.IIF	B	<CREF>,	.DSABL	CRF
.IIF	DF	L$$IST,	.DSABL	CRF
	UNORG
.IIF	DF	L$$IST,	.ENABL	CRF
.IIF	B	<CREF>,	.ENABL	CRF
.ENDM	.EQUATE

.MACRO	SWAPR	REG1,REG2
.NTYPE	$$$$$1,REG1
.NTYPE	$$$$$2,REG2
.IIF NE	<$$$$$1!$$$$$2>&70, .ERROR	; Arguments to SWAPR must be registers
	 XOR	REG1,REG2
	 XOR	REG2,REG1
	 XOR	REG1,REG2
.ENDM	SWAPR

.MACRO	.BLKW0	AMT=1,VALUE=0
.NLIST
.REPT	AMT
	.WORD	VALUE
.ENDR
.LIST
.ENDM	.BLKW0

.MACRO	.BLKB0	AMT=1,VALUE=0
.NLIST
.REPT	AMT
	.BYTE	VALUE
.ENDR
.LIST
.ENDM	.BLKB0

.MACRO	GLOBAL	LIST
.GLOBL	LIST
.ENDM	GLOBAL

.MACRO	RETURN	REG=PC
	 RTS	REG
.ENDM	RETURN

.MACRO	JMPX	LABEL
	 JMP	@#LABEL
.DSABL	CRF
.GLOBL	LABEL
.ENABL	CRF
.ENDM	JMPX

.MACRO	CALL	SUBR,REG=PC,LIST
	 JSR	REG,SUBR
.IF	NB	<LIST>
	  .WORD	LIST
.ENDC
.ENDM	CALL

.MACRO	CALLR	SUBR
	 JMP	SUBR
.ENDM	CALLR

.MACRO	CALLX	SUBR,REG=PC,LIST
	CALL	@#SUBR,REG,<LIST>
.DSABL	CRF
.GLOBL	SUBR
.ENABL	CRF
.ENDM	CALLX

.MACRO	CALLRX	SUBR
	CALLR	@#SUBR
.DSABL	CRF
.GLOBL	SUBR
.ENABL	CRF
.ENDM	CALLRX

.MACRO	.ASSUME	ARG1,COND,ARG2
.IF	COND	<ARG1>-<ARG2>
.IFF
.ERROR	ARG1 ;"COND ARG2" fails
.ENDC
.ENDM	.ASSUME

.MACRO	.BR	ARG
.IF	NE	.-<ARG>
.ERROR	;Routine "ARG" misplaced
.ENDC
.ENDM	.BR

.MACRO	.CALLR	ARG
.IF	NE	.-<ARG>
.ERROR	;Subroutine "ARG" misplaced
.ENDC
.ENDM	.CALLR

.MACRO	PUSH	LIST
	.NLIST
.IF B	<LIST>
	 CLR	-(SP)
.IFF
.IRP	LOC,<LIST>
	 MOV	LOC,-(SP)
.ENDM	;.IRP
.ENDC	;.IF B <LIST>
	.LIST
.ENDM	PUSH

.MACRO	POP	LIST
	.NLIST
.IF B	<LIST>
	 TST	(SP)+
.IFF
.IRP	LOC,<LIST>
	 MOV	 (SP)+,LOC
.ENDM	;.IRP
.ENDC	;.IF B <LIST>
	.LIST
.ENDM	POP

.MACRO	MOVPIC	LBL,LOC
.NTYPE	$$$$$1,LBL
.NTYPE	$$$$$2,LOC
.IF NE	$$$$$1-27
	.ERROR	; LBL is not a literal reference
.IFF
.IF EQ	$$$$$2-46
	 MOV	PC,LOC
	 ADD	LBL-.,(SP)
.IFF
.IIF NE	$$$$$2&70,	.ERROR	; LOC is not a register or -(SP) reference
	 MOV	PC,LOC
	 ADD	LBL-.,LOC
.ENDC	;$$$$$2-46
.ENDC	;$$$$$1-27
.ENDM	MOVPIC


; System level definitions
; VERLEV parameters set ident & version 

.MACRO	TITLE	NAME,DESC,NU,LEDITDATE,EDITORS,VERLEV=<10,1>
.LIST
.TITLE	NAME	DESC
.NLIST
	VERSN	VERLEV, NU
.LIST
.SBTTL
.SBTTL	NAME	DESC
.SBTTL
.SBTTL	Edit:		Date:		By:
.SBTTL	 NU	      LEDITDATE		EDITORS
.SBTTL
.NLIST
$$$VER	=	"NU	; allow alpha or numeric			;029
$=0									;029
.IRPC	$$$	<NU>							;029
$=$+1			; count the length				;029
.ENDR									;029
.IIF	NE	$-2	.ERROR	;Illegal Edit level (2 digits)
.ENDM	TITLE

.MACRO	VERSN	VER, LEV, NU
$=0									;029
$$$$$=0									;029
.IRPC	$$$	<LEV>							;029
$=$+1						; count the length	;029
.IRP	$$$$	<0,1,2,3,4,5,6,7,8,9>					;029
.IIF	IDN	$$$,$$$$	$$$$$=$$$$$+1	;count the numerics	;029
.ENDR									;029
.ENDR									;029
.IIF	NE	$-1	.ERROR	;Illegal Minor Version number (1 digit)
.IIF	NE	$$$$$-1	.ERROR	;Illegal Minor Version number (numeric)
SYSVEL	= "VER 		
SYSVEE = ".'LEV		
.LIST		
.IDENT	"VER'.'LEV'NU"
.NLIST
.ENDM	VERSN


; Transfer Control Block (XRB)

; Used by user to initiate an I/O request
;	and for monitor/user data requests.

.DSECT	,NOCREF

XRLEN:	.BLKW		; Length of I/O buffer in bytes
XRBC:	.BLKW		; Byte count for transfer
XRLOC:	.BLKW		; Pointer to I/O buffer
XRCI:	.BLKB		; Channel number times 2 for transfer
XRBLKM:	.BLKB		; Random access block number (msb)
XRBLK:	.BLKW		; Random access block number (lsb)
XRTIME:	.BLKW		; Wait time for terminal input
XRMOD:	.BLKW		; Modifiers
XRBSIZ:			; Size of the XRB in bytes

; File Request Queue Block (FIRQB)  (pronounced 'furk-be')

; All requests for file processing are made by setting the necessary parameters
;	in the FIRQB, and calling the monitor with "CALFIP".

.DSECT	,NOCREF

	.BLKB		; Reserved for returned error code
	.BLKB		; Reserved byte
FQJOB:	.BLKB		; Holds your job number times 2
FQFUN:	.BLKB		; Function requested
FQERNO:			; Error message code and text begin
FQFIL:	.BLKB		; Channel number times 2
FQSIZM:	.BLKB		; File size in blocks (msb)
FQPPN:	.BLKW		; Project-programmer number
FQNAM1:	.BLKW	2	; 2 word filename in radix 50
FQEXT:	.BLKW		; 1 word filetype in radix 50
FQSIZ:	.BLKW		; File size in blocks (lsb)
FQNAM2:			; 3 word new FILNAM.TYP in radix 50
FQBUFL:	.BLKW		; Default buffer length
FQMODE:	.BLKW		; MODE indicator
FQFLAG:	.BLKW		; Opened file's flag word as returned
FQPFLG:	.BLKB		; "Protection code real" indicator
FQPROT:	.BLKB		; New protection code
FQDEV:	.BLKW		; 2 byte ascii device name
FQDEVN:	.BLKB		; 1 byte unit number
	.BLKB		; "Unit number real" indicator
FQCLUS:	.BLKW		; File cluster size for file creates
FQNENT:	.BLKW		; Number of entries on directory lookup
FQBSIZ:			; Size of the FIRQB in bytes

;  Monitor calls (EMT's)

.DSECT	+EMT,NOCREF

CALFIP:	.BLKW		; Call FIP, with FIRQB loaded
.READ:	.BLKW		; READ
.WRITE:	.BLKW		; WRITE
.CORE:	.BLKW		; Change user memory size
.SLEEP:	.BLKW		; SLEEP job for n seconds
.PEEK:	.BLKW		; PEEK at memory
.SPEC:	.BLKW		; Special function
.TTAPE:	.BLKW		; Enter TAPE mode
.TTECH:	.BLKW		; Enable echo
.TTNCH:	.BLKW		; Disable echo
.TTDDT:	.BLKW		; DDT submode
.TTRST:	.BLKW		; Cancel ^O effect
.TIME:	.BLKW		; Get timing information
.POSTN:	.BLKW		; Get device's horizontal position
.DATE:	.BLKW		; Get current date & time
.SET:	.BLKW		; Set keyword bit(s)
.STAT:	.BLKW		; Get my statistics
.RUN:	.BLKW		; RUN a new program
.NAME:	.BLKW		; Install a new program name
.EXIT:	.BLKW		; Exit to default run-time system
.RTS:	.BLKW		; Change to a new run-time system
.ERLOG:	.BLKW		; Log an error from the run-time system
.LOGS:	.BLKW		; Check for logical devices
.CLEAR:	.BLKW		; Clear keyword bit(s)
.MESAG:	.BLKW		; Message send/receive
.CCL:	.BLKW		; CCL checker
.FSS:	.BLKW		; File String Scanner
.UUO:	.BLKW		; UUO hook
.CHAIN:	.BLKW		; CHAIN to a new program
.PLAS:	.BLKW		; Resident library control
.RSX:	.BLKW		; Enter RSX emulation
.ULOG:	.BLKW		; ASSIGN/REASSIGN/DEASSIGN device/user logical
.XPEEK:	.BLKW		; Extended block-mode PEEK
.READA:	.BLKW		; Asynchronous read
.WRITA:	.BLKW		; Asynchronous write
.ASTX:	.BLKW		; Exit AST routine				;018
.PFB:	.BLKW		; PFB Handling Routines
.CMDLN:	.BLKW		; Command line read/write			;020
.AST:	.BLKW		; Disable/Enable AST routine execution		;022

; FIP (FIRQB @ FQFUN) function codes

.DSECT	,NOCREF

CLSFQ:	.BLKW		; CLOSE an open channel
OPNFQ:	.BLKW		; OPEN a channel
CREFQ:	.BLKW		; Create/extend/OPEN a channel
DLNFQ:	.BLKW		; Delete a file by name
RENFQ:	.BLKW		; Rename a file
DIRFQ:	.BLKW		; Directory information
UUOFQ:	.BLKW		; Process UUO
ERRFQ:	.BLKW		; Get error message text
RSTFQ:	.BLKW		; Reset (close) [all] channel[s except 0]
LOKFQ:	.BLKW		; Look up a file
ASSFQ:	.BLKW		; ASSIGN a device
DEAFQ:	.BLKW		; DEASSIGN a device
DALFQ:	.BLKW		; DEASSIGN all devices
CRTFQ:	.BLKW		; Create/extend/OPEN a unique .TMP file on disk
CRBFQ:	.BLKW		; Create/extend/OPEN A compiled image file on disk

; .PLAS (FIRQB @ FQERNO) function codes

.DSECT	,NOCREF

ATRFQ:	.BLKW		; Attach region (resident library)
DTRFQ:	.BLKW		; Detach region (resident library)
CRAFQ:	.BLKW		; Create address window
ELAFQ:	.BLKW		; Eliminate address window
MAPFQ:	.BLKW		; Map address window
UMPFQ:	.BLKW		; Unmap address window

; .UUO/UUOFQ Subfunction Codes

.DSECT	-30.,NOCREF

UU.USC:	.BLKB		; -30., Utility Sync code			;030
UU.TB3:	.BLKB		; -29., Monitor tables part 3
UU.SPL:	.BLKB		; -28., One-shot spooling request
UU.DMP:	.BLKB		; -27., Online monitor snapshot
UU.FIL:	.BLKB		; -26., File utility
UU.ATR:	.BLKB		; -25., Read/write file attributes
UU.CCL:	.BLKB		; -24., CCL command add/delete
	.BLKB		; -23., Reserved (Basic-Plus terminating file string scan)
	.BLKB		; -22., Reserved (Basic-Plus special run priority)
	.BLKB		; -21., Reserved (Basic-Plus privilege drop/restore)
	.BLKB		; -20., Reserved (Basic-Plus memory lock/unlock)
UU.LOG:	.BLKB		; -19., Set number of allowed LOGIN's
UU.RTS:	.BLKB		; -18., Run-time system & resident library control
UU.NAM:	.BLKB		; -17., Set file's run-time system name
UU.DIE:	.BLKB		; -16., Special SHUTUP logout
UU.ACT:	.BLKB		; -15., Accounting information dump
UU.DAT:	.BLKB		; -14., Date/Time changer
UU.PRI:	.BLKB		; -13., Priority, run burst, core-maximum changer
UU.TB2:	.BLKB		; -12., 2nd part of monitor tables
UU.BCK:	.BLKB		; -11., Backup file accounting changer
	.BLKB		; -10., Reserved (Basic-Plus file string scan)
UU.HNG:	.BLKB		;  -9., Hangup/enable a dataset
UU.FCB:	.BLKB		;  -8., Get FCB/DDB information
	.BLKB		;  -7., Reserved (Basic-Plus Control/C trap enable)
UU.POK:	.BLKB		;  -6., POKE monitor memory
	.BLKB		;  -5., Reserved (Basic-Plus SEND to terminal)
	.BLKB		;  -4., Reserved (Basic-Plus FORCE to terminal)
UU.TB1:	.BLKB		;  -3., 1st part of monitor tables
UU.NLG:	.BLKB		;  -2., Set number of allowed LOGIN's to 1
UU.YLG:	.BLKB		;  -1., Set number of allowed LOGIN's to maximum
UU.PAS:	.BLKB		;  +0., Create an account

UU.DLU:	.BLKB		;  +1., Delete an account
UU.CLN:	.BLKB		;  +2., "Clean" a disk pack
UU.MNT:	.BLKB		;  +3., Disk pack mount/dismount
UU.LIN:	.BLKB		;  +4., LOGIN
UU.BYE:	.BLKB		;  +5., LOGOUT
UU.ATT:	.BLKB		;  +6., ATTACH
UU.DET:	.BLKB		;  +7., DETACH
UU.CHU:	.BLKB		;  +8., Change password/quota
UU.ERR:	.BLKB		;  +9., Get error message text
UU.ASS:	.BLKB		; +10., ASSIGN
UU.DEA:	.BLKB		; +11., DEASSIGN
UU.DAL:	.BLKB		; +12., DEASSIGN all
UU.ZER:	.BLKB		; +13., Zero device
UU.RAD:	.BLKB		; +14., Read accounting information
UU.DIR:	.BLKB		; +15., Get directory information
UU.TRM:	.BLKB		; +16., Set terminal characteristics
UU.LOK:	.BLKB		; +17., Wildcard directory lookup
	.BLKB		; +18., Reserved (Basic-Plus old message send/receive)
UU.CHE:	.BLKB		; +19., Cache enable/disable
UU.CNV:	.BLKB		; +20., Convert date/time to ascii
UU.SLN:	.BLKB		; +21., Set/clear system-wide logical names
	.BLKB		; +22., Reserved (Basic-Plus message send/receive)
UU.SWP:	.BLKB		; +23., Add/remove swap, overlay, error msg files
UU.JOB:	.BLKB		; +24., Job creation
UU.PPN:	.BLKB		; +25., Wildcard PPN lookup
UU.SYS:	.BLKB		; +26., Return job status information
UU.KMC:	.BLKB		; +27., Connect KMC-11 to another device
UU.PRV:	.BLKB		; +28., Set/clear/read privilege flags		;011
UU.STL:	.BLKB		; +29., Stall/unstall-system functions
UU.PRM:	.BLKB		; +30., Add/remove permanent file/priv'd program ;012
UU.3PP:	.BLKB		; +31., Set/drop third party privilege check	;017
UU.CHK:	.BLKB		; +32., File access or privilege bit check	;017
UU.ONX:	.BLKB		; +33., Open next disk file			;020
UU.CFG: .BLKB		; +34., Set system defaults/parameters		;021

; I/O Related Definitions

; Handler Indexes

.DSECT	,NOCREF

DSKHND:	.BLKW		; Disk(s)
TTYHND:	.BLKW		; Terminal(s)
DTAHND:	.BLKW		; DECtape
LPTHND:	.BLKW		; Line printer(s)
PTRHND:	.BLKW		; Paper tape reader
PTPHND:	.BLKW		; Paper tape punch
CDRHND:	.BLKW		; Card reader
MTAHND:	.BLKW		; Magtape(s)
PKBHND:	.BLKW		; Pseudo-keyboards
RXDHND:	.BLKW		; Floppy disk
RJEHND:	.BLKW		; 2780 RJE
NULHND:	.BLKW		; Null device
DMCHND:	.BLKW		; DMC11 device
AUDHND:	.BLKW		; Auto-dial device (DN11)
PLTHND:	.BLKW		; X-Y plotter
DT2HND:	.BLKW		; DECtape II
KMCHND:	.BLKW		; KMC11 microprocessor
IBMHND:	.BLKW		; IBM interconnect
MBXHND:	.BLKW		; Mailbox (reserved for VAX-11)
DMPHND:	.BLKW		; DMP11/DMV11 device
ETHHND:	.BLKW		; Ethernet device				;025
DDCHND:	.BLKW		; DDCMP device handler				;028

.BSECT	HIGH,NOCREF	; Flag bits for an open file

DDNFS:	.BLKB	.	; File(device) is non-file-structured
DDRLO:	.BLKB	.	; File(device) is read-locked
DDWLO:	.BLKB	.	; File(device) is write-locked
FLGPOS:	.BLKB	.	; File(device) keeps its own position
FLGMOD:	.BLKB	.	; File(device) accepts modifiers
FLGFRC:	.BLKB	.	; File(device) is byte oriented (non-blocked)
FLGKB:	.BLKB	.	; File(device) is interactive (keyboard type)
FLGRND:	.BLKB	.	; File(device) is random access

; Job Unique Low Memory Layout

.DSECT	,NOCREF

	.BLKW	30	; Job controlled
	.BLKW	15	; Reserved for monitor context use
	.BLKW	30	; Reserved for monitor FPP context use
	.BLKW	103	; Job's SP stack area
USRSP:			; Default (initial) job SP stack setting
KEY:	.BLKW		; Keyword of job's current status
FIRQB:	.BLKB	FQBSIZ	; File request queue block
XRB:	.BLKB	XRBSIZ	; Transfer control block
CORCMN:	.BLKB	200	; CCL line COMMON
	.BLKW	26	; Job controlled
USRPPN:	.BLKW		; User's assignable PPN
USRPRT:	.BLKW		; User's assignable protection code
USRLOG:	.BLKW	4*4	; User's logical device table
NSTORG:			; End of low memory fixed layout

.BSECT	HIGH,NOCREF	; Keyword status bits

JFSPRI:	.BLKB	.	; Job is at special run priority
JFFPP:	.BLKB	.	; Save/restore async FPP context
JFPRIV:	.BLKB	.	; Job has permanent privileges
JFSYS:	.BLKB	.	; Job has temporary privivileges active
JFNOPR:	.BLKB	.	; Job is not yet logged in
JFBIG:	.BLKB	.	; Job can exceed its private memory max
JFLOCK:	.BLKB	.	; Job is not to be swapped

; Run-Time System Unique High Memory Layout

.DSECT	177776,NOCREF

	.BLKW	-1	; Unavailable word
P.SIZE:	.BLKW	-1	; Max size for a user's image in K
P.2CC:	.BLKW	-1	; Address of 2 quick Control/C's
P.CC:	.BLKW	-1	;  "      "  Control/C trapping
P.FPP:	.BLKW	-1	;  "      "  @244 traps (FPP)
P.TRAP:	.BLKW	-1	;  "      "  @34 traps (TRAP)
P.EMT:	.BLKW	-1	;  "      "  @30 traps (non-monitor call)
P.IOT:	.BLKW	-1	;  "      "  @20 traps (IOT)
P.BPT:	.BLKW	-1	;  "      "  @14 traps (ODT or T-bit)
P.BAD:	.BLKW	-1	;  "      "  bad error recovery
P.RUN:	.BLKW	-1	;  "      "  entry to run a new program
P.NEW:	.BLKW	-1	;  "      "  a new entry
P.STRT:	.BLKW	-1	; (historical)					;019
P.CRAS:	.BLKW	-1	; (historical)					;019
P.FIS:	.BLKW	-1	;  "      "  @244 traps (FIS)
P.MSIZ:	.BLKW	-1	; Min size for a user's image in K
P.ISIZ:	.BLKW	-1	; (historical ...)
P.DEXT:	.BLKW	-1	; Default executable extension (RAD50)
P.FLAG:	.BLKW	-1	; Flag word describing the RTS
	.BLKW		; Dummy to get back to the
P.OFF:			;  starting address of these "vectors"

.BSECT	HIGH,NOCREF	; Flag bits in P.FLAG word

PF.KBM:	.BLKB	.	; RTS is a keyboard monitor
PF.1US:	.BLKB	.	; RTS allows only 1 user (no sharing)
PF.RW:	.BLKB	.	; RTS wants to run mapped read/write
PF.NER:	.BLKB	.	; RTS doesn't want its errors logged
PF.REM:	.BLKB	.	; Unconditional remove from memory on exit
PF.CSZ:	.BLKB	.	; Run size is computed from file size
PF.SLA:	.BLKB	.	; (save the load address, M.PHYA)
PF.EMT:	.BLKB	.	; RTS wants EMT code in low byte as a prefix

; Notes on the above pseudo-vector cells:
;	The following are entry points into the RTS:
;		P.BAD,	P.RUN,	P.NEW,	P.STRT,	P.CRAS
;	The following are synchronous traps into the RTS:
;		P.TRAP,	P.EMT,	P.IOT,	P.BPT,	P.FIS
;	The following are asynchronous traps into the RTS:
;		P.2CC,	P.CC,	P.FPP,	P.BAD
;	The following are for information only:
;		P.SIZE,	P.MSIZ,	P.ISIZ,	P.DEXT,	P.FLAG

.PSECT
.IIF	NDF	L$$IST,	.ENABL	CRF
.IIF	NDF	L$$IST,	.LIST

