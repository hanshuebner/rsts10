TITLE	MAD,<DECIMAL MATH ROUTINES>,08,13-MAY-86,MHB/JDM

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.

SUBF:	JSR	PC,NEGF		;SUBTRACTION IS REALLY REVERSE ADDITION
ADDF:	MOV	(R1),-(SP)	;GET SIGN OF 1ST FLOATER
	BIC	#077777,(SP)	;THEN SAVE ONLY THE SIGN BIT
	ADD	FLTLE2(R1),(SP)	;AND ACCUMULATE SIGN BITS
	ROR	(SP)		;SAVE CARRY AND SIGN BITS
	JSR	PC,ADDFS	;NOW ADD ON R1 STACK
	ROL	(SP)+		;CHECK FOR OVERFLOWS
	BMI	1$		;IF DIFFERENT SIGNS THEN NO POSSIBILTY
	MOV	(R1),-(SP)	;IF SAME SIGN, THEN CHECK RESULT SIGN
	ROR	(SP)		;PUT OLD CARRY AND SIGN INTO WORD
	ASL	(SP)+		;NOW CHECK FOR SIGN MATHCING
	BVC	1$		;IF SAME, THEN O.K.
	POST,	PSTFLT		;ELSE ERROR
1$:	RTS	PC		;AND EXIT

; ADD R1 STACK ITEMS

ADDFS:	MOV	R1,R4		;COPY R1 STACK
	ADD	#FLTLE4,R1	;R1 TO BOTTOM OF 2ND
	ADD	#FLTLE2,R4	;R1 TO BOTTOM OF 1ST

;ADDITION ROUTINE - ADDS -(R4) TO -(R1) AND KILLS R3

ADDF0:	MOV	#FLTLEN,R3	;GET # WORDS COUNTER
ADDFD:	CLC			;INITIAL CARRY CLEAR
1$:	ADC	-(R1)		;ADD CARRY FROM BEFORE
	BCS	2$		;IF MORE CARRY THEN CHECK IT
	ADD	-(R4),(R1)	;ELSE ADD NEXT ELEMENT
3$:	SOB	R3,1$		;IF MORE, THEN GO ADD ANY CARRY
	RTS	PC		;ELSE WITH WITH CARRY INDICATING

2$:	MOV	-(R4),(R1)	;IF CARRY FROM ADD CARRY THE RESULT
	BR	3$		;WAS 0, SO JUST MOVE AND CONTINUE

; FLOAT A FIXED INTEGER INTO A FLOATER
; DON'T TOUCH R0 OR R4!

FLT:	MOV	(R1),-(SP)	;SAVE SIGN OF INTEGER
	BPL	FLT00		;+
	NEG	(R1)		;IF -, MAKE IT +
FLT00:	CLR	-(R1)		;MAKE REST OF FLOATER 0
FLT.02:	FLTCLR	-(R1)

; MULTIPLY BY THE FACTOR OF 10

FIXF2:	MOV	R4,-(SP)	;REMEMBER TO SAVE R4
	MOV	R0,-(SP)	; AND R0!
	MOV	#6.,R0		;THIS IS THE CORRECT POWER OF TEN
1$:	JSR	PC,M10		;MULTIPLY BY 10.
	SOB	R0,1$		;LOOP FOR ALL 6. MULTIPLIES
	MOV	(SP)+,R0	;RESTORE R0 AND
	MOV	(SP)+,R4	; R4...
	JMP	SGNEXT		;EXIT VIA EXTENDING SIGN IF NEEDED

; FIX FUNCTION

FIXF:	JSR	R5,INTFUN	;GET A FLOATER
	ARGS	FAF
FIXF1:	JSR	PC,ABSFSV	;MAKE ABS, BUT SAVE SIGN
	FLTCLR	-(R1)		;NOW MAKE INTO DOUBLE
	FLTCLR	-(R1)		; FLOATER
	JSR	PC,DIVCOR	;AND DIVIDE OUT CORRECTION FACTOR (1.000000)
	FLTPP	(R1)+		;JUNK ALL 0 HIGH ORDER WORDS
	BR	FIXF2		;NOW GO RE-CORRECT NUMBER AND RESTORE SIGN

; FLOATING MULTIPLY

	.ENABL	LSB

MULF:	JSR	PC,9$		;DO COMMON SIGN CHECKING
1$:	JSR	PC,MULT		;THEN MULTIPLY
	JSR	PC,DIVCOR	;CORRECT RESULT (DIVIDE BY 1.000000)
20$:	MOV	(R1)+,-(SP)	;CHECK FOR OVERFLOW
	BIS	(R1)+,(SP)
	BIS	(R1)+,(SP)
	BIS	(R1)+,(SP)+	;FINAL CHECK
	BNE	2$		;ERROR
	TST	(R1)
	BPL	3$		;NO ERROR
2$:	POST,	PSTFLT		;POST THE ERROR
3$:	JMP	SGNEXT		;EXIT BY EXTENDING SIGN IF NEEDED

9$:	MOV	(SP),-(SP)	;MOVE RETURN ADDRESS
	MOV	(R1),2(SP)	;SAVE 1ST SIGN HERE
	BIC	#077777,2(SP)	;BUT ONLY THE SIGN BIT
	BEQ	10$		;AND IT IS +
	JSR	PC,NEGF		;IF -, THEN MAKE IT +
10$:	JSR	PC,FLTEST	;CHECK FOR TRUE 0
	BNE	11$		;NOT 0
	ADD	#FLTLE2,R1	;DUMP 2ND FLOATER ALSO
	CMP	(SP),#1$	;MUL OR DIV?
	BEQ	12$		;IF MUL THEN O.K.
	POST,	PSTDV0		;ELSE ERROR
12$:	CMP	(SP)+,(SP)+	;DUMP RETURN ADDRESS AND SIGNS
	JMP	PUSHF0		;AND EXIT WITH A 0

11$:	ADD	(R1),2(SP)	;FORM FINAL SIGN OF RESULT
	TST	(R1)		;+ OR -
	BPL	13$		;+
	JSR	PC,NEGF		;IF -, MAKE IT +
13$:	JSR	PC,FLTEST	;0?
	BEQ	12$		;IF 0, THEN ANSWER IS 0
	SUB	#FLTLE4,R1	;BACK UP R1 STACK TO TOP AGAIN
	RTS	PC		;AND EXIT WITH SIGN ON SP STACK

; DIVISION

DIVF:	JSR	PC,9$		;DO COMMON THING
	MOVFLT	(R1)+,-(SP)	;SAVE DIVISOR ON SP STACK
	JSR	PC,PUSHF1	;PUSH 1.000000
	JSR	PC,MULT		;THIS SHIFTS DIVIDEND BY 10 POWER
	MOVFLT	(SP)+,-(R1)	;RESTORE DIVISOR
	MOV	#20$,-(SP)	;RETURN TO OVERFLOW CHECK
	;JMP	DIV		;NOW GO DIVIDE

	.DSABL	LSB

; DIVISION ROUTINE
; ENTER WITH DOUBLE DIVIDEND AND DIVISOR ON TOP

DIV:	MOV	R5,-(SP)	;SAVE POSSIBLE IPC
	MOV	R0,-(SP)	;SAVE R0
	MOV	#FLTLEN*2*16.+1,-(SP);SET MAIN COUNTER
	MOV	R1,R2		;COPY R1 STACK
	FLTCLR	-(R1)		;CLEAR REMAINDER AREA
	FLTCLR	-(R1)
	MOV	R2,R4
	ADD	#FLTLE2,R4	;BOTTOM+2 OF DIVISOR
	MOVFLT	-(R4),-(R1)	;PUT DIVISOR ON TOP
	JSR	PC,NEGF		;AND MAKE NEGATIVE
	SUB	#FLTLE2,R4	;BOTTOM+2 OF -DIVISOR
	ADD	#FLTLE4,R1	;BOTTOM+2 OF REMAINDER
	ADD	#FLTLE4+FLTLE2,R2;BOTTOM+2 OF DIVIDEND
	CLR	R0		;CLEAR LASTING CARRY
	CLR	R5		;CLEAR TEMP CARRY
	MOV	R4,-(SP)	;SAVE BOTTOM+2 OF -DIVISOR
	BR	4$		;DO INITIAL SUBTRACTION

1$:	ROL	R0		;LOAD CARRY
	MOV	#FLTLE2,R0	;USE R0 FOR COUNTER (CARRY UNCHANGED)
2$:	ROL	-(R2)		;DOUBLE ROTATE
	SOB	R0,2$		;LOOP (DOESN'T CHANGE CARRY)
	ROR	R0		;SAVE CARRY IN (BY NOW) ZERO R0
	ADD	#FLTLE4,R2	;CORRECT POINTER
	ROL	R0
	ROL	-(R1)
	ROL	-(R1)
	ROL	-(R1)
	ROL	-(R1)
	ADD	#FLTLE2,R1	;CORRECT POINTER
	TST	R5		;CARRY?
	BEQ	3$		;NO
	CLR	R5		;CLEAR IT
	BR	4$

3$:	ADD	#FLTLE4,R4	;USE + DIVISOR
4$:	JSR	PC,ADDF0	;ADD
	ADC	R5		;ADD TO TEMP CARRY
	BEQ	5$		;NONE
	INC	-2(R2)
5$:	MOV	(SP),R4		;RESTORE
	ADD	#FLTLE2,R1	;CORRECT
	DEC	2(SP)		;AGAIN?
	BNE	1$		;YES
	CMP	(SP)+,(SP)+
	ADD	#FLTLE2,R1	;CORRECT
	MOV	(SP)+,R0	;RESTORE R0
	MOV	(SP)+,R5	;GET BACK POSSIBLE IPC
	RTS	PC		;EXIT

; COMMON MULTIPLICATION ROUTINE
; ENTER WITH 2 FLOATERS, EXIT WITH 1 DOUBLE FLOATER

MULT:	MOV	R5,-(SP)	;SAVE POSSIBLE IPC
	MOV	#FLTLE2,R2	;HANDY CONSTANT
	MOV	R1,R4		;POINT R4 AT BOTTOM+2 OF ARG (AFTER MOVE)
	MOV	R1,R3		;POINT R3 AT BOTTOM+2 OF ARG (FOR MOVING)
	ADD	R2,R1		;NOW GO TO BOTTOM+2 OF ARG ITSELF
40$:	MOV	-(R1),-(R3)	;MOVE ARG UP ON STACK AND
	CLR	(R1)		; CLEAR HIGH ORDER WORDS OF DOUBLE RESULT
	CMP	R1,R4		;DONE ALL WORDS YET?
	BHI	40$		;NOPE...
	MOV	#FLTLEN*16.+1,R5;SET MAIN LOOP COUNTER
30$:	MOV	R2,R3		;PRE-LOAD A WORD COUNTER
	TST	FLTLE4-2(R1)	;IS WHOLE LAST WORD ZERO?
	BNE	31$		;NOPE, SO NO FAST WORD SHIFT POSSIBLE
	CMP	R5,#16.		;YES, BUT ARE THERE A WORD'S WORTH LEFT??
	BLT	31$		;NO FAST WORD SHIFT IS POSSIBLE IF NOT
	ADD	#FLTLE4,R1	;SET UP FOR A FAST 16. BIT SHIFT (WORD)
32$:	MOV	-4(R1),-(R1)	;MOVE 1 WORD DOWN 1 WORD
	SOB	R3,32$		;DO THIS FOR ALL WORDS...
	CLR	(R1)		;THAT LAST (TOP) WORD GETS ALL ZERO IN IT
	SUB	#16.,R5		;CORRECT THE MAIN COUNTER
	BGT	30$		;THERE IS MORE TO DO
	BR	23$		;ALL DONE!

31$:	TSTB	FLTLE4-2(R1)	;IS WHOLE LAST BYTE ZERO?
	BNE	20$		;NOPE, SO NO FAST BYTE SHIFT POSSIBLE
	CMP	R5,#8.		;YES, BUT ARE THERE A BYTE'S WORTH LEFT??
	BLT	20$		;NO FAST BYTE SHIFT IS POSSIBLE IF NOT
	ADD	#FLTLE4,R1	;SET UP FOR A FAST 8. BIT SHIFT (BYTE)
33$:	SWAB	-(R1)		;BRING HIGH BYTE OF WORD OVER WORD'S LOW BYTE
	MOVB	-2(R1),1(R1)	;THEN BRING LOW BYTE OF NEXT INTO THIS HIGH BYTE
	SOB	R3,33$		;DO THIS FOR ALL WORDS
	CLRB	1(R1)		;THAT LAST (TOP) BYTE GETS ALL ZERO IN IT
	SUB	#8.,R5		;CORRECT THE MAIN COUNTER
	BGT	30$		;THERE IS MORE TO DO
	BR	23$		;ALL DONE!

20$:	CLC			;CLEAR THAT CARRY
21$:	ROR	(R1)+		;SHIFT RESULT 1 BIT TO THE RIGHT
	SOB	R3,21$		;DO THIS FOR ALL WORDS
	MOV	R4,R1		;RESET R1 TO TOP OF RESULT (CARRY UNCHANGED)
	BCC	22$		;IF NO CARRY OUT THEN NO ADD NEEDED
	ADD	R2,R1		;ELSE INDEX FOR THE ADDITION TO RESULT
	JSR	PC,ADDF0	;ADD ARG OF HIGH ORDER OF RESULT
	MOV	R1,R4		;RESET R4 TO BOTTOM+2 OF ARG
22$:	SOB	R5,30$		;MAIN LOOP...
23$:	MOV	(SP)+,R5	;RESTORE POSSIBLE IPC
	RTS	PC		;AND EXIT

; FIX A FLOATER

FIX:	JSR	PC,ABSFSV	;MAKE ABS AND SAVE SIGN
	MOV	R4,-(SP)	;SAVE R4 FOR THE WORLD
	MOV	R1,R4		;COPY R1 STACK POINTER
	SUB	#FLTLE2+2,R1	;MAKE ROOM FOR 1 FLOATER + 1 INTEGER
	MOV	R1,R2		;COPY THAT SPOT
	MOVFLT	(R4)+,(R2)+	;PUT ABS FLOATER ON TOP
	CLR	(R2)+		;SET +32768.00000 (1ST = 0)
	MOV	#7,(R2)+	; (2ND=000007)
	MOV	#120440,(R2)+	;  (3RD=120440)
	CLR	(R2)+		;   (4TH=000000)
	CLR	(R2)		;MAKE TRIAL INTEGER A 0
	JSR	PC,CMPF		;COMPARE ABS FLOATER WITH 32768.
	BLE	1$		;IF ABS FLOATER >= 32768. THEN ERROR
	MOV	#040000,-(SP)	;ELSE SET BIT PATTERN ON STACK
4$:	ASR	(R1)+		;DIVIDE 32768. BY 2
	ROR	(R1)+		;ALL
	ROR	(R1)+		; 4
	ROR	(R1)+		;  WORDS OF IT
	MOV	R1,R3		;SAVE POINTER TO BOTTOM+2 OF IT
	SUB	#FLTLE4,R1	;BACK UP TO ABS FLOATER
	JSR	PC,CMPF		;COMPARE ABS FLOATER WITH TRIAL
	BGT	5$		;TRIAL BIGGER THAN ABS FLOATER
	SUB	#FLTLE2,R1	;BACK UP TO ABS FLOATER
	MOVFLT	-(R3),-(R1)	;PUT TRIAL VALUE ON R1 STACK TOP
	JSR	PC,NEGF		;NEGATE IT
	JSR	PC,ADDFS	;AND REDUCE ABS FLOATER QUICKLY
	ADD	#FLTLE2,R1	;POINT R1 BACK TO TRIAL
	BIS	(SP),(R2)	;AND INCLUDE BIT IN RESULT
5$:	ASR	(SP)		;NEXT POSITION FOR TRIAL BIT
	BNE	4$		;CONTINUE UNTIL NO BIT LEFT
	TST	(SP)+		;DUMP WORD OF 0
3$:	MOV	(SP)+,R4	;RESTORE R4
	MOV	R2,R1		;R1 HAS NEW R1 STACK SPOT
	TST	(SP)+		;INTEGER FINAL SIGN CHECK
	BPL	2$		;LEAVE IF +
	NEG	(R1)		;MAKE IT -
2$:	RTS	PC		;EXIT

1$:	POST,	PSTFIX		;INTEGER ERROR
	BR	3$		;NOW EXIT

; COMPARE FLOATING

CMPF:	MOV	#077777,-(SP)	;SET A + NUMBER FIRST
	MOV	R1,R4		;COPY R1 STACK POINTER
	ADD	#FLTLE2,R1	;DUMP ONE NUMBER
	CMP	(R4)+,(R1)	;1ST WORD CHECK
	BGT	1$		;SET -
	BLT	2$		;KEEP +
	CMP	(R4)+,2(R1)	;REST OF THE CHECKS
	BHI	1$
	BLO	2$
	CMP	(R4)+,4(R1)	;NEXT WORD
	BHI	1$
	BLO	2$
	CMP	(R4)+,6(R1)	;LAST WORD
	BHI	1$
	BLO	2$
	CLR	(SP)		;THE SAME!!
	BR	2$

1$:	COM	(SP)		;MAKE -
2$:	TST	(SP)+		;SET CC'S
	RTS	PC

BNT4:	MOV	R1,-(SP)	;SAVE CURRENT R1
	JSR	PC,DUPLF	;THEN DUPLICATE FLOATER
	JSR	PC,ABSF00	;AND MAKE IT ABSOLUTE
	TST	(R1)+		;1ST WORD MUST BE 0
	BNE	5$		;NO GO
	CMP	(R1)+,#000007	;2ND WORD MUST BE <=7
	BHI	5$		;NO GO
	BLO	6$		;O.K.
	CMP	(R1)+,#120440	;3RD WORD MUST BE <120440
	BLO	6$		;O.K.
5$:	MOV	#FLOTIM,2(SP)	;CHANGE RETURN ADDRESS
6$:	MOV	(SP)+,R1	;RESTORE R1
	RTS	PC		;AND EXIT

; FLOATER TO ASCII CONVERSION

FTOATB:	.WORD	006740,133263,123544,000000	;1000000000000.000000
	.WORD	000543,042570,056612,000000	; 100000000000.000000
	.WORD	000043,103362,067701,000000	;  10000000000.000000
	.WORD	000003,106576,122306,100000	;   1000000000.000000
	.WORD	000000,055363,010172,040000	;    100000000.000000
	.WORD	000000,004430,047162,120000	;     10000000.000000
	.WORD	000000,000350,152245,010000	;      1000000.000000
	.WORD	000000,000027,044166,164000	;       100000.000000
	.WORD	000000,000002,052013,162000	;        10000.000000
	.WORD	000000,000000,035632,145000	;         1000.000000
	.WORD	000000,000000,002765,160400	;          100.000000
	.WORD	000000,000000,000230,113200	;           10.000000
	.WORD	000000,000000,000017,041100	;            1.000000
	.WORD	000000,000000,000001,103240	;             .100000
	.WORD	000000,000000,000000,023420	;             .010000
	.WORD	000000,000000,000000,001750	;             .001000
	.WORD	000000,000000,000000,000144	;             .000100
	.WORD	000000,000000,000000,000012	;             .000010
;	.WORD	000000,000000,000000,000001	;             .000001

FTOA:	JSR	PC,ABSFSV	;TAKE ABS AND SAVE SIGN
	MOV	R1,R3		;COPY STACK POINTER
	SUB	#7*2,R1		;MAKE ROOM FOR DIGITS
	MOV	R1,R2		;SAVE DIGIT START POINT
	ADD	#FLTLE2,R3	;GO TO END+2 OF FLOATER
	MOV	R3,-(SP)	;SAVE THAT PLACE
	MOVFLT	-(R3),-(R1)	;MOVE FLOATER UP TOP
	MOV	#MAXSIG-1,-(SP)	;COUNTER FOR TABLE
	MOV	#FTOATB-FLTLE2,R0;POINTER INTO TABLE
3$:	MOV	#'0,-(SP)	;SET BASE FOR A DIGIT
	FLTPP	(R0)+		;NEXT TABLE ITEM PLEASE
5$:	JSR	PC,PUSHF2	;PUSH IT
	JSR	PC,NEGF		;NEGATE IT
	JSR	PC,ADDFS	;THEN ADD
	TST	(R1)		;CHECK SIGN
	BMI	4$		;OVERFLOW
	INC	(SP)		;ELSE BUMP DIGIT
	BR	5$		;AND CONTINUE

4$:	JSR	PC,PUSHF2	;PUSH IT AGAIN
	JSR	PC,ADDFS	;THIS TIME ADD IT BACK IT
	MOVB	(SP)+,(R2)+	;AND SET THE DIGIT
	DEC	(SP)		;AGAIN?
	BNE	3$		;YES
	ADD	#FLTLE2-2,R1	;DUMP MOST OF FLOATER
	MOV	(R1)+,(SP)	;GET LAST DIGIT
	ADD	#'0,(SP)	;MAKE IT ASCII
	MOVB	(SP)+,(R2)+	;AND THEN SET LAST DIGIT
	MOV	(SP)+,R3	;RESTORE FINAL POINTER
	MOV	#MAXSIG-6.,-(R3);SET SCALE FACTOR
	CLRB	-(R3)		;SET + INITIALLY
	TST	(SP)+		;FINAL SIGN CHECK
	BPL	1$		;+
	MOVB	#'-,(R3)	;SET - SIGN
1$:	RTS	PC		;EXIT

; CORRECT BY DIVIDING BY 1.000000

; THIS USES THE FACT THAT 1,000,000. = 500,000. * 2.
; AND THAT 500,000. = 524288. - 24288. = 2.^19. - 24288.

; ASSUMING Y IS THE ANSWER AND X IS THE DIVIDEND THEN---
;	Y <- 0.
;  LP:	T <- X&(2.^19.-1.)
;	X <- X/(2.^19.)
;	Y <- Y + X
;	X <- X * 24288.
;	X <- X + T
;	IF X>= 2.^19. THEN GOTO LP
;	IF X>=500,000. THEN Y <- Y + 1.
;	Y <- Y/2.

DIVCOR:	MOV	R0,-(SP)	;SAVE R0 AND
	MOV	R5,-(SP)	; POSSIBLE IPC
	MOV	R1,R0		;POINT TO (TO BE) BOTTOM+4 OF DIVIDEND (X)
	ADD	#FLTLE4,R1	;POINT TO BOTTOM+2 OF (CURRENTLY) DIVIDEND
	CLR	-(R0)		;CLEAR THE GUARD WORD (DIVIDEND BOTTOM+2)
.NLIST
.REPT	FLTLE2
.LIST
	MOV	-(R1),-(R0)	;MOVE A DIVIDEND WORD UP ON STACK
	CLR	(R1)		; CLEARING THE ANSWER AS WE GO
.NLIST
.ENDR
.LIST
5$:	MOV	R0,R4		;RESET R4 TO POINT TO TOP OF X (DIVIDEND)

; SAVE X&(2.^19.-1.)

	ADD	#FLTLE4-4,R4	;POINT TO X BOTTOM -2
	MOV	(R4)+,-(SP)	;SAVE TOP 3 BITS OF X&(2.^19.-1.)
	BIC	#-7-1,(SP)	; *BUT ONLY TOP 3 BITS*
	MOV	(R4),-(SP)	;SAVE BOTTOM 16. BITS OF X&(2.^19.-1.)

; X <- X/(2.^19.)

	MOV	#FLTLE2-1,R5	;DO ALL WORDS LESS LAST WORD
10$:	CLR	R3		;CLEAR LSB OF DOUBLE WORD TO SHIFT
	MOV	-(R4),R2	;GET MSB OF DOUBLE WORD TO SHIFT
	ASHC	#-19.+16.,R2	;NOW DO THE SHIFT
	BIC	#160000,R2	;'ASHC' EXTENDS SIGN SO CLEAR ANY EXTENDED BITS
	BIS	R3,4(R4)	;OR IN TOP 3 BITS OF LAST WORD SET
	MOV	R2,2(R4)	;THEN SET NEW WORD
	SOB	R5,10$		;LOOP...
	CLR	(R4)		;TOP WORD GETS ALL ZERO

; Y <- Y + X

	ADD	#FLTLE4,R1	;GO TO BOTTOM+2 OF Y
	ADD	#FLTLE4,R4	;GO TO BOTTOM+2 OF X
	MOV	#FLTLE2,R3	;DO ADDITION ON DOUBLE PERCISION
	JSR	PC,ADDFD	;DO THE ADDITION VIA SUBROUTINE

; X <- X * 24,288.

	MOV	#FLTLE2,R5	;# WORDS TO MULTIPLY
	ADD	#FLTLE4,R4	;GO TO BOTTOM+2 OF X
	CLR	R2		;CLEAR CURRENT CARRY INITIALLY
20$:	MOV	R2,-(SP)	;SAVE CURRENT CARRY
	MOV	-(R4),R2	;GET NEXT TO MULTIPLY
	BEQ	22$		;HANDLE ZERO QUICKLY
	BMI	23$		;SPECIAL CASE ONES >=32768.
	MUL	#24288.,R2	;R2,R3 GETS X*24288.
21$:	ADD	R3,(SP)		;ADD LOW ORDER TO CURRENT CARRY
	ADC	R2		;IF CARRY CARRIES THEN CARRY
22$:	MOV	(SP)+,(R4)	;SET THE RESULTANT WORD
	SOB	R5,20$		;LOOP...
	BR	30$		;SKIP SPECIAL CODE

23$:	BIC	#100000,R2	;GET X-32768.
	MUL	#24288.,R2	;R2,R3 GETS (X-32768.)*24288.
	ADD	#24288./2.,R2	;NOW ADD IN 32768.*24288.
	BR	21$		;AND CONTINUE

; X <- X + SAVED X&(2.^19.-1.)

30$:	ADD	#FLTLE4,R4	;GO TO BOTTOM+2 OF X
	ADD	(SP)+,-(R4)	;ADD LOW 16. BITS TO X
	ADC	(SP)		;CATCH ANY CARRY
	ADD	(SP)+,-(R4)	;ADD HIGH 3 BITS TO X
31$:	ADC	-(R4)		;WATCH THAT CARRY
	BCS	31$		;KEEP CARRYING...
	MOV	R0,R4		;RESET TO TOP OF X

; CHECK FOR X BEING >=2.^19.

	MOV	#FLTLE2-2,R5	;THIS MANY MUST BE ZERO FOR <2.^19.
40$:	TST	(R4)+		;ZERO?
	BNE	5$		;NOPE, AROUND AGAIN
	SOB	R5,40$		;LOOP...
	CMP	(R4)+,#7	;CHECK SOME MORE
	BHI	5$		;AROUND AGAIN...

; CHECK FOR X BEING >=500,000.

	BLO	50$		;X IS < 500,000.
	CMP	(R4),#120440	;CHECK LOW ORDER (SINCE HIGH ORDER IS =)
	BLO	50$		;X IS < 500,000.
	MOV	R1,R4		;POINT TO ANSWER TOP
	ADD	#FLTLE4,R4	;NOW TO BOTTOM+2
	SEC			;SET TO INCREMENT ANSWER
46$:	ADC	-(R4)		;WATCH THE CARRY
	BCS	46$		;KEEP GOING...

; Y <- Y/2.

50$:	MOV	R1,R4		;POINT TO ANSWER TOP
	MOV	#FLTLE2,R5	;AND GET A COUNTER
	CLC			;CLEAR INITIAL CARRY
51$:	ROR	(R4)+		;NOW DIVIDE BY 2
	SOB	R5,51$		;QUICKLY...

; ALL DONE

	MOV	(SP)+,R5	;RESTORE POSSIBLE IPC AND
	MOV	(SP)+,R0	; R0...
	RTS	PC		;DONE

	.END

