TITLE	SU,<SETUP USER CORE>,08,13-MAY-86,TGE/TPH/MHB/TVG

;                   Copyright 1974,1990 by Digital Equipment Corporation
;                                  All rights reserved.
;
;          This software is furnished under a license and may be used and copied
;          only  in  accordance  with  the  terms  of  such license and with the
;          inclusion of the above copyright notice.  This software or any copies
;          shall not be provided to any other person.   No title to or ownership
;          of the software is hereby transferred.
;
;          The information in this software is subject to change without notice.
;
;          DIGITAL  assumes  no  responsibility  for the  use, functionality, or
;          reliability of its  software  on equipment  which  is not supplied by
;          DIGITAL.

	DEFORG	SU
	ORG	SU

;	INTERNAL
	.GLOBL	CATSUP,CATSUR,CATSUC,TLPTIN

;	EXTERNAL
	.GLOBL	EDKEEP,SCAINI,SCATAB,SCAMAX
;INITIAL USER AREA SETUP PARAMETERS

CAILEN	=10000		;INITIAL USER AREA LENGTH IN BYTES
R1SORG	=1400		;RELATIVE BEGINNING OF THE USER R1 STACK
PDAORG	=2000		;PROGRAM DATA RELATIVE BEGINNING
PTAORG	=7400		;PROGRAM TEXT RELATIVE BEGINNING
PTAGSIZ	=400		;LENGTH OF INITIAL TAG (STATEMENT HEADER) AREA



; Macro for calling data-preloading subroutine (in various flavors)

.macro	LOAD	cnt,src,dest
.if nb <dest>
 .iif b <src>,	.error "Source required"
 .iif b <cnt>,	.error "Count required"
	 JSR	 R5,LOAD1	  ;Invoke load service
.iff ;nb <dest>
 .if nb <src>
 .iif b <cnt>,	.error "Count required"
	 JSR	 R5,LOAD2	  ;Invoke load service
 .iff ;nb <src>
  .iif b <cnt>,	.error "No arguments?"
	 JSR	 R5,LOAD3	  ;Invoke load service
 .endc ;b <src>
.endc ;b <dest>
.if nb <dest>
	  .WORD	  dest		  ;  destination
.endc ;nb <dest>
.if nb <src>
	  .WORD	  src		  ;  source
.endc ;nb <src>
	  .WORD	  cnt		  ;  word count
.endm	LOAD

CATSUC:	CLR	FIRQB+FQFIL	;INDICATE ALL CHANNELS
	MOVB	#RSTFQ,FIRQB+FQFUN ;TO BE CLOSED
	CALFIP			;THEN DO IT
	CLR	JOBF		;CLEAR ALL JOB FLAGS
CATSUR:	BMI	CATTRY		;SKIP INITIALIZE IF .RUN TO SELF (-1 @ XRB+6)

; The following line would cause default to NOEXTEND mode once again.
;	MOV	#0,EDFLAG	;CLEAR ALL EDITOR FLAGS, DEFAULT TO NOEXTEND

	MOV	#EDDXTN,EDFLAG	; CLEAR ALL EDITOR FLAGS & DEFAULT EXTEND MODE
..XTN.	==	.-4	;**PATCH** MAKE 20000 FOR DEFAULT EXTEND MODE, 0-NOEXT
CATS1:	MOVB	#0,SCAVAL	;INITIALIZE TO DEFAULT SCALE FACTOR
..SCA.	==	.-4	;**PATCH** DEFAULT SCALE FACTOR (0-6)
CATTRY:	CMPB	SCAVAL,#SCAMAX	;IS SCALE VALUE REASONABLE?
	BHI	CATS1		;NO, SO SET A REASONABLE VALUE
	MOV	#1,RUNLVL	;RUN AT THE EDITOR LEVEL
	BIC	#-1-EDDXTN,EDFLAG ;SAVE DEFAULT EXTEND MODE ONLY
CATSUP:	MOV	#EDFLAG,R2	;POINT AT EDITOR FLAGS
	BIC	#EDXTND,(R2)	;NO EXTENDED-LENGTH VARIABLES
	BIT	(R2),#EDDXTN	;Is the default EXTEND mode?
	BEQ	2003$		;No => continue with EDXTND cleared
	BIS	#EDXTND,(R2)	;ALLOWED BECAUSE THAT WAS THE DEFAULT
2003$:	BIC	#-JFCC-1,JOBF	;CLEAR MOST JOB FLAGS
	MOV	#XRB,R2		;GET AN XRB POINTER
	MOV	#-<JFBIG!JFPRIV!JFSYS>-1,(R2) ;SET FOR NOT CLEARING THESE
	CMP	(SP),#EDKEEP	;IS THIS THE "RUN" ENTRY?
	BEQ	20$		;YES, CLEAR NOTHING
	MOV	#CAILEN/4000,(R2) ;NO, RESET FOR THIS MUCH MEMORY
	.CORE			;AND ASK FOR IT
	MOV	#-1,(R2)	;NOW SET FOR DROPPING EVERYTHING
20$:	.CLEAR			;CLEAR BITS AND REFRESH PERM BITS
	CALLX	MI		;NOW INIT THE MATH PACKAGE
	MOV	#NSTORG,R2	;BEGINNING OF KILLABLE USER AREA
	MOV	#<CAILEN-NSTORG>/2,R3  ;R3 <- length of killable area in words
4$:	CLR	(R2)+		;CLEAR ONE WORD
	SOB	R3,4$		;Loop for the count
	MOV	#6*400+6,$.PLCS	;SET UP FOR 6 DIGITS OF SIG & CONVERSION
..SIG.	==	.-4	;**PATCH** # OF SIG DIGITS AND DIGITS FOR CONVERSION
	CLRB	XCDCHN		;Insure ECONOM communication cell is clear
	LOAD	<<ENDROT-BEGROT>/2>,BEGROT,SCTH	    ;Load "root" cells
	MOVB	SCAVAL,R2	;FETCH THE SCALING VALUE
	JSR	R5,SCAINI	;NOW INIT SCALING ITEMS
	ADD	#SCATAB,R2	;MAKE POINTER TO PI & ONE ABSOLUTE
	MOV	#PDAORG+PICON,R1;GET ORIGIN TO PDA DATA TO SET UP
	LOAD	8.				    ;Load cells just below PDA
	LOAD	<<ENDNZD-BEGPDA>/2>,BEGPDA	    ;Load PDA cells themselves
	LOAD	<<ENDPTA-BEGPTA>/2>,BEGPTA,PTAORG   ;Load PTA cells
	MOV	SPDA,R0		;GET US A BASE IN R0
	MOV	R0,R3		;COPY
	ADD	#IOLEN+BASE,R3	;TO GET TO SLOT0
	MOV	#ARYIOB*400,R2	;FLAGS!CHANNEL INDEX
9$:	ADD	(R3),R3		;NEXT IOB (SLOT1 TO START)
	ADD	#2,R2		;TO NEXT ONE
	MOV	#IOLEN,(R3)	;SET LINK
	MOV	R2,SLOT(R3)	;SET SLOT AND FLAGS
	CMPB	#15.*2,R2	;DONE
	BNE	9$		;NO
	MOV	#RANDYH,CURLOC(R3);SET UP RANDOM STORAGE (MSB)
	CLR	(R3)+		;LAST LINK IS NIL
	MOV	#-IOLEN*16.-BASE+DISPOS,(R3)+	;(DISPOS-SLOT15) DISPOSABLE AREA PTR
	MOV	#PDAEND-DISPOS,(R3)+	;LENGTH - KILLED BY RO
	MOV	#TMPCH+1*IOLEN+BASE+PDAORG+2,R3	;IOB FOR BAS CHANNEL
	MOV	#-TMPCH-1*IOLEN-BASE+BASBUF,(R3)+	;PNTR
	MOV	#1000,(R3)	;LENGTH
	MOV	R1CORG,R1	;RESET R1 STACK
				;SET TL STACK POINTERS WHICH LIVE IN CSR AREA

TLPTIN:	MOV	#TLINSP,R2	;PARAMETER TABLE POINTER
	MOV	(R2)+,R5	;NUMBER OF TABLE PAIRS
	MOV	(R2)+,R4	;INITIAL STACK POINTER POINTER
10$:	MOV	(R2)+,R3	;RELATIVE POINTER
	ADD	R0,R3		;MAKE IT ABSOLUTE
	MOV	R3,(R4)+	;SET XXSI
	MOV	R3,(R4)+	;SET XXSP
	SUB	(R2)+,R3	;LESS LENGTH OF STACK
	MOV	R3,(R4)+	;SET XXSL
	SOB	R5,10$
	RTS	PC

; $#$ Two words bummable:
;
;TLPTIN:MOV	#table@COSI,R2	;pair count not needed
;	MOV	(R2)+,R4)	;Initial stack pointer pointer
;	JSR	PC,10$		;Do first stack (COS)
;	JSR	PC,(PC)		;Do second stack (OPS)
;10$:				;Do third stack (OAS)
;	MOV	(R2)+,R3)	;Relative pointer
;	 .			;  <no change>
;	MOV	R3,(R4)+	;Set xxSL
;	RTS	PC		;sob not needed


; Data preload routines  (services for LOAD macro)

LOAD1:	MOV	(R5)+,R1	;R1 -> destination
LOAD2:	MOV	(R5)+,R2	;R2 -> source
LOAD3:	MOV	(R5)+,R3	;R3 <- word count
10$:	MOV	(R2)+,(R1)+	;Move a word
	SOB	R3,10$		;Loop for the count
	RTS	R5		;Return

; Data Tables for Setup Values


;  "Root" values, for SCTH and cells immediately following

BEGROT:
	.WORD	PTAORG-TAGLEN	;SCTH <- Statement 0
	.WORD	PTAORG		;SPTA  - Base of statement area (PTA)
	.WORD	PDAORG		;SPDA  - Base of data area (PDA)
	.WORD	R1SORG		;R1CORG  - R1 stack
ENDROT:


;INITIAL VALUES FOR TL'S STACK VARIABLES

TLINSP:	+3
	COSI
	COSB+1			;COSP
	LCOS
	OPSB+1			;OPSP
	LOPS
	OASB+2			;OASP
	LOAS

;-------------------------------------------------------------------
;MACRO FOR BUILDING A TABLE OF VALUES TO INSERT INTO USER
;AREA WHEN IT IS SET UP.
;SYMBOLS WHICH BEGIN WITH $ ARE RELATIVE TO THE BEGINNING OF THEIR AREA
;I.E. PTA OR PDA.

;PROGRAM TEXT AREA -- REFERRED TO RELATIVE TO SPTA 
	.MACRO	$	Q14159,R27182
		.NLIST
		.IF	NE	Q14159+BEGPTA-.
		.ERROR	;DEFINITIONS DO NOT MATCH
		.ENDC
		.LIST
		R27182
	.ENDM
BEGPTA:
		-TAGLEN			;LOCATION OF FIRST STATEMENT HEADER
		ENDPTA-BEGPTA		;POSITIVE LIMIT ASSEMBLED STUFF
$ BADBYT,	PPBADC*400!PPBADC	;(MINSTA) POP FOR ERROR LINE
$ PROPTR,	ENDPTA-BEGPTA		;PLUDYN
$ TAGPTR,	-TAGLEN			;LAST USED WORD IN STATEMENT HEADER AREA
$ PROLIM,	CAILEN-PTAORG		;PLULIM
$ TAGLIM,	-PTAGSIZ			;LIMIT OF STATEMENT HEADER AREA
ENDPTA:

	.MACRO	$	Q14159,R27182
			.NLIST
			.IF	NE	Q14159+BEGPDA-.
			.ERROR	;DEFINITIONS DO NOT MATCH
			.ENDC
			.LIST
			R27182
	.ENDM

	.MACRO	$B	X,Y
			.NLIST
			.IF	NE	X+BEGPDA-.
			.ERROR	;DEFINITIONS DO NOT MATCH
			.ENDC
			.LIST
			.BYTE	Y
	.ENDM

;PROGRAM DATA AREA -- REFERRED TO RELATIVE TO SPDA
;PLEASE SEE DEFINES AREA IN LA WHERE SPACE IS ALLOCATED
;FOR R1EXT, MATRIC, RECOUN, MATRIA, MATRIB, ETC.

BEGPDA:					;DEFINES THE BEGINNING OF THE PDA
BEGHDR	=	BEGPDA+LSTPDA	;*** !!DEFINES CURRENT HEADER AREA POINTER
$ PDA,		DUMSTR			;POINTER TO LAST AND DUMMY STRING
;CORE ALLOCATION PARAMETERS
$ PSD,		PDAEND-PDA		;CURRENT END OF STRING AREA
$ STAT,		+BLINEF			;LEX ANALYZER STATUS FLAGS
$ NEXSTR,	PDAEND-PDA		;NEXT AVAILABLE WORD IN THE STRING AREA
$ NEXFRE,	BEGHDR-BEGPDA		;POINTS TO LAST CELL USED IN STRING HEADER AREA
$ STRLIM,	PTAORG-PTAGSIZ-PDAORG	;STRING LIMIT -- LEAVE ROOM FOR A FEW TAGS
$ SPCLIM,	R1SORG-PDAORG		;STRING HEADER LIMIT WITH 24 WORDS SLOP
$ ARYPTR,	BASE			;FIRST I/O ARRAY HEADER ITEM
;DO NOT DISTURB CELL ORDER BACK TO BEGPDA

$ EDDUMM,	0			;STRING FOR NANAME.BAS
	+	6			;POINTER RELATIVE TO START
	+	6			;LENGTH
		.ASCII	/NONAME/

;PERMANENT VARIABLE AREA--------------------------------------------
;CORE ALLOCATOR VARIABLES-GO IN PDA
;"NOMINALS" ARE FREE SPACE AMOUNTS GUARANTEED BY CA

$ R1SNOM,	+200			;NOMINAL FOR R1 STACK
$ TAGNOM,	+626.			;NOMINAL FOR STATEMENT HEADERS
$ PRONOM,	+564.			;NOMINAL FOR STATEMENT-PUSH POP
$ HDRNOM,	+342.			;NOMINAL FOR STRING HEADERS
$ STRNOW,	+0			;MODIFIED BY CA
$ STRNOM,	+1000			;NOMINAL FOR STRINGS
;DO NOT DISTURB CELL ORDER BACK TO R1SNOM


$ SUMNOM,	+0			;SUM OF ALL NOMINALS
$ NSTRNM,	+0			;SUM OF ALL BUT STRING


	$ BASE,		.=.	;LENGTH OF BASE AREA
SLOTM1:	.WORD	IOLEN		;LINK TO THE NEXT
	.WORD	LINBUF-BASE	;POINTER TO THE BUFFER
	.WORD	LINLEN		;LENGTH OF THE BUFFER
	.WORD	0		;BYTE COUNT
	.WORD	LINBUF-BASE	;CURRENT LOCATION
	.BYTE	-2		;SLOT NUMBER
	.BYTE	0		;FLAG BYTE
$ TLMIND,	BEGHDR-BEGPDA	;(IN IOB) OLD VALUE OF STR HDR PTR
$ RNDML,	RANDYL		;(IN IOB) RANDOM NUMBER STORAGE BIN (LSB)

SLOT0:	.WORD	IOLEN		;LINK TO THE NEXT
	.WORD	TTYBUF-BASE-IOLEN	;(TTYBUF-SLOT0)POINTER TO THE BUFFER
	.WORD	TTYLEN		;LENGTH OF THE BUFFER
	.WORD	0		;BYTE COUNT
	.WORD	TTYBUF-BASE-IOLEN	;(TTYBUF-SLOT0)CURRENT LOCATION
	.BYTE	0		;SLOT NUMBER
	.BYTE	FLGRND!FLGPOS/400!ARYIOB!FORCE ;FLAG BYTE
	.WORD	0		;CURRENT POSITION
ENDNZD:			;END NON ZERO PDA

	.END

