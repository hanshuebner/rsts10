1	!		
	!	PROGRAM		: ERRBLD.B2S
	!	VERSION		: V10.1
	!	EDIT		: K
	!	EDIT DATE	: 04-JUN-92
	! 
	!
	!
	!		C O P Y R I G H T 
	!
	!
	!		      Copyright (C) 1974, 1992 by
	!	Digital Equipment Corporation, Maynard, Mass. 
	!	
	!	
	!	This software is furnished under a license and may be used and 
	!	copied  only  in accordance with the terms of such license and 
	!	with the  inclusion  of  the  above  copyright  notice.   This 
	!	software  or  any  other copies thereof may not be provided or 
	!	otherwise made available to any other person.  No title to and 
	!	ownership of the software is hereby transferred. 
	!	
	!	The information in this software is subject to change  without 
	!	notice  and should not be construed as a commitment by Digital 
	!	Equipment Corporation. 
	!	
	!	DIGITAL assumes no responsibility for the use  or  reliability 
	!	of its software on equipment that is not supplied by DIGITAL. 
	!	
	!********************************************************************* 
	
	!
	!
	!	M O D I F I C A T I O N    H I S T O R Y 
	!
	!

	! VER/ED	EDIT DATE	REASON
	! 9.0-10 VAM	5-Dec-84	Rewrite the MSCP error annotation
	!				section.
	! 9.1-04 VAM	20-Aug-85	Add new controller ID for RQDX3
	! 9.2-05 VAM	18-Jan-86	Add new codes in MSCPDF for expanded
	!				BBR annotation.
	! 9.2-08 VAM	19-Mar-86	More expanded BBR annotation codes.
	! 9.3-08 DBM	13-May-86	Ethernet support
	! 9.5-05 VAM	01-Sep-87	Better MSCP drive number annotation.
	!				Remove RP05, RP06 drive type text.
	! 9.5-08 VAM	13-Oct-87	Add BBR Replacement Attempt and
	!				Media Loader error packets.
	! 9.6-07 VAM	25-Feb-88	Add BS.NMP bit.
	!				Change "LBN data lost" to a flag.
	! 9.6-09 VAM	04-Apr-88	Change "NW" error (an unused one) to
	!				"SW" error (SW Detected Err).
	! 9.6-11 VAM	01-Jun-88	Remove duplicate printing of "Drive
	!				Software Version" field in TMSCP Tape
	!				Transfer Error packets.
	! 9.7-01 VAM	04-Nov-88	Added more T/MSCP devices.
	!				Conversion to BP2.
	!10.0-01 FEK	13-Jul-89	Add KFQSA devices.
	!10.0-02 FEK	18-Aug-89	Add some other new devices.
	!10.0-03 VAM	27-Aug-90	Change "SW" error code from 37 to 9
	!				(to agree with what monitor actually
	!				 returns).
	!10.1-01 FEK	17-Apr-91	Add Super and Data to MMU errors
	!10.1-02 VAM	28-Jan-92	Display disk unit size in decimal
	!10.1-03 FEK	30-Jan-92	Add more MSCP disks to the list
	!10.1-04 VAM	04-Jun-92	Change TZ50 to TK50Z

	!
	!
	!	G E N E R A L    D E S C R I P T I O N 
	!
	!

	!	ERRBLD creates and initializes  the  error  description  file
	!	(ERRDAT.FIL) and the MSCP description file (MSCPER.DAT) which
	!	is  used  by  ERRDIS  and  ERRDET  when  producing  error log
	!	reports.
	!
	!	Note that ERRDAT.FIL and MSCPER.DAT are created in the account
	!	under  which ERRBLD  is  run - it  must be the same as that in
	!	which the other error programs are stored.

	!
	!
	!	I / O    C H A N N E L S 
	!
	!

	!	CHANNEL #		USED FOR 
	!	
	!	   2		   ERRDAT.FIL in the Error Package account
	!	   3		   MSCPER.DAT in the Error Package account.

	!
	!
	!	V A R I A B L E    D E F I N I T I O N S 
	!
	!

	!	VARIABLE NAME		USED FOR 
	!	
	!	ERR.NAM$	HOLDS UDA ERROR MESSAGE
	!	MAX.ERR%	TOTAL NUMBER OF UDA ERROR MESSAGES

	!
	!
	!	F U N C T I O N / S U B R O U T I N E    D E S C . 
	!
	!

	!	FUNCTION/SUBROUTINE		USE 
	!	

	!
	!
	! 	D E C L A R A T I O N      S T A T E M E N T S
	!
	! 

	!
	!
	!	D I M E N S I O N    S T A T E M E N T S 
	!
	! 

	DIM L%(10%),Q%(30%)
		! L%()	UTILITY ARRAY.
		! Q%()	USED TO FIND OUT WHERE THE PROGRAM CAME FROM.
	DIM #3%, &
		ITEM.DESC$(31%)=32%,		! 2 blocks &
		SA.ERROR.CODE$(31%)=32%,	! 2 blocks &
		MESSAGE.FLAG$(7%)=32%,		! 1 block &
		END.FLAG$(7%)=32%,		! &
		END.CODE$(255%)=32%,		! 16 blocks &
		STATUS.CODE$(255%)=64%,		! 32 blocks &
		UNIT.CLASS$(255%)=16%,		! 8 blocks &
		CONTROLLER.MODEL$(255%)=8%,	! 4 blocks &
		UDA.ERROR.CODE$(63%)=64%,	! 8 blocks &
		DRIVE.MODEL$(4%,255%)=8%,	! 20 blocks &
		DRIVER.ERROR.CODE$(31%)=32%,	! 2 blocks &
		BBR.FAIL.CODE$(31%)=32%,	! 2 blocks &
		STATUS.CODE.IDX%(255%),		! 1 block &
		PKT.ITEM%(15%,31%),		! 2 blocks &
		BBR.FLAG.CODE$(7%)=16%,		! 160 words &
		UDA.ERROR.CODE.IDX%(63%),	! &
		SDI.STATUS.1%(15%),		! &
		SDI.STATUS.2%(15%)		!
	! The MSCP data output file.


	!
	!	
	!	M A I N    C O D I N G    A R E A 
	!
	!
 
1000	ON ERROR GOTO ERROR_TRAP
	Z$=SYS(CHR$(6%)+CHR$(-21%))
	PRINT IF CCPOS(0%)<>0%
		! SET UP STANDARD ERROR TRAP
		! PERMANENTLY DROP TEMPORARY PRIVILEGES
		! RETURN KB TO LEFT MARGIN

	I$="V10.1-K"
		! SET UP VERSION/EDIT NUMBER

	PRINT "ERRBLD";CHR$(9%);I$;CHR$(9%); &
		CVT$$(RIGHT(SYS(CHR$(6%)+CHR$(9%)+CHR$(0%)),3%),4%)
		! PRINT THE SYSTEM HEADER FOR A RUN ENTRY

	CHANGE SYS(CHR$(12%)) TO Q%
	PKG.LOC$="["+NUM1$(Q%(6%))+","+NUM1$(Q%(5%))+"]"
	PKG.LOC$="_"+CHR$(Q%(23%))+CHR$(Q%(24%))+NUM1$(Q%(25%))+":"+PKG.LOC$ &
		IF Q%(26%) AND 1%

	IF Q%(3%)+SWAP%(Q%(4%))<>15%*2% THEN
		PRINT "?Please 'RUN ERRBLD'"
		GOTO ALL_DONE
	END IF
		! Build name of device and account of last opened file.
		! We must have come from a compiled file so we can be
		!  sure that this name is really our package location.

	OPEN PKG.LOC$+"ERRDAT.FIL" FOR OUTPUT AS FILE 2%, &
		FILESIZE 67%, &
		MODE 64%
		! Open a new file for output.

	F.SIZE%=67%
	F.CHAN%=2%
	GOSUB CLEAN_FILE
		! Clean out the file before we start.

	FOR ER.COD%=0% TO 61%
		FIELD #2%, 16% AS Z$, 192% AS REG.DSC$, 304% AS D$
		LSET Z$=SPACE$(16%)
		LSET D$=SPACE$(304%)
		LSET REG.DSC$=STRING$(192%,57%)
		FOR POINT%=0% TO 20%
			FIELD #2%, (14%*POINT%)+208% AS Z$, &
				2% AS ADDR$, 12% AS D$
			LSET ADDR$=CVT%$(32767%)
		NEXT POINT%
		PUT #2%, RECORD ER.COD%+1%
	NEXT ER.COD%
		!
		!
		!	I N I T    E R R D A T . F I L
		!
		! OPEN THE FILE.
		! FIRST, INITIALIZE ALL FIELDS - EACH ERROR TYPE (0-61)
		! HAS A SEPARATE BLOCK,. FIELDS ARE FILLED WITH SPACES
		! EXCEPT WHERE NOTED.
		! EACH RECORD IS SET UP AS FOLLOWS:
		! FIELD LENGTH		DESCRIPTION
		!	 16	ERROR CODE DESCRIPTION
		! 	192	24 (NUMBERED 0-23) POSSIBLE 8-CHAR REGISTER
		!		DESCRIPTIONS - FILLED WITH 9'S
		!	294	21 (NUMBERED 0-20) POSSIBLE ERROR BIT
		!		DESCRIPTORS - EACH 14 BYTE FIELD IS
		!		MADE UP OF:
		!		2 BYTES OF ADDRESS - AN INTEGER WITH
		!		  THE REGISTER NUMBER IN THE HIGH BYTE
		!		  AND THE BIT NUMBER (WITH 128 BIT SET IF
		!		  DESCRIPTOR SHOULD BE PRINTED ONLY IF
		!		  BIT IS CLEAR) IN THE LOW BYTE -
		!		  INITIALLY SET TO 32767.
		!		12 BYTES OF 'DESCRIPTOR'.
		!	  8	UNUSED
		!	  2	ERROR CODE MNEMONIC
		!	---
		!	512

	RESTORE
	WHILE -1%
		READ ER.COD%, NEW.MNE$, NEW.DSC$
		GOTO ERRDIS_DO_OUT_LABELS IF ER.COD%=62%
		GET #2%, RECORD ER.COD%+1%
		FIELD #2%, 16% AS ER.DSC$, 192% AS REG.DSC$, &
			302% AS D$, 2% AS MNE$
		LSET ER.DSC$=NEW.DSC$
		LSET MNE$=NEW.MNE$
		PNT%=0%

 ERRDIS_NEXT_REGISTER:
		READ REG%, NEW.DSC$
		GOTO ERRDIS_WRITE_RECORD IF REG%<0%
		GOTO ERRDIS_DO_BITS IF REG%=24%
		FIELD #2%, (8%*REG%)+16% AS D$, 8% AS REG.DSC$
		LSET REG.DSC$=NEW.DSC$
		GOTO ERRDIS_NEXT_REGISTER

 ERRDIS_DO_BITS:
		READ REG%, NEW.DSC$, BIT%
		GOTO ERRDIS_WRITE_RECORD IF REG%=21%
		FIELD #2%, (14%*PNT%)+208% AS D$, &
			2% AS ADDR$, 12% AS ER.BIT.DSC$
		LSET ADDR$=CVT%$(SWAP%(REG%)+BIT%)
		LSET ER.BIT.DSC$=NEW.DSC$
		PNT%=PNT%+1%
		GOTO ERRDIS_DO_BITS

 ERRDIS_WRITE_RECORD:
		PUT #2%, RECORD ER.COD%+1%
	NEXT
		!
		!	F I L L    I N    R E A L    D A T A
		!
		! SET UP TO STARTED FILLING IN REAL DATA.
		! WILL PROCESS ERROR CODES ONE AT A TIME, FILLING IN ALL
		! REGISTERS, BIT DESCRIPTORS, ETC.
		! VALID CODES RANGE FROM 0-61 - A CODE OF 62 SIGNALS
		! THE END.
		! FOR THIS ERROR CODE:
		!	FILL IN THE ERROR DESCRIPTOR AND MNEMONIC.
		!	FILL IN ALL REGISTER DESCRIPTORS; -1 SIGNALS
		!	THAT THERE ARE NONE, 24 SIGNALS WE'VE FILLED
		!	THEM ALL IN AND SHOULD PROCEED TO THE BIT
		!	DESCRIPTORS.
		!	FILL IN ALL BIT DESCRIPTOR INFO.
		!	SAVE THIS RECORD.
		!	GET THE NEXT ERROR CODE ENTRY - 62 MEANS WE
		!	WILL EXIT THIS LOOP AND GO ON TO THE ERRDIS
		!	OUTPUT DESCRIPTOR PART.

	!
	!	E R R D I S    O U T P U T    L A B E L S
	!

 ERRDIS_DO_OUT_LABELS:
	READ NAM$,RC%,LAST%
	WHILE NAM$<>"*DONE"
		GET #2%, RECORD RC%
		IF NAM$="*BAD" THEN
			GOSUB ERRDIS_BAD_BLOCK_DATA
		ELSE
			REC.OFF% = 0%
			FOR K%=0% TO LAST%
				READ NAM$,OF%,CNT%,COD%,SKP%
				FIELD #2%, 32%*(K%-REC.OFF%) AS Z$, &
					24% AS NAM1$, &
					2% AS OF$, 2% AS CNT$, &
					2% AS COD$, 2% AS SKP$
				LSET NAM1$=NAM$
				LSET OF$=CVT%$(OF%)
				LSET CNT$=CVT%$(CNT%)
				LSET COD$=CVT%$(COD%)
				LSET SKP$=CVT%$(SKP%)

				IF K%=15% THEN
					PUT #2%, RECORD RC%
					RC% = RC% + 1%
					GET #2%, RECORD RC%
					REC.OFF% = 16%
				END IF

			NEXT K%

			PUT #2%, RECORD RC% IF K% <> 15%
		END IF

	READ NAM$,RC%,LAST%
	NEXT

	CLOSE 2%
	PRINT "[File ";PKG.LOC$;"ERRDAT.FIL has been created]"
	GOTO MSCPER_START
		! PUT ALL THE USER DESCRIPTION DATA, DISK DATA,
		! NON-DISK PERIPHERAL DEVICE DATA, AND NON-DEVICE DATA
		! INTO THE FILE.
		! Then, go off and do the MSCP stuff.

	!
	! 	B A D   B L O C K   D A T A   S U B R O U T I N E
	!

 ERRDIS_BAD_BLOCK_DATA:
	FOR K%=0% TO LAST%
		READ L%(Z%) FOR Z%=0% TO 8%
		D$=""
		D$=D$+CVT%$(L%(Z%)) FOR Z%=0% TO 8%
		FIELD #2%, 32%*K% AS Z$, 18% AS NAM1$
		LSET NAM1$=D$
	NEXT K%
	PUT #2%, RECORD RC%
	RETURN
		! PUT ALL THE BAD BLOCK DATA INTO THE FILE:
		! ITEMS READ ARE THE ERROR CODE, ERROR REGISTER AND MASK,
		! CONTROL/STATUS REGISTER, MASK, FUNCTION CODE.


	!
	!	M S C P   D e s c r i p t o r   F i l e
	!

	DECLARE INTEGER CONSTANT	MSCPER.SIZE = 101%
	! This is the number of blocks in MSCPER.FIL

	DECLARE STRING CONSTANT		UNKNOWN="Unknown"
	! This is a word that we use a lot in the next section...

 MSCPER_START:
	OPEN PKG.LOC$+"MSCPER.FIL" FOR OUTPUT AS FILE 3%, &
		FILESIZE MSCPER.SIZE, &
		MODE 64%
		! Open a new file for output.

	F.SIZE%=MSCPER.SIZE
	F.CHAN%=3%
	GOSUB CLEAN_FILE
		! Clear out the file before starting.

	I%=0%
	READ DESC$,OFF%,BYT%,DISP%,ANNOT%
	WHILE LEN(DESC$)
		I%=I%+1%
		ITEM.DESC$(I%)=CHR$(OFF%)+CHR$(BYT%)+CHR$(DISP%)+ &
			CHR$(ANNOT%)+DESC$
		READ DESC$,OFF%,BYT%,DISP%,ANNOT%
	NEXT
	ITEM.DESC$(0%)=CVT%$(I%)
	!
	! Load the Item Descriptor Array.
	! Step through the data until we get to a null description -
	!  this marks the end.
	! Put the number of items into ITEM.DESC%(0%) - this isn't used by
	!  anything yet, but you never know...
	! See the comments above Item Descriptor data statement for a
	!  description of the meaning of each data item.

	SA.ERROR.CODE$(I%)=UNKNOWN &
		FOR I%=0% TO 31%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		SA.ERROR.CODE$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	! Fill in the SA Error annotations.

	READ MESSAGE.FLAG$(I%) &
		FOR I%=0% TO 7%
	!
	! Load the Message Flag array.
	! There are 8 message flags, each one represented by a bit.

	READ END.FLAG$(I%) &
		FOR I%=0% TO 7%
	!
	! Load the End Flags.
	! There are 8 of these also, each one represented by 1 bit.

	END.CODE$(I%)=UNKNOWN &
		FOR I%=0% TO 255%
	I%=0%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		I%=I%+1%
		END.CODE$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	!
	! Load the End Codes.
	! A null descriptor marks the end of data.

	I%=0%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		I%=I%+1%
		STATUS.CODE$(I%)=DESC$
		STATUS.CODE.IDX%(I%)=BYT%
		READ DESC$,BYT%
	NEXT
	STATUS.CODE.IDX%(0%)=I%
	!
	! Load the Status Codes.
	! These are the most verbose status messages we've got.
	! Once again, a null descriptor marks the end of the data.
	! STATUS.CODE.IDX%() is the index to STATUS.CODE$(), which holds the
	!  descriptive text for each error.
	! Put the number of items into STATUS.CODE.IDX%(0%).

	UNIT.CLASS$(I%)=UNKNOWN &
		FOR I%=0% TO 255%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		UNIT.CLASS$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	!
	! Load the Unit Class array.
	! A null descriptor is EOD.

	CONTROLLER.MODEL$(I%)=UNKNOWN &
		FOR I%=0% TO 255%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		CONTROLLER.MODEL$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	!
	! Load the Controller Model array.
	! A null description is end of data.

	UDA.ERROR.CODE$(I%)="" &
		FOR I%=0% TO 62%
	UDA.ERROR.CODE.IDX%(I%)=0% &
		FOR I%=0% TO 63%
	UDA.ERROR.CODE$(63%)=UNKNOWN
	I%=0%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		I%=I%+1%
		UDA.ERROR.CODE$(I%)=DESC$
		UDA.ERROR.CODE.IDX%(I%)=BYT%
		READ DESC$,BYT%
	NEXT
	UDA.ERROR.CODE.IDX%(0%)=I%
	!
	! Load the UDA Error Code array.

	DRIVE.MODEL$(I%,J%)=UNKNOWN &
		FOR J%=0% TO 255% &
			FOR I%=0% TO 4%
	READ DESC$,TYP%,BYT%
	WHILE LEN(DESC$)
		DRIVE.MODEL$(TYP%,BYT%)=DESC$
		READ DESC$,TYP%,BYT%
	NEXT
	!
	! Load the Drive Model descriptor array.

	DRIVER.ERROR.CODE$(I%)=UNKNOWN &
		FOR I%=0% TO 31%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		DRIVER.ERROR.CODE$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	!
	! Load the Driver Error Code descriptors.
	! A null descriptor is end of data.

	BBR.FAIL.CODE$(I%)=UNKNOWN &
		FOR I%=0% TO 31%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		BBR.FAIL.CODE$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	! Load the BBR Failure Code text.

	BBR.FLAG.CODE$(I%)=UNKNOWN &
		FOR I%=0% TO 7%
	READ DESC$,BYT%
	WHILE LEN(DESC$)
		BBR.FLAG.CODE$(BYT%)=DESC$
		READ DESC$,BYT%
	NEXT
	! Load the BBR Flag Byte bit descriptors.

	FOR I%=1% TO 13%
		READ PKT%,N%
		PKT.ITEM%(PKT%,0%)=N%
		READ PKT.ITEM%(PKT%,J%) &
			FOR J%=1% TO N%
	NEXT I%
	!
	! Load the Packet Item list.
	! Don't forget to change the count in the first line if you
	!  add more packet type data!!

	FOR I%=0% TO 15%
		READ DESC$
		SDI.STATUS.1%(I%)=CVT$%(DESC$)
	NEXT I%
	!
	FOR I%=0% TO 15%
		READ DESC$
		SDI.STATUS.2%(I%)=CVT$%(DESC$)
	NEXT I%
	!
	! Load the SDI Error descriptors.
	! Each descriptor is a two character nmemonic for a bit in a
	!  register - there are two 16-bit registers, hence we need 32
	!  descriptors.

	CLOSE 3%
	PRINT "[File ";PKG.LOC$;"MSCPER.FIL has been created]"
	GOTO ALL_DONE
	! Close up shop.
	! Let 'em know what happened.


	!
	!	E R R O R   D A T A
	!
	!	Monitor error code,	Short name,	Long name,
	!	-1,	"*NR"			(if no registers)
	!	word offset in packet,		"register name",
	!	to the register,		"register name",
	!	24,	"*ER",			(end of register names)
	!	register offset,	"text if",	this bit is set,
	!	register offset,	"text if",	this bit is set,
	!	register offset,	"text if",	128.+this bit is clear,
	!	register offset,	"text if",	128.+this bit is clear,
	!	21,	"*NB",			(end of register bits)

10000	DATA	0,	MS,	"Missed Errors", &
		-1,	"*NR"

	DATA	1,	CK,	"RTS Declared", &
		-1,	"*NR"

	DATA	2,	J0,	"Jump to 0", &
		-1,	"*NR"

	DATA	3,	UI,	"Undefined Inter.", &
		0,	"Vctr Adr", &
		24,	"*ER", &
		21,	"*NB",	0

	DATA	4,	T4,	"Trap to 4", &
		-1,	"*NR"

	DATA	5,	RI,	"Reserved Instr.", &
		-1,	"*NR"

	DATA	6,	PF,	"PowerFail/Strtup", &
		-1,	"*NR"

	DATA	7,	PA,	"Memory System", &
		0,	"CACHECTL", &
		1,	"ADDR LSB", &
		2,	"ADDR MSB", &
		3,	"MEM ERR", &
		4,	"CSR", &
		5,	"(CSR)", &
		6,	"(CSR)", &
		7,	"K Range", &
		8,	"# Fail", &
		9,	"Base Adr", &
		10,	"Fail #1", &
		11,	"Fail #2", &
		12,	"Fail #3", &
		13,	"Fail #4", &
		14,	"Fail #5", &
		24,	"*ER", &
		0,	"Dsbl Group 0",	2, &
		0,	"Dsbl Group 1",	3, &
		3,	"CPU Abort",	15, &
		5,	"Single Error",	4, &
		5,	"Memory Error",	15, &
		21,	"*EB",	0

	DATA	8,	KT,	"Memory Mgmt.", &
		0,	"MMUSR0", &
		1,	"SDR", &
		2,	"SAR", &
		24,	"*ER", &
		0,	"Data Space",	4, &
		0,	"Access Viol",	13, &
		0,	"Segment Lgth",	14, &
		0,	"Non-Resident",	15, &
		1,	"Read Access",	1, &
		1,	"Write Access",	2, &
		1,	"Expand Down",	3, &
		1,	"Modified",	6, &
		1,	"Accessed",	7, &
		21,	"*EB",	0

	DATA	9,	SW,	"SW Detected Err", &
		-1,	"*NR"

	DATA	12,	DC,	"RC11/RS64", &
		0,	"RCLA", &
		1,	"RCDA", &
		2,	"RCER", &
		3,	"RCCS", &
		4,	"RCWC", &
		5,	"RCCA", &
		6,	"RCMN", &
		24,	"*ER", &
		2,	"Missed Xfer",	4, &
		2,	"Addr Sync",	6, &
		2,	"Addr Parity",	7, &
		2,	"A Track Err",	9, &
		2,	"Non-Ex Mem",	12, &
		2,	"Data Sync",	13, &
		2,	"Block Check",	14, &
		2,	"Data Late",	15, &
		3,	"Not Ready",	135, &
		3,	"Write Check",	10, &
		3,	"Non-Ex Disk",	11, &
		3,	"Write Lock",	12, &
		3,	"Addr Err",	13, &
		3,	"Data Err",	14, &
		21,	"*EB",	0

	DATA	13,	DF,	"RF11/RS11", &
		0,	"DCS", &
		1,	"WC", &
		2,	"CMA", &
		3,	"DAR", &
		4,	"DAE", &
		5,	"MA", &
		6,	"ADS", &
		24,	"*ER", &
		0,	"Not Ready",	135, &
		0,	"Missed Xfer",	9, &
		0,	"Write Lk Out",	10, &
		0,	"Non-Ex Disk",	11, &
		0,	"Data Parity",	12, &
		0,	"Write Check",	13, &
		4,	"Da Overflow",	5, &
		4,	"Data Req Lat",	7, &
		4,	"Non-Ex Mem",	10, &
		4,	"C Timing Trk",	12, &
		4,	"B Timing Trk",	13, &
		4,	"A Timing Trk",	14, &
		4,	"Addr Parity",	15, &
		21,	"*EB",	0

	DATA	14,	DS,	"RH11/RS03-04", &
		0,	"RSCS1", &
		1,	"RSWC", &
		2,	"RSBA", &
		3,	"RSDA", &
		4,	"RSCS2", &
		5,	"RSDS", &
		6,	"RSER", &
		7,	"RSAS", &
		8,	"RSLA", &
		9,	"RSMR", &
		10,	"RSDT", &
		11,	"RSBAE", &
		12,	"RSCS3", &
		24,	"*ER", &
		0,	"MCPE Bus Err",	13, &
		0,	"TRE Xfer Err",	14, &
		4,	"MDPE Bus Err",	8, &
		4,	"Missed Xfer",	9, &
		4,	"Program Err",	10, &
		4,	"Non-Ex Mem",	11, &
		4,	"Non-Ex Drv",	12, &
		4,	"Parity Error",	13, &
		4,	"Write Check",	14, &
		4,	"Data Late",	15, &
		5,	"Not Ready",	135, &
		6,	"Parity Error",	3, &
		6,	"Addr Ovrflow",	9, &
		6,	"Invalid Addr",	10, &
		6,	"Write Lock",	11, &
		6,	"Timing Error",	12, &
		6,	"Op Incomplet",	13, &
		6,	"Unsafe",	14, &
		6,	"Data Check",	15, &
		10,	"Interleaved",	0, &
		10,	"RS04",		1, &
		21,	"*EB",	0

	DATA	15,	DK,	"RK11/RK05/RK05F", &
		0,	"RKDS", &
		1,	"RKER", &
		2,	"RKCS", &
		3,	"RKWC", &
		4,	"RKBA", &
		5,	"RKDA", &
		24,	"*ER", &
		0,	"Not Ready",	135, &
		0,	"Seek Incompl",	9, &
		0,	"Unsafe",	10, &
		0,	"Drv Pow Low",	12, &
		1,	"Write Check",	0, &
		1,	"Checksum",	1, &
		1,	"Non-Ex Sect",	5, &
		1,	"Non-Ex Cyl",	6, &
		1,	"Non-Ex Disk",	7, &
		1,	"Timing Error",	8, &
		1,	"Data Late",	9, &
		1,	"Non-Ex Mem",	10, &
		1,	"Program Err",	11, &
		1,	"Seek Error",	12, &
		1,	"Write Lk Out",	13, &
		1,	"Overrun",	14, &
		1,	"Drive Error",	15, &
		21,	"*EB",	0

	DATA	16,	DM,	"RK611/RK06-07", &
		0,	"RKCS1", &
		1,	"RKWC", &
		2,	"RKBA", &
		3,	"RKDA", &
		4,	"RKCS2", &
		5,	"RKDS", &
		6,	"RKER", &
		7,	"RKAS/OF", &
		8,	"RKDCYL", &
		9,	"RKMR1", &
		10,	"RKECPS", &
		11,	"RKECPT", &
		12,	"RKMR2/A", &
		13,	"RKMR3/B", &
		14,	"RKMR2/A1", &
		15,	"RKMR3/B1", &
		16,	"RKMR2/A2", &
		17,	"RKMR3/B2", &
		18,	"RKMR2/A3", &
		19,	"RKMR3/B3", &
		24,	"*ER", &
		4,	"Bus Parity",	13, &
		4,	"Write Check",	14, &
		4,	"Data Late",	15, &
		5,	"Not Ready",	135, &
		5,	"RK07",		8, &
		6,	"Illegal Func",	0, &
		6,	"Seek Incompl",	1, &
		6,	"Non-Ex Func",	2, &
		6,	"Drive Parity",	3, &
		6,	"Format Error",	4, &
		6,	"Drive Type",	5, &
		6,	"Err Cor Hard",	6, &
		6,	"Bad Sector",	7, &
		6,	"Header VRC",	8, &
		6,	"Cyl Ovrflow",	9, &
		6,	"Invalid Addr",	10, &
		6,	"Write Lk Err",	11, &
		6,	"Timing Error",	12, &
		6,	"Op Incomplet",	13, &
		6,	"Unsafe",	14, &
		6,	"Data Check",	15, &
		21,	"*EB",	0

	DATA	17,	DP,	"RP11/RP02-03", &
		0,	"RPDS", &
		1,	"RPER", &
		2,	"RPCS", &
		3,	"RPWC", &
		4,	"RPBA", &
		5,	"RPCA", &
		6,	"RPDA", &
		7,	"RPM1", &
		8,	"RPM2", &
		9,	"RPM3", &
		10,	"SUCA", &
		24,	"*ER", &
		0,	"Unsafe",	9, &
		0,	"Seek Incompl",	11, &
		0,	"Hdr not Fnd",	12, &
		0,	"RP03",		13, &
		0,	"Offline",	142, &
		0,	"Not Ready",	143, &
		1,	"Disk Error",	0, &
		1,	"End of Pack",	1, &
		1,	"Non-Ex Mem",	2, &
		1,	"Write Check",	3, &
		1,	"Timing Error",	4, &
		1,	"Checksum",	5, &
		1,	"Word Par Err",	6, &
		1,	"Mode Error",	8, &
		1,	"Format Error",	9, &
		1,	"Program Err",	10, &
		1,	"Non-Ex Sect",	11, &
		1,	"Non-Ex Trk",	12, &
		1,	"Non-Ex Cyl",	13, &
		1,	"Unsafe",	14, &
		1,	"Write Prot",	15, &
		21,	"*EB",	0

	DATA	18,	DR,	"RM02/3/5/80", &
		0,	"RMCS1", &
		1,	"RMWC", &
		2,	"RMBA", &
		3,	"RMDA", &
		4,	"RMCS2", &
		5,	"RMDS", &
		6,	"RMER1", &
		7,	"RMAS", &
		8,	"RMLA", &
		9,	"RMMR1", &
		10,	"RMDT", &
		11,	"RMSN", &
		12,	"RMOF", &
		13,	"RMDC", &
		14,	"RMHR", &
		15,	"RMMR2", &
		16,	"RMER2", &
		17,	"RMEC1", &
		18,	"RMEC2", &
		19,	"RMBAE", &
		20,	"RMCS3", &
		24,	"*ER", &
		0,	"MCPE Bus Err",	13, &
		0,	"TRE Xfer Err",	14, &
		4,	"MDPE Bus Err",	8, &
		4,	"Missed Xfer",	9, &
		4,	"Program Err",	10, &
		4,	"Non-Ex Mem",	11, &
		4,	"Parity Error",	13, &
		4,	"Write Check",	14, &
		4,	"Data Late",	15, &
		5,	"Not Ready",	135, &
		6,	"Format Error",	4, &
		6,	"Header Comp",	7, &
		6,	"Header CRC",	8, &
		6,	"Write Lock",	11, &
		6,	"Timing Error",	12, &
		6,	"Op Incomplet",	13, &
		6,	"Unsafe",	14, &
		6,	"Data Check",	15, &
		12,	"SkpSecErrInh",9, &
		16,	"Seek Incompl",	14, &
		16,	"Bad Sector",	15, &
		21,	"*EB",	0

	DATA	19,	DB,	"RH11/RP04-05-06", &
		0,	"RPCS1", &
		1,	"RPWC", &
		2,	"RPBA", &
		3,	"RPDA", &
		4,	"RPCS2", &
		5,	"RPDS", &
		6,	"RPER1", &
		7,	"RPAS", &
		8,	"RPLA", &
		9,	"RPMR", &
		10,	"RPDT", &
		11,	"RPSN", &
		12,	"RPOF", &
		13,	"RPDC", &
		14,	"RPCC", &
		15,	"RPER2", &
		16,	"RPER3", &
		17,	"RPEC1", &
		18,	"RPEC2", &
		19,	"RPBAE", &
		20,	"RPCS3", &
		24,	"*ER", &
		0,	"MCPE Bus Err",	13, &
		0,	"TRE Xfer Err",	14, &
		4,	"MDPE Bus Err",	8, &
		4,	"Missed Xfer",	9, &
		4,	"Program Err",	10, &
		4,	"Parity Error",	13, &
		4,	"Write Check",	14, &
		4,	"Data Late",	15, &
		5,	"Not Ready",	135, &
		6,	"Format Error",	4, &
		6,	"Header Comp",	7, &
		6,	"Header CRC",	8, &
		6,	"Write Lock",	11, &
		6,	"Timing Error",	12, &
		6,	"Op Incomplet",	13, &
		6,	"Unsafe",	14, &
		6,	"Data Check",	15, &
		16,	"Unsafe",	3, &
		16,	"Seek Incompl",	14, &
		21,	"*EB",	0

	DATA	20,	DL,	"RL01/RL02", &
		0,	"RLCS", &
		1,	"RLBA", &
		2,	"RLDA", &
		3,	"RLMP", &
		4,	"GSTS", &
		5,	"STS", &
		6,	"RLBE", &
		24,	"*ER", &
		0,	"Not Ready",	128, &
		0,	"Op Incomplet",	10, &
		0,	"CRC Error",	11, &
		0,	"DLT/HNF",	12, &
		0,	"NXM/RLV12-PE",	13, &
		5,	"Cover Open",	5, &
		5,	"RL02",		7, &
		5,	"Drv Sel Err",	8, &
		5,	"Volume Check",	9, &
		5,	"Wrt Gate Err",	10, &
		5,	"Spin Error",	11, &
		5,	"Seek Timeout",	12, &
		5,	"Head Current",	14, &
		5,	"Wrt Data Err",	15, &
		21,	"*EB",	0

	DATA	21,	DU,	"MSCP Disks", &
		0,	"SA", &
		24,	"*ER", &
		21,	"*NB", 0

	DATA	24,	KB,	"Terminals", &
		0,	"(CSR)", &
		1,	"SILO", &
		2,	"(CSR+4)", &
		3,	"(CSR+6)", &
		4,	"(CSR+8)", &
		5,	"(CSR+10)", &
		6,	"(CSR+12)", &
		7,	"(CSR+14)", &
		8,	"(CSRM)", &
		9,	"(CSRM+2)", &
		24,	"*ER", &
		21,	"*NB",	0

	DATA	25,	DT,	"DECtape", &
		0,	"TCST", &
		1,	"TCCM", &
		2,	"TCWC", &
		3,	"TCBA", &
		4,	"TCDT", &
		24,	"*ER", &
		0,	"Up to Speed",	7, &
		0,	"Non-Ex Mem",	8, &
		0,	"Data Missed",	9, &
		0,	"Block Missed",	10, &
		0,	"Select Error",	11, &
		0,	"Illegal Oper",	12, &
		0,	"Mark Track",	13, &
		0,	"Parity Error",	14, &
		0,	"End Zone",	15, &
		1,	"Not Ready",	135, &
		1,	"Reverse",	11, &
		21,	"*EB",	0

	DATA	26,	LP,	"Line Printers", &
		-1,	"*NR"

	DATA	27,	PR,	"Paper Tape Rdr.", &
		0,	"PRS", &
		1,	"PRB", &
		24,	"*ER", &
		21,	"*NB",	0

	DATA	28,	PP,	"Paper Tape Punch", &
		0,	"PPS", &
		1,	"PPB", &
		24,	"*ER", &
		21,	"*NB",	0

	DATA	29,	CR,	"CR11/CM11", &
		0,	"CRS", &
		1,	"CRB1", &
		2,	"CRB2", &
		24,	"*ER", &
		0,	"Offline",	8, &
		0,	"Timing Error",	11, &
		0,	"Motion Check",	12, &
		0,	"Hopper Check",	13, &
		21,	"*EB",	0

	DATA	30,	CD,	"CD11 Card Reader", &
		0,	"CDST", &
		1,	"CDCC", &
		2,	"CDBA", &
		3,	"CDDB", &
		24,	"*ER", &
		0,	"Hopper Check",	2, &
		0,	"Non-Ex Mem",	9, &
		0,	"Data Late",	10, &
		0,	"Data Error",	11, &
		0,	"Off Line",	12, &
		0,	"End of File",	13, &
		0,	"Reader Check",	14, &
		21,	"*EB",	0

	DATA	31,	MT,	"TM11/TU10/TE10", &
		0,	"MTS", &
		1,	"MTC", &
		2,	"MTBRC", &
		3,	"MTCMA", &
		4,	"MTRD", &
		24,	"*ER", &
		0,	"Not Ready",	128, &
		0,	"Write Lock",	2, &
		0,	"7 Channel",	4, &
		0,	"Select Remot",	6, &
		0,	"Non-Ex Mem",	7, &
		0,	"Bad Tape",	8, &
		0,	"Rec Lgth Err",	9, &
		0,	"End of Tape",	10, &
		0,	"Bus Grant",	11, &
		0,	"Parity Error",	12, &
		0,	"CRC Error",	13, &
		0,	"End of File",	14, &
		0,	"Illegal Cmd",	15, &
		21,	"*EB",	0

	DATA	32,	MM,	"RH11/TU16/TE16", &
		0,	"MTCS1", &
		1,	"MTWC", &
		2,	"MTBA", &
		3,	"MTFC", &
		4,	"MTCS2", &
		5,	"MTDS", &
		6,	"MTER", &
		7,	"MTAS", &
		8,	"MTCK", &
		9,	"MTMR", &
		10,	"MTDT", &
		11,	"MTSN", &
		12,	"MTTC", &
		13,	"MTBAE", &
		14,	"MTCS3", &
		24,	"*ER", &
		0,	"MCPE Bus Err",	13, &
		0,	"TRE Xfer Err",	14, &
		4,	"MDPE Bus Err",	8, &
		4,	"Parity Error",	13, &
		4,	"Write Check",	14, &
		4,	"Data Late",	15, &
		5,	"PE Mode",	5, &
		5,	"Not Ready",	135, &
		6,	"Format Error",	4, &
		6,	"INC/VPE",	6, &
		6,	"PEF/LRC",	7, &
		6,	"Non-Std Gap",	8, &
		6,	"Non-Ex Func",	11, &
		6,	"Timing Error",	12, &
		6,	"Op Incomplet",	13, &
		6,	"Unsafe",	14, &
		6,	"COR/CRC",	15, &
		10,	"TU16/TE16",	0, &
		10,	"TU45",		1, &
		10,	"TU77",		2, &
		10,	"TM03",		5, &
		21,	"*EB",	0

	DATA	33,	DX,	"RX01/RX02", &
		0,	"RXCS", &
		1,	"RXES", &
		24,	"*ER", &
		0,	"Unit Select",	4, &
		0,	"Int Enable",	6, &
		0,	"Transfer Req",	7, &
		0,	"Dbl Density",	8, &
		0,	"RX02",		11, &
		0,	"Error",	15, &
		1,	"CRC Error",	0, &
		1,	"Init Done",	2, &
		1,	"RXAC Low",	3, &
		1,	"Density Err",	4, &
		1,	"Drv Density",	5, &
		1,	"Deleted Data",	6, &
		1,	"Not Ready",	135, &
		1,	"Unit Select",	8, &
		1,	"Count Ovrflw",	10, &
		1,	"Non-Ex Mem",	11, &
		21,	"*EB",	0

	DATA	34,	XM,	"DMC11/DMR11", &
		0,	"SEL0", &
		1,	"SEL2", &
		2,	"SEL4", &
		3,	"SEL6", &
		24,	"*ER", &
		0,	"Request In",	5, &
		0,	"Int Enbl In",	6, &
		0,	"Ready In",	7, &
		0,	"Step Micro",	8, &
		0,	"ROM Input",	9, &
		0,	"ROM Output",	10, &
		0,	"Line Unit",	11, &
		0,	"Stp Line Unt",	12, &
		0,	"Master Clear",	14, &
		0,	"Run",		15, &
		1,	"Int Enbl Out",	6, &
		1,	"Ready Out",	7, &
		21,	"*EB",	0

	DATA	35,	RJ,	"RJ2780", &
		-1,	"*NR"

	DATA	36,	XY,	"X-Y Plotter", &
		-1,	"*NR"

	DATA	38,	TS,	"TS11 class tapes", &
		0,	"MSHDR", &
		1,	"MSSIZ", &
		2,	"RBPCR", &
		3,	"XSTAT0", &
		4,	"XSTAT1", &
		5,	"XSTAT2", &
		6,	"XSTAT3", &
		7,	"XSTAT4", &
		8,	"TSSR", &
		24,	"*ER", &
		3,	"End of Tape",	0, &
		3,	"Beg of Tape",	1, &
		3,	"Write Locked",	2, &
		3,	"Volume Check",	4, &
		3,	"Inter Enable",	5, &
		3,	"On-line",	6, &
		3,	"Illegal Cmd",	9, &
		3,	"Non-Exec Fun",	10, &
		3,	"Wrt Lock Err",	11, &
		4,	"Data Late",	15, &
		5,	"Broken Hardw",	10, &
		5,	"Cap Acc Fail",	12, &
		5,	"Ser Bus Par",	13, &
		5,	"Silo Par Err",	14, &
		8,	"Subsys Ready",	7, &
		8,	"Nd Buff Addr",	10, &
		8,	"Non-Ex Mem",	11, &
		8,	"Reg Mod Ref",	12, &
		8,	"Ser Bus Par",	13, &
		8,	"UNIBUS Par",	14, &
		8,	"Special Cond",	15, &
		21,	"*EB",	0

	DATA	39,	DD,	"TU58", &
		0,	"CSR", &
		1,	"BUF", &
		24,	"*ER", &
		1,	"Parity Error",	12, &
		1,	"Frame Error",	13, &
		1,	"Overrun",	14, &
		1,	"Error",	15, &
		21,	"*EB",	0

	DATA	40,	XD,	"DMV11/DMP11", &
		0,	"SEL0", &
		1,	"SEL2", &
		2,	"SEL4", &
		3,	"SEL6", &
		4,	"SEL10", &
		24,	"*ER", &
		0,	"Int Enbl In",	0, &
		0,	"Int Enbl Out",	4, &
		0,	"Request In",	7, &
		0,	"Master Clear",	14, &
		0,	"Run",		15, &
		1,	"DMV11 Q22",	3, &
		1,	"Ready In",	4, &
		1,	"Ready Out",	7, &
		21,	"*EB",	0

	DATA	41,	MU,	"TMSCP Tapes", &
		0,	"SA", &
		24,	"*ER", &
		21,	"*NB", 0

	DATA	42,	XE,	"DEUNA/DELUA", &
		0,	"PCSR0", &
		1,	"PCSR1", &
		24,	"*ER", &
		0,	"USCI",		8, &
		0,	"RCBI",		10, &
		0,	"DNI",		11, &
		0,	"TXI",		12, &
		0,	"RXI",		13, &
		0,	"PCEI",		14, &
		0,	"SERI",		15, &
		1,	"DEUNA",	132, &
		1,	"DELUA",	4, &
		1,	"PCTO",		7, &
		1,	"ICAB",		14, &
		1,	"Check panel"	,15, &
		21,	"*EB",	0

	DATA	43,	XH,	"DEQNA/DELQA", &
		0,	"VAR", &
		1,	"CSR", &
		24,	"*ER", &
		0,	"QNA",			128, &
		0,	"LQA",			0, &
		1,	"Rcv Enable",		0, &
		1,	"NXM Interrupt",	2, &
		1,	"Xmit invalid",		4, &
		1,	"Rcv invalid",		5, &
		1,	"Timer on",		10, &
		1,	"Fuse blown",		140, &
		1,	"Memory Parity",	14, &
		21,	"*EB",	0

	DATA	55,	UM,	"Unrecognized MSG", &
		-1,	"*NR"

	DATA	56,	SH,	"MSG from SHUTUP", &
		-1,	"*NR"

	DATA	62,	"*END*",	""

	!
	!	E R R D I S    D A T A
	!
	!	Item format is as follows:
	!
	!	Text, offset, # of bytes, type, skip

	DATA	"*USER", 63, 5, &
		"Program Name",		4, 4, 2, 1, &
		"User Job Physical Addr.",8, 2, 1, 0, &
		"User Job Size",	10, 1, 5, 0, &
		"Control Parameters",	11, 1, 1, 1, &
		"RTS Name",		12, 4, 2, 1, &
		"RTS Physical Address",	16, 2, 1, 0

	DATA	"*DISKS", 64, 12, &
		"I/O Status",		0,  1,  1, 1, &
		"Timeout Indicator",	1,  1,  1, 1, &
		"Offset Position",	2,  1,  1, 1, &
		"Overlapped Seek Ind.",	3,  1,  1, 1, &
		"Unit Size in DC's",	4,  2,  6, 1, &
		"Device Cluster Size",	6,  1,	5, 1, &
		"Pack Cluster Size",	7,  1,  5, 1, &
		"Logical Name",		8,  6,  2, 1, &
		"Physical Name",	14, 2,  3, 0, &
		"Logical Block Number",	0,  0,	0, 0, &
		"DSQ",			18, 32, 1, 1, &
		"WCB",			50, 32, 1, 1, &
		"FCB",			82, 32, 1, 1

	DATA	"*PERDEV", 65, 3, &
		"Timeout Indicator",	0, 2, 1, 1, &
		"Physical Name",	2, 2, 3, 0, &
		"DDB",			8, 0, 1, 1, &
		"DDB Extension",	0, 0, 1, 1

	DATA	"*NONDEV", 66, 15, &
		"R0",			0,  2, 1, 1, &
		"R1",			2,  2, 1, 1, &
		"R2",			4,  2, 1, 1, &
		"R3",			6,  2, 1, 1, &
		"R4",			8,  2, 1, 1, &
		"R5",			10, 2, 1, 1, &
		"Virtual PC",		12, 2, 1, 1, &
		"Physical PC", 		0,  0, 0, 0, &
		"Processor Status",	14, 2, 1, 1, &
		"Stack Pointer",	18, 2, 1, 1, &
		"(SP)",			20, 2, 1, 1, &
		"(SP+2)",		22, 2, 1, 1, &
		"(PC-6)",		24, 2, 1, 1, &
		"(PC-4)",		26, 2, 1, 1, &
		"(PC-2)",		28, 2, 1, 1, &
		"(PC)",			30, 2, 1, 1

	DATA	"*BAD", 67, 8

	DATA	12,3,16384,	3,6 ,4 ,-1,-1,-1, &
		13,0,4096,	0,6 ,4 ,-1,-1,-1, &
		14,6,-32768,	0,62,48,56,-1,-1, &
		15,1,4098,	2,14,2 ,4 ,-1,-1, &
		16,6,-32704,	0,30,16,18,-1,-1, &
		17,1,736,	2,14,2 ,4 ,-1,-1, &
		18,6,-32448,	0,62,48,50,56,58, &
		19,6,-32448,	0,62,48,50,56,58, &
		20,0,6144,	0,14,10,12,-1,-1

	DATA	"*DONE", 0, 0


	!
	!	P a c k e t   F i e l d   D e f i n i t i o n s
	!
	!
	!	This data defines all possible fields in the MSCP packet.
	!	The data is of the following format;
	!
	!	TEXT$, OFFSET%, LENGTH%, DISPLAY%, ANNOT%
	!
	!		where
	!
	!	'TEXT' is the textual description of the field,
	!	'OFFSET' is the byte offset from the beginning of the packet,
	!	'LENGTH' is the length of the field in bytes,
	!	'DISPLAY' is the way in which the numeric value of the field
	!	   is to be displayed;
	!		0 = Not at all
	!		1 = As octal bytes
	!		2 = As octal words
	!		3 = As a decimal value
	!		4 = As a hexidecimal or BCD value,
	!	'ANNOT' is the index to the annotation subroutine in ERRDET
	!	   for that particular field.
	!
	!	Note that some bytes may be used in more than one field.
	!	This is due to the fact that there are 6 different types of
	!	packets; not every field is defined in every packet, and not
	!	all of the fields are in exactly the same place in every
	!	packet.
	!

	DATA	"Command Reference Number",	0,	4,	2,	0, &
		"Drive Number",			4,	2,	3,	14, &
		"Message Flags",		8,	1,	1,	1, &
		"End Flags",			8,	1,	1,	2, &
		"Endcode",			9,	1,	1,	3, &
		"Status/Event Code",		10,	2,	2,	4, &
		"Controller Class",		18,	1,	1,	5, &
		"Controller Model",		19,	1,	1,	6, &
		"Controller Hardware Version",	20,	1,	1,	0, &
		"Controller Software Version",	21,	1,	1,	7, &
		"UDA Last Failure Code",	22,	2,	2,	8, &
		"Host Memory Address",		24,	4,	2,	0, &
		"Drive Serial Number",		24,	6,	3,	0, &
		"First Bad Block",		28,	4,	3,	0, &
		"Drive Class",			30,	1,	1,	5, &
		"Drive Model",			31,	1,	1,	9, &
		"Drive Hardware Version",	32,	1,	1,	0, &
		"Drive Software Version",	33,	1,	1,	0, &
		"Error Retry Count",		34,	1,	1,	0, &
		"Error Recovery Level",		35,	1,	1,	0, &
		"Pack/HDA Serial Number",	36,	4,	3,	0, &
		"MSCP Logical Block Number",	40,	4,	3,	10, &
		"Byte 5,4 of Drive Status",	44,	2,	2,	11, &
		"Byte 7,6 of Drive Status",	46,	2,	2,	12, &
		"Drive Status/Error Info",	48,	8,	2,	0, &
		"Drive Error Code",		54,	1,	0,	13, &
		"Cylinder",			34,	2,	3,	0, &
		"Bad LBN",			40,	4,	3,	0, &
		"Old RBN",			44,	4,	3,	0, &
		"New RBN",			48,	4,	3,	0, &
		"",				0,	0,	0,	0

	!
	!
	!	S A   R e g i s t e r   C o d e s
	!
	! To insert more SA register error codes, put them before Code 31.
	! Code 31 must always be last in the list.
	!
	DATA	"Controller On Line",			0, &
		"UNIBUS Packet Read Error",		1, &
		"UNIBUS Packet Write Error",		2, &
		"UDA ROM and RAM Parity Error",		3, &
		"UDA RAM Parity Error",			4, &
		"UDA ROM Parity Error",			5, &
		"UNIBUS Ring Read Error",		6, &
		"UNIBUS Ring Write Error",		7, &
		"UNIBUS Interrupt Master Failure",	8, &
		"Host Access Timeout Error",		9, &
		"Host Exceeded Command Limit",		10, &
		"UNIBUS Bus Master Failure",		11, &
		"DM XFC Fatal Error",			12, &
		"Hardware Timeout of Inst Loop",	13, &
		"Invalid Virtual Circuit ID",		14, &
		"Interrupt Write Error on UNIBUS",	15, &
		"Controller RAM Error",			18, &
		"INIT Sequence Error",			19, &
		"Protocol Incompatibility Error",	20, &
		"Purge/Poll Hardware Failure",		21, &
		"Mapping Register Read Error",		22, &
		"UDA Error",				31, &
		"",					0

	!
	!
	!	M e s s a g e   F l a g s
	!
	!
	DATA	"Seq Num Reset", &
		"", &
		"", &
		"", &
		"", &
		"", &
		"Op Continuing", &
		"Op Successful"

	!
	!
	!	E n d   F l a g s
	!
	!
	DATA	"", &
		"Cached Data Lost", &
		"Position Lost", &
		"End of Tape Encountered", &
		"Serious Exception", &
		"Error Log Generated", &
		"Bad Blocks Unreported", &
		"Bad Block Reported"

	!
	!
	!	E n d   C o d e s
	!
	!
	DATA	"ABORT Command",			1, &
		"GET COMMAND STATUS Command",		2, &
		"GET UNIT STATUS Command",		3, &
		"SET CONTROLLER CHAR Command",		4, &
		"Serious Exception End Message",	7, &
		"AVAILABLE Command",			8, &
		"ONLINE Command",			9, &
		"SET UNIT CHARACTERISTICS Command",	10, &
		"DETERMINE ACCESS PATHS Command",	11, &
		"ACCESS Command",			16, &
		"COMPARE CONTROLLER DATA Command",	17, &
		"ERASE Command",			18, &
		"FLUSH Command",			19, &
		"REPLACE Command",			20, &
		"ERASE GAP Command",			22, &
		"COMPARE HOST DATA Command",		32, &
		"READ Command",				33, &
		"WRITE Command",			34, &
		"WRITE TAPE MARK Command",		36, &
		"REPOSITION Command",			37, &
		"AVAILABLE Attention Message",		64, &
		"DUPLICATE UNIT NUMBER Attn Msg",	65, &
		"ACCESS PATH Attention Message",	66, &
		"",					0

	!
	!
	!	S t a t u s / E v e n t   C o d e s
	!
	!
	DATA	"Successful completion",				0, &
		"Invalid Command",					1, &
		"Command Aborted",					2, &
		"Drive Offline",					3, &
		"Drive Available",					4, &
		"Media Format Error",					5, &
		"Unit Write Protected",					6, &
		"Compare Error",					7, &
		"Data Error (or may be Forced Error)",			8, &
		"Host Buffer Access Error",				9, &
		"Controller Error (Timeout/Retry Exceeded)",		10, &
		"Drive Error",						11, &
		"Formatter Error",					12, &
		"BOT Encountered",					13, &
		"Tape Mark Encountered",				14, &
		"Record Data Truncated",				16, &
		"Position Lost",					17, &
		"Serious Exception",					18, &
		"LEOT Detected",					19, &
		"Bad block sucessfully replaced",			20, &
		"Internal Diagnostic Message",				31, &
		"Spin down ignored",					32, &
		"No vol mounted or run/stop switch out",		35, &
		"Format Control Table Unreadable",			37, &
		"Data sync not found",					40, &
		"Odd transfer start address",				41, &
		"Controller communications error",			42, &
		"Drive command timeout",				43, &
		"Block verified OK; not a bad block",			53, &
		"Still connected",					64, &
		"Drive Inoperative",					67, &
		"Format Control Table unreadable-Invalid sector header",69, &
		"Header compare or Write lost data error",		72, &
		"Odd byte count in [T]MSCP packet",			73, &
		"EDC error (SERDES broken or EDC written bad)",		74, &
		"Controller detected transmission or protocol error",	75, &
		"Bad block replacement failure - REPLACE command",	84, &
		"Format Control Table unreadable-Data Sync Timeout",	101, &
		"Read check or Data sync error",			104, &
		"Non-existant memory error",				105, &
		"Inconsistant controller state",			106, &
		"Recoverable drive fault or Positioner error",		107, &
		"Bad block replacement failure - Bad RCT",		116, &
		"Successful completion (Duplicate unit numbers)",	128, &
		"Drive offline and duplicate unit numbers",		131, &
		"Correctable error in ECC field",			136, &
		"Host memory parity error",				137, &
		"Internal EDC error",					138, &
		"Unrecoverable drive fault or Lost read/write Ready",	139, &
		"Bad block replacement failure - drive fault",		148, &
		"Drive not 512 byte format",				165, &
		"Invalid page table entry",				169, &
		"LESI Adaptor Card input parity error",			170, &
		"Lost drive clock",					171, &
		"Bad block replacement failure - RCT full",		180, &
		"Drive not formatted, or FCT corrupted",		197, &
		"LESI Adaptor Card output parity error",		202, &
		"Lost drive receiver ready during transfer",		203, &
		"Bad block replacement failure - recursion failure",	212, &
		"Format Control Table unreadable-ECC error",		229, &
		"Uncorrectable ECC error",				232, &
		'LESI Adapter Card "cable in place" not asserted',	234, &
		"Drive detected error",					235, &
		"Already online",					256, &
		"Drive Offline. By field service or internal diag",	259, &
		"RCT corrupted",					261, &
		"Drive is data safety write protected",			262, &
		"One symbol ECC error",					264, &
		"Controller overrun or underrun",			266, &
		"Controller detected pulse or state parity error",	267, &
		"No replacement block available",			293, &
		"Two symbol ECC error",					296, &
		"Controller memory error",				298, &
		"Three symbol ECC error",				328, &
		"Controller detected protocol error",			331, &
		"Four symbol ECC error",				360, &
		"Drive failed initialization",				363, &
		"Five symbol ECC error",				392, &
		"Drive ignored initialization",				395, &
		"Six symbol ECC error",					424, &
		"Receiver Ready collision",				427, &
		"Seven symbol ECC error",				456, &
		"Eight symbol ECC error",				488, &
		"Still Online",						512, &
		"Exclusive use",					515, &
		"Nine symbol ECC error",				520, &
		"Ten symbol ECC error",					552, &
		"Eleven symbol ECC error",				584, &
		"Twelve symbol ECC error",				616, &
		"Thirteen symbol ECC error",				648, &
		"Fourteen symbol ECC error",				680, &
		"Fifteen symbol ECC error",				712, &
		"EOT Encountered or Incomplete Replacement",		1024, &
		"Unit already in use",					1028, &
		"Invalid RCT",						2048, &
		"Read only Volume Format",				4096, &
		"Drive is software write protected",			4102, &
		"Drive is hardware write protected",			8198, &
		"",							0

	!
	!
	!	C o n t r o l l e r   a n d   U n i t   C l a s s
	!
	!
	DATA	"Mass Storage",				1, &
		"DSA Disk",				2, &
		"Tape",					3, &
		"DEC Std 144 Disk",			4, &
		"Loader Device",			5, &
		"SCSI Device",				6, &
		"",					0

	!
	!
	!	C o n t r o l l e r   M o d e l
	!
	!	NOTE:  There exist corresponding controller
	!              model tables in INIONE and INIHAR.
	!
	!	Devices that appear in this list may or may not
	!	be currently supported by RSTS/E.  If they are not
	!	currently supported on RSTS/E, their appearance in this
	!	list is no indication that they ever will.  Our practice
	!	is to add new devices to this list as they are defined
	!	in the DSSA specs, regardless of whether RSTS/E has any
	!	plans to support them or not.
	!
	DATA	"UDA50",	2, &
		"RC25",		3, &
		"TU81",		5, &
		"UDA50-A",	6, &
		"RQDXn",	7, &
		"TK50",		9, &
		"RUX50",	10, &
		"KDA50",	13, &
		"TQK70",	14, &
		"RV20",		15, &
		"KRQ50",	16, &
		"RQDX3",	19, &
		"KFQSA-disk",	21, &
		"KFQSA-tape",	22, &
		"KFQSA-both",	23, &
		"KFQSA-other",	24, &
		"TUK50",	25, &
		"RQZX1",	30, &
		"RF30",		96, &
		"RF71",		97, &
		"TF85",		98, &
		"TF70",		99, &
		"RF31",		100, &
		"RF72",		101, &
		"RF73",		102, &
		"TF70L",	103, &
		"RF35",		104, &
		"EF51",		105, &
		"Unkn",		106, &
		"Unkn",		107, &
		"RF36",		108, &
		"RF74",		109, &
		"Unkn",		110, &
		"Unkn",		111, &
		"RF75",		112, &
		"",		0

	!
	!
	!	U D A   I n t e r n a l   E r r o r   C o d e s
	!
	!
	DATA	"No Error to Report",					0, &
		"ER.PRD - UNIBUS Packet Read Error",			1, &
		"ER.PWR - UNIBUS Packet Write Error",			2, &
		"ER.RRP - UDA50 ROM and RAM Parity Error",		3, &
		"ER.RAP - UDA50 RAM Parity Error",			4, &
		"ER.ROP - UDA50 ROM Parity Error",			5, &
		"ER.RRD - UNIBUS Ring Read Error",			6, &
		"ER.RWR - UNIBUS Ring Write Error",			7, &
		"ER.INT - UNIBUS Interrupt Master Failure or System Reboot",8, &
		"ER.HTO - Host Access Timeout Error",			9, &
		"ER.NIM - Host Exceeded Command Limit",			10, &
		"ER.MST - Bus Master Error",				11, &
		"ER.DMX - Diagnostic Mode XFC Error",			12, &
		"ER.VCI - Invalid Virtual Circuit Identifier",		14, &
		"ER.IWR - Interrupt Write Error on UNIBUS",		15, &
		"ER.SUN - Too Many Sub-Units on UDA50",			23, &
		"",							0

	!
	!
	!	D r i v e   M o d e l
	!
	!
	! The drive model is the model number of the drive in question.
	! At this time, four classes of drives are recognized; DSA
	! Disks, Tapes, DEC Std 144 Disks, and SCSI.  The following data is
	! loaded into an array which is indexed by Class (high byte of word
	! 15 of the packet) and Model (low byte of same word).  There are
	! currently no DEC Std 144 Disks defined and loaders aren't used
	! on RSTS.
	!
	! There are three items of data for each device, as follows;
	!
	!	'Device' is the device designation (up to 8 characters),
	!	'Type' represents the general class of the device;
	!		0 = DSA Disk
	!		1 = Tape
	!		2 = DEC Std 144 Disk
	!		3 = Loader devices
	!		4 = SCSI devices
	!	Note: This value is actually the MSCP Device Class - 2.
	!	'Identifier' is the identifier code for that device type.
	!
	!	Devices that appear in this list may or may not
	!	be currently supported by RSTS/E.  If they are not
	!	currently supported on RSTS/E, their appearance in this
	!	list is no indication that they ever will.  Our practice
	!	is to add new devices to this list as they are defined
	!	in the DSSA specs, regardless of whether RSTS/E has any
	!	plans to support them or not.
	!
	!	Device		Type		Identifier
	!
	!
	DATA	"RA80",		0,		1, &
		"RC25",		0,		2, &
		"RCF25",	0,		3, &
		"RA60",		0,		4, &
		"RA81",		0,		5, &
		"RD51",		0,		6, &
		"RX50",		0,		7, &
		"RD52",		0,		8, &
		"RD53",		0,		9, &
		"RX33",		0,		10, &
		"RA82",		0,		11, &
		"RD31",		0,		12, &
		"RD54",		0,		13, &
		"RRD50",	0,		14, &
		"RD32",		0,		15, &
		"RA70",		0,		18, &
		"RA90",		0,		19, &
		"RF30",		0,		21, &
		"RF71",		0,		22, &
		"RD33",		0,		24, &
		"ESE20",	0,		25, &
		"RRD40",	0,		26, &
		"RF31",		0,		27, &
		"RF72",		0,		28, &
		"RA92",		0,		29, &
		"ESE25",	0,		30, &
		"ESE52",	0,		31, &
		"RFH31",	0,		33, &
		"RFH72",	0,		34, &
		"RF73",		0,		35, &
		"RFH73",	0,		36, &
		"RA72",		0,		37, &
		"RA71",		0,		40, &
		"RFF31",	0,		41, &
		"RF35",		0,		42, &
		"RFH35",	0,		43, &
		"RA73",		0,		47, &
		"ESE56",	0,		48, &
		"ESE58",	0,		49, &
		"EF5x",		0,		51, &
		"RF36",		0,		52, &
		"RFH36",	0,		53, &
		"RF74",		0,		54, &
		"RFH74",	0,		55, &
		"RF75",		0,		56, &
		"RFH75",	0,		57, &
		"TU81",		1,		2, &
		"TK50",		1,		3, &
		"RV60",		1,		8, &
		"TF85",		1,		10, &
		"TF70",		1,		11, &
		"TK70",		1,		14, &
		"RV20",		1,		15, &
		"RX23",		4,		1, &
		"RX26",		4,		2, &
		"RX33",		4,		3, &
		"RZ22",		4,		4, &
		"RZ23",		4,		5, &
		"RZ23L",	4,		6, &
		"RZ24",		4,		7, &
		"RZ25",		4,		8, &
		"RZ24L",	4,		9, &
		"RZ35",		4,		11, &
		"RZ55",		4,		14, &
		"RZ56",		4,		15, &
		"RZ57",		4,		16, &
		"RZ58",		4,		17, &
		"RZ72",		4,		21, &
		"RZ73",		4,		22, &
		"TZ30",		4,		128, &
		"TK50Z",	4,		129, &
		"TZ70",		4,		130, &
		"TZ85",		4,		131, &
		"TZ86",		4,		132, &
		"TLZ04",	4,		138, &
		"TLZ06",	4,		139, &
		"TKZ08",	4,		140, &
		"TKZ10",	4,		141, &
		"TKZ11",	4,		142, &
		"TKZ09",	4,		143, &
		"RRD40",	4,		192, &
		"RRD42",	4,		193, &
		"",		0,		0

10001	!
	!
	!	D r i v e r   E r r o r   C o d e   A n n o t a t i o n s
	!
	!
	DATA	"Not Software generated error",		0, &
		"Packet was generated by BBR",		1, &
		"Fatal error while sending packet",	2, &
		"No packet avail after 2 sec wait",	3, &
		"Rcvd end packet for hung unit",	4, &
		"Disk unit size is too big",		5, &
		"Online command to cntrlr failed",	6, &
		"GUS failed; unit not functional",	7, &
		"Command timeout error",		8, &
		"Cntrlr onl failed; no virt ckt",	9, &
		"Data error on READ/WRITE cmd",		10, &
		"Unit does not exist",			11, &
		"Vol invalid - spin down occurred",	12, &
		"DSQ with invalid function passed",	13, &
		"",					0

	!
	!
	!	B B R   F a i l u r e   B y t e   C o d e s
	!
	!
	DATA	"No errors detected",			0, &
		"RCT sector 0 Multi-Read",		1, &
		"RCT sector 1 Multi-Read",		2, &
		"RCT sector 0 Multi-Write",		3, &
		"RCT sector 1 Multi-Write",		4, &
		"RCT data area Multi-Read",		5, &
		"RCT data area Multi-Write",		6, &
		"Initial 4-Reads test",			7, &
		"Normal data stress test",		8, &
		"Complemented data stress test",	9, &
		"Could not restore saved LBN data",	10, &
		"Replace error",			11, &
		"Recursion count overflow",		12, &
		"Illegal RBN descriptor code",		13, &
		"Non-zero LBN field in RBN desc",	14, &
		"Premature null entry in RCT",		15, &
		"RCT was full",				16, &
		"Transient error",			17, &
		"",					0

	!
	!
	!	B B R   F l a g   C o d e s
	!
	!
	DATA	"BBR successful",			0, &
		"RBN was primary",			1, &
		"RBN non-primary",			2, &
		"Unit made avail",			3, &
		"Unit in onl proc",			4, &
		"RCT corrupt",				5, &
		"No multicpy prot",			6, &
		"Orig data lost",			7, &
		"",					0

	!
	!
	!	M S C P   P a c k e t   D a t a &
	!
	!
	!	The following data determines what information is printed for
	!	each possible type of error packet.  The information is in
	!	the following format:
	!
	!	DATA	x,	y,
	!				n,	n,	n,	n,
	!				n,...
	!
	!	where
	!
	!		'x' is the packet type, as returned by the function
	!			FNPACKET.TYPE% in the program ERRDET.
	!		'y' is the number of items to be printed, and
	!		'n' is the line item of a data item to print for this
	!			kind of packet.
	!
	!	Packet 1 (End Message)
	!
	DATA	1,	7, &
				1,	2,	3,	4, &
				5,	6,	14

	!
	!	Packet 2 (Last Fail)
	!
	DATA	2,	5, &
				7,	8,	9,	10, &
				11

	!
	!	Packet 3 (Controller Error)
	!
	DATA	3,	7, &
				1,	3,	6,	7, &
				8,	9,	10

	!
	!	Packet 4 (Host Memory Access Error)
	!
	DATA	4,	8, &
				1,	3,	6,	7, &
				8,	9,	10,	12

	!
	!	Packet 5 (Disk Transfer Error)
	!
	DATA	5,	17, &
				1,	2,	3,	6, &
				7,	8,	9,	10, &
				13,	15,	16,	17, &
				18,	19,	20,	21, &
				22

	!
	!	Packet Type 6 (SDI (Standard Disk Interface) Error)
	!
	DATA	6,	19, &
				1,	2,	3,	6, &
				26,	7,	8,	9, &
				10,	13,	15,	16, &
				17,	18,	21,	22, &
				23,	24,	25

	!
	!	Packet Type 7 (Small Disk Error Packet)
	!
	DATA	7,	15, &
				1,	2,	3,	6, &
				7,	8,	9,	10, &
				13,	15,	16,	17, &
				18,	27,	21

	!
	!	Packet 8 (Tape Transfer Error)
	!
	DATA	8,	14, &
				1,	2,	3,	6, &
				7,	8,	9,	10, &
				15,	16,	17,	18, &
				19,	20

	!
	!	Packet Type 9 (STI Communication or Command Failure)
	!
	DATA	9,	19, &
				1,	2,	3,	6, &
				26,	7,	8,	9, &
				10,	13,	15,	16, &
				17,	18,	21,	22, &
				23,	24,	25

	!
	!	Packet Type 10 (STI (Standard Tape Interface) Error)
	!
	DATA	10,	19, &
				1,	2,	3,	6, &
				26,	7,	8,	9, &
				10,	13,	15,	16, &
				17,	18,	21,	22, &
				23,	24,	25

	!
	!	Packet Type 11 (SDI Formatter Error)
	!
	DATA	11,	19, &
				1,	2,	3,	6, &
				26,	7,	8,	9, &
				10,	13,	15,	16, &
				17,	18,	21,	22, &
				23,	24,	25

	!
	!	Packet Type 12 (Bad Block Replacement Attempt)
	!
	DATA	12,	10, &
				1,	2,	3,	5, &
				18,	19,	21,	28, &
				29,	30

	!
	!	Packet Type 13 (Media Loader Error)
	!
	DATA	13,	4, &
				1,	2,	3,	5

	!
	!
	!	S D I   D r i v e / S t a t u s   E r r o r   W o r d s
	!
	!
	DATA	"RU",	"PS",	"",	"EL", &
		"SR",	"DR",	"RR",	"OA", &
		"S7",	"DB",	"FO",	"DD", &
		"W1",	"W2",	"W3",	"W4"

	DATA	"",	"",	"",	"WE", &
		"DF",	"PE",	"RE",	"DE", &
		"C4",	"C3",	"C2",	"C1", &
		"S1",	"S2",	"S3",	"S4"

	!
	!	S U B R O U T I N E S
	!

 CLEAN_FILE:
	FIELD #F.CHAN%, 512% AS NULBUF$
	LSET NULBUF$=STRING$(512%,0%)
	PUT #F.CHAN%, RECORD J% &
		FOR J%=1% TO F.SIZE%
	RETURN
		! Put nulls in all blocks of file so that it'll be
		!  nice and clean.

	!
	!	E R R O R    H A N D L I N G &
	!

 ERROR_TRAP:
	PRINT IF CCPOS(0%)<>0%
	PRINT "?ERRBLD - ";ERT(ERR);" at Line ";NUM1$(ERL)
	RESUME ALL_DONE
		! THERE ARE NO RECOVERABLE ERRORS.

 ALL_DONE:
	END
