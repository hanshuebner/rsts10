TITLE	UCLONE,<UPDATE$: HOOK>,1,28-FEB-85,FRL

;
;		COPYRIGHT (c) 1974, 1991 BY
;	DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY  OF ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;

.SBTTL	EDIT HISTORY FOR UCLONE

;+
;
;				[RSTS/E V9.0]
;
;  000	FRL  28-Feb-85	Creation
;
;-

	DEFORG	CLONE

	.MCALL	EXIT$S

.ENABL	LSB

START:	CALL	CLRXRB			;Clear the XRB
	MOV	#8.,XRB			;Length of logical name to translate
	MOV	#8.,XRB+XRBC		;Length of logical name
	MOV	#LOG,XRB+XRLOC		;Location of logical name
	.FSS				;Translate it
	TSTB	FIRQB			;Error occur?
	BNE	ERR			;Yes, to error handler
	BIT	#100000,XRB+XRBLK	;Valid device name?
	BNE	ERR			;No, to error handler
	.RUN				;Fly away... (unless we get an error)

ERR:	MOVB	FIRQB,COD		;Save error code
	MOV	#NAM,R5			;R5 -> where ASCII should end up
	MOV	FIRQB+FQNAM1,R0		;Get first three chars of file name	
	CALL	R50ASC			;Convert them to ASCII
	MOV	FIRQB+FQNAM1+2,R0	;Get next three chars of file name	
	CALL	R50ASC			;Convert them to ASCII
	TSTB	(R5)+			;Skip "."
	MOV	FIRQB+FQEXT,R0		;Get file name extension
	CALL	R50ASC			;Convert it to ASCII
	MOV	#TXT,R5			;R5 -> text
	MOV	LEN,R4			;R4 = length of text
	CALL	PRINT			;Print our error message
	CALL	CLRFQB			;Set up to print RSTS/E error message
	MOVB	#ERRFQ,FIRQB+FQFUN	;Set function code for error return
	MOVB	COD,FIRQB+FQERNO	;Error code
	CALFIP				;Get error message
	MOV	#FIRQB+FQFIL,R5		;R5 -> message
	MOV	#FQNENT-FQFIL+2,R4	;R4 = length of message
	CALL	PRINT			;Print error message
	EXIT$S				;Get out

COD:	.WORD	0
LOG:	.ASCII	"UPDATE$:"
TXT:	.ASCII	"?Unable to chain to UPDATE$:"
NAM:	.ASCII	"      ."
	.ASCII "   "<15><12>
LEN:	. - TXT

R50ASC:	CALL	10$			;Generate an ASCII character in R1
	MOV	R1,-(SP)		;Save it
	CALL	10$			;Generate an ASCII character in R1
	MOV	R1,-(SP)		;Save it
	CALL	10$			;Generate an ASCII character in R1
	MOVB	R1,(R5)+		;Output first char
	MOVB	(SP)+,(R5)+		;Output second char
	MOVB	(SP)+,(R5)+		;String is now in output buffer
	RETURN				;Return to caller

10$:	MOV	R0,R1			;Set up for divides
	CLR	R0			;Zero the high bits
	DIV	#50,R0			;Extract one RAD50 character
	TST	R1			;Blank?
	BNE	20$			;No
	CLR	R1			;Yes, return null in R1
	RETURN

20$:	SUB	#^R  Z,R1		;Alpha?
	BGT	30$			;No
	ADD	#'@+^R  Z,R1		;Yes, return alpha character
	RETURN

30$:	ADD	#'0,R1			;Return numeric character
	RETURN

PRINT:	CALL	CLRXRB			;Zero the XRB
	MOV	R4,XRB			;Set buffer length
	MOV	R4,XRB+XRBC		;Set buffer  count
	MOV	R5,XRB+XRLOC		;Set buffer address
	.WRITE				;Do it
	RETURN

CLRFQB:	MOV	#FIRQB,R2		;R2 -> FIRQB
	MOV	#FQBSIZ/2,R3		;R3 = number of words to clear
	BR	40$			;Join up

CLRXRB:	MOV	#XRB,R2			;R2 -> XRB
	MOV	#XRBSIZ/2,R3		;R3 = number of words to clear
40$:	CLR	(R2)+			;Clear a cell
	SOB	R3,40$			;More?
	RETURN				;No

.DSABL	LSB

.END	START
